[["Eq", 2077, [["Eq", 722],["rfl", 721],["Eq.refl", 644],["congrArg", 429],["Eq.symm", 359],["Eq.trans", 352],["OfNat.ofNat", 348],["of_eq_true", 312],["HAdd.hAdd", 304],["Eq.mpr", 297],["eq_self", 275],["congrFun", 267],["congr", 205],["HMul.hMul", 172],["Iff.intro", 124],["propext", 121],["HEq.refl", 106],["And.intro", 103],["Bool.true", 98],["List.cons", 89],["eq_of_heq", 87],["Nat.succ", 81],["SizeOf.sizeOf", 77],["List.nil", 75],["HSub.hSub", 63],["funext", 61],["Eq.propIntro", 57],["Fin.mk", 56],["Fin.val", 53],["Exists.intro", 53],["HMod.hMod", 51],["absurd", 50],["Unit.unit", 48],["And", 48],["PProd.fst", 48],["Option.some", 48],["forall_congr", 45],["eq_true_of_decide", 44],["Iff", 44],["eq_false", 42],["Nat.add_comm", 42],["List.length", 41],["HAppend.hAppend", 40],["Neg.neg", 40],["Not", 38],["Eq.mp", 38],["forall_const", 38],["Exists", 38],["dite", 37],["Nat.gcd", 33],["iff_self", 32],["LT.lt", 30],["eq_true", 29],["Or", 29],["Nat.zero_add", 29],["HDiv.hDiv", 28],["Prod.mk", 28],["Decidable.isTrue", 28],["False", 28],["Option.none", 27],["Decidable.isFalse", 27],["Decidable.em", 27],["False.elim", 27],["Int.ofNat", 27],["Nat.mul_comm", 26],["Bool.false", 25],["Membership.mem", 24],["HPow.hPow", 24],["Or.inr", 23],["And.left", 23],["Classical.em", 23],["Nat.mod_lt", 23],["And.right", 23],["UInt8.val", 22],["UInt8.mk", 22],["Nat.zero_eq", 22],["id", 22],["List.get?", 22],["USize.val", 22],["UInt16.mk", 22],["USize.mk", 22],["UInt64.mk", 22],["Decidable", 22],["UInt16.val", 22],["UInt64.val", 22],["UInt32.val", 22],["Semigroup.mul_assoc", 22],["UInt32.mk", 22],["Iff.mp", 21],["Iff.mpr", 21],["Or.inl", 21],["True", 21],["Nat.Linear.Poly.denote", 20],["Int.negSucc", 19],["Fin.size_positive", 19],["Nat.add", 19],["List.length_cons", 18],["trivial", 18],["LE.le", 18],["add_zero", 18],["implies_congr", 18],["Subsingleton.elim", 18],["Nat.add_zero", 17],["Nat.add_eq", 17],["eq_false'", 17],["Fin.eq_of_val_eq", 17],["Nat.add_assoc", 16],["Array.size", 16],["ite_congr", 16],["ite", 16],["List.get", 15],["List.cons_append", 15],["Nat.mul_zero", 15],["eq_false_of_decide", 15],["ne_eq", 14],["Nat.Linear.Var.denote", 14],["List.nil_append", 14],["of_decide_eq_true", 14],["if_pos", 14],["List.map", 14],["false_and", 14],["Nat.zero", 14],["if_neg", 14],["Nat.mul_eq", 14],["Prod.snd", 13],["Functor.map", 13],["Nat.cast", 13],["cond", 13],["Decidable.decide", 13],["Prod.fst", 13],["congr_arg", 13],["CommSemigroup.mul_comm", 12],["Array.data", 12],["cond_false", 12],["Fin.isLt", 12],["add_assoc", 12],["cond_true", 12],["Nat.mod_eq_of_lt", 12],["Bool.of_not_eq_true", 12],["Nat.gcd_comm", 12],["dif_pos", 12],["Iff.rfl", 11],["mul_one", 11],["Nat.pred", 11],["List.mem_cons", 11],["Nat.gcd_dvd_right", 10],["Nat.Linear.Expr.num", 10],["one_mul", 10],["Nat.zero_mul", 10],["Nat.Linear.Expr.var", 10],["Int.negOfNat", 10],["List.get?_eq_get", 10],["Nat.sub_zero", 10],["id_eq", 10],["add_left_neg", 10],["Nat.add_succ", 10],["add_comm", 10],["List.set", 10],["Nat.Linear.Expr.add", 10],["Nat.mul_succ", 10],["Nat.succ_add", 10],["Option.some.injEq", 10],["Option.map_some'", 9],["dite_congr", 9],["zero_add", 9],["Bind.bind", 9],["Nat.Linear.ExprCnstr.mk", 9],["Int.subNatNat", 9],["MonoidWithZero.zero_mul", 9],["Int.add_assoc", 9],["Subtype.property", 9],["Int.add_comm", 9],["Nat.eq_zero_or_pos", 9],["Nat.le_antisymm", 9],["Nat.add_left_comm", 9],["Nat.dvd_antisymm", 9],["Function.comp", 8],["Subtype.val", 8],["Int.natAbs", 8],["Int.sub_eq_add_neg", 8],["Nat.succ_ne_zero", 8],["List.erase", 8],["Subtype.mk", 8],["Option.map_none'", 8],["Nat.sub_add_cancel", 8],["Pure.pure", 8],["min", 8],["Fin.mul_def", 8],["Array.get", 8],["List.erasep", 8],["Array.mk", 8],["true_and", 8],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 8],["List.length_nil", 8],["List.not_mem_nil", 8],["dif_neg", 8],["Option.map", 8],["Nat.succ_mul", 8],["WellFounded.fix", 8],["List.append_nil", 7],["exists_false", 7],["PSigma.mk", 7],["UInt8.mul_def", 7],["MonoidWithZero.mul_zero", 7],["UInt8", 7],["UInt16", 7],["AddCommSemigroup.add_comm", 7],["UInt64", 7],["ite_true", 7],["add_mul", 7],["Nat.gcd_dvd_left", 7],["True.intro", 7],["USize.mul_def", 7],["Eq.mpr_prop", 7],["UInt32", 7],["UInt64.mul_def", 7],["Distrib.left_distrib", 7],["UInt16.mul_def", 7],["UInt32.mul_def", 7],["Nat.le_of_succ_le_succ", 7],["le_antisymm", 7],["Fin.add_def", 7],["List.card", 7],["USize", 7],["Nat.dvd_gcd", 7],["mt", 7],["List", 7],["implies_true", 7],["dite_true", 7],["Fin", 6],["AddSemigroup.add_assoc", 6],["pow_zero", 6],["UInt8.add_def", 6],["Nat.succ_sub_succ", 6],["Int.add_right_neg", 6],["BEq.beq", 6],["Nat.mul_assoc", 6],["Fin.ofNat'_succ", 6],["Option.some.inj", 6],["Nat.Linear.Poly.denote_eq", 6],["UInt32.add_def", 6],["Distrib.right_distrib", 6],["Nat.zero_mod", 6],["USize.add_def", 6],["Exists.elim", 6],["of_decide_eq_false", 6],["max", 6],["List.erasep_cons_of_neg", 6],["List.reverseAux", 6],["Int.mul_comm", 6],["UInt64.add_def", 6],["List.insert", 6],["ite_false", 6],["SubNegMonoid.sub_eq_add_neg", 6],["UInt16.add_def", 6],["Nat.add_sub_cancel", 6],["AddMonoid.nsmul_succ'", 5],["Ne.symm", 5],["Fin.zero_def", 5],["Iff.symm", 5],["eq_of_beq", 5],["Int.add_zero", 5],["pow_succ'", 5],["Nat.mod_add_mod", 5],["List.length_append", 5],["SubNegMonoid.gsmul_zero'", 5],["Except.error", 5],["SubNegMonoid.gsmul_neg'", 5],["Nat.mul_one", 5],["UInt32.zero_def", 5],["Nat.lt_irrefl", 5],["Nat.coprime", 5],["UInt64.zero_def", 5],["Subtype.ext", 5],["Function.RightInverse.surjective", 5],["Nat.zero_sub", 5],["UInt16.zero_def", 5],["USize.zero_def", 5],["Nat.zero_le", 5],["Option.isSome_some", 5],["Function.injective.comp", 5],["Nat.coprime.symm", 5],["Function.injective.eq_iff", 5],["Nat.div_eq", 5],["decEq", 5],["List.drop", 5],["Fin.sizeOf", 5],["dite_false", 5],["Nat.Linear.Expr.denote", 5],["Nat.gcd_zero_left", 5],["AddMonoid.nsmul_zero'", 5],["BinaryHeap.arr", 5],["UInt8.zero_def", 5],["decide_eq_false", 5],["List.repeat'", 5],["eq_comm", 5],["Function.comp_apply", 5],["Tactic.Ring.horner", 5],["Except.ok", 5],["decide_eq_true", 5],["Function.LeftInverse.injective", 5],["Nat.zero_div", 5],["Fin.val_eq_of_lt", 5],["Option.mem_def", 5],["List.reverse", 5],["SubNegMonoid.gsmul_succ'", 5],["Bool", 5],["prod_map", 5],["List.append_assoc", 5],["Iff.trans", 5],["List.concat_eq_append", 4],["le_of_lt", 4],["and", 4],["Int.one_mul", 4],["map_eq_pure_bind", 4],["Ne", 4],["Function.bijective.injective", 4],["and_true", 4],["List.erase_eq_erasep", 4],["min_le_left", 4],["Option", 4],["Option.some_bind", 4],["Option.none_bind", 4],["LawfulMonad.pure_bind", 4],["Int.zero_add", 4],["Nat.le_refl", 4],["List.append_eq_nil", 4],["add_left_comm", 4],["List.Mem.head", 4],["Nat.left_distrib", 4],["Nat.add_mod_mod", 4],["Int.mul_negSucc_ofNat_negSucc_ofNat", 4],["UFModel.rank", 4],["Except", 4],["Option.bind", 4],["Nat.cast_zero", 4],["Or.resolve_left", 4],["Nat.add_div_right", 4],["Decidable.lt_or_eq_of_le", 4],["UInt32.eq_of_val_eq", 4],["Int.le.dest", 4],["and_self", 4],["Nat.sub_self", 4],["le_refl", 4],["Int.sign", 4],["Nat.gcd_succ", 4],["Nat.blt", 4],["Int.negSucc_ofNat_ofNat", 4],["Nat.succ_pos", 4],["pow_add", 4],["Nat.lt_succ_self", 4],["min_eq_left", 4],["mul_left_inv", 4],["UInt64.mk_val_eq", 4],["Seq.seq", 4],["UInt16.eq_of_val_eq", 4],["USize.mk_val_eq", 4],["UnionFind.size", 4],["Nat.coprime.coprime_dvd_left", 4],["Int.ofNat_mul_ofNat", 4],["UInt16.mk_val_eq", 4],["Nat.right_distrib", 4],["UFModel.parent", 4],["Array.get?_eq_get?", 4],["Function.funext_iff", 4],["Or.elim", 4],["Nat.Linear.Poly.denote_append", 4],["Array.size_set", 4],["USize.eq_of_val_eq", 4],["UInt64.eq_of_val_eq", 4],["List.erasep_cons_of_pos", 4],["Function.RightInverse_surj_inv", 4],["List.getLast", 4],["UInt8.mk_val_eq", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Subtype.coe_injective", 4],["UInt32.mk_val_eq", 4],["UInt8.eq_of_val_eq", 4],["Int.add_left_neg", 4],["Nat.div_zero", 4],["UFModel.Agrees.get_eq", 4],["LawfulFunctor.id_map", 4],["List.reverse_cons", 4],["Option.get", 4],["Nat.not_le_of_gt", 4],["Int.ofNat_mul_negSucc_ofNat", 4],["Function.bijective.surjective", 4],["or_false", 4],["Int.negSucc_ofNat_add_negSucc_ofNat", 4],["max_eq_left", 3],["Nat.mul", 3],["Nat.cast_succ", 3],["Inv.inv", 3],["Nat.lt_of_lt_of_le", 3],["List.List.append_eq", 3],["List.modifyNth", 3],["Option.some_inj", 3],["Int.distrib_right", 3],["List.reverse_nil", 3],["Function.LeftInverse_inv_fun", 3],["add_right_cancel", 3],["not_lt_of_ge", 3],["AddMonoidWithOne.natCast_succ", 3],["List.concat", 3],["beq_self_eq_true", 3],["eq_min", 3],["Nat.gcd_one_left", 3],["Nat.succ.injEq", 3],["Nat.Linear.Poly", 3],["Nat.mul_div_cancel_left", 3],["List.erase_cons", 3],["sizeOf_nat", 3],["List.append", 3],["Nat.succ.inj", 3],["AddMonoidWithOne.natCast_zero", 3],["Int.ofNat_zero", 3],["LawfulMonad.bind_assoc", 3],["le_max_right", 3],["not_false", 3],["Prod.mk.injEq", 3],["Nat.mul_mod", 3],["Int.negSucc_ofNat_add_ofNat", 3],["neg_neg", 3],["List.length_set", 3],["Subtype.ext_iff", 3],["Array.get?", 3],["Nat.not_lt_eq", 3],["Option.isSome_none", 3],["Nat.not_lt_zero", 3],["Nat.gcd_rec", 3],["min_eq_right", 3],["exists_eq_left'", 3],["Nat.gcd_zero_right", 3],["Nat.one_mul", 3],["List.insert_of_mem", 3],["Nat.Linear.Poly.denote_le", 3],["Fin.size_positive'", 3],["Prod.map", 3],["Function.update_noteq", 3],["Nat.ble", 3],["bind_pure", 3],["le_max_left", 3],["Nat.sub_eq_zero_of_le", 3],["le_min", 3],["pow_mul_comm", 3],["Nat.toDigitsCore", 3],["Nat.mod_eq", 3],["Nat.dvd_refl", 3],["Nat.digitChar", 3],["Prod.mk.inj", 3],["Nat.Linear.fixedVar", 3],["Prod.ext'", 3],["mul_add", 3],["Int.distrib_left", 3],["Dvd.dvd", 3],["Nat.not_le_eq", 3],["Nat.mod_eq_zero_of_dvd", 3],["and_congr", 3],["Nat.le.dest", 3],["lt_irrefl", 3],["and_false", 3],["UFNode.parent", 3],["Nat.dvd_mul_left", 3],["Nat.Linear.Expr.toPoly", 3],["Function.surjective.comp", 3],["LawfulBEq.rfl", 3],["WellFounded.fix_eq", 3],["Quot.sound", 3],["BinaryHeap.heapifyDown", 3],["List.remove", 3],["sorryAx", 3],["Int.ofNat_add_negSucc_ofNat", 3],["Nat.sub_sub", 3],["exists_prop", 3],["Array.push", 3],["Nat.add_right_comm", 3],["pow_succ", 3],["Nat", 3],["Nat.lt_of_succ_lt_succ", 3],["List.insert_of_not_mem", 3],["if_false", 3],["Trans.trans", 3],["Int.neg_mul_eq_neg_mul_symm", 3],["Prod.swap_swap", 3],["exists_congr", 3],["List.mem_cons_self", 3],["exists_eq_right", 3],["Int.mul_neg_eq_neg_mul_symm", 3],["Prod", 3],["not_exists", 3],["List.exists_of_erasep", 3],["or_true", 3],["Int.ofNat_add_ofNat", 3],["Nonempty.intro", 3],["eq_max", 3],["min_le_right", 3],["max_le", 3],["Nat.sub_lt", 3],["Int.cast_ofNat", 3],["false_or", 3],["Int.eq_ofNat_of_zero_le", 3],["List.append_inj", 3],["List.modifyNthTail", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.sub_succ", 3],["Nat.ble_eq_true_of_le", 2],["Nat.eq_zero_of_add_eq_zero_left", 2],["Nat.Linear.Poly.of_isZero", 2],["ne_of_lt", 2],["Function.surj_inv", 2],["List.cons_bind", 2],["Nat.lt_succ_iff", 2],["Function.LeftInverse.comp", 2],["Prod.swap_LeftInverse", 2],["Nat.add_left_cancel", 2],["Int.neg_eq_of_add_eq_zero", 2],["Monoid.one_mul", 2],["congr_fun", 2],["Monoid.mul_one", 2],["Bool.and_eq_true", 2],["Option.map_map", 2],["Function.forall_update_iff", 2],["true_or", 2],["Nat.succ_le_succ", 2],["implies_congr_ctx", 2],["Nat.eq_zero_of_gcd_eq_zero_left", 2],["Nat.succ_sub_succ_eq_sub", 2],["nsmul_rec", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["UFNode.mk", 2],["Classical.choice", 2],["Nat.lt_eq", 2],["Option.bind_eq_none", 2],["Nat.sub_succ_lt_self", 2],["UnionFind.rankMaxAux", 2],["imp_self", 2],["List.append_inj'", 2],["Nat.lt_of_le_of_lt", 2],["sizeOf_default", 2],["Equiv.toFun", 2],["Nat.mul_div_cancel", 2],["UFModel.Models.parent_eq", 2],["Option.getD", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.eq_zero_of_add_eq_zero_right", 2],["Nat.cast_one", 2],["List.get?_modifyNth", 2],["USize.one_def", 2],["plift.up", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.coprime.gcd_left", 2],["Subsingleton.allEq", 2],["AddGroupWithOne.intCast_ofNat", 2],["UInt32.one_def", 2],["List.cons.injEq", 2],["Function.inv_fun_on_pos", 2],["PUnit.unit", 2],["Nat.eq_of_beq_eq_true", 2],["Array.size_swap", 2],["Equiv.right_inv", 2],["List.set_eq_modifyNth", 2],["Nat.dvd_trans", 2],["Array.swap", 2],["Nat.zero_min", 2],["PUnit.subsingleton", 2],["Nat.add_sub_cancel_left", 2],["Int.nonneg_def", 2],["seq_eq_bind_map", 2],["mul_right_cancel", 2],["Int.subNatNat_elim", 2],["List.Mem.tail", 2],["List.take", 2],["Nat.mul_mod_mul_left", 2],["Monoid.npow_succ'", 2],["Int.subNatNat_of_sub_eq_zero", 2],["decide_eq_true_iff", 2],["Nat.coprime.mul", 2],["Nat.dvd_mul_right", 2],["left_comm", 2],["Nat.Linear.Poly.isZero", 2],["UInt64.one_def", 2],["Nat.le_add_right", 2],["mul_right_inv", 2],["Nat.div_mul_cancel", 2],["Nat.eq_zero_of_zero_dvd", 2],["List.mem_cons_of_mem", 2],["Int.mul_zero", 2],["Nat.mod_eq_sub_mod", 2],["Nat.zero_lt_succ", 2],["mul_left_cancel", 2],["Nat.coprime.pow_left", 2],["Int.cast", 2],["lt_of_le_of_ne", 2],["Int.sub_nat_self", 2],["Int.add_left_comm", 2],["List.get?_set_ne", 2],["List.erasep_cons", 2],["heq_of_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["exists_eq_left", 2],["List.instDecidableMemListInstMembershipList", 2],["Nat.not_succ_le_zero", 2],["Int.ofNat_sub", 2],["Nat.Linear.hugeFuel", 2],["UFModel.Models.size_eq", 2],["Int.zero_mul", 2],["List.forall_mem_cons", 2],["Function.inv_fun", 2],["Nat.gcd_mul_left_left", 2],["LawfulMonad.bind_map", 2],["not_forall", 2],["UInt16.one_def", 2],["Nat.mod_zero", 2],["mul_left_comm", 2],["Nat.add_sub_of_le", 2],["le_trans", 2],["List.get_mem", 2],["add_left_cancel", 2],["Prod.swap_injective", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Function.bijective", 2],["max_eq_right", 2],["Nat.pred_succ", 2],["Function.injective.ne", 2],["Eq.mpr_not", 2],["le_of_not_lt", 2],["Subtype", 2],["Classical.choose", 2],["Equiv.symm", 2],["Array.isEqv", 2],["Nat.min_zero", 2],["ulift.up", 2],["Int.negSucc_ofNat_mul_negOfNat", 2],["Int.subNatNat_add", 2],["Nat.mul_mod_right", 2],["Option.map_eq_map", 2],["AddGroupWithOne.intCast_negSucc", 2],["Nat.le_of_dvd", 2],["false_iff", 2],["Function.inv_fun_eq", 2],["Nonempty", 2],["List.removeNth", 2],["Int.ofNat_mul_negOfNat", 2],["not_iff_not_of_iff", 2],["List.eq_or_mem_of_mem_cons", 2],["Nat.le_add_left", 2],["List.cons_ne_nil", 2],["min_comm", 2],["Functor.map_map", 2],["BinaryHeap.size_pos_of_max", 2],["Nat.Linear.monomialToExpr", 2],["UnionFind.arr", 2],["ite_self", 2],["List.eq_nil_of_length_eq_zero", 2],["Nat.beq", 2],["Fin.ext", 2],["Bool.and_true", 2],["Function.involutive.injective", 2],["Nat.sub_eq_iff_eq_add", 2],["Nat.add_mod_right", 2],["Nat.le_of_ble_eq_true", 2],["Nat.mul_pred_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["decide_eq_true_eq", 2],["List.get?_set_eq", 2],["Nat.add_mul_mod_self_left", 2],["decidable_of_iff", 2],["Int.neg_add", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.sub_eq", 2],["Trans.mk", 2],["Quotient.mk", 2],["List.get_of_mem", 2],["max_comm", 2],["Option.bind_eq_some", 2],["Nat.Linear.Expr.mulL", 2],["ExceptT.mk", 2],["Nat.lcm_zero_left", 2],["Nat.min_succ_succ", 2],["WellFoundedRelation.rel", 2],["not_and", 2],["Array.size_push", 2],["Monoid.npow_zero'", 2],["List.card_nil", 2],["List.replicate", 2],["UInt8.one_def", 2],["BinaryHeap.max", 2],["Nat.Linear.denote_monomialToExpr", 2],["if_true", 2],["Nat.lcm", 2],["List.length_pos_of_ne_nil", 2],["Nat.Linear.Var.denote.go", 2],["Nat.Linear.Poly.cancelAux", 2],["Classical.choose_spec", 2],["Int.ofNat.inj", 2],["neg_add_self", 2],["Nat.not_le_of_lt", 2],["Nat.succ_lt_succ", 2],["Nat.pow_succ", 2],["Equiv.left_inv", 2],["Fin.ofNat'", 2],["List.bind", 2],["Int.neg_neg", 2],["Nat.add_sub_add_right", 2],["Nat.lcm_comm", 2],["Nat.gcd_one_right", 2],["not_lt", 2],["Int.neg_nonneg_of_nonpos", 2],["Subtype.coind_injective", 2],["Function.update_same", 2],["List.get?_len_le", 2],["not_not", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Nat.Linear.Poly.insertSorted", 2],["add_right_neg", 2],["Nonempty.elim", 2],["add_left_cancel_iff", 2],["le_total", 2],["Nat.gcd_eq_left", 2],["Setoid.refl", 2],["decidable_of_decidable_of_iff", 1],["Int.sign_zero", 1],["beq_self_eq_true'", 1],["Option.lift_or_get", 1],["List.singleton_append", 1],["List.length_replicate", 1],["Option.ext", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.Linear.Expr.toNormPoly", 1],["unsafeCast", 1],["Nat.pow_zero", 1],["Int.decEq.proof_1", 1],["PSum.inl", 1],["Function.injective_id", 1],["Prod.swap_surjective", 1],["Int.negOfNat_eq_subNatNat_zero", 1],["List.get?_set_of_lt", 1],["PSum.inr", 1],["UInt8.decEq", 1],["Nat.sub_self_add", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["USize.decEq.proof_1", 1],["List.card_eq_of_equiv", 1],["Int.sub_eq_zero_of_eq", 1],["List.replicateTR.loop", 1],["Int.decEq.proof_5", 1],["GT.gt", 1],["unique_of_exists_unique", 1],["UFModel.Agrees.set", 1],["Quotient.recOnSubsingleton₂", 1],["Int.le.dest_sub", 1],["Sum.inl", 1],["Int.mul_one", 1],["left_inv_eq_right_inv", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Nat.coprime.gcd_eq_one", 1],["Nat.min_eq_left", 1],["Sum.inr", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["ByteSlice.mk", 1],["or_comm", 1],["Function.const_apply", 1],["Function.cantor_surjective", 1],["Array.get_eq_get", 1],["List.equiv_iff_subset_and_subset", 1],["UInt16.decEq.proof_1", 1],["List.length_add_eq_lengthTRAux", 1],["zero_lt_of_lt", 1],["le_of_lt_or_eq", 1],["Nat.mod.inductionOn", 1],["Array.set", 1],["Function.update_comp_eq_of_injective'", 1],["Int.neg_neg_ofNat_succ", 1],["Subtype.map", 1],["UFModel.push", 1],["Float.mk", 1],["inferInstance", 1],["Function.Equiv.symm", 1],["List.not_mem_of_not_mem_cons", 1],["instDecidableEqBool.proof_1", 1],["Int.eq_neg_succ_of_lt_zero", 1],["Int.subNatNat_of_sub_eq_succ", 1],["dec_em", 1],["Or.symm", 1],["Nat.dvd_lcm_left", 1],["Nat.lt_by_cases", 1],["Tactic.Ring.Cache.mk", 1],["List.append_left_cancel", 1],["BinaryHeap.insert.proof_1", 1],["WellFounded.apply", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.cast_mul", 1],["if_ctx_congr", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.succ_pred_eq_of_pos", 1],["List.inj_on", 1],["List.ne_of_not_mem_cons", 1],["List.modifyHead", 1],["Classical.byContradiction", 1],["withPtrEqDecEq.proof_2", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["List.get?_modifyNth_eq", 1],["iff_false", 1],["List.mem_insert_iff", 1],["Nat.mod_one", 1],["Equivalence.mk", 1],["Nat.le_or_le", 1],["proof_irrel", 1],["Tactic.NormCast.NormCastExtension.mk", 1],["Int.negSucc_ofNat_mul_subNatNat", 1],["or_self", 1],["Function.surjective.has_RightInverse", 1],["Function.RightInverse.LeftInverse", 1],["instSubsingletonDecidable", 1],["List.join", 1],["Nat.mul_sub_right_distrib", 1],["AddGroupWithOne.sub_eq_add_neg", 1],["Nat.gcd_self", 1],["Int.sub_self", 1],["GE.ge", 1],["List.card_append_disjoint", 1],["Equiv.symm_apply_apply", 1],["Nat.mod_self", 1],["Int.lt_irrefl", 1],["List.modifyNthTail_length", 1],["List.append_inj_left'", 1],["Nat.lt_of_lt_of_eq", 1],["Bool.and_false", 1],["Nat.pred_le", 1],["not", 1],["LawfulApplicative.seqLeft_eq", 1],["UInt8.decEq.proof_2", 1],["Tactic.NormCast.Label.move", 1],["List.mem_repeat'", 1],["List.filterAux", 1],["Nat.ble_succ_eq_true", 1],["PSigma", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.to_digits_core_length", 1],["Bool.and_self", 1],["Int.ne_of_lt", 1],["Function.LeftInverse_surj_inv", 1],["Nat.eq_zero_of_le_zero", 1],["Nat.strong_rec_on", 1],["List.getLast_cons", 1],["Array.instDecidableEqArray.proof_3", 1],["List.elem_eq_true_of_mem", 1],["Nat.lt_trans", 1],["LawfulMonad.bind_pure_comp", 1],["Function.surjective", 1],["Nat.lcm_dvd", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Option.ne_none_iff_exists", 1],["Nat.succ_inj'", 1],["not_or", 1],["Int.negSucc.inj", 1],["Array.get?_set_ne", 1],["DecidableRel", 1],["List.length_singleton", 1],["FloatSpec.mk", 1],["Int.subNatNat_add_right", 1],["withPtrEqDecEq.proof_1", 1],["Array.eq_of_isEqv", 1],["Nat.add_sub_add_left", 1],["Nat.le_trans", 1],["Fin.one_def", 1],["And.imp", 1],["Nat.Linear.Poly.combine", 1],["Option.isSome", 1],["Quotient.sound.proof_1", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["instDecidableEqSum.proof_1", 1],["Nat.gcd_pos_of_pos_left", 1],["List.reverseAux_eq_append", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["LawfulApplicative.seqRight_eq", 1],["Function.surjective.of_comp_iff", 1],["ExistsUnique", 1],["PartialOrder.le_antisymm", 1],["Option.isNone_iff_eq_none", 1],["Int.ofNat_succ", 1],["List.elem", 1],["Nat.le_of_not_lt", 1],["AddGroupWithOne.gsmul_neg'", 1],["Int.neg_mul_eq_neg_mul", 1],["Nat.dvd_iff_mod_eq_zero", 1],["List.mapTRAux_eq", 1],["Int.neg_add_cancel_right", 1],["Fin.nsmuls_eq", 1],["Function.inv_fun_on_neg", 1],["UnionFind.findAux", 1],["UnionFind.rank_lt", 1],["Nat.sub_le", 1],["Option.isNone_none", 1],["Array.getLit", 1],["instDecidableEqProd.proof_3", 1],["UInt64.decEq.proof_2", 1],["ne_false_of_self", 1],["Function.apply_update", 1],["PProd.mk", 1],["And.comm", 1],["List.append_eq_cons_iff", 1],["List.get_cons_zero", 1],["Nat.succ_eq_add_one", 1],["Int.neg_ofNat_of_succ", 1],["Nat.gcd.induction", 1],["UnionFind.rankMax", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Function.surj_inv_eq", 1],["List.erasep_append_right", 1],["Function.injective.ne_iff", 1],["Nat.gcd_dvd", 1],["Int.natAbs_eq", 1],["Nat.add_le_add", 1],["Nat.Linear.Expr.of_cancel_le", 1],["dec_em'", 1],["List.get?_modifyNth_ne", 1],["Function.involutive.surjective", 1],["Nat.mod_mod", 1],["Function.surjective_id", 1],["EStateM.Result.ok", 1],["Mathlib.Tactic.Sat.LRATStep.add", 1],["Tactic.NormCast.instDecidableEqLabel.proof_2", 1],["Int.ofNat_zero_le", 1],["Function.decidable_eq_pfun.proof_1", 1],["List.foldr", 1],["Nat.min_comm", 1],["Mathlib.Tactic.Sat.LRATStep.del", 1],["System.Platform.getNumBits", 1],["Nat.sub_lt_sub_left", 1],["type_eq_of_heq.proof_1", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["neg_add_cancel_left", 1],["Nat.div_self", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["congr_arg2", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.not_lt_of_le", 1],["Mathlib.Tactic.Lint.Linter.mk", 1],["Int.sign_eq_neg_one_of_neg", 1],["Option.isNone_some", 1],["Nat.gcd_div", 1],["Nat.le_of_succ_le", 1],["Quot.inductionOn", 1],["Option.get_some", 1],["Array.isEqvAux.proof_2", 1],["UInt64.neg_def", 1],["Array.get?_set_eq", 1],["Fin.mk.sizeOf_spec", 1],["USize.mk.sizeOf_spec", 1],["plift.down", 1],["MProd.mk", 1],["Decidable.le_iff_lt_or_eq", 1],["List.reverseAux_reverseAux", 1],["Int.le_of_lt", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Fin.modn_def", 1],["Nat.mul_div_cancel'", 1],["Tactic.Ring.HornerExpr.const", 1],["List.length_map", 1],["Nat.decEq.proof_1", 1],["Nat.gcd_mul_right", 1],["Quotient.ind", 1],["UInt64.decEq.proof_1", 1],["Nat.find_x", 1],["Nat.add_le_add_right", 1],["AddGroupWithOne.gsmul_zero'", 1],["Nat.lt_add_right", 1],["Function.RightInverse.comp", 1],["UInt16.mk.sizeOf_spec", 1],["lt_of_not_ge", 1],["Nat.sub_eq_zero_iff_le", 1],["List.hasDecEq.proof_3", 1],["Int.eq_zero_of_sign_eq_zero", 1],["rfl.proof_1", 1],["Function.injective.of_comp_iff", 1],["PSigma.eta", 1],["Int.NonNeg", 1],["List.decidablePairwise", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Tactic.NormCast.Label.elim", 1],["UnionFind.mk", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["Int.subNatNat_add_negSucc_ofNat", 1],["Nat.cast_add", 1],["lt_trichotomy", 1],["Nat.Linear.Poly.denote_combineAux", 1],["UnionFind.lt_rankMax", 1],["UFModel.Models", 1],["Prod.swap", 1],["Nat.Linear.Poly.isNonZero", 1],["iff_of_eq", 1],["mul_pow", 1],["Function.LeftInverse.RightInverse", 1],["not_false_iff", 1],["UInt64.decEq", 1],["instDecidableEqSum.proof_4", 1],["Nat.pos_of_ne_zero", 1],["Nat.mul_pos", 1],["Nat.add_mul_div_left", 1],["Bool.not_false", 1],["Array.size_pop", 1],["Nat.coprime.pow_right", 1],["UFModel.push.proof_1", 1],["Bool.not_true", 1],["Fin.one_val", 1],["Function.injective.of_comp_iff'", 1],["Subsingleton.elim.proof_1", 1],["List.ext", 1],["pow_mul", 1],["UInt16.neg_def", 1],["Or.imp_right", 1],["Array.isEqvAux.proof_3", 1],["List.mem_iff_get", 1],["USize.neg_def", 1],["UInt8.mk.sizeOf_spec", 1],["Function.curry", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_eq_some", 1],["ulift.down", 1],["Nat.mul_sub_left_distrib", 1],["Nat.mul_dvd_mul", 1],["toBoolUsing_eq_true", 1],["instDecidableEqQuotient.proof_2", 1],["instDecidableEqSum.proof_6", 1],["Int.neg_succ_lt_zero", 1],["Function.RightInverse.injective", 1],["Function.surjective.of_comp", 1],["Nat.sub_eq_sub_min", 1],["ofBoolUsing_eq_false", 1],["ofBoolUsing_eq_true", 1],["Function.has_RightInverse.surjective", 1],["Nat.le_of_sub_eq_zero", 1],["Nat.Linear.Poly.combineAux", 1],["Array.eraseIdxSzAux", 1],["Prod.Lex.left", 1],["Array.ext'", 1],["List.length_eq_zero", 1],["Array.isEqvAux_self", 1],["Int.pos_of_sign_eq_one", 1],["em'", 1],["instDecidableEqNat", 1],["Int.decEq.proof_4", 1],["Nat.lt_trichotomy", 1],["instDecidableEqSum.proof_5", 1],["List.get_append_right_aux", 1],["Eq.to_iff", 1],["EStateM.Result.error", 1],["Nat.dvd_of_mod_eq_zero", 1],["ByteSliceT.mk", 1],["withPtrEqDecEq.proof_3", 1],["SeqRight.seqRight", 1],["List.getLast_singleton", 1],["List.union_equiv_append", 1],["UnionFind.findAux.proof_2", 1],["Function.bijective_iff_exists_unique", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2", 1],["ExistsUnique.intro", 1],["Nat.coprime.gcd_both", 1],["Nat.add_sub_self_left", 1],["lcProof", 1],["List.replicateTR_loop_replicate_eq", 1],["Quot.ind", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Prod.mk.eta", 1],["UInt32.neg_def", 1],["decidableEq_of_decidableLe.proof_2", 1],["Decidable.byCases", 1],["Function.is_partial_inv_left", 1],["exists_eq'", 1],["exists_eq", 1],["bind_congr", 1],["IsAddLeftCancel.add_left_cancel", 1],["BinaryHeap.size_heapifyUp", 1],["le_of_not_gt", 1],["em", 1],["iff_true_intro", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["Nat.lt_or_eq_of_le", 1],["List.erase_cons_tail", 1],["Tactic.NormCast.CoeFnType.coe", 1],["AddMonoid.zero_add", 1],["List.getLast_append", 1],["Nat.Linear.Expr.inc", 1],["proofIrrel", 1],["Nat.add_le_add_left", 1],["Subtype.coe_eta", 1],["UInt8.decEq.proof_1", 1],["List.hasDecEq.proof_5", 1],["Function.inv_fun_on_eq", 1],["Function.Equiv.refl", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Nat.Linear.Poly.denote_mul", 1],["Bool.or_eq_true", 1],["StdGen.mk", 1],["Nat.add_right_cancel", 1],["IsMulRightCancel.mul_right_cancel", 1],["Nat.mul_div_right", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.le_of_lt_succ", 1],["List.hasDecEq.proof_4", 1],["Sigma", 1],["Nat.dvd_lcm_right", 1],["neg_eq_of_add_eq_zero", 1],["Option.getD_some", 1],["Int.add_neg_cancel_right", 1],["LawfulApplicative.map_pure", 1],["Set.univ", 1],["Int.negOfNat_mul_ofNat", 1],["List.erasep_of_forall_not", 1],["PLift.up", 1],["Nat.eq_zero_or_eq_succ_pred", 1],["List.hasDecEq.proof_1", 1],["Int.eq_of_mul_eq_mul_right", 1],["List.toArrayAux_data", 1],["Equiv.mk", 1],["UnionFind.findAux.proof_1", 1],["Nat.find_min", 1],["instTransEq_1.proof_1", 1],["List.mapTRAux", 1],["Nat.pred_zero", 1],["Int.ofNat_eq_ofNat_iff", 1],["List.toArray_data", 1],["instTransEq.proof_1", 1],["WellFounded.fixFEq", 1],["Mathlib.Tactic.Lint.NamedLinter.mk", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1", 1],["Exists.imp", 1],["Nat.add_one", 1],["Option.map_eq_none'", 1],["UnionFind.lt_rankMax'", 1],["AddGroupWithOne.gsmul_succ'", 1],["LinearOrder.decidable_eq", 1],["Int.add_assoc_aux1", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_2", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_2", 1],["Nat.Linear.Poly.denote_fuse", 1],["IsMulLeftCancel.mul_left_cancel", 1],["Prod.map_fst", 1],["Option.eq_none_of_isNone", 1],["ULift.down", 1],["List.length_erasep_of_mem", 1],["Tactic.Ring.HornerExpr.xadd", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["dif_ctx_congr", 1],["Int.sign_eq_one_of_pos", 1],["List.map_cons", 1],["List.forall_mem_of_forall_mem_cons", 1],["Function.injective.has_LeftInverse", 1],["List.get?_append", 1],["Nat.coprime.gcd_right", 1],["Nat.sub_add_eq_max", 1],["UInt8.neg_def", 1],["Int.ofNat.injEq", 1],["UInt16.decEq", 1],["Function.surjective.of_comp_iff'", 1],["Nat.pos_of_dvd_of_pos", 1],["NeqIffBeqFalse", 1],["Prod.map_snd", 1],["Prod.Lex", 1],["Sat.Literal.pos", 1],["List.length_concat", 1],["Subtype.mk.sizeOf_spec", 1],["Int.NonNeg.mk", 1],["Nat.le_div_iff_mul_le", 1],["Array.pop", 1],["AddMonoid.add_zero", 1],["List.append_right_cancel", 1],["Array.instDecidableEqArray.proof_2", 1],["Int.eq_of_mul_eq_mul_left", 1],["UInt64.mk.sizeOf_spec", 1],["List.union", 1],["List.map₂", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.coprime_div_gcd_div_gcd", 1],["List.mem_of_elem_eq_true", 1],["Int.eq_of_sub_eq_zero", 1],["Array.toArrayLit", 1],["Equiv.self_comp_symm", 1],["EqIffBeqTrue", 1],["USize.decEq", 1],["Tactic.NormCast.instDecidableEqLabel.proof_1", 1],["IsAddRightCancel.add_right_cancel", 1],["List.append_left_injective", 1],["LawfulFunctor.comp_map", 1],["WellFounded.fixFEq.proof_1", 1],["Function.injective.of_comp", 1],["Function.partial_inv", 1],["List.append_inj_right", 1],["List.map_append", 1],["List.append_right_injective", 1],["Int.neg_of_sign_eq_neg_one", 1],["Int.neg_mul_eq_mul_neg", 1],["Array.get?_push_eq", 1],["List.mem_append", 1],["Fin.val_eq_of_eq", 1],["List.eq_of_mem_singleton", 1],["Int.natAbs_of_nonneg", 1],["and_imp", 1],["Int.eq_succ_of_zero_lt", 1],["not_iff_false_intro", 1],["not_le", 1],["withPtrEq", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_1", 1],["List.reverseAux_reverseAux_nil", 1],["List.erase_cons_head", 1],["Int.decEq.proof_6", 1],["Nat.succ_ne_self", 1],["Function.Equiv.trans", 1],["Nat.gcd_mul_right_left", 1],["decidableEq_of_decidableLe.proof_1", 1],["false_implies", 1],["Int.eq_neg_of_eq_neg", 1],["Nat.le_of_eq", 1],["max_assoc", 1],["Nat.one_eq_succ_zero", 1],["LawfulBEq.eq_of_beq", 1],["BinaryHeap.popMaxAux", 1],["Fin.elim0", 1],["inv_eq_of_mul_eq_one", 1],["or", 1],["Function.uncurry", 1],["Int.ofNat_add", 1],["Array.ext", 1],["Nat.decEq", 1],["add_neg_cancel_right", 1],["FloatArray.mk", 1],["Fin.ne_of_val_ne", 1],["apply_dite", 1],["List.card_subset_le", 1],["Array.eraseIdx'.proof_1", 1],["and_not_self", 1],["lt_of_le_not_le", 1],["BinaryHeap.popMaxAux.proof_1", 1],["System.FilePath.mk", 1],["List.ne_nil_of_length_pos", 1],["Tactic.NormCast.Label.squash", 1],["Array.isEqvAux.proof_1", 1],["List.redLength", 1],["instDecidableEqSum.proof_3", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["id_map'", 1],["Nat.one_pos", 1],["Nat.coprime_comm", 1],["Function.update_eq_iff", 1],["Function.extend_def", 1],["Int.ofNat_mul_subNatNat", 1],["Subtype.coind_surjective", 1],["Sat.Literal.neg", 1],["Classical.propDecidable", 1],["List.Mem", 1],["List.toArrayAux", 1],["le_of_not_ge", 1],["instDecidableEqProd.proof_2", 1],["List.exists_of_mem_map", 1],["ExistsUnique.exists", 1],["Array.mkEmpty", 1],["Nat.min", 1],["UFModel.Models.rank_eq", 1],["Function.has_LeftInverse.injective", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["Eq.subst", 1],["Int.negOfNat_add", 1],["Prod.lex_def", 1],["Nat.add_mul_div_right", 1],["List.get?_map", 1],["Option.map_id", 1],["AddGroup.add_left_neg", 1],["Tactic.NormCast.CoeFnInfo.mk", 1],["List.get?_append_right", 1],["toBoolUsing", 1],["Except.map", 1],["LawfulApplicative.pure_seq", 1],["BinaryHeap.size", 1],["not_not_intro", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["pow_one", 1],["List.set_nil", 1],["List.hasDecEq", 1],["Option.eq_none_iff_forall_not_mem", 1],["Fin.mk.injEq", 1],["Nat.eq_one_of_dvd_one", 1],["Array.instDecidableEqArray.proof_1", 1],["USize.decEq.proof_2", 1],["Function.RightInverse.comp_eq_id", 1],["forall_congr'", 1],["List.mem_of_ne_of_mem", 1],["List.erasep_append_left", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4", 1],["Nat.eq_of_mul_eq_mul_right", 1],["or_iff_left_iff_imp", 1],["UFModel.Agrees.size_eq", 1],["List.hasDecEq.proof_2", 1],["Subtype.instDecidableEqSubtype.proof_2", 1],["ite_not", 1],["optParam_eq", 1],["Array.toListLitAux", 1],["Prod.ext_iff", 1],["PLift.down", 1],["HEq.ndrecOn", 1],["not_or_intro", 1],["UInt32.mk.sizeOf_spec", 1],["Nat.gcd_mul_left", 1],["Function.partial_inv_of_injective", 1],["List.mem_filterAux", 1],["Int.decEq", 1],["Function.LeftInverse.comp_eq_id", 1],["Prod.mk.inj_iff", 1],["BinaryHeap.heapifyUp", 1],["Function.eq_update_iff", 1],["instDecidableEqProp.proof_1", 1],["Nat.Linear.Expr.mulR", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["left_neg_eq_right_neg", 1],["List.toArray", 1],["Tactic.Ring.State.mk", 1],["Nat.Nat.pow_succ'", 1],["le_of_eq", 1],["BinaryHeap.mkHeap", 1],["decidable_eq_of_bool_pred.proof_1", 1],["Mathlib.Tactic.Sat.LClause.mk", 1],["Int.decEq.proof_3", 1],["Nat.lcm_one_left", 1],["Classical.epsilon_spec", 1],["Int.add_assoc_aux2", 1],["dite_not", 1],["Int.neg_eq_neg_one_mul", 1],["Int.subNatNat_add_left", 1],["Nat.Linear.PolyCnstr.mk", 1],["Int.negSucc_ofNat_coe", 1],["List.hasDecEq.proof_6", 1],["Nat.coprime_one_left", 1],["List.Fin.exists_iff", 1],["AddCommMonoid.add_comm", 1],["Array.get?_eq_get", 1],["Int.negOfNat_mul_negSucc_ofNat", 1],["Subarray.mk", 1],["UInt32.decEq.proof_2", 1],["Int.subNatNat_add_add", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["UInt32.decEq", 1],["Equiv.apply_symm_apply", 1],["Function.extend_apply", 1],["Function.involutive.LeftInverse", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Equiv.symm_comp_self", 1],["Nat.lt_of_not_le", 1],["List.mem_reverse", 1],["Quotient.sound", 1],["Nat.eq_of_mul_eq_mul_left", 1],["SeqLeft.seqLeft", 1],["UInt16.decEq.proof_2", 1],["ULift.up", 1],["Nat.beq_refl", 1],["Function.extend", 1],["ExceptT.run", 1],["ne_of_gt", 1],["Nat.coprime.coprime_div_left", 1],["AddGroupWithOne.add_left_neg", 1],["Nat.ne_of_beq_eq_false", 1],["Nat.div_eq_sub_div", 1],["List.eq_of_mem_repeat'", 1],["apply_ite", 1],["List.get_singleton", 1],["Subtype.instDecidableEqSubtype.proof_1", 1],["List.length_repeat'", 1],["Subtype.map.proof_1", 1],["Nat.gcd_eq_left_iff_dvd", 1],["instDecidableEqBool.proof_2", 1],["Nat.le_of_mul_le_mul_left", 1],["inv_mul_self", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["inv_inv", 1],["Nat.exists_coprime", 1],["Function.LeftInverse.surjective", 1],["Prod.Lex.right", 1],["min_assoc", 1],["Nat.mod_le", 1],["Nat.gcd_gcd_self_right_left", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_1", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Nat.sub_pos_of_lt", 1],["List.card_cons_of_not_mem", 1],["Nat.ble_self_eq_true", 1],["BinaryHeap.mk", 1],["heq_iff_eq", 1],["Quot.exists_rep", 1],["Function.injective.eq_iff'", 1],["Array.get?_push_lt", 1],["List.tail", 1],["CommSemiring.mul_comm", 1],["Fin.mod_def", 1],["UInt32.decEq.proof_1", 1],["Nat.lt_or_ge", 1],["UFModel.mk", 1],["List.length_dropLast", 1],["Nat.mod_add_div", 1],["Nat.Linear.Poly.denote_reverse", 1],["imp_congr_left", 1],["Int.natAbs_neg", 1],["eq_of_sub_eq_zero'", 1],["ByteArray.mk", 1],["instDecidableEqProd.proof_1", 1],["Group.mul_left_inv", 1],["UFModel.Agrees.push", 1],["Function.const", 1],["iff_iff_eq", 1],["lt_or_gt_of_ne", 1],["Array.ext.extAux", 1],["exists_apply_eq_apply", 1],["Nat.div_div_eq_div_mul", 1],["Subtype.coind", 1],["Int.decEq.proof_2", 1],["min_self", 1],["instDecidableEqSum.proof_2", 1],["Nat.gt_of_not_le", 1]]],
["OfNat.ofNat", 908, [["OfNat.ofNat", 361],["Eq.refl", 347],["Eq", 271],["rfl", 216],["HAdd.hAdd", 202],["congrArg", 196],["Eq.trans", 175],["Eq.mpr", 155],["congrFun", 150],["of_eq_true", 149],["eq_self", 126],["Eq.symm", 121],["HMul.hMul", 92],["congr", 91],["SizeOf.sizeOf", 79],["Bool.true", 74],["LT.lt", 55],["Fin.mk", 54],["Nat.succ", 51],["Fin.val", 45],["HSub.hSub", 44],["propext", 44],["List.length", 42],["List.nil", 40],["List.cons", 40],["Nat.gcd", 37],["Array.size", 36],["forall_congr", 33],["forall_const", 33],["Unit.unit", 32],["HMod.hMod", 31],["eq_true_of_decide", 28],["HEq.refl", 28],["Nat.add_comm", 25],["PProd.fst", 25],["Eq.mp", 24],["LE.le", 24],["Classical.em", 24],["Iff.intro", 23],["Nat.zero_add", 23],["Nat.add", 22],["Nat.Linear.Poly.denote", 22],["Nat.add_eq", 19],["Nat.lt_of_lt_of_le", 19],["Option.some", 19],["List.length_cons", 18],["of_decide_eq_true", 18],["Nat.lt_succ_self", 17],["Neg.neg", 17],["absurd", 17],["eq_true", 17],["Nat.mod_lt", 17],["Fin.isLt", 16],["HAppend.hAppend", 16],["Nat.Linear.Var.denote", 16],["Nat.gcd_dvd_right", 16],["cond", 16],["Nat.mul_eq", 16],["List.get", 15],["False.elim", 15],["cond_true", 14],["Array.get", 14],["Fin.size_positive", 14],["Prod.mk", 14],["Nat.le_refl", 13],["Bool.of_not_eq_true", 13],["implies_congr", 13],["cond_false", 13],["Exists.intro", 12],["eq_of_heq", 12],["funext", 12],["Nat.gcd_comm", 12],["HDiv.hDiv", 12],["Nat.dvd_gcd", 11],["And.intro", 11],["Nat.gcd_dvd_left", 11],["And", 11],["eq_false", 11],["Nat.pred", 11],["add_zero", 11],["Nat.zero_le", 11],["Nat.mul_comm", 11],["instNonempty", 11],["Nat.add_zero", 10],["Nat.Linear.Expr.add", 10],["Array.data", 10],["UInt8.val", 10],["UInt16.mk", 10],["Membership.mem", 10],["UInt32.mk", 10],["UInt8.mk", 10],["USize.mk", 10],["Nat.zero_lt_succ", 10],["UInt64.mk", 10],["List.get?", 10],["Nat.Linear.Expr.var", 10],["List.card", 10],["BinaryHeap.arr", 10],["Nat.Linear.Expr.num", 10],["UInt32.val", 10],["Iff", 10],["Bool.false", 9],["Nat.le_of_succ_le_succ", 9],["UInt16.val", 9],["Subtype.property", 9],["Int.ofNat", 9],["Nat.Linear.ExprCnstr.mk", 9],["UInt64.val", 9],["USize.val", 9],["Decidable.em", 9],["Not", 9],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 9],["Nat.dvd_antisymm", 9],["Int.zero_add", 8],["And.left", 8],["Nat.zero", 8],["Int.negSucc", 8],["Nat.add_left_comm", 8],["Dvd.dvd", 8],["dite_congr", 8],["dite", 8],["MonoidWithZero.zero_mul", 8],["List.length_nil", 8],["WellFounded.fix", 8],["Nat.sub_lt", 8],["List.get?_eq_get", 7],["add_left_neg", 7],["Nat.gcd_zero_left", 7],["Or", 7],["Nat.eq_zero_or_pos", 7],["zero_add", 7],["List.nil_append", 7],["Array.size_set", 7],["Nat.mul_one", 7],["Fin.eq_of_val_eq", 7],["Fin.ofNat'", 7],["one_mul", 7],["UnionFind.arr", 7],["sizeOf_nat", 7],["Nat.add_assoc", 7],["Nat.zero_mod", 6],["Nat.lt_trans", 6],["Nat.sub_succ_lt_self", 6],["iff_self", 6],["Fin.ofNat'_succ", 6],["Nat.mod_eq_of_lt", 6],["Iff.mpr", 6],["And.right", 6],["WellFoundedRelation.rel", 6],["UInt8", 6],["sorryAx", 6],["UnionFind.size", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.le_of_lt", 6],["Nat.zero_eq", 6],["MonoidWithZero.mul_zero", 6],["ne_eq", 6],["UInt16", 6],["Nat.Linear.Poly.denote_eq", 6],["Nat.blt", 6],["ite", 6],["UInt64", 6],["BEq.beq", 6],["Nat.succ_ne_zero", 6],["HPow.hPow", 6],["Option.none", 6],["USize", 6],["Nat.succ_pos", 6],["Int.negOfNat", 6],["id", 6],["Nat.lt_eq", 6],["UInt32", 6],["PSigma.mk", 6],["dite_true", 6],["Fin.mul_def", 5],["if_neg", 5],["if_pos", 5],["UInt64.zero_def", 5],["Or.inr", 5],["UInt32.zero_def", 5],["eq_of_beq", 5],["Nat.dvd_trans", 5],["Nat.dvd_mul_left", 5],["Subsingleton.elim", 5],["List.length_append", 5],["UInt16.zero_def", 5],["mul_one", 5],["USize.zero_def", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["SubNegMonoid.gsmul_zero'", 5],["dif_neg", 5],["List.set", 5],["UFModel.parent", 5],["Fin.zero_def", 5],["Nat.Linear.Poly", 5],["Subtype.mk", 5],["Inhabited.mk", 5],["Nat.Linear.Expr.denote", 5],["AddMonoid.nsmul_zero'", 5],["Nat.coprime", 5],["Or.inl", 5],["Nat.gcd_rec", 5],["UInt8.zero_def", 5],["Iff.mp", 5],["Eq.mpr_prop", 5],["Fin.sizeOf", 5],["List.reverse", 5],["Nat.mul_zero", 5],["List.append_nil", 5],["List.repeat'", 5],["False", 5],["ite_congr", 5],["dif_pos", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.cast", 4],["True", 4],["UFNode.rank", 4],["Fin.elim0", 4],["Nat.coprime.coprime_dvd_left", 4],["UInt32.mul_def", 4],["UInt64.mul_def", 4],["Nat.div_eq", 4],["Nat.succ_add", 4],["Nat.sub_eq", 4],["UInt16.mk_val_eq", 4],["Nat.zero_sub", 4],["UInt32.mk_val_eq", 4],["Nat.lcm", 4],["Iff.rfl", 4],["Int.sign", 4],["Fin.add_def", 4],["noConfusionEnum", 4],["Nat.Linear.Poly.cancelAux", 4],["and", 4],["le_refl", 4],["Array.get?_eq_get?", 4],["List.card_nil", 4],["List.insert", 4],["USize.mk_val_eq", 4],["USize.mul_def", 4],["Nat.Linear.fixedVar", 4],["Int.mul_comm", 4],["Nat.pos_of_dvd_of_pos", 4],["Decidable.decide", 4],["beq_self_eq_true", 4],["Array.mk", 4],["Nat.gcd_succ", 4],["eq_false_of_decide", 4],["UInt16.mul_def", 4],["UInt8.mul_def", 4],["BinaryHeap.heapifyDown", 4],["UInt8.mk_val_eq", 4],["List.map", 4],["UInt64.mk_val_eq", 4],["Nat.lt_of_le_of_lt", 4],["Array.push", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.mul", 4],["UFModel.rank", 4],["Exists", 4],["Nat.succ_mul", 4],["eq_false'", 4],["Nat.dvd_mul_right", 4],["Nat.gcd_dvd", 4],["Fin", 4],["Nat.zero_mul", 4],["Prod", 4],["Nat.le_add_right", 4],["Int.one_mul", 3],["UInt8.add_def", 3],["Nat.lcm_comm", 3],["Nat", 3],["List.length_set", 3],["UInt32.add_def", 3],["Nat.le.refl", 3],["Nat.not_lt_zero", 3],["Nat.sub_zero", 3],["Option.some.inj", 3],["Nat.lt_irrefl", 3],["UFModel.Agrees.get_eq", 3],["Nat.lt_of_succ_lt_succ", 3],["Subtype", 3],["implies_true", 3],["Array.get?", 3],["Nat.Linear.hugeFuel", 3],["ByteArray.size", 3],["dite_false", 3],["Nat.succ_le_succ", 3],["USize.add_def", 3],["Nat.not_le_eq", 3],["Nat.toDigitsCore", 3],["UnionFind.model'", 3],["Nat.digitChar", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.le_trans", 3],["Nat.gcd_one_left", 3],["Nat.succ_sub_succ", 3],["Int.natAbs", 3],["false_and", 3],["Nat.le_of_dvd", 3],["Nat.zero_lt_of_lt", 3],["List.cons_append", 3],["UFNode.parent", 3],["UInt64.add_def", 3],["AddMonoidWithOne.natCast_succ", 3],["Nat.sub_le", 3],["Nat.gcd.induction", 3],["WellFounded.fix_eq", 3],["Nat.le_succ", 3],["Nat.one_mul", 3],["List.append", 3],["FloatArray.size", 3],["Ne", 3],["UFNode.mk", 3],["Nat.Linear.Var.denote.go", 3],["Fin.size_positive'", 3],["Nat.le_antisymm", 3],["Array.size_push", 3],["UInt16.add_def", 3],["List.reverse_cons", 3],["Int.neg_zero", 3],["Int.subNatNat", 3],["Array.set", 3],["List.drop", 3],["AddMonoidWithOne.natCast_zero", 3],["Nat.not_le_of_gt", 3],["Nat.gcd_zero_right", 3],["Nat.lt_of_succ_le", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.dvd_refl", 3],["Subtype.val", 2],["Nat.div_mul_cancel", 2],["usize_size_eq", 2],["List.List.append_eq", 2],["Option.some_inj", 2],["List.reverse_nil", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.eq_zero_of_add_eq_zero_right", 2],["Nat.sub_succ", 2],["List.card_cons_of_mem", 2],["Nat.coprime.pow_left", 2],["nsmul_rec", 2],["Bool.and_true", 2],["Nat.pred_lt", 2],["Nat.pred_succ", 2],["Nat.coprime.gcd_left", 2],["Nat.min_zero", 2],["Nat.left_distrib", 2],["Int.sub_eq_add_neg", 2],["UFModel.push", 2],["le_of_not_lt", 2],["Array.size_swap", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Nat.cast_mul", 2],["UFModel.Models.parent_eq'", 2],["BinaryHeap.size_pos_of_max", 2],["Nat.cast_zero", 2],["List.cons_ne_nil", 2],["Nat.zero_min", 2],["AddGroupWithOne.intCast_negSucc", 2],["Nat.coprime.coprime_mul_left", 2],["Exists.elim", 2],["Int.add_comm", 2],["List.concat_eq_append", 2],["Nat.coprime.mul", 2],["Nat.mod_eq_zero_of_dvd", 2],["Nat.gcd_one_right", 2],["UInt64.one_def", 2],["Nat.add_one", 2],["Int.eq_ofNat_of_zero_le", 2],["Nat.eq_zero_of_zero_dvd", 2],["Nat.dvd_lcm_left", 2],["Nat.succ_lt_succ", 2],["Nat.le_of_succ_le", 2],["Nat.min_succ_succ", 2],["add_left_cancel_iff", 2],["Nat.gcd_pos_of_pos_left", 2],["Nat.Linear.Poly.isZero", 2],["if_true", 2],["Int.add_lt_add", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Iff.symm", 2],["List.get?_set_ne", 2],["List.get?_len_le", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.gcd_eq_left", 2],["Int.add_lt_add_of_lt_of_le", 2],["List.insert_of_mem", 2],["Int.le_of_neg_le_neg", 2],["UFModel.Models.size_eq", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.gcd_mul_left_left", 2],["Int.add_lt_add_of_le_of_lt", 2],["UInt16.one_def", 2],["Int.eq_succ_of_zero_lt", 2],["BinaryHeap.size", 2],["Nat.not_eq_zero_of_lt", 2],["min", 2],["List.get_mem", 2],["USize.size", 2],["mul_left_inv", 2],["Nat.Linear.monomialToExpr", 2],["UnionFind.rankMaxAux", 2],["List.toArray", 2],["Nat.le_of_lt_succ", 2],["Monoid.one_mul", 2],["Monoid.mul_one", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["if_false", 2],["Array.swap", 2],["Nat.mul_mod_right", 2],["UFModel.Models.parent_eq", 2],["Or.resolve_left", 2],["true_and", 2],["Nat.gcd_mul_right", 2],["List.getLast", 2],["Nat.eq_or_lt_of_le", 2],["UFModel.Models.rank_eq", 2],["List.not_mem_nil", 2],["Int.NonNeg.mk", 2],["Nat.zero_div", 2],["Nat.eq_zero_of_add_eq_zero_left", 2],["UInt32.one_def", 2],["Nat.pos_of_ne_zero", 2],["USize.one_def", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.coprime_iff_gcd_eq_one", 2],["decide_eq_true_eq", 2],["Nat.dvd_mod_iff", 2],["GT.gt", 2],["List.length_pos_of_ne_nil", 2],["Semigroup.mul_assoc", 2],["pow_succ", 2],["UFModel.rank_lt", 2],["Subsingleton.intro", 2],["List.insert_of_not_mem", 2],["Nat.lt_succ_iff", 2],["Nat.mul_assoc", 2],["Nat.lcm_zero_left", 2],["UFModel.Models", 2],["Monoid.npow_zero'", 2],["Nat.Linear.Poly.isNonZero", 2],["UInt8.one_def", 2],["BinaryHeap.max", 2],["Nat.Linear.denote_monomialToExpr", 2],["List.card_cons_of_not_mem", 2],["sizeOf_default", 2],["Nat.mul_succ", 2],["Nat.not_lt_eq", 2],["max", 2],["Nat.eq_zero_of_gcd_eq_zero_left", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.sub_self", 2],["Int.cast_ofNat", 2],["Int.add_le_add", 2],["Bool.and_eq_true", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Int.cast", 2],["Int.ofNat_lt", 2],["congr_arg", 2],["Nat.gt_of_not_le", 1],["List.mem_cons_of_mem", 1],["Int.eq_neg_succ_of_lt_zero", 1],["UInt8.eq_of_val_eq", 1],["Nat.mod_one", 1],["Int.sub_nat_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.coprime.coprime_mul_right", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["List.card_eq_of_equiv", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_pred_eq_of_pos", 1],["List.inj_on", 1],["List.erase_eq_erasep", 1],["or_true", 1],["USize.size_positive", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["min_self", 1],["Nat.Linear.Poly.denote_fuse", 1],["zero_lt_of_lt", 1],["Int.add_zero", 1],["Int.neg_neg_ofNat_succ", 1],["Nat.coprime_comm", 1],["Nat.add_sub_cancel", 1],["Int.sub_self", 1],["Nat.mod_self", 1],["List.modifyNthTail_length", 1],["lt_of_le_of_ne", 1],["Option", 1],["Bool.and_false", 1],["UnionFind.rankMaxAux.proof_2", 1],["AddGroup.add_left_neg", 1],["Decidable.of_not_not", 1],["and_true", 1],["List.concat", 1],["Trans.trans", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["PSigma", 1],["Nat.to_digits_core_length", 1],["Array.isEqvAux_self", 1],["UInt32.val_eq_of_lt", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List.getLast_cons", 1],["Option.map_eq_map", 1],["Nat.gcd_mul_left", 1],["Nat.lcm_dvd", 1],["List.modifyHead", 1],["Nat.gcd_self", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Array.get?_set_ne", 1],["Nat.sub_add_cancel", 1],["trivial", 1],["Nat.pred_le", 1],["Tactic.NormCast.Label.move", 1],["Bool.and_self", 1],["Nat.Linear.Poly.combine", 1],["Int.lt_of_neg_lt_neg", 1],["Array.get_eq_get", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.mul_div_cancel_left", 1],["or_iff_left_iff_imp", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.le.dest", 1],["True.intro", 1],["Fin.one_def", 1],["Nat.mul_mod_mul_left", 1],["Iff.refl", 1],["Nat.dvd_iff_mod_eq_zero", 1],["imp_self", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["List.get?_set_of_lt", 1],["Nat.Linear.Expr.mulL", 1],["List.get_cons_zero", 1],["Nat.succ_eq_add_one", 1],["UInt16.eq_of_val_eq", 1],["Nat.mul_pred_left", 1],["Int.negSucc_ofNat_add_ofNat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.gcd_mul_lcm", 1],["List.length_add_eq_lengthTRAux", 1],["List.replicate", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Int.le_sub_right_of_add_le", 1],["List.card_le_card_cons", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Int.neg_ofNat_of_succ", 1],["UFModel.Models.empty", 1],["Int.subNatNat_of_sub_eq_succ", 1],["UnionFind.rankMax", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.sub_eq_zero_of_le", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["Nat.div_self", 1],["UnionFind.rankMaxAux.proof_1", 1],["Int.sign_eq_neg_one_of_neg", 1],["min_eq_right", 1],["min_le_left", 1],["Nat.gcd_div", 1],["Nat.sub_lt_sub_left", 1],["UInt64.neg_def", 1],["Functor.map", 1],["USize.mk.sizeOf_spec", 1],["Nat.add_lt_add_right", 1],["UFModel.Agrees.size_eq", 1],["List.equiv_iff_subset_and_subset", 1],["Classical.byContradiction", 1],["List.remove", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["mt", 1],["List.mem_cons", 1],["Nat.eq_zero_of_le_zero", 1],["Array.indexOfAux.proof_2", 1],["List.length_map", 1],["Nat.find_x", 1],["ne_of_lt", 1],["Nat.add_le_add_right", 1],["AddGroupWithOne.gsmul_zero'", 1],["UInt16.mk.sizeOf_spec", 1],["List.take", 1],["List.length_singleton", 1],["Int.lt_add_one_of_le", 1],["of_decide_eq_false", 1],["Int.eq_zero_of_sign_eq_zero", 1],["Int.ofNat_succ_pos", 1],["UInt64.size_positive", 1],["And.imp", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["Nat.add_div_right", 1],["Array.indexOfAux", 1],["lt_trichotomy", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.lt_add_right", 1],["List.mem_cons_self", 1],["UnionFind.lt_rankMax", 1],["Nat.pos_pow_of_pos", 1],["UInt32.eq_of_val_eq", 1],["Int.add_right_neg", 1],["Nat.div_zero", 1],["Array.size_pop", 1],["Nat.cast_succ", 1],["UFModel.push.proof_1", 1],["Int.mul_zero", 1],["Array.isEqvAux.proof_3", 1],["USize.neg_def", 1],["Nat.div_le_self", 1],["UInt8.mk.sizeOf_spec", 1],["pow_mul", 1],["Nat.mod_eq_sub_mod", 1],["UInt16.neg_def", 1],["lt_of_not_ge", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combineAux", 1],["Inv.inv", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["Array.indexOfAux.proof_1", 1],["Nat.dvd_zero", 1],["neg_neg", 1],["List.getLast_singleton", 1],["Nat.le_of_sub_eq_zero", 1],["Array.eraseIdxSzAux", 1],["Array.ext'", 1],["List.length_eq_zero", 1],["UFNode.value", 1],["List", 1],["System.Platform.getNumBits", 1],["List.erase", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["Nat.dvd_of_mod_eq_zero", 1],["Nat.pos_iff_ne_zero", 1],["Nat.isValidChar", 1],["Nat.succ.injEq", 1],["List.union_equiv_append", 1],["Nat.coprime.gcd_both", 1],["Nat.add_sub_self_left", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqvAux.proof_2", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["Array.get?_set_eq", 1],["Fin.mk.sizeOf_spec", 1],["Tactic.NormCast.CoeFnType.coe", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Nat.Linear.Poly.denote_mul", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Nat.dvd_lcm_right", 1],["Int.ofNat_mul_negOfNat", 1],["Nat.lt_or_eq_of_le", 1],["AddMonoid.zero_add", 1],["Nat.add_le_add_left", 1],["Nat.coprime.pow_right", 1],["List.removeNth", 1],["Int.neg_succ_lt_zero", 1],["UInt16.size_positive", 1],["Int.ofNat_nonneg", 1],["Int.pos_of_sign_eq_one", 1],["List.cons.sizeOf_spec", 1],["Bool.or_eq_true", 1],["List.get?_set_eq", 1],["List.modifyNthTail", 1],["Int.ofNat_zero", 1],["Sigma", 1],["Int.sign_eq_one_of_pos", 1],["Int.ofNat_le", 1],["Int.subNatNat_of_sub_eq_zero", 1],["UInt32.neg_def", 1],["Int.eq_of_mul_eq_mul_right", 1],["Tactic.NormCast.Label.elim", 1],["Nat.lt_of_lt_of_eq", 1],["Array.pop", 1],["Nat.pred_zero", 1],["List.toArray_data", 1],["List.union", 1],["Nat.Linear.Poly.denote_combine", 1],["UnionFind.lt_rankMax'", 1],["UFModel.Agrees.mk'", 1],["mul_right_inv", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Nat.mod_eq", 1],["Nat.lt_of_add_lt_add_right", 1],["Nat.add_succ", 1],["List.length_erasep_of_mem", 1],["List.length_pos_of_mem", 1],["Nat.gcd_mul_right_left", 1],["List.get_of_mem", 1],["Nat.lt_succ_of_le", 1],["pow_add", 1],["Nat.coprime.gcd_right", 1],["Nat.AtLeastTwo.mk", 1],["Nat.sub_add_eq_max", 1],["UInt8.neg_def", 1],["Nat.one_eq_succ_zero", 1],["BinaryHeap.popMaxAux", 1],["or", 1],["Ordering.toCtorIdx", 1],["UFModel.Models.push", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Nat.add_right_comm", 1],["Nat.le_succ_of_le", 1],["List.length_concat", 1],["List.length_take", 1],["Subtype.mk.sizeOf_spec", 1],["Int.add_le_add_right", 1],["not_lt", 1],["List.redLength", 1],["UInt64.mk.sizeOf_spec", 1],["Int.eq_of_mul_eq_mul_left", 1],["Nat.not_succ_le_zero", 1],["List.map₂", 1],["Nat.coprime_div_gcd_div_gcd", 1],["UInt32.mk.sizeOf_spec", 1],["UFModel.Agrees.empty", 1],["Int.eq_of_sub_eq_zero", 1],["Array.toArrayLit", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["add_right_neg", 1],["Int.eq_zero_ofNatAbs_eq_zero", 1],["List.get?_map", 1],["UInt32.ofNat", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["Int.neg_of_sign_eq_neg_one", 1],["Array.get?_push_eq", 1],["List.eq_of_mem_repeat'", 1],["Function.funext_iff", 1],["and_imp", 1],["List.get_append_right_aux", 1],["add_mul", 1],["Nat.succ_sub_succ_eq_sub", 1],["instAtLeastTwoHAddNatInstHAddInstAddNatOfNat.proof_1", 1],["Nat.find_min", 1],["Nat.eq_one_of_dvd_one", 1],["pow_one", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.zero_lt_sub_of_lt", 1],["false_implies", 1],["Int.add_left_neg", 1],["USize.eq_of_val_eq", 1],["UInt64.eq_of_val_eq", 1],["List.card_append_disjoint", 1],["Decidable.isTrue", 1],["Nat.mul_dvd_mul_right", 1],["BinaryHeap.heapifyUp", 1],["UFModel.empty.proof_1", 1],["Subsingleton.allEq", 1],["List.card_subset_le", 1],["lt_of_lt_of_le", 1],["Nat.right_distrib", 1],["Nat.cast_one", 1],["pow_zero", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.ne_nil_of_length_pos", 1],["Nat.lcm_one_left", 1],["Tactic.Ring.horner", 1],["Tactic.NormCast.Label.squash", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Nat.le.step", 1],["List.eq_nil_of_length_eq_zero", 1],["Nat.sub_lt_left_of_lt_add", 1],["Array.isEqvAux.proof_1", 1],["List.exists_of_mem_map", 1],["Nat.mul_mod", 1],["Fin.one_val", 1],["System.Platform.numBits", 1],["ite_false", 1],["Nat.Linear.Expr.inc", 1],["le_antisymm", 1],["Nat.pow_le_pow_of_le_right", 1],["Array.mkEmpty", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["min_eq_left", 1],["Fin.mk.injEq", 1],["List.length_repeat'", 1],["List.get_singleton", 1],["instSubsingletonFinOfNatNatInstOfNatNat.proof_1", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mod_le", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Int.ofNat_add_negSucc_ofNat", 1],["Nat.sub_pos_of_lt", 1],["Nat.add_mul_mod_self_left", 1],["List.exists_mem_of_length_pos", 1],["Int.neg_add", 1],["Array.toListLitAux", 1],["Nat.sub_sub", 1],["mul_pow", 1],["Array.get?_push_lt", 1],["List.get?_append_right", 1],["le_of_lt", 1],["UFModel.Agrees.push", 1],["usize_size_gt_zero", 1],["Int.sign_zero", 1],["List.length_replicate", 1],["BinaryHeap.mkHeap", 1],["Nat.Linear.Expr.toNormPoly", 1],["UInt8.size_positive", 1],["instSubsingletonFinOfNatNatInstOfNatNat_1.proof_1", 1],["Int.neg_eq_neg_one_mul", 1],["unsafeCast", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.coprime_one_left", 1],["UInt32.size_positive", 1],["Nat.sub_self_add", 1],["Array.get?_eq_get", 1],["Int.sub_eq_zero_of_eq", 1],["List.toArrayAux_data", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["eq_comm", 1],["Option.map_some'", 1],["List.get?_append", 1],["Option.some.injEq", 1],["Option.map", 1],["Decidable.isFalse", 1],["AddGroupWithOne.add_left_neg", 1],["List.exists_of_erasep", 1],["Int.le_refl", 1],["Int.mul_one", 1],["Nat.coprime.gcd_eq_one", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["inv_inv", 1],["Nat.exists_coprime", 1],["UInt8.toChar_aux", 1],["Nat.add_sub_add_right", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Int.sub_right_lt_of_lt_add", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.one_pos", 1],["UFModel.empty", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["UFModel.mk", 1],["Bool", 1],["lt_irrefl", 1],["Nat.zero_lt_one", 1],["Nonempty.elim", 1],["Group.mul_left_inv", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["AddMonoid.add_zero", 1],["List.length_dropLast", 1],["CommSemigroup.mul_comm", 1]]],
["HAdd.hAdd", 620, [["HAdd.hAdd", 288],["Eq.refl", 273],["OfNat.ofNat", 229],["Eq", 226],["congrArg", 168],["Eq.trans", 151],["Eq.mpr", 149],["rfl", 147],["of_eq_true", 121],["congrFun", 114],["eq_self", 108],["Eq.symm", 105],["congr", 97],["SizeOf.sizeOf", 79],["HMul.hMul", 49],["LT.lt", 48],["HSub.hSub", 48],["Nat.succ", 48],["Fin.mk", 45],["List.length", 42],["Fin.val", 40],["Nat.add_comm", 36],["Array.size", 36],["List.cons", 32],["Bool.true", 31],["List.nil", 26],["propext", 25],["Neg.neg", 23],["LE.le", 22],["HMod.hMod", 22],["PProd.fst", 21],["Eq.mp", 20],["Int.add_comm", 20],["Option.some", 19],["List.length_cons", 18],["HEq.refl", 17],["add_zero", 17],["forall_congr", 17],["Nat.lt_of_lt_of_le", 17],["Nat.lt_succ_self", 17],["Nat.zero_add", 17],["forall_const", 17],["Iff.intro", 16],["Fin.isLt", 16],["Nat.add_assoc", 16],["eq_true", 16],["List.get", 15],["Nat.add_zero", 15],["HPow.hPow", 14],["eq_true_of_decide", 14],["Array.get", 13],["Unit.unit", 13],["Nat.add", 12],["eq_false", 12],["Nat.mod_lt", 12],["Nat.le_refl", 12],["Nat.zero_eq", 12],["Exists.intro", 11],["add_assoc", 11],["List.get?", 10],["List.card", 10],["Nat.le_of_succ_le_succ", 10],["HAppend.hAppend", 10],["Nat.Linear.Expr.add", 10],["Int.zero_add", 10],["BinaryHeap.arr", 10],["Nat.add_succ", 10],["Decidable.em", 10],["add_comm", 10],["Classical.em", 9],["add_left_neg", 9],["Array.data", 9],["Nat.Linear.Expr.num", 9],["HDiv.hDiv", 9],["Fin.size_positive", 9],["Nat.Linear.Expr.var", 9],["Membership.mem", 9],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 9],["Nat.Linear.ExprCnstr.mk", 9],["Nat.add_eq", 9],["False.elim", 8],["Nat.sub_add_cancel", 8],["Int.add_assoc", 8],["Nat.add_left_comm", 8],["Subtype.property", 8],["Nat.succ_add", 8],["Int.ofNat", 8],["funext", 8],["eq_of_heq", 8],["Semigroup.mul_assoc", 8],["List.length_nil", 8],["USize.mk", 7],["List.get?_eq_get", 7],["UInt8.mk", 7],["Iff.mpr", 7],["Distrib.left_distrib", 7],["UInt16.mk", 7],["UInt32.mk", 7],["Array.size_set", 7],["Nat.Linear.Poly.denote", 7],["UInt8.val", 7],["sizeOf_nat", 7],["Int.negSucc", 7],["UInt32.val", 7],["UInt64.mk", 7],["dite_congr", 7],["Nat.le_add_right", 7],["zero_add", 7],["Fin.add_def", 7],["UnionFind.arr", 7],["WellFounded.fix", 7],["of_decide_eq_true", 6],["Subsingleton.elim", 6],["UInt16.val", 6],["add_mul", 6],["Option.none", 6],["UInt64.val", 6],["Fin.ofNat'_succ", 6],["WellFoundedRelation.rel", 6],["Nat.add_sub_cancel", 6],["USize.add_def", 6],["Bool.false", 6],["UInt64.add_def", 6],["And.intro", 6],["Nat.Linear.Var.denote", 6],["Distrib.right_distrib", 6],["ite", 6],["UnionFind.size", 6],["Iff", 6],["Nat.sub_succ_lt_self", 6],["Not", 6],["And", 6],["USize.val", 6],["UInt16.add_def", 6],["UInt32.add_def", 6],["UInt8.add_def", 6],["Nat.sub_lt", 6],["Nat.lt_eq", 6],["Nat.mul_eq", 6],["Eq.mpr_prop", 5],["Nat.zero", 5],["if_pos", 5],["Nat.cast", 5],["Subtype.mk", 5],["Fin.eq_of_val_eq", 5],["Tactic.Ring.horner", 5],["List.length_append", 5],["Int.subNatNat", 5],["Nat.mod_add_mod", 5],["Iff.mp", 5],["List.set", 5],["dite", 5],["Nat.le_of_lt", 5],["ite_congr", 5],["Exists", 5],["Nat.mul_succ", 5],["Fin.sizeOf", 5],["PSigma.mk", 5],["dite_true", 5],["Int.add_le_add_left", 4],["dif_neg", 4],["Nat.succ_mul", 4],["List.card_nil", 4],["BinaryHeap.heapifyDown", 4],["Array.get?_eq_get?", 4],["And.left", 4],["List.map", 4],["Int.negSucc_ofNat_add_negSucc_ofNat", 4],["List.nil_append", 4],["Array.push", 4],["Array.mk", 4],["UFNode.rank", 4],["le_refl", 4],["UFModel.parent", 4],["Fin.val_eq_of_lt", 4],["Nat.mul_comm", 4],["Nat.le_trans", 4],["implies_congr", 4],["Nat.le.dest", 4],["dif_pos", 4],["List.repeat'", 4],["Nat.right_distrib", 4],["Nat.lt_trans", 4],["add_left_comm", 4],["Nat.lt_of_le_of_lt", 4],["Nat.add_mod_mod", 4],["Iff.rfl", 4],["Int.add_zero", 4],["List.insert", 4],["CommSemigroup.mul_comm", 3],["UInt64.eq_of_val_eq", 3],["Nat.add_le_add_left", 3],["List.append", 3],["List.drop", 3],["ne_eq", 3],["UFNode.parent", 3],["UInt8.eq_of_val_eq", 3],["Nat.succ_sub_succ", 3],["UInt64.zero_def", 3],["Fin", 3],["eq_false_of_decide", 3],["Option.some.inj", 3],["And.right", 3],["Array.set", 3],["UInt8.zero_def", 3],["UInt16.eq_of_val_eq", 3],["dite_false", 3],["UFNode.mk", 3],["Nat.mul_zero", 3],["Nat.mod_eq_of_lt", 3],["AddMonoidWithOne.natCast_succ", 3],["Nat.zero_lt_of_lt", 3],["UInt8", 3],["Nat.sub_le", 3],["if_neg", 3],["min", 3],["Subtype", 3],["Nat.toDigitsCore", 3],["USize.eq_of_val_eq", 3],["Nat.digitChar", 3],["Int.add_le_add", 3],["Int.add_lt_add_left", 3],["FloatArray.size", 3],["UInt32", 3],["UInt32.eq_of_val_eq", 3],["UInt16", 3],["Nat.not_le_eq", 3],["UFModel.Agrees.get_eq", 3],["Int.add_le_add_right", 3],["max", 3],["Nat.le_add_left", 3],["USize.zero_def", 3],["UInt64", 3],["Nat.zero_sub", 3],["Int.add_left_neg", 3],["UnionFind.model'", 3],["Int.ofNat_add_ofNat", 3],["UInt16.zero_def", 3],["UFModel.rank", 3],["Nat.zero_le", 3],["Int.ofNat_add_negSucc_ofNat", 3],["Prod.mk", 3],["Nat.left_distrib", 3],["UInt32.zero_def", 3],["List.cons_append", 3],["Nat.add_right_comm", 3],["USize", 3],["Array.size_push", 3],["Nat.succ_pos", 3],["pow_add", 3],["absurd", 3],["Int.negSucc_ofNat_add_ofNat", 3],["Nat.sub_zero", 3],["id", 3],["Nat.add_lt_add_left", 3],["Nat.lt_of_succ_le", 3],["Nat.pred", 3],["Array.get?", 3],["ByteArray.size", 3],["True", 3],["Int.sub_eq_add_neg", 3],["Decidable.decide", 3],["Int.add_lt_add_of_le_of_lt", 3],["List.length_set", 3],["Nat.not_lt_eq", 2],["List.insert_of_not_mem", 2],["Nat.add_lt_add_right", 2],["AddCommSemigroup.add_comm", 2],["Int.le_add_of_sub_right_le", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Bool.of_not_eq_true", 2],["Nat.sub_le_sub_right_iff", 2],["Nat.le_of_lt_succ", 2],["AddGroupWithOne.intCast_negSucc", 2],["Nat.add_div_right", 2],["cond_true", 2],["UFModel.Models", 2],["Int.negOfNat", 2],["Nat.add_le_add_right", 2],["le_of_not_lt", 2],["List.concat_eq_append", 2],["Nat.le_of_succ_le", 2],["Dvd.dvd", 2],["List.card_cons_of_mem", 2],["Int.le.dest", 2],["Array.swap", 2],["Nat.succ_le_succ", 2],["UInt32.mul_def", 2],["le_trans", 2],["Nat.zero_min", 2],["Int.add_right_neg", 2],["List.getLast", 2],["UInt16.mk_val_eq", 2],["Option.some_inj", 2],["Fin.zero_def", 2],["Nat.add_sub_cancel_left", 2],["Int.add_le_of_le_sub_right", 2],["UFModel.Models.rank_eq", 2],["add_left_cancel_iff", 2],["UInt64.mul_def", 2],["Array.size_swap", 2],["min_le_left", 2],["List.get?_set_ne", 2],["Int.add_lt_add_right", 2],["Nat.min_zero", 2],["Int.le.intro", 2],["UInt16.mul_def", 2],["Nat.mul_sub_left_distrib", 2],["Int.add_left_comm", 2],["Nat.add_mod_right", 2],["UInt8.mk_val_eq", 2],["UFModel.push", 2],["Int.subNatNat_add", 2],["Nat.div_eq", 2],["Nat.blt", 2],["Nat.le_succ_of_le", 2],["nsmul_rec", 2],["BinaryHeap.size_pos_of_max", 2],["Nat.sub_succ", 2],["Nat.zero_lt_succ", 2],["UFModel.Models.parent_eq'", 2],["Int.add_lt_add", 2],["add_right_cancel", 2],["Int.add_lt_add_of_lt_of_le", 2],["UInt32.mk_val_eq", 2],["lt_of_lt_of_le", 2],["Subtype.val", 2],["List.insert_of_mem", 2],["Nat.min_succ_succ", 2],["if_false", 2],["BinaryHeap.max", 2],["List.length_pos_of_ne_nil", 2],["add_left_cancel", 2],["USize.mul_def", 2],["if_true", 2],["UFModel.Models.size_eq", 2],["not_lt", 2],["cond_false", 2],["List.get?_len_le", 2],["Nat.Linear.Poly.insertSorted", 2],["False", 2],["mul_add", 2],["add_right_neg", 2],["UnionFind.rankMaxAux", 2],["BinaryHeap.size", 2],["Nat.add_sub_add_right", 2],["cond", 2],["Exists.elim", 2],["Nat.le.intro", 2],["USize.mk_val_eq", 2],["WellFounded.fix_eq", 2],["List.card_cons_of_not_mem", 2],["Int.lt_add_of_sub_right_lt", 2],["UInt64.mk_val_eq", 2],["Nat.lt_succ_iff", 2],["List.replicate", 2],["List.get_mem", 2],["List.cons_ne_nil", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["Nat", 2],["Nat.succ_ne_zero", 2],["Nat.sub_lt_left_of_lt_add", 2],["sizeOf_default", 2],["Fin.size_positive'", 2],["UFModel.Models.parent_eq", 2],["sorryAx", 2],["UInt8.mul_def", 2],["List.not_mem_nil", 1],["Option.map_some'", 1],["Int.add_lt_of_lt_sub_left", 1],["Int.le_refl", 1],["Int.subNatNat_elim", 1],["AddSemigroup.add_assoc", 1],["Int.neg_add_lt_left_of_lt_add", 1],["Nat.cast_zero", 1],["lt_irrefl", 1],["Sigma", 1],["lt_of_le_of_ne", 1],["UInt64.neg_def", 1],["Int.add_neg_cancel_right", 1],["eq_false'", 1],["List.length_dropLast", 1],["Array.get_eq_get", 1],["and_true", 1],["AddGroup.add_left_neg", 1],["USize.mk.sizeOf_spec", 1],["List.getLast_cons", 1],["List.List.append_eq", 1],["Int.one_mul", 1],["List.card_eq_of_equiv", 1],["Nat.dvd_add", 1],["Nat.zero_mul", 1],["BinaryHeap.insert.proof_1", 1],["UnionFind.lt_rankMax'", 1],["Int.ofNat_mul_ofNat", 1],["Nat.mod.inductionOn", 1],["Int.neg_neg_ofNat_succ", 1],["Int.neg_add_cancel_right", 1],["Int.le.dest_sub", 1],["Option.map_eq_map", 1],["List.equiv_iff_subset_and_subset", 1],["List.length_erasep_of_mem", 1],["false_iff", 1],["Array.indexOfAux.proof_2", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.succ_lt_succ", 1],["Iff.refl", 1],["max_eq_left", 1],["Array.mk.sizeOf_spec", 1],["Nat.find_x", 1],["UInt32.val_eq_of_lt", 1],["Nat.le_succ", 1],["List.modifyHead", 1],["List.get?_set_of_lt", 1],["Nat.AtLeastTwo.mk", 1],["List.erase_eq_erasep", 1],["Nat.sub_add_eq_max", 1],["Nat.gcd_rec", 1],["UInt8.neg_def", 1],["UFModel.Agrees.size_eq", 1],["List.inj_on", 1],["Array.get?_set_ne", 1],["false_and", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Nat.add_left_cancel", 1],["UInt16.mk.sizeOf_spec", 1],["List.length_add_eq_lengthTRAux", 1],["List.remove", 1],["Nat.lt_irrefl", 1],["Int.lt_iff_le_and_ne", 1],["List.length_concat", 1],["Subtype.mk.sizeOf_spec", 1],["Nat.pred_le", 1],["List.length_take", 1],["trivial", 1],["Int.sub_left_le_of_le_add", 1],["Array.get?_push_lt", 1],["Int.le_of_lt", 1],["Nat.sub_eq_zero_iff_le", 1],["List.length_replicate", 1],["UInt64.mk.sizeOf_spec", 1],["Int.ofNat_succ", 1],["Nat.not_succ_le_zero", 1],["one_mul", 1],["List.map₂", 1],["mul_one", 1],["Nat.Linear.hugeFuel", 1],["Int.sub_left_lt_of_lt_add", 1],["Int.subNatNat_add_right", 1],["True.intro", 1],["Nat.add_sub_add_left", 1],["Classical.byContradiction", 1],["Array.toArrayLit", 1],["AddMonoid.add_zero", 1],["Nat.lt_add_right", 1],["decide_eq_false", 1],["List.cons.sizeOf_spec", 1],["UInt32.ofNat", 1],["Int.add_left_cancel", 1],["Int.lt_irrefl", 1],["Int.lt_add_of_sub_left_lt", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Array.getLit", 1],["Array.indexOfAux", 1],["Nat.Linear.Poly.denote_combineAux", 1],["not_le", 1],["Int.neg_ofNat_of_succ", 1],["Nat.not_eq_zero_of_lt", 1],["Nat.lt_of_lt_of_eq", 1],["UnionFind.rankMax", 1],["Nat.sub_eq_iff_eq_add", 1],["List.mem_cons_self", 1],["Nat.add_le_of_le_sub_left", 1],["pow_mul_comm", 1],["List.length_singleton", 1],["List.get_append_right_aux", 1],["UnionFind.rankMaxAux.proof_1", 1],["max_eq_right", 1],["Nat.pos_iff_ne_zero", 1],["And.imp", 1],["Subsingleton.allEq", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["unsafeCast", 1],["Nat.add_mul_div_left", 1],["Bool", 1],["Fin.nsmuls_eq", 1],["Array.size_pop", 1],["Nat.sub_lt_sub_left", 1],["Int.ofNat_mul_subNatNat", 1],["Functor.map", 1],["Int.negOfNat_eq_subNatNat_zero", 1],["Int.le_add_of_nonneg_left", 1],["UFModel.push.proof_1", 1],["UnionFind.rank_lt", 1],["List.length_map", 1],["Nat.div_le_self", 1],["pow_succ'", 1],["mul_pow", 1],["List.take", 1],["List.card_subset_le", 1],["pow_mul", 1],["UInt32.mk.sizeOf_spec", 1],["List.eq_of_mem_repeat'", 1],["Array.isEqvAux.proof_2", 1],["List.ne_nil_of_length_pos", 1],["Array.get?_set_eq", 1],["Fin.mk.sizeOf_spec", 1],["UnionFind.lt_rankMax", 1],["true_and", 1],["UInt16.neg_def", 1],["AddGroupWithOne.sub_eq_add_neg", 1],["List.getLast_eq_get", 1],["Ne", 1],["Nat.eq_add_of_sub_eq", 1],["List.get?_concat_length", 1],["lt_of_le_of_lt", 1],["Nat.add_mul_mod_self_right", 1],["List.eq_nil_of_length_eq_zero", 1],["Nat.cast_succ", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Int.subNatNat_add_negSucc_ofNat", 1],["Int.le_add_of_sub_left_le", 1],["Array.isEqvAux.proof_3", 1],["List.exists_of_mem_map", 1],["Nat.mul_mod", 1],["Nat.mod_eq_sub_mod", 1],["UInt8.mk.sizeOf_spec", 1],["USize.neg_def", 1],["List.get?_append", 1],["Fin.elim0", 1],["Int.add_le_of_le_sub_left", 1],["ite_true", 1],["Int.negOfNat_add", 1],["Nat.Linear.Poly.combineAux", 1],["ite_false", 1],["BEq.beq", 1],["le_antisymm", 1],["Array.indexOfAux.proof_1", 1],["neg_neg", 1],["Nat.succ_le_of_lt", 1],["Nat.add_sub_of_le", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["List.removeNth", 1],["List.erase", 1],["List.card_append_disjoint", 1],["Int.lt_add_of_neg_add_lt_left", 1],["and_self", 1],["Nat.sub_eq_sub_min", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["BinaryHeap.size_heapifyUp", 1],["not_lt_of_ge", 1],["Nat.succ.injEq", 1],["Array.isEqv", 1],["Int.negSucc_ofNat_ofNat", 1],["Int.le_add_of_neg_add_le_left", 1],["Int.ofNat_le", 1],["Array.eraseIdxSzAux", 1],["Fin.mk.injEq", 1],["UInt32.neg_def", 1],["Nat.Linear.monomialToExpr", 1],["List.get_cons_zero", 1],["BinaryHeap.popMaxAux.proof_2", 1],["List.length_eq_zero", 1],["List", 1],["Nat.succ_eq_add_one", 1],["Nat.mod_eq", 1],["decide_eq_true_eq", 1],["Nat.one_pos", 1],["Nat.add_mul_mod_self_left", 1],["List.get_of_mem", 1],["decide_eq_true", 1],["List.exists_mem_of_length_pos", 1],["Array.toListLitAux", 1],["Or.inl", 1],["UFModel.Models.push", 1],["AddGroupWithOne.gsmul_succ'", 1],["Int.add_assoc_aux1", 1],["Nat.isValidChar", 1],["List.modifyNthTail", 1],["List.get?_set_eq", 1],["Option", 1],["List.union_equiv_append", 1],["pow_succ", 1],["Int.ofNat.injEq", 1],["UFModel.rank_lt", 1],["List.modifyNthTail_length", 1],["pow_zero", 1],["Int.ofNat_mul_negSucc_ofNat", 1],["Nat.dvd_add_iff_right", 1],["Array.pop", 1],["Nat.find_min", 1],["Nat.le_antisymm", 1],["BinaryHeap.mkHeap", 1],["Int.add_assoc_aux2", 1],["List.union", 1],["Nat.succ_sub_succ_eq_sub", 1],["Bool.and_true", 1],["and", 1],["Nat.add_sub_self_left", 1],["Int.distrib_right", 1],["Array.get?_eq_get", 1],["Array.isEqvAux_self", 1],["Nat.Linear.denote_monomialToExpr", 1],["Nat.lt_add_of_pos_right", 1],["Int.ofNat_natAbs_eq_of_nonneg", 1],["List.length_pos_of_mem", 1],["Nat.Linear.Poly.denote_append", 1],["List.reverse_cons", 1],["le_of_eq", 1],["Option.map", 1],["BinaryHeap.popMaxAux", 1],["Fin.ext", 1],["Int.mul_comm", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Decidable.of_not_not", 1],["Nat.pred_lt", 1],["List.card_le_card_cons", 1],["List.exists_of_erasep", 1],["AddGroupWithOne.add_left_neg", 1],["Nat.gcd", 1],["Trans.trans", 1],["Nat.div_eq_sub_div", 1],["Nat.Linear.Expr.denote", 1],["Fin.one_val", 1],["le_total", 1],["Int.neg_add_le_left_of_le_add", 1],["Fin.ofNat'", 1],["Nat.le_of_add_le_add_right", 1],["List.get?_map", 1],["Fin.mul_def", 1],["Int.sub_nonneg_of_le", 1],["instAtLeastTwoHAddNatInstHAddInstAddNatOfNat.proof_1", 1],["le_of_lt", 1],["pow_one", 1],["UInt8.toChar_aux", 1],["List.mem_cons_of_mem", 1],["Nat.zero_lt_sub_of_lt", 1],["List.reverse", 1],["Array.isEqvAux.proof_1", 1],["min_self", 1],["Int.mul_negSucc_ofNat_negSucc_ofNat", 1],["implies_true", 1],["Int.ofNat_zero_le", 1],["BinaryHeap.heapifyUp", 1],["List.replicateTR.loop", 1],["AddMonoid.zero_add", 1],["List.get?_append_right", 1],["Int.add_lt_of_lt_sub_right", 1],["Nat.Linear.Poly", 1],["UFModel.Agrees.push", 1],["List.concat", 1],["Int.subNatNat_add_left", 1],["PSigma", 1],["Int.negSucc_ofNat_mul_subNatNat", 1],["Exists.imp", 1],["AddCommMonoid.add_comm", 1],["Int.subNatNat_add_add", 1],["Int.le_trans", 1],["lt_trans", 1],["Int.distrib_left", 1],["Nat.not_le_of_gt", 1],["MonoidWithZero.zero_mul", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["Nat.not_lt", 1],["eq_comm", 1],["Int.sub_nat_self", 1],["List.get_singleton", 1],["List.length_repeat'", 1],["Nat.to_digits_core_length", 1],["iff_self", 1],["Nat.le_total", 1],["congr_arg", 1],["Nat.gt_of_not_le", 1]]],
["Nat", 592, [["Eq", 173],["Eq.refl", 160],["OfNat.ofNat", 158],["rfl", 117],["congrArg", 111],["Eq.mpr", 106],["Eq.trans", 101],["congrFun", 87],["Eq.symm", 85],["of_eq_true", 85],["HAdd.hAdd", 77],["eq_self", 72],["congr", 63],["Bool.true", 58],["List.nil", 53],["HMul.hMul", 52],["PProd.fst", 49],["Fin.mk", 48],["List.cons", 48],["List.length", 43],["LT.lt", 43],["Nat.succ", 40],["Fin.val", 39],["Array.size", 39],["Nat.gcd", 37],["Nat", 37],["HSub.hSub", 37],["Unit.unit", 36],["Prod.mk", 31],["Nat.add", 27],["Option.some", 26],["ite", 25],["cond", 24],["HMod.hMod", 23],["Nat.Linear.Poly.denote", 22],["eq_true_of_decide", 22],["LE.le", 22],["Classical.em", 22],["Nat.add_comm", 21],["HAppend.hAppend", 20],["HEq.refl", 19],["Nat.lt_of_lt_of_le", 18],["Nat.add_eq", 18],["Nat.Linear.Var.denote", 18],["List.length_cons", 18],["Eq.mp", 18],["Nat.lt_succ_self", 16],["Nat.gcd_dvd_right", 16],["Array.get", 16],["Nat.mul_eq", 16],["eq_true", 15],["List.get", 15],["Nat.zero_add", 15],["cond_true", 14],["Iff.intro", 14],["BEq.beq", 13],["Option.none", 13],["HDiv.hDiv", 13],["Bool.of_not_eq_true", 13],["cond_false", 13],["Nat.Linear.Poly", 12],["Nat.le_refl", 12],["Fin.isLt", 12],["dite", 12],["absurd", 12],["Int.natAbs", 11],["Nat.mod_lt", 11],["BinaryHeap.arr", 11],["Array.data", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.pred", 11],["Exists.intro", 11],["Nat.dvd_gcd", 11],["WellFounded.fix", 11],["Membership.mem", 10],["False.elim", 10],["List.card", 10],["Prod", 10],["List.get?", 10],["UnionFind.arr", 9],["funext", 9],["Nat.blt", 9],["Decidable.em", 9],["Nat.le_of_succ_le_succ", 9],["Nat.dvd_antisymm", 9],["implies_congr", 9],["Nat.mul", 8],["Fin.size_positive", 8],["Nat.zero", 8],["And.intro", 8],["eq_of_heq", 8],["Nat.mul_comm", 8],["UnionFind.size", 8],["Pure.pure", 8],["eq_false", 8],["Bind.bind", 8],["List.length_nil", 8],["Nat.add_left_comm", 8],["Bool.false", 8],["And", 7],["Subtype.property", 7],["List.reverse", 7],["List.get?_eq_get", 7],["propext", 7],["Nat.gcd_zero_left", 7],["List.nil_append", 7],["And.left", 7],["Nat.Linear.fixedVar", 7],["Dvd.dvd", 7],["Array.push", 7],["Nat.add_assoc", 7],["Nat.sub_lt", 7],["Iff", 7],["Array.size_set", 7],["PSigma.mk", 7],["of_decide_eq_true", 7],["dite_congr", 6],["Int.ofNat", 6],["Nat.Linear.Poly.denote_eq", 6],["HMod.mk", 6],["id", 6],["List", 6],["Nat.Linear.Poly.denote_le", 6],["Subtype.mk", 6],["List.set", 5],["Nat.coprime", 5],["Nat.Linear.hugeFuel", 5],["And.right", 5],["Nat.Linear.Expr.num", 5],["Nat.gcd_rec", 5],["Nat.dvd_mul_left", 5],["Nat.le_of_lt", 5],["eq_of_beq", 5],["Nat.Linear.Expr.var", 5],["Nat.add_zero", 5],["Subsingleton.elim", 5],["Eq.mpr_prop", 5],["Subtype.val", 5],["Nat.coprime.symm", 5],["Not", 5],["and", 5],["Option", 5],["List.length_append", 5],["List.append_nil", 5],["Nat.Linear.Expr.denote", 5],["True", 5],["iff_self", 5],["Fin.val_eq_of_lt", 5],["Exists", 5],["Nat.Linear.Expr.add", 5],["UFNode.rank", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.eq_zero_or_pos", 5],["Nat.dvd_trans", 5],["Nat.zero_eq", 5],["Nat.Linear.Poly.cancelAux", 5],["Nat.mul_one", 5],["List.toArray", 5],["Nat.cast", 5],["beq_self_eq_true", 4],["List.map", 4],["Nat.lt_trans", 4],["Nat.zero_sub", 4],["Nat.dvd_mul_right", 4],["List.insert", 4],["dif_neg", 4],["Nat.lcm", 4],["Nat.lt_of_le_of_lt", 4],["Array.get?_eq_get?", 4],["Iff.mp", 4],["Nat.coprime.coprime_dvd_left", 4],["Array.mk", 4],["List.repeat'", 4],["Nat.gcd_dvd", 4],["List.card_nil", 4],["BinaryHeap.heapifyDown", 4],["Nat.sub_eq", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 4],["ByteArray.size", 4],["Nat.Linear.Expr.toPoly", 4],["dif_pos", 4],["if_pos", 4],["PUnit.unit", 4],["Nat.Linear.ExprCnstr.mk", 4],["Nat.gcd_succ", 4],["Decidable.decide", 4],["dite_true", 4],["Option.some.inj", 3],["Nat.gcd.induction", 3],["Nat.mul_zero", 3],["List.append", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["Neg.neg", 3],["Or", 3],["Array.set", 3],["FloatArray.size", 3],["Iff.mpr", 3],["le_refl", 3],["UFNode.parent", 3],["UnionFind.model'", 3],["Nat.pos_of_dvd_of_pos", 3],["eq_false'", 3],["ForIn.forIn", 3],["WellFoundedRelation.rel", 3],["Nat.zero_le", 3],["UFModel.Agrees.get_eq", 3],["Nat.zero_lt_succ", 3],["Nat.gcd_zero_right", 3],["List.length_set", 3],["Nat.sub", 3],["Nat.Linear.Var.denote.go", 3],["PProd.snd", 3],["Nat.sub_succ_lt_self", 3],["Subtype", 3],["UnionFind.rankMaxAux", 3],["Nat.one_mul", 3],["Fin.size_positive'", 3],["Nat.gcd_one_left", 3],["Nat.bitwise", 3],["List.cons_append", 3],["ite_congr", 3],["Array.size_push", 3],["Nat.succ_pos", 3],["Nat.le_succ", 3],["List.reverse_cons", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.dvd_refl", 3],["Nat.Linear.Poly.insertSorted", 3],["Nat.le_trans", 3],["Nat.lcm_comm", 3],["sizeOf_nat", 3],["sorryAx", 3],["MonadState.get", 3],["Array.get?", 3],["Nat.le_add_right", 3],["Nat.zero_lt_of_lt", 3],["List.drop", 3],["Nat.lt_of_succ_le", 3],["ForInStep.yield", 3],["Nat.lt_eq", 3],["Nat.sub_le", 3],["Nat.succ_mul", 2],["Nat.Linear.Poly.isZero", 2],["Nat.gcd_mul_left_left", 2],["Nat.not_lt_eq", 2],["dite_false", 2],["Int.negSucc", 2],["Nat.mod_eq_of_lt", 2],["List.get_mem", 2],["if_neg", 2],["min", 2],["Array.mkEmpty", 2],["Array.size_swap", 2],["UFModel.Models.parent_eq", 2],["UInt32.val", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.lt_succ_iff", 2],["UFNode.mk", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["List.insert_of_not_mem", 2],["Nat.lt", 2],["GT.gt", 2],["Nat.zero_min", 2],["MProd.snd", 2],["Nat.coprime.coprime_mul_left", 2],["UFModel.parent", 2],["MProd.mk", 2],["List.foldrIdx", 2],["Nat.not_le_eq", 2],["UFModel.Models.parent_eq'", 2],["Nat.Linear.monomialToExpr", 2],["List.reverse_nil", 2],["Array.get!", 2],["Array.swap!", 2],["HPow.mk", 2],["Nat.coprime.pow_left", 2],["Int.toNat", 2],["UFModel.Models", 2],["Nat.coprime.mul", 2],["List.getLast", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Option.some_inj", 2],["List.cons_ne_nil", 2],["UFModel.Models.rank_eq", 2],["Nat.Linear.Poly.combineAux", 2],["Nat.le_of_succ_le", 2],["SizeOf.sizeOf", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["List.List.append_eq", 2],["Fin.mul_def", 2],["Nat.pred_succ", 2],["not_lt_of_ge", 2],["Nat.min_zero", 2],["Nat.le_of_dvd", 2],["Nat.repr", 2],["Nat.zero_mul", 2],["if_false", 2],["Nat.Linear.Poly.isNonZero", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.coprime_iff_gcd_eq_one", 2],["ULift.down", 2],["decide_eq_true_eq", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["List.concat_eq_append", 2],["Or.inl", 2],["eq_false_of_decide", 2],["List.card_cons_of_mem", 2],["ne_eq", 2],["Array.swap", 2],["ForInStep.done", 2],["Nat.dvd_lcm_left", 2],["Fin.add_def", 2],["Nat.succ_lt_succ", 2],["Nat.lcm_zero_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.succ_add", 2],["Nat.min_succ_succ", 2],["BinaryHeap.max", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.le.refl", 2],["List.length_pos_of_ne_nil", 2],["Bool.and_true", 2],["or", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["if_true", 2],["List.card_cons_of_not_mem", 2],["Coe.mk", 2],["List.get?_len_le", 2],["Nat.zero_mod", 2],["False", 2],["Int.eq_ofNat_of_zero_le", 2],["Fin.ofNat'", 2],["Nat.Linear.Poly.of_isZero", 2],["List.get?_set_ne", 2],["BinaryHeap.size", 2],["Nat.left_distrib", 2],["WellFoundedRelation.mk", 2],["Nat.coprime.gcd_left", 2],["Nat.mul_assoc", 2],["Nat.div_mul_cancel", 2],["le_of_not_lt", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["MProd.fst", 2],["Bool.and_eq_true", 2],["max", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["UFModel.Models.size_eq", 2],["List.insert_of_mem", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Fin.eq_of_val_eq", 2],["Nat.gcd_mul_right", 2],["RandomGen.range", 2],["UInt8.val", 2],["congr_arg", 1],["List.get_of_mem", 1],["Bool.and_self", 1],["UFModel.Models.push", 1],["BoundedRandom.mk", 1],["Nat.isValidChar", 1],["SeqRight.seqRight", 1],["UFModel.Agrees.size_eq", 1],["List.union_equiv_append", 1],["Array.get?_set_ne", 1],["Nat.max", 1],["Mathlib.Tactic.Sat.Parser.parseInts", 1],["Nat.succ_sub_succ_eq_sub", 1],["USize.val", 1],["List.remove", 1],["Nat.coprime.gcd_both", 1],["ToString.mk", 1],["Nat.log2.proof_1", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Int.subNatNat_of_sub_eq_succ", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.pred_lt", 1],["Nat.Linear.Poly.denote_fuse", 1],["Array.get?_push_lt", 1],["Nat.Linear.Poly.combine", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.Up", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Substring.next", 1],["Array.isEqvAux.proof_1", 1],["Nat.Linear.Poly.fuse", 1],["Array.findIdx?.loop.proof_1", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Array.mk.sizeOf_spec", 1],["Substring.prev", 1],["Nat.succ_pred_eq_of_pos", 1],["Nat.pos_iff_ne_zero", 1],["Tactic.NormCast.countCoes", 1],["List.get?_append_right", 1],["liftM", 1],["LT.mk", 1],["Nat.add_le_add_left", 1],["List.erase_eq_erasep", 1],["Nat.succ_ne_zero", 1],["List.inj_on", 1],["Int.subNatNat", 1],["Int.one_mul", 1],["Fin.nsmuls_eq", 1],["ByteSliceT.off", 1],["Nat.gcd_div", 1],["Inhabited.mk", 1],["UnionFind.rank_lt", 1],["UInt64.ofNat", 1],["Tactic.Ring.RingM", 1],["USize.modn", 1],["Bool.or_eq_true", 1],["Option.map_some'", 1],["Int.le_refl", 1],["List.eq_of_mem_repeat'", 1],["List.length_replicate", 1],["Sigma", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["WellFounded.fix_eq", 1],["List.length_dropLast", 1],["Nat.shiftLeft", 1],["Nat.instLawfulBEqNatInstBEqNat.proof_1", 1],["HPow.hPow", 1],["Nat.mul_pred_left", 1],["BEq.mk", 1],["Nat.coprime.coprime_mul_right", 1],["RandomGen.next", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Nat.Linear.Expr.mulL", 1],["Mathlib.Tactic.Sat.buildClause", 1],["List.card_eq_of_equiv", 1],["Array.findIdx?", 1],["List.card_append_disjoint", 1],["and_self", 1],["Nat.pred_zero", 1],["List.toArray_data", 1],["or_true", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["UnionFind.lt_rankMax'", 1],["Pow.mk", 1],["Nat.lt_add_right", 1],["Stream.mk", 1],["List.cons.sizeOf_spec", 1],["zero_lt_of_lt", 1],["Nat.pow", 1],["Array.getOp", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.add_sub_cancel", 1],["Substring.foldl", 1],["inferInstance", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.gcd_mul_lcm", 1],["List.length_erasep_of_mem", 1],["UFModel.push", 1],["Nat.Linear.Expr.toNormPoly", 1],["UnionFind.rankMaxAux.proof_2", 1],["Mathlib.Tactic.Sat.buildConj", 1],["Nat.mul_dvd_mul_left", 1],["List.replicate", 1],["Fin.ext", 1],["Nat.add_mod_mod", 1],["List.countp", 1],["List.not_mem_nil", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["List.card_le_card_cons", 1],["bne", 1],["List.modifyHead", 1],["Nat.sub_add_eq_max", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.lt_of_lt_of_eq", 1],["Fin.one_val", 1],["Nat.xor", 1],["Nat.Linear.Expr.of_cancel_le", 1],["le_of_lt", 1],["Xor.mk", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.le_succ_of_le", 1],["Nat.lt_irrefl", 1],["Mathlib.Tactic.Sat.buildProof", 1],["List.length_concat", 1],["Nat.pred_le", 1],["List.length_take", 1],["trivial", 1],["List.get_append_right_aux", 1],["Nat.gcd_gcd_self_right_right", 1],["Int.ofNat_zero_le", 1],["Subsingleton.allEq", 1],["ByteSliceT.arr", 1],["List.map₂", 1],["le_trans", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["True.intro", 1],["Array.toArrayLit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Int.eq_zero_ofNatAbs_eq_zero", 1],["UInt16.val", 1],["Nat.le_of_lt_succ", 1],["Nat.Linear.Expr.inc", 1],["CoeTail.mk", 1],["UInt32.ofNat", 1],["AndOp.mk", 1],["Tactic.Ring.State.atoms", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.get?_push_eq", 1],["Monoid.npow", 1],["UnionFind.findAux", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["MonoidWithZero.zero_mul", 1],["Nat.fold", 1],["UInt64.modn", 1],["Nat.not_eq_zero_of_lt", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["UnionFind.rankMax", 1],["Nat.gcd_gcd_self_left_right", 1],["Or.elim", 1],["SizeOf.mk", 1],["Array.isEmpty", 1],["Nat.zero_div", 1],["StdGen", 1],["UnionFind.rankMaxAux.proof_1", 1],["false_implies", 1],["Tactic.Ring.State.numAtoms", 1],["Bool", 1],["Or.resolve_left", 1],["Array.isEqvAux_self", 1],["Sub.mk", 1],["Nat.coprime_comm", 1],["unsafeCast", 1],["GE.ge", 1],["Nat.sub_lt_sub_left", 1],["Fin.elim0", 1],["Functor.map", 1],["Nat.gcd_mul_left", 1],["Fin.ofNat'_succ", 1],["Nat.eq_of_beq_eq_true", 1],["Nat.one_pos", 1],["Random.rand", 1],["Nat.mul_dvd_mul_right", 1],["Nat.mod_self", 1],["mt", 1],["List.length_map", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Ne", 1],["Nat.add_le_add_right", 1],["Add.mk", 1],["List.take", 1],["List.card_subset_le", 1],["Int.pow", 1],["modify", 1],["Array.indexOfAux.proof_2", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.modifyNthTail_length", 1],["List.toArrayAux_data", 1],["List.ne_nil_of_length_pos", 1],["StdGen.mk", 1],["Bool.and_false", 1],["UnionFind.lt_rankMax", 1],["List.get?_set_of_lt", 1],["Fin", 1],["List.getLast_eq_get", 1],["Nat.div", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Nat.lt_wfRel.proof_1", 1],["List.findIdx", 1],["Nat.find_x", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["Nat.Up.WF", 1],["List.length_add_eq_lengthTRAux", 1],["Fin.modn", 1],["Array.isEqvAux.proof_3", 1],["List.exists_of_mem_map", 1],["Nat.mul_mod", 1],["List.eq_nil_of_length_eq_zero", 1],["System.Platform.numBits", 1],["ShiftRight.mk", 1],["SeqLeft.seqLeft", 1],["Decidable.of_not_not", 1],["UInt16.modn", 1],["le_antisymm", 1],["Nat.beq", 1],["UFModel.Models.empty", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Mul.mk", 1],["List.erase", 1],["Substring.isNat", 1],["Trans.trans", 1],["Nat.lt_of_succ_lt_succ", 1],["CommSemiring.mk", 1],["Nat.mod", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["of_decide_eq_false", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["List.get?_append", 1],["BinaryHeap.size_heapifyUp", 1],["min_self", 1],["Nat.succ.injEq", 1],["Array.isEqv", 1],["Div.mk", 1],["Nat.mod_add_mod", 1],["Nat.decEq", 1],["UFModel.rank", 1],["LE.mk", 1],["Fin.mk.injEq", 1],["Classical.byContradiction", 1],["Nat.Linear.Poly.norm", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Nat.sub_pos_of_lt", 1],["UInt32.modn", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Dvd.mk", 1],["Array.indexOfAux", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Random.instBoundedRandomNatToPreorderToPartialOrderInstLinearOrderNat.proof_1", 1],["Nat.dvd_lcm_right", 1],["PSigma", 1],["OrOp.mk", 1],["List.equiv_iff_subset_and_subset", 1],["List.exists_mem_of_length_pos", 1],["Nat.land", 1],["Array.toListLitAux", 1],["Nat.Linear.Poly.mul", 1],["List.mem_cons_self", 1],["flip", 1],["Or.inr", 1],["Int.eq_natAbs_of_zero_le", 1],["List.modifyNthTail", 1],["List.get?_set_eq", 1],["List.length_singleton", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.to_digits_core_length", 1],["UFModel.rank_lt", 1],["ShiftLeft.mk", 1],["Int.sign", 1],["Nat.succ_le_succ", 1],["List.mem_cons_of_mem", 1],["Nat.div_zero", 1],["Array.pop", 1],["Nat.coprime.coprime_div_left", 1],["Nat.le_antisymm", 1],["BinaryHeap.mkHeap", 1],["Array.size_pop", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["LawfulBEq.mk", 1],["List.union", 1],["CoeHTCT.mk", 1],["Nat.Linear.Poly.denote_combine", 1],["Int.neg_eq_neg_one_mul", 1],["List.rangeAux", 1],["Mod.mk", 1],["Array.get_eq_get", 1],["Nat.coprime_one_left", 1],["List.lengthTRAux", 1],["Array.get?_eq_get", 1],["List.enumFrom", 1],["Fin.zero_def", 1],["Int.natAbs_of_nonneg", 1],["min_le_left", 1],["Mathlib.Tactic.Sat.Parser.parseNat", 1],["List.length_pos_of_mem", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.gcd_mul_right_left", 1],["compareOfLessAndEq", 1],["Nat.div_le_self", 1],["Nat.lt_succ_of_le", 1],["Nat.dvd_zero", 1],["Option.some.injEq", 1],["Decidable.isFalse", 1],["Option.map", 1],["BinaryHeap.popMaxAux", 1],["Nat.add_le_add", 1],["ULift.up", 1],["Nat.beq_refl", 1],["System.Platform.getNumBits", 1],["Nat.lor", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["List.getLast_cons", 1],["List.redLength", 1],["Nat.mul_mod_mul_left", 1],["List.exists_of_erasep", 1],["RandG", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["UFModel.Agrees.empty", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.findIdxs", 1],["le_total", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.Linear.Poly.sort", 1],["UInt64.val", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.gcd.proof_1", 1],["Nat.exists_coprime", 1],["Nat.add_mul_mod_self_right", 1],["Nat.le", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Nat.eq_one_of_dvd_one", 1],["Hashable.mk", 1],["UInt8.toChar_aux", 1],["Nat.add_sub_add_right", 1],["Nat.mul_dvd_mul", 1],["Nat.shiftRight", 1],["Nat.coprime.pow_right", 1],["LinearOrder.mk", 1],["Int.neg_nonneg_of_nonpos", 1],["implies_true", 1],["BinaryHeap.heapifyUp", 1],["UFModel.empty", 1],["Array.indexOfAux.proof_1", 1],["List.removeNth", 1],["List.concat", 1],["Tactic.Ring.State.mk", 1],["Int.neg_succ_lt_zero", 1],["Nat.div_eq", 1],["Nat.mod_one", 1],["Nat.right_distrib", 1],["Nat.gcd_self", 1],["Nat.lcm_one_left", 1],["Array.eraseIdxSzAux", 1],["Ord.mk", 1],["Array.ext'", 1],["Option.map_eq_map", 1],["OfNat.mk", 1],["Nat.sub_lt_left_of_lt_add", 1],["MonadStateOf.set", 1],["List.length_eq_zero", 1],["UInt8.modn", 1],["Int.natAbs_neg", 1],["Tactic.NormCast.countHeadCoes", 1],["ReprAtom.mk", 1],["Nat.succ_sub_succ", 1],["UFModel.Agrees.mk'", 1],["Nat.gcd_gcd_self_right_left", 1],["List.get_singleton", 1],["List.length_repeat'", 1],["Nat.lcm_dvd", 1],["BinaryHeap.insert.proof_1", 1],["Nat.le_total", 1]]],
["PUnit.unit", 572, [["Eq.refl", 245],["Eq", 221],["rfl", 190],["congrArg", 158],["Eq.trans", 150],["Eq.symm", 142],["of_eq_true", 133],["Eq.mpr", 131],["congrFun", 124],["OfNat.ofNat", 122],["eq_self", 110],["congr", 93],["Bool.true", 80],["HAdd.hAdd", 66],["List.cons", 61],["HMul.hMul", 51],["List.nil", 49],["Fin.mk", 46],["LT.lt", 43],["List.length", 42],["Unit.unit", 38],["Nat.succ", 37],["PProd.fst", 35],["Iff.intro", 35],["Fin.val", 35],["Nat.gcd", 35],["Array.size", 34],["eq_true_of_decide", 34],["HEq.refl", 30],["propext", 29],["HAppend.hAppend", 28],["eq_false", 28],["HSub.hSub", 27],["Eq.mp", 27],["Membership.mem", 27],["Option.some", 25],["Iff", 24],["eq_true", 23],["Nat.add_comm", 22],["Classical.em", 22],["Nat.Linear.Poly.denote", 22],["HMod.hMod", 22],["Nat.add", 21],["Decidable.em", 20],["And.intro", 20],["Nat.add_eq", 20],["Not", 20],["iff_self", 20],["Exists.intro", 19],["eq_of_heq", 19],["List.length_cons", 18],["LE.le", 18],["Prod.mk", 18],["funext", 18],["And", 17],["cond", 17],["Bool.false", 17],["Nat.Linear.Var.denote", 16],["Nat.lt_of_lt_of_le", 16],["Nat.gcd_dvd_right", 16],["Nat.zero_add", 16],["Nat.mul_eq", 16],["List.get?", 15],["cond_true", 15],["Nat.lt_succ_self", 15],["List.map", 15],["List.get", 15],["False", 15],["True", 14],["Or", 14],["Array.get", 14],["cond_false", 13],["implies_congr", 13],["Bool.of_not_eq_true", 13],["of_decide_eq_true", 13],["Option.none", 13],["Nat.mod_lt", 13],["Nat.le_refl", 13],["False.elim", 12],["Exists", 12],["Fin.isLt", 12],["And.left", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_false_of_decide", 11],["Nat.dvd_gcd", 11],["Array.data", 10],["absurd", 10],["Nat.pred", 10],["List.nil_append", 10],["List.erase", 10],["List.card", 10],["List.not_mem_nil", 10],["BinaryHeap.arr", 10],["And.right", 9],["Nat.le_of_succ_le_succ", 9],["Int.ofNat", 9],["Subsingleton.elim", 9],["Nat.mul_comm", 9],["List.erasep", 9],["Nat.dvd_antisymm", 9],["Or.inl", 8],["HDiv.hDiv", 8],["Subtype.property", 8],["Nat.add_assoc", 8],["List.cons_append", 8],["id", 8],["BEq.beq", 8],["Nat.add_left_comm", 8],["Iff.mpr", 8],["List.mem_cons", 8],["Fin.size_positive", 8],["List.length_nil", 8],["ite_congr", 8],["List.set", 7],["if_neg", 7],["Nat.add_zero", 7],["Nat.zero_eq", 7],["UnionFind.arr", 7],["Nat.gcd_zero_left", 7],["Or.inr", 7],["List.get?_eq_get", 7],["Nat.Linear.Poly.denote_le", 7],["Nat.zero", 7],["Array.size_set", 7],["eq_false'", 7],["Dvd.dvd", 7],["if_pos", 7],["Int.negSucc", 6],["List.erase_eq_erasep", 6],["dite_congr", 6],["UnionFind.size", 6],["List.erasep_cons_of_neg", 6],["Int.subNatNat", 6],["Nat.blt", 6],["Nat.Linear.Poly.denote_eq", 6],["Iff.mp", 6],["dite", 6],["ite", 6],["List.reverse", 6],["ne_eq", 6],["List.append_nil", 6],["false_and", 6],["Int.negOfNat", 6],["WellFounded.fix", 6],["Nat.Linear.Poly", 5],["List.Mem.head", 5],["Functor.map", 5],["Decidable.decide", 5],["List.insert", 5],["Nat.gcd_rec", 5],["Nat.coprime.symm", 5],["Nat.Linear.Expr.denote", 5],["Fin.val_eq_of_lt", 5],["Nat.le_of_lt", 5],["Nat.mul_one", 5],["List.length_append", 5],["Eq.mpr_prop", 5],["List.repeat'", 5],["Subtype.mk", 5],["Nat.dvd_trans", 5],["Ne.symm", 5],["eq_of_beq", 5],["List", 5],["Bool", 5],["dif_pos", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.dvd_mul_left", 5],["Nat.coprime", 5],["Nat.sub_lt", 5],["congr_arg", 4],["Nat.lt_trans", 4],["Nat.dvd_mul_right", 4],["List.card_nil", 4],["Nat.eq_zero_or_pos", 4],["Nat.Linear.Expr.var", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["Nat.Linear.fixedVar", 4],["beq_self_eq_true", 4],["PSigma.mk", 4],["Nat.lcm", 4],["Array.mk", 4],["Option", 4],["and", 4],["Nat.Linear.Expr.num", 4],["Array.get?_eq_get?", 4],["BinaryHeap.heapifyDown", 4],["Nat.Linear.Expr.add", 4],["Prod", 4],["Nat.coprime.coprime_dvd_left", 4],["Array.push", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["UFNode.rank", 4],["Nat.zero_sub", 4],["List.erasep_cons_of_pos", 4],["List.reverse_cons", 4],["Option.isSome_some", 4],["Nat.sub_eq", 4],["Nat.lt_of_le_of_lt", 4],["Int.sign", 4],["dif_neg", 4],["Nat.Linear.Poly.cancelAux", 4],["dite_true", 4],["Nat.mul_zero", 3],["Fin.size_positive'", 3],["Nat.one_mul", 3],["Nat.le_add_right", 3],["List.mem_map", 3],["Nat.Linear.Expr.toPoly", 3],["UFNode.parent", 3],["Nat.zero_mul", 3],["Option.isSome_none", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_zero_right", 3],["Nat.zero_lt_of_lt", 3],["Nat.sub_le", 3],["Nat.gcd.induction", 3],["FloatArray.size", 3],["le_refl", 3],["List.append", 3],["UFModel.Agrees.get_eq", 3],["Nat.zero_lt_succ", 3],["Nat.succ_pos", 3],["List.remove", 3],["Array.get?", 3],["ByteArray.size", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.lt_eq", 3],["List.Mem.tail", 3],["Ne", 3],["Fin", 3],["Array.set", 3],["List.List.append_eq", 3],["exists_false", 3],["Nat.le_trans", 3],["Nat.coprime.coprime_dvd_right", 3],["WellFoundedRelation.rel", 3],["Nat.Linear.Var.denote.go", 3],["decide_eq_false", 3],["Nat.dvd_refl", 3],["List.mem_append", 3],["Nat.lcm_comm", 3],["sorryAx", 3],["Option.some.inj", 3],["UnionFind.model'", 3],["Nat.mul", 3],["Nat.le_succ", 3],["List.reverse_nil", 3],["Subtype", 3],["sizeOf_nat", 3],["List.drop", 3],["Int.ofNat_zero", 3],["Nat.succ_add", 3],["Nat.Linear.hugeFuel", 3],["decide_eq_true_eq", 3],["List.modifyNth", 3],["and_imp", 3],["Nat.toDigitsCore", 3],["Nat.gcd_one_left", 3],["Nat.digitChar", 3],["if_false", 3],["List.erase_cons", 3],["Option.some.injEq", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Array.size_push", 3],["List.length_set", 3],["Fin.ofNat'", 3],["List.exists_of_erasep", 3],["Nat.ble", 3],["Nat.lt_of_succ_le", 3],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["List.cons_bind", 2],["Nat.le.refl", 2],["List.mem_bind", 2],["Nat.coprime.pow_left", 2],["List.mem_cons_of_mem", 2],["false_or", 2],["Nat.ble_eq_true_of_le", 2],["usize_size_eq", 2],["Bool.and_true", 2],["List.erasep_cons", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.not_le_eq", 2],["List.join", 2],["forall_congr", 2],["instNonempty", 2],["le_of_not_lt", 2],["USize.size", 2],["Option.some_inj", 2],["Nat.gcd_one_right", 2],["Nat.mod_eq_of_lt", 2],["Fin.mul_def", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.sub_succ_lt_self", 2],["UnionFind.rankMaxAux", 2],["ite_true", 2],["Array.swap", 2],["Iff.rfl", 2],["Nat.pred_succ", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.min_zero", 2],["Nat.le_of_dvd", 2],["BinaryHeap.size_pos_of_max", 2],["decide_eq_true_iff", 2],["Nat.le_of_succ_le", 2],["Fin.eq_of_val_eq", 2],["mt", 2],["Nat.succ_mul", 2],["SizeOf.sizeOf", 2],["List.insert_of_not_mem", 2],["Nat.lt_succ_iff", 2],["Nat.mul_assoc", 2],["UFModel.Models", 2],["Nat.Linear.Poly.isNonZero", 2],["List.exists_or_eq_self_of_erasep", 2],["Array.size_pop", 2],["max", 2],["Nat.le_of_ble_eq_true", 2],["Nat.sub_self", 2],["Function.comp_apply", 2],["Nat.gcd_mul_right", 2],["dite_false", 2],["Nat.zero_le", 2],["List.modifyNthTail", 2],["UFModel.Models.parent_eq'", 2],["Fin.add_def", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Bool.and_eq_true", 2],["List.get?_modifyNth", 2],["UFNode.mk", 2],["Nat.coprime.gcd_left", 2],["PUnit.unit", 2],["Array.size_swap", 2],["Array.pop", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.succ_ne_zero", 2],["List.concat_eq_append", 2],["Nat.zero_min", 2],["Nat.min_succ_succ", 2],["Int.subNatNat_elim", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Int.subNatNat_of_sub_eq_zero", 2],["Nat.coprime.mul", 2],["if_true", 2],["Nat.Linear.Poly.isZero", 2],["List.get?_set_ne", 2],["Int.mul_comm", 2],["List.insert_of_mem", 2],["Function.comp", 2],["List.get?_len_le", 2],["UFModel.Models.size_eq", 2],["Nat.Linear.Poly.insertSorted", 2],["List.forall_mem_cons", 2],["Nat.gcd_mul_left_left", 2],["Nat.Linear.Poly.of_isZero", 2],["min", 2],["List.get_mem", 2],["List.removeNth", 2],["BinaryHeap.size", 2],["Nat.dvd_lcm_left", 2],["implies_true", 2],["Nat.Linear.monomialToExpr", 2],["List.card_cons_of_mem", 2],["true_and", 2],["List.toArray", 2],["List.getLast", 2],["List.exists_of_mem_map", 2],["UFModel.Models.rank_eq", 2],["Nat.left_distrib", 2],["List.length_pos_of_ne_nil", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.coprime_iff_gcd_eq_one", 2],["UFModel.parent", 2],["Nat.dvd_mod_iff", 2],["Nat.Linear.Poly.denote_sort_go", 2],["UFModel.Models.parent_eq", 2],["Nat.lcm_zero_left", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["BinaryHeap.max", 2],["Nat.Linear.denote_monomialToExpr", 2],["List.mem_join", 2],["List.bind", 2],["Neg.neg", 2],["Option.map", 2],["Nat.div_mul_cancel", 2],["Nat.not_lt_eq", 2],["or_false", 2],["List.card_cons_of_not_mem", 2],["List.cons_ne_nil", 2],["Subtype.val", 2],["Nat.zero_mod", 2],["List.append_assoc", 2],["List.cons.sizeOf_spec", 1],["Nat.mul_pred_left", 1],["Array.get?_push_lt", 1],["exists_eq'", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Option.getD", 1],["beq_self_eq_true'", 1],["Int.sign_zero", 1],["Option.lift_or_get", 1],["List.length_replicate", 1],["Nat.Linear.Expr.toNormPoly", 1],["Option.get", 1],["unsafeCast", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["UnionFind.rankMax", 1],["GT.gt", 1],["List.erasep_append_right", 1],["Nat.pos_iff_ne_zero", 1],["Int.one_mul", 1],["List.erasep_subset", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["List.nil_union", 1],["Int.ofNat_sub", 1],["Int.ofNat_mul_negOfNat", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["UnionFind.rankMaxAux.proof_1", 1],["UFModel.push", 1],["Array.isEqvAux_self", 1],["Or.resolve_left", 1],["Fin.elim0", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.sub_lt_sub_left", 1],["List.equiv_iff_subset_and_subset", 1],["Nat.one_pos", 1],["zero_lt_of_lt", 1],["Int.eq_neg_succ_of_lt_zero", 1],["Nat.lt_of_lt_of_eq", 1],["Int.sub_nat_self", 1],["Nat.add_sub_cancel", 1],["Tactic.NormCast.Label.elim", 1],["Nat.eq_of_beq_eq_true", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.succ_pred_eq_of_pos", 1],["Nat.ble_self_eq_true", 1],["List.inj_on", 1],["Classical.choice", 1],["List.eq_of_mem_repeat'", 1],["Nat.Linear.Certificate.combineHyps", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["List.mem_insert_iff", 1],["eq_comm", 1],["Int.add_left_comm", 1],["Int.add_zero", 1],["List.erasep_append_left", 1],["List.length_map", 1],["Nat.add_le_add_right", 1],["Decidable.isTrue", 1],["List.modifyNthTail_length", 1],["and_self", 1],["Nat.mod_self", 1],["Bool.and_false", 1],["min_self", 1],["List.card_append_disjoint", 1],["List.elem", 1],["Nat.lt_of_succ_lt_succ", 1],["Trans.trans", 1],["Decidable.of_not_not", 1],["List.filterAux", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["PSigma", 1],["Nat.ble_succ_eq_true", 1],["decide_eq_true", 1],["Nat.to_digits_core_length", 1],["Pure.pure", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List.getLast_cons", 1],["Option.map_eq_map", 1],["id_eq", 1],["List.elem_eq_true_of_mem", 1],["Fin.one_val", 1],["Nat.lcm_dvd", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["not_or", 1],["Array.get?_set_ne", 1],["List.take", 1],["USize.size_positive", 1],["Nat.Linear.Poly.combine", 1],["Nat.mod_eq_zero_of_dvd", 1],["Option.isSome", 1],["Nat.Linear.Expr.inc", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Option.map_some'", 1],["UnionFind.lt_rankMax", 1],["Nat.le_of_not_lt", 1],["Nat.pred_lt'", 1],["le_of_lt", 1],["Int.add_right_neg", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["Nat.succ.inj", 1],["Prod.mk.injEq", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Nat.Linear.Expr.mulL", 1],["List.get_cons_zero", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Bool.not_true", 1],["Nat.Linear.PolyCnstr.denote", 1],["Nat.le_of_lt_succ", 1],["Nat.gcd_mul_lcm", 1],["Array.isEqvAux.proof_3", 1],["Fin.ext", 1],["List.replicate", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["List.card_le_card_cons", 1],["Nat.Linear.Expr.of_cancel_le", 1],["MonoidWithZero.zero_mul", 1],["Nat.succ_lt_succ", 1],["List.foldr", 1],["Nat.Linear.Poly.combineAux", 1],["UInt32.val", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.zero_div", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.gcd_gcd_self_left_right", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["Nat.div_self", 1],["Nat.not_lt_of_le", 1],["Int.sign_eq_neg_one_of_neg", 1],["Option.isNone_some", 1],["instDecidableEqNat", 1],["true_implies", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["Nat.mod_one", 1],["WellFounded.fix_eq", 1],["Nat.cast", 1],["Nat.Linear.Poly.denote_fuse", 1],["UInt8.val", 1],["UInt32.val_eq_of_lt", 1],["Array.indexOfAux.proof_2", 1],["Nat", 1],["Nat.coprime_comm", 1],["Nat.succ.injEq", 1],["Int.zero_mul", 1],["Int.eq_zero_of_sign_eq_zero", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Array.indexOfAux", 1],["Nat.Linear.PolyCnstr.denote_mul", 1],["Nat.Linear.Poly.denote_combineAux", 1],["List.mem_cons_self", 1],["List.modifyHead", 1],["Array.isEqv", 1],["Fin.ofNat'_succ", 1],["List.length_dropLast", 1],["Nat.gcd_mul_left", 1],["Nat.succ_le_succ", 1],["not_false_iff", 1],["min_le_left", 1],["Bool.not_false", 1],["UFModel.rank", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Array.get_eq_get", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.div_le_self", 1],["exists_imp_distrib", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.dvd_lcm_right", 1],["List.toArrayAux_data", 1],["Nat.lt_irrefl", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["toBoolUsing_eq_true", 1],["Array.indexOfAux.proof_1", 1],["Nat.sub_add_cancel", 1],["List.erasep_of_forall_not", 1],["Nat.mul_mod_mul_left", 1],["Array.ext'", 1],["Array.eraseIdxSzAux", 1],["List.get?_append", 1],["List.get?_set_of_lt", 1],["List.mapTRAux", 1],["List.length_eq_zero", 1],["UFModel.Models.empty", 1],["trivial", 1],["Nat.isValidChar", 1],["Nat.pred_le", 1],["List.union_equiv_append", 1],["not", 1],["Nat.coprime.gcd_both", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.get?_set_eq", 1],["List.length_add_eq_lengthTRAux", 1],["usize_size_gt_zero", 1],["Subset.subset", 1],["Nat.pred_lt", 1],["Nat.coprime.coprime_div_left", 1],["List.concat", 1],["Tactic.NormCast.Label.move", 1],["Classical.byContradiction", 1],["Int.sub_eq_add_neg", 1],["List.cons.injEq", 1],["List.map_cons", 1],["List.erase_cons_tail", 1],["Int.sign_eq_one_of_pos", 1],["Nat.add_le_add_left", 1],["or_iff_left_iff_imp", 1],["Nat.succ_sub_succ", 1],["NeqIffBeqFalse", 1],["Nat.gcd_self", 1],["Nat.Linear.ExprCnstr.denote_toNormPoly", 1],["Inhabited.mk", 1],["Bind.bind", 1],["PUnit.subsingleton", 1],["Bool.or_eq_true", 1],["List.mem_union_iff", 1],["Nat.Linear.Poly.denote_combine", 1],["List.union", 1],["Sigma", 1],["exists_eq_right_right'", 1],["List.eq_nil_of_length_eq_zero", 1],["List.length_singleton", 1],["Int.add_assoc", 1],["Nat.lt_add_right", 1],["Bool.and_self", 1],["Nat.pred_zero", 1],["List.toArray_data", 1],["Nat.pos_pow_of_pos", 1],["UnionFind.lt_rankMax'", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["List.cons_union", 1],["Nat.eq_zero_of_zero_dvd", 1],["Option.eq_none_of_isNone", 1],["List.length_erasep_of_mem", 1],["Nat.div_zero", 1],["not_and", 1],["Nat.Linear.PolyCnstr.mul", 1],["Fin.zero_def", 1],["List.forall_mem_of_forall_mem_cons", 1],["Nat.coprime.gcd_right", 1],["Nat.sub_add_eq_max", 1],["Nat.add_le_add", 1],["Nat.dvd_zero", 1],["System.Platform.getNumBits", 1],["List.length_pos_of_mem", 1],["Nat.gcd_mul_right_left", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.le_succ_of_le", 1],["List.length_take", 1],["List.length_concat", 1],["Nat.mul_div_cancel_left", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["List.map₂", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.lt_succ_of_le", 1],["or", 1],["BinaryHeap.popMaxAux", 1],["EqIffBeqTrue", 1],["UFModel.Agrees.size_eq", 1],["Array.toArrayLit", 1],["Nat.coprime.coprime_mul_right", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Array.eraseIdx'.proof_1", 1],["UInt32.ofNat", 1],["Int.neg_of_sign_eq_neg_one", 1],["List.map_append", 1],["Array.get?_push_eq", 1],["True.intro", 1],["Int.eq_succ_of_zero_lt", 1],["not_le", 1],["List.erase_cons_head", 1],["Nat.coprime.pow_right", 1],["Nat.not_eq_zero_of_lt", 1],["or_assoc", 1],["not_lt", 1],["List.redLength", 1],["id_map'", 1],["Int.pos_of_sign_eq_one", 1],["Int.subNatNat_add_right", 1],["false_implies", 1],["Int.zero_add", 1],["UFModel.Agrees.empty", 1],["List.mem_erasep_of_neg", 1],["List.mem_map_of_mem", 1],["Int.ofNat_add", 1],["UFModel.Agrees.mk'", 1],["Nat.mul_dvd_mul_right", 1],["List.get_of_mem", 1],["List.card_subset_le", 1],["Int.natAbs", 1],["UFModel.Models.push", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.ne_nil_of_length_pos", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["imp_self", 1],["false_iff", 1],["Nonempty", 1],["Nat.succ_sub_succ_eq_sub", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.mul_mod", 1],["List.get_append_right_aux", 1],["System.Platform.numBits", 1],["ite_false", 1],["le_antisymm", 1],["Nat.beq", 1],["not_exists", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Or.elim", 1],["Fin.mk.injEq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["BinaryHeap.heapifyUp", 1],["List.mem_of_elem_eq_true", 1],["List.mapTRAux_eq", 1],["List.mem_of_ne_of_mem", 1],["UnionFind.findAux", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.right_distrib", 1],["List.exists_mem_of_length_pos", 1],["Int.neg_add", 1],["Array.toListLitAux", 1],["List.mem_of_mem_erasep", 1],["List.mem_filterAux", 1],["List.card_eq_of_equiv", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["List.mem_filter", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_div", 1],["Tactic.NormCast.Label.squash", 1],["Nat.lcm_one_left", 1],["BinaryHeap.mkHeap", 1],["Nat.le_antisymm", 1],["Option.mem_def", 1],["Int.negSucc_ofNat_coe", 1],["Array.getLit", 1],["Int.neg_eq_neg_one_mul", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Int.subNatNat_add_left", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Option.isNone_none", 1],["Int.subNatNat_add_add", 1],["Nat.lt_of_not_le", 1],["Nat.sub_lt_left_of_lt_add", 1],["Array.isEqvAux.proof_1", 1],["or_true", 1],["List.mem_reverse", 1],["Decidable.isFalse", 1],["Nat.beq_refl", 1],["Nat.Linear.ExprCnstr.toNormPoly", 1],["List.subset.refl", 1],["Nat.Linear.Certificate.of_combineHyps", 1],["Nat.not_le_of_lt", 1],["List.length_repeat'", 1],["Sat.Fmla.subsumes.prop", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get_singleton", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["Nat.exists_coprime", 1],["Nat.add_sub_add_right", 1],["Nonempty.intro", 1],["UInt8.toChar_aux", 1],["LawfulBEq.rfl", 1],["Array.mkEmpty", 1],["Nat.gcd_gcd_self_right_left", 1],["Subsingleton.allEq", 1],["UFModel.empty", 1],["bind_pure", 1],["List.tail", 1],["Nat.sub_pos_of_lt", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Int.subNatNat_of_sub_eq_succ", 1],["List.get?_append_right", 1],["Sat.Valuation.satisfies_fmla.prop", 1]]],
["Unit.unit", 564, [["Eq.refl", 243],["Eq", 220],["rfl", 184],["congrArg", 158],["Eq.trans", 150],["Eq.symm", 142],["of_eq_true", 133],["Eq.mpr", 130],["congrFun", 124],["OfNat.ofNat", 121],["eq_self", 110],["congr", 93],["Bool.true", 80],["HAdd.hAdd", 66],["List.cons", 61],["HMul.hMul", 51],["List.nil", 49],["Fin.mk", 46],["LT.lt", 43],["List.length", 42],["Unit.unit", 38],["Nat.succ", 37],["PProd.fst", 35],["Iff.intro", 35],["Fin.val", 35],["Nat.gcd", 35],["Array.size", 34],["eq_true_of_decide", 34],["HEq.refl", 30],["propext", 29],["HAppend.hAppend", 28],["eq_false", 28],["HSub.hSub", 27],["Eq.mp", 27],["Membership.mem", 27],["Option.some", 25],["Iff", 24],["eq_true", 23],["HMod.hMod", 22],["Classical.em", 22],["Nat.Linear.Poly.denote", 22],["Nat.add_comm", 22],["Nat.add", 21],["iff_self", 20],["Nat.add_eq", 20],["And.intro", 20],["Not", 20],["Decidable.em", 20],["Exists.intro", 19],["eq_of_heq", 19],["funext", 18],["Prod.mk", 18],["LE.le", 18],["List.length_cons", 18],["Bool.false", 17],["cond", 17],["And", 17],["Nat.gcd_dvd_right", 16],["Nat.zero_add", 16],["Nat.Linear.Var.denote", 16],["Nat.lt_of_lt_of_le", 16],["Nat.mul_eq", 16],["List.map", 15],["Nat.lt_succ_self", 15],["List.get?", 15],["List.get", 15],["False", 15],["cond_true", 15],["True", 14],["Or", 14],["Array.get", 14],["Nat.le_refl", 13],["Bool.of_not_eq_true", 13],["implies_congr", 13],["Option.none", 13],["Nat.mod_lt", 13],["of_decide_eq_true", 13],["cond_false", 13],["Exists", 12],["False.elim", 12],["Fin.isLt", 12],["eq_false_of_decide", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["And.left", 11],["Nat.dvd_gcd", 11],["List.erase", 10],["Nat.pred", 10],["List.not_mem_nil", 10],["absurd", 10],["List.card", 10],["BinaryHeap.arr", 10],["List.nil_append", 10],["Array.data", 10],["And.right", 9],["Subsingleton.elim", 9],["Int.ofNat", 9],["Nat.le_of_succ_le_succ", 9],["List.erasep", 9],["Nat.mul_comm", 9],["Nat.dvd_antisymm", 9],["List.cons_append", 8],["Nat.add_left_comm", 8],["Nat.add_assoc", 8],["Subtype.property", 8],["List.mem_cons", 8],["HDiv.hDiv", 8],["Iff.mpr", 8],["Fin.size_positive", 8],["id", 8],["List.length_nil", 8],["ite_congr", 8],["Or.inl", 8],["BEq.beq", 8],["List.set", 7],["Nat.add_zero", 7],["Array.size_set", 7],["UnionFind.arr", 7],["Nat.Linear.Poly.denote_le", 7],["Or.inr", 7],["Nat.gcd_zero_left", 7],["if_neg", 7],["Nat.zero", 7],["List.get?_eq_get", 7],["Dvd.dvd", 7],["Nat.zero_eq", 7],["eq_false'", 7],["if_pos", 7],["dite_congr", 6],["List.erase_eq_erasep", 6],["UnionFind.size", 6],["ite", 6],["dite", 6],["Int.subNatNat", 6],["List.reverse", 6],["Nat.blt", 6],["ne_eq", 6],["Nat.Linear.Poly.denote_eq", 6],["List.erasep_cons_of_neg", 6],["Int.negOfNat", 6],["Int.negSucc", 6],["false_and", 6],["List.append_nil", 6],["Iff.mp", 6],["WellFounded.fix", 6],["Subtype.mk", 5],["Nat.Linear.Expr.denote", 5],["Ne.symm", 5],["Bool", 5],["List.insert", 5],["Decidable.decide", 5],["Nat.dvd_trans", 5],["Nat.coprime", 5],["List.Mem.head", 5],["Nat.Linear.Poly", 5],["List.repeat'", 5],["Nat.gcd_rec", 5],["Nat.coprime.symm", 5],["Nat.Linear.Poly.denote_append", 5],["Functor.map", 5],["Nat.mul_one", 5],["Eq.mpr_prop", 5],["Fin.val_eq_of_lt", 5],["eq_of_beq", 5],["Nat.le_of_lt", 5],["dif_pos", 5],["Nat.dvd_mul_left", 5],["Nat.sub_lt", 5],["List", 5],["List.length_append", 5],["congr_arg", 4],["dif_neg", 4],["and", 4],["Nat.lt_of_le_of_lt", 4],["Nat.dvd_mul_right", 4],["Nat.Linear.Expr.num", 4],["Prod", 4],["Nat.sub_eq", 4],["Nat.Linear.Expr.var", 4],["Option.isSome_some", 4],["Nat.gcd_succ", 4],["Int.sign", 4],["Nat.Linear.Poly.cancelAux", 4],["PSigma.mk", 4],["Option", 4],["UFNode.rank", 4],["Nat.lcm", 4],["Array.get?_eq_get?", 4],["Nat.Linear.fixedVar", 4],["List.card_nil", 4],["Nat.gcd_dvd", 4],["Nat.zero_sub", 4],["beq_self_eq_true", 4],["Nat.Linear.Expr.add", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.eq_zero_or_pos", 4],["Array.push", 4],["Array.mk", 4],["Nat.lt_trans", 4],["BinaryHeap.heapifyDown", 4],["List.erasep_cons_of_pos", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["List.reverse_cons", 4],["dite_true", 4],["Nat.le_trans", 3],["exists_false", 3],["Nat.gcd.induction", 3],["List.erase_cons", 3],["FloatArray.size", 3],["le_refl", 3],["Option.isSome_none", 3],["UFModel.Agrees.get_eq", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_zero_right", 3],["Nat.succ_pos", 3],["List.length_set", 3],["Nat.Linear.Expr.toPoly", 3],["Array.get?", 3],["ByteArray.size", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.lt_eq", 3],["List.append", 3],["Nat.mul_zero", 3],["List.Mem.tail", 3],["Nat.zero_lt_succ", 3],["Ne", 3],["Fin", 3],["Array.set", 3],["List.List.append_eq", 3],["List.remove", 3],["Nat.ble", 3],["Nat.gcd_one_left", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.le_add_right", 3],["List.mem_map", 3],["WellFoundedRelation.rel", 3],["Nat.Linear.Var.denote.go", 3],["Fin.size_positive'", 3],["Nat.one_mul", 3],["Nat.Linear.hugeFuel", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["sorryAx", 3],["UFNode.parent", 3],["UnionFind.model'", 3],["Nat.mul", 3],["List.reverse_nil", 3],["List.mem_append", 3],["sizeOf_nat", 3],["List.drop", 3],["Int.ofNat_zero", 3],["if_false", 3],["Option.some.inj", 3],["Nat.succ_add", 3],["Nat.le_succ", 3],["Subtype", 3],["decide_eq_false", 3],["and_imp", 3],["Nat.zero_mul", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["List.modifyNth", 3],["decide_eq_true_eq", 3],["Option.some.injEq", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Array.size_push", 3],["Nat.zero_lt_of_lt", 3],["Fin.ofNat'", 3],["List.exists_of_erasep", 3],["Nat.lt_of_succ_le", 3],["Nat.sub_le", 3],["List.cons_ne_nil", 2],["Function.comp", 2],["Bool.and_true", 2],["List.mem_join", 2],["List.join", 2],["Nat.div_mul_cancel", 2],["instNonempty", 2],["Function.comp_apply", 2],["Nat.le_of_ble_eq_true", 2],["le_of_not_lt", 2],["List.modifyNthTail", 2],["Nat.Linear.Poly.denote_sort_go", 2],["List.removeNth", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.mod_eq_of_lt", 2],["Fin.add_def", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Array.pop", 2],["UFModel.Models.parent_eq", 2],["List.card_cons_of_mem", 2],["Nat.not_le_eq", 2],["Nat.min_succ_succ", 2],["List.mem_bind", 2],["Int.mul_comm", 2],["if_true", 2],["List.get?_len_le", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.Poly.of_isZero", 2],["Fin.eq_of_val_eq", 2],["mt", 2],["Nat.succ_mul", 2],["SizeOf.sizeOf", 2],["List.insert_of_not_mem", 2],["Nat.lt_succ_iff", 2],["Nat.left_distrib", 2],["UFModel.Models", 2],["Nat.Linear.Poly.isNonZero", 2],["List.exists_or_eq_self_of_erasep", 2],["Array.size_pop", 2],["max", 2],["BinaryHeap.size", 2],["Nat.sub_self", 2],["implies_true", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["List.toArray", 2],["Nat.zero_le", 2],["Nat.sub_succ_lt_self", 2],["UnionFind.rankMaxAux", 2],["Neg.neg", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Array.swap", 2],["List.get?_modifyNth", 2],["Option.some_inj", 2],["Nat.Linear.monomialToExpr", 2],["decide_eq_true_iff", 2],["Nat.coprime.gcd_left", 2],["Array.size_swap", 2],["Nat.succ_ne_zero", 2],["Nat.mul_assoc", 2],["ite_true", 2],["Nat.zero_min", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["Int.subNatNat_elim", 2],["Nat.Linear.Poly.denote_reverse", 2],["Int.subNatNat_of_sub_eq_zero", 2],["List.getLast", 2],["Nat.coprime.mul", 2],["dite_false", 2],["Nat.not_lt_eq", 2],["UFModel.parent", 2],["Iff.rfl", 2],["List.get?_set_ne", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.insert_of_mem", 2],["Nat.le_of_succ_le", 2],["or_false", 2],["UFModel.Models.size_eq", 2],["UFNode.mk", 2],["List.forall_mem_cons", 2],["Nat.gcd_mul_left_left", 2],["Subtype.val", 2],["min", 2],["List.get_mem", 2],["Nat.zero_mod", 2],["Nat.gcd_mul_right", 2],["Nat.pred_succ", 2],["Nat.min_zero", 2],["UFModel.Models.parent_eq'", 2],["Nat.le_of_dvd", 2],["Bool.and_eq_true", 2],["forall_congr", 2],["true_and", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.Linear.denote_monomialToExpr", 2],["List.concat_eq_append", 2],["List.exists_of_mem_map", 2],["UFModel.Models.rank_eq", 2],["Nat.dvd_lcm_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.le.refl", 2],["Nat.dvd_mod_iff", 2],["List.cons_bind", 2],["BinaryHeap.size_pos_of_max", 2],["List.mem_cons_of_mem", 2],["Nat.lcm_zero_left", 2],["false_or", 2],["BinaryHeap.max", 2],["Nat.coprime.pow_left", 2],["USize.size", 2],["List.length_pos_of_ne_nil", 2],["Nat.ble_eq_true_of_le", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Option.map", 2],["usize_size_eq", 2],["List.card_cons_of_not_mem", 2],["List.bind", 2],["Nat.Linear.Poly.isZero", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["List.erasep_cons", 2],["List.append_assoc", 2],["Nat.coprime.pow_right", 1],["Array.get_eq_get", 1],["Tactic.NormCast.Label.elim", 1],["Option.getD", 1],["beq_self_eq_true'", 1],["Int.sign_zero", 1],["Option.lift_or_get", 1],["List.length_replicate", 1],["Nat.Linear.Expr.toNormPoly", 1],["Option.get", 1],["unsafeCast", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["List.get_of_mem", 1],["GT.gt", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.mul_mod_mul_left", 1],["Int.one_mul", 1],["List.erasep_subset", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["List.nil_union", 1],["List.mapTRAux_eq", 1],["Nat.mod_one", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["UnionFind.findAux", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Option.isNone_none", 1],["UFModel.Models.push", 1],["Nat.succ_sub_succ", 1],["Subset.subset", 1],["UnionFind.rankMax", 1],["Int.eq_neg_succ_of_lt_zero", 1],["List.erasep_append_right", 1],["Int.sub_nat_self", 1],["eq_comm", 1],["UnionFind.rankMaxAux.proof_1", 1],["Or.resolve_left", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["UFModel.Agrees.size_eq", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["Option.map_some'", 1],["Nat.succ_pred_eq_of_pos", 1],["List.mem_of_elem_eq_true", 1],["List.inj_on", 1],["min_le_left", 1],["Nat.sub_lt_sub_left", 1],["Nat.Linear.Certificate.combineHyps", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["List.mem_insert_iff", 1],["Int.ofNat_sub", 1],["Nat.Linear.ExprCnstr.toNormPoly", 1],["Int.add_zero", 1],["List.mem_of_mem_erasep", 1],["List.get_append_right_aux", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.eq_of_beq_eq_true", 1],["List.modifyNthTail_length", 1],["Subsingleton.allEq", 1],["Nat.mod_self", 1],["Bool.and_false", 1],["Nat.gcd_gcd_self_right_right", 1],["exists_eq'", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.lt_of_succ_lt_succ", 1],["Trans.trans", 1],["Decidable.of_not_not", 1],["List.filterAux", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["PSigma", 1],["Nat.ble_succ_eq_true", 1],["Nat.pos_iff_ne_zero", 1],["Nat.to_digits_core_length", 1],["Int.ofNat_mul_negOfNat", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List.getLast_cons", 1],["Option.map_eq_map", 1],["id_eq", 1],["List.elem_eq_true_of_mem", 1],["Nat.gcd_self", 1],["Nat.lcm_dvd", 1],["or_iff_left_iff_imp", 1],["not_or", 1],["Array.get?_set_ne", 1],["List.length_map", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.combine", 1],["Nat.Linear.Expr.inc", 1],["Option.isSome", 1],["false_iff", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["List.take", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["WellFounded.fix_eq", 1],["Nat.le_of_not_lt", 1],["List.length_dropLast", 1],["Nat.mul_pred_left", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["Nat.succ.inj", 1],["Prod.mk.injEq", 1],["Nat.ble_self_eq_true", 1],["Nat.Linear.Expr.mulL", 1],["List.get_cons_zero", 1],["Classical.choice", 1],["UnionFind.lt_rankMax", 1],["Nat.Linear.PolyCnstr.denote", 1],["List.eq_of_mem_repeat'", 1],["Nat.gcd_mul_lcm", 1],["Nat.coprime.coprime_div_left", 1],["Fin.ext", 1],["List.replicate", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["List.card_le_card_cons", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Int.add_right_neg", 1],["Tactic.NormCast.Label.squash", 1],["List.foldr", 1],["Bool.not_true", 1],["Array.isEqvAux.proof_3", 1],["Int.add_left_comm", 1],["Nat.coprime.coprime_mul_right", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.gcd_gcd_self_left_right", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["Nat.div_self", 1],["Nat.not_lt_of_le", 1],["Int.sign_eq_neg_one_of_neg", 1],["Option.isNone_some", 1],["Nat.Linear.Poly.combineAux", 1],["Decidable.isTrue", 1],["Int.pos_of_sign_eq_one", 1],["and_self", 1],["instDecidableEqNat", 1],["true_implies", 1],["Nat.cast", 1],["List.getLast_singleton", 1],["UInt8.val", 1],["UFNode.value", 1],["Array.indexOfAux.proof_2", 1],["List.card_append_disjoint", 1],["List.elem", 1],["not_exists", 1],["decide_eq_true", 1],["Int.eq_zero_of_sign_eq_zero", 1],["List.card_eq_of_equiv", 1],["Fin.elim0", 1],["or_true", 1],["Array.indexOfAux", 1],["Nat.Linear.PolyCnstr.denote_mul", 1],["Nat.Linear.Poly.denote_combineAux", 1],["List.mem_cons_self", 1],["Nat.succ.injEq", 1],["not_lt_of_ge", 1],["Fin.one_val", 1],["BinaryHeap.size_heapifyUp", 1],["UFModel.push", 1],["Nat.succ_le_succ", 1],["not_false_iff", 1],["Nat.mod_add_mod", 1],["Bool.not_false", 1],["Nat.gcd_div", 1],["Array.isEqv", 1],["Array.isEqvAux.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.div_le_self", 1],["exists_imp_distrib", 1],["Nat.one_pos", 1],["Nat.mod_eq_zero_of_dvd", 1],["UFModel.rank", 1],["BinaryHeap.popMaxAux.proof_2", 1],["List.subset.refl", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["toBoolUsing_eq_true", 1],["Array.indexOfAux.proof_1", 1],["Nat.Linear.Poly.denote_mul", 1],["le_of_lt", 1],["Nat.dvd_lcm_right", 1],["Array.ext'", 1],["Array.eraseIdxSzAux", 1],["zero_lt_of_lt", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.add_sub_cancel", 1],["List.length_eq_zero", 1],["Nat.le_of_lt_succ", 1],["List.erasep_of_forall_not", 1],["Nat.isValidChar", 1],["Nat.succ_sub_succ_eq_sub", 1],["List.union_equiv_append", 1],["List.mapTRAux", 1],["Nat.coprime.gcd_both", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.zero_div", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.pred_lt", 1],["List.erasep_append_left", 1],["min_self", 1],["List.get?_set_eq", 1],["Nat", 1],["Int.sub_eq_add_neg", 1],["List.cons.injEq", 1],["List.erase_cons_tail", 1],["Or.elim", 1],["Nat.add_le_add_left", 1],["Nat.coprime_comm", 1],["Int.zero_mul", 1],["List.map_cons", 1],["Int.sign_eq_one_of_pos", 1],["USize.size_positive", 1],["Inhabited.mk", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Bool.or_eq_true", 1],["NeqIffBeqFalse", 1],["Bool.and_self", 1],["Nat.Linear.ExprCnstr.denote_toNormPoly", 1],["Sigma", 1],["exists_eq_right_right'", 1],["Array.mkEmpty", 1],["Fin.ofNat'_succ", 1],["Nat.Linear.Poly.denote_combine", 1],["List.union", 1],["Nat.gcd_mul_left", 1],["Nat.pred_zero", 1],["List.toArray_data", 1],["Nat.succ_lt_succ", 1],["UnionFind.lt_rankMax'", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["List.cons_union", 1],["Nat.eq_zero_of_zero_dvd", 1],["Option.eq_none_of_isNone", 1],["List.length_erasep_of_mem", 1],["List.cons.sizeOf_spec", 1],["not_and", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Array.isEqvAux_self", 1],["List.forall_mem_of_forall_mem_cons", 1],["Nat.coprime.gcd_right", 1],["Nat.sub_add_eq_max", 1],["List.equiv_iff_subset_and_subset", 1],["List.length_pos_of_mem", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.gcd_mul_right_left", 1],["List.get?_set_of_lt", 1],["UFModel.Models.empty", 1],["Nat.le_succ_of_le", 1],["List.length_take", 1],["List.length_concat", 1],["UInt32.val_eq_of_lt", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.map₂", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.lt_succ_of_le", 1],["or", 1],["BinaryHeap.popMaxAux", 1],["EqIffBeqTrue", 1],["List.modifyHead", 1],["Array.toArrayLit", 1],["UFModel.Agrees.mk'", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Array.eraseIdx'.proof_1", 1],["UInt32.ofNat", 1],["Int.neg_of_sign_eq_neg_one", 1],["List.map_append", 1],["Array.get?_push_eq", 1],["Nat.pred_lt'", 1],["Int.eq_succ_of_zero_lt", 1],["not_le", 1],["List.erase_cons_head", 1],["List.length_add_eq_lengthTRAux", 1],["Nat.not_eq_zero_of_lt", 1],["or_assoc", 1],["not_lt", 1],["List.redLength", 1],["Nat.lt_irrefl", 1],["id_map'", 1],["Nat.sub_add_cancel", 1],["false_implies", 1],["List.toArrayAux_data", 1],["UFModel.Agrees.empty", 1],["List.mem_erasep_of_neg", 1],["List.mem_map_of_mem", 1],["Int.ofNat_add", 1],["List.get?_map", 1],["Nat.mul_dvd_mul_right", 1],["List.get?_append", 1],["List.card_subset_le", 1],["Int.natAbs", 1],["Classical.byContradiction", 1],["Nat.gcd_eq_left", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.ne_nil_of_length_pos", 1],["trivial", 1],["UInt32.val", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.pred_le", 1],["Nonempty", 1],["List.eq_nil_of_length_eq_zero", 1],["not", 1],["Nat.mul_mod", 1],["BinaryHeap.heapifyUp", 1],["System.Platform.numBits", 1],["ite_false", 1],["le_antisymm", 1],["Nat.beq", 1],["List.length_singleton", 1],["Int.add_assoc", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Tactic.NormCast.Label.move", 1],["Fin.mk.injEq", 1],["usize_size_gt_zero", 1],["Nat.pos_pow_of_pos", 1],["Nat.div_zero", 1],["List.mem_union_iff", 1],["List.mem_of_ne_of_mem", 1],["Nat.right_distrib", 1],["Nat.eq_of_mul_eq_mul_right", 1],["List.concat", 1],["List.exists_mem_of_length_pos", 1],["Int.neg_add", 1],["Array.toListLitAux", 1],["Nat.lt_add_right", 1],["List.mem_filterAux", 1],["Nat.lcm_one_left", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["List.mem_filter", 1],["Nat.mul_div_cancel_left", 1],["Nat.Linear.PolyCnstr.mul", 1],["Fin.zero_def", 1],["Int.subNatNat_add_left", 1],["BinaryHeap.mkHeap", 1],["Nat.le_antisymm", 1],["Option.mem_def", 1],["Int.negSucc_ofNat_coe", 1],["List.get?_append_right", 1],["Int.neg_eq_neg_one_mul", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Int.subNatNat_add_add", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Nat.sub_lt_left_of_lt_add", 1],["True.intro", 1],["Nat.lt_of_not_le", 1],["List.mem_reverse", 1],["Int.subNatNat_add_right", 1],["Nat.Linear.Certificate.of_combineHyps", 1],["List.length_repeat'", 1],["Decidable.isFalse", 1],["Nat.beq_refl", 1],["List.get_singleton", 1],["Nat.add_le_add", 1],["Nat.dvd_zero", 1],["Nat.not_le_of_lt", 1],["LawfulBEq.rfl", 1],["Sat.Fmla.subsumes.prop", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_gcd_self_right_left", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["Nat.exists_coprime", 1],["Nat.add_sub_add_right", 1],["Nonempty.intro", 1],["UInt8.toChar_aux", 1],["System.Platform.getNumBits", 1],["Int.zero_add", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_pos_of_lt", 1],["UFModel.empty", 1],["Array.get?_set_eq", 1],["List.tail", 1],["imp_self", 1],["Int.subNatNat_of_sub_eq_succ", 1],["Array.get?_push_lt", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Sat.Valuation.satisfies_fmla.prop", 1]]],
["PProd.fst", 499, [["Eq", 217],["Eq.refl", 208],["congrArg", 162],["Eq.trans", 154],["rfl", 150],["of_eq_true", 138],["Eq.mpr", 128],["congrFun", 124],["eq_self", 114],["OfNat.ofNat", 111],["Eq.symm", 109],["congr", 89],["List.cons", 75],["HAdd.hAdd", 62],["List.nil", 62],["Bool.true", 61],["Fin.mk", 50],["List.length", 42],["PProd.fst", 42],["HMul.hMul", 42],["Nat.gcd", 35],["HAppend.hAppend", 35],["Array.size", 35],["Fin.val", 34],["LT.lt", 34],["propext", 31],["Membership.mem", 29],["Nat.succ", 29],["eq_false", 28],["eq_true_of_decide", 28],["Iff.intro", 27],["HEq.refl", 27],["Unit.unit", 23],["Eq.mp", 23],["Nat.add", 22],["Option.some", 22],["Nat.Linear.Poly.denote", 22],["Classical.em", 22],["Iff", 21],["Nat.add_eq", 21],["Nat.add_comm", 21],["And.intro", 21],["eq_true", 21],["Exists.intro", 20],["HSub.hSub", 20],["funext", 20],["List.get?", 20],["HMod.hMod", 19],["List.length_cons", 18],["Not", 17],["List.get", 17],["Decidable.em", 17],["iff_self", 17],["And", 17],["cond", 17],["Nat.lt_of_lt_of_le", 16],["eq_of_heq", 16],["Nat.Linear.Var.denote", 16],["Nat.gcd_dvd_right", 16],["Nat.zero_add", 16],["Nat.mul_eq", 16],["cond_true", 15],["Prod.mk", 15],["List.map", 15],["Nat.lt_succ_self", 15],["LE.le", 14],["Array.get", 14],["Or", 13],["Bool.of_not_eq_true", 13],["Exists", 13],["implies_congr", 13],["cond_false", 13],["And.left", 12],["List.nil_append", 12],["Fin.isLt", 12],["List.not_mem_nil", 11],["Array.data", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.le_refl", 11],["BinaryHeap.arr", 10],["Nat.mod_lt", 10],["And.right", 10],["List.erase", 10],["absurd", 10],["List.cons_append", 10],["List.card", 10],["Nat.le_of_succ_le_succ", 10],["List.set", 9],["List.erasep", 9],["List.get?_eq_get", 9],["False.elim", 9],["List.append_nil", 9],["Bool.false", 9],["Nat.dvd_antisymm", 9],["ite_congr", 9],["id", 9],["Subsingleton.elim", 8],["Array.size_set", 8],["Fin.size_positive", 8],["List.length_nil", 8],["Option.none", 8],["True", 8],["HDiv.hDiv", 8],["List.mem_cons", 8],["Nat.add_left_comm", 8],["if_pos", 7],["Functor.map", 7],["UnionFind.arr", 7],["Nat.gcd_zero_left", 7],["Nat.Linear.Poly.denote_le", 7],["Iff.mpr", 7],["Or.inl", 7],["Nat.add_assoc", 7],["List.reverseAux", 7],["BEq.beq", 7],["List.reverse", 7],["Dvd.dvd", 7],["False", 7],["if_neg", 7],["Nat.add_zero", 7],["Subtype.property", 7],["dite_congr", 7],["congr_arg", 6],["Nat.blt", 6],["Iff.mp", 6],["false_and", 6],["of_decide_eq_true", 6],["UnionFind.size", 6],["Ne.symm", 6],["List.erasep_cons_of_neg", 6],["Nat.mul_comm", 6],["ite", 6],["List.erase_eq_erasep", 6],["Nat.Linear.Poly.denote_eq", 6],["Or.inr", 6],["WellFounded.fix", 6],["Nat.Linear.Poly", 5],["Nat.mul_one", 5],["ne_eq", 5],["List", 5],["Nat.coprime.symm", 5],["Nat.Linear.Poly.denote_append", 5],["dite", 5],["List.repeat'", 5],["Nat.Linear.Expr.denote", 5],["Array.mk", 5],["List.drop", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime", 5],["Nat.gcd_rec", 5],["Nat.zero", 5],["List.length_append", 5],["Eq.mpr_prop", 5],["List.insert", 5],["Nat.dvd_trans", 5],["Nat.zero_eq", 5],["Nat.le_of_lt", 5],["Subtype.mk", 5],["eq_of_beq", 5],["Nat.dvd_mul_left", 5],["Array.push", 5],["Nat.sub_lt", 5],["List.reverse_cons", 5],["List.Mem.head", 5],["dite_true", 5],["List.append_assoc", 5],["Nat.coprime.coprime_dvd_left", 4],["and", 4],["UFNode.rank", 4],["Nat.Linear.Expr.var", 4],["beq_self_eq_true", 4],["Nat.Linear.Expr.num", 4],["dif_neg", 4],["Nat.eq_zero_or_pos", 4],["Nat.lt_of_le_of_lt", 4],["Nat.Linear.fixedVar", 4],["Nat.lcm", 4],["Array.get?_eq_get?", 4],["Nat.gcd_succ", 4],["Nat.dvd_mul_right", 4],["UFModel.Agrees.get_eq", 4],["Nat.le_add_right", 4],["List.getLast", 4],["List.reverse_nil", 4],["BinaryHeap.heapifyDown", 4],["UFModel.parent", 4],["Nat.gcd_dvd", 4],["Nat.Linear.Expr.add", 4],["Prod", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["List.erasep_cons_of_pos", 4],["Nat.Linear.Poly.cancelAux", 4],["Decidable.decide", 4],["dif_pos", 4],["Nat.sub_eq", 4],["forall_congr", 4],["List.concat_eq_append", 4],["PSigma.mk", 4],["List.card_nil", 4],["List.List.append_eq", 3],["Nat.Linear.Var.denote.go", 3],["eq_false_of_decide", 3],["Nat.mul", 3],["Array.set", 3],["Nat.succ_add", 3],["List.modifyNth", 3],["Nat.one_mul", 3],["Nat.gcd_one_left", 3],["Fin.size_positive'", 3],["Nat.Linear.hugeFuel", 3],["List.remove", 3],["List.mem_append", 3],["Nat.zero_lt_of_lt", 3],["Nat.sub_le", 3],["and_imp", 3],["Nat.gcd.induction", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["FloatArray.size", 3],["if_false", 3],["le_refl", 3],["Nat", 3],["false_or", 3],["sorryAx", 3],["List.erase_cons", 3],["Option.some.inj", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.mul_zero", 3],["List.Mem.tail", 3],["ite_true", 3],["Iff.rfl", 3],["dite_false", 3],["List.length_set", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_zero_right", 3],["decide_eq_true_eq", 3],["Nat.ble", 3],["UFNode.mk", 3],["List.modifyNthTail", 3],["List.append", 3],["sizeOf_nat", 3],["List.concat", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Array.size_push", 3],["Nat.succ_pos", 3],["WellFoundedRelation.rel", 3],["List.mem_map", 3],["Subtype", 3],["List.exists_of_erasep", 3],["Nat.lt_of_succ_le", 3],["UFNode.parent", 3],["Array.get?", 3],["ByteArray.size", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.Linear.ExprCnstr.mk", 3],["Ne", 3],["Nat.lt_trans", 3],["Nat.lt_eq", 3],["Nat.zero_sub", 3],["UnionFind.model'", 3],["Nat.coprime.mul", 2],["Nat.dvd_lcm_left", 2],["Fin", 2],["UnionFind.rankMaxAux", 2],["List.card_cons_of_mem", 2],["Nat.div_mul_cancel", 2],["List.cons_bind", 2],["Nat.left_distrib", 2],["List.get?_set_ne", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.mod_eq_of_lt", 2],["Array.swap", 2],["List.insert_of_mem", 2],["List.removeNth", 2],["UFModel.Models.size_eq", 2],["List.forall_mem_cons", 2],["Nat.zero_le", 2],["or_false", 2],["Nat.gcd_mul_left_left", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.Linear.monomialToExpr", 2],["UFModel.Agrees.mk'", 2],["Function.comp", 2],["or_assoc", 2],["List.get_mem", 2],["Nat.Linear.Poly.denote_sort_go", 2],["min", 2],["Nat.Linear.Poly.denote_reverse", 2],["UFModel.push", 2],["UFModel.Models.parent_eq", 2],["List.get_of_mem", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Bool.and_eq_true", 2],["eq_false'", 2],["UFModel.Models.parent_eq'", 2],["Nat.mul_assoc", 2],["List.get?_modifyNth", 2],["Fin.eq_of_val_eq", 2],["List.take", 2],["mt", 2],["Nat.not_le_eq", 2],["List.mem_cons_of_mem", 2],["true_and", 2],["Nat.pred", 2],["Subtype.val", 2],["Nat.ble_eq_true_of_le", 2],["Option.some_inj", 2],["exists_false", 2],["List.exists_of_mem_map", 2],["UFModel.Models.rank_eq", 2],["Nat.le_trans", 2],["ite_false", 2],["Nat.coprime.gcd_left", 2],["Nat.min_zero", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["nsmul_rec", 2],["Nat.le_of_succ_le", 2],["List.join", 2],["List.mem_bind", 2],["SizeOf.sizeOf", 2],["Function.comp_apply", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.not_lt_eq", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["List.set_eq_modifyNth", 2],["Nat.le_of_ble_eq_true", 2],["Array.size_swap", 2],["Nat.zero_mod", 2],["Nat.zero_lt_succ", 2],["List.get?_set_eq", 2],["List.replicate", 2],["Nat.succ_ne_zero", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Fin.add_def", 2],["Array.pop", 2],["Nat.lcm_zero_left", 2],["Nat.lt_succ_iff", 2],["Nat.gcd_one_right", 2],["Nat.min_succ_succ", 2],["BinaryHeap.max", 2],["Nat.Linear.denote_monomialToExpr", 2],["List.insert_of_not_mem", 2],["Bool", 2],["List.length_pos_of_ne_nil", 2],["Nat.zero_min", 2],["Option.map", 2],["if_true", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_right", 2],["List.get?_len_le", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["List.bind", 2],["Nat.Linear.Poly.of_isZero", 2],["List.cons_ne_nil", 2],["BinaryHeap.size", 2],["Bool.and_true", 2],["le_of_not_lt", 2],["implies_true", 2],["List.card_cons_of_not_mem", 2],["List.exists_or_eq_self_of_erasep", 2],["List.toArray", 2],["UFModel.Models", 2],["Fin.mul_def", 2],["List.erasep_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["forall_const", 2],["List.mem_join", 2],["Array.size_pop", 2],["Nat.sub_succ_lt_self", 2],["max", 2],["Nat.Linear.Poly.isZero", 2],["Or.elim", 1],["List.cons.injEq", 1],["UInt32.val", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["List.replicateTR.loop", 1],["Array.mkEmpty", 1],["MonoidWithZero.zero_mul", 1],["List.erase_cons_tail", 1],["List.getLast_append", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["List.get?_append_right", 1],["UFModel.Agrees.push", 1],["Nat.div_self", 1],["Nat.add_le_add_left", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.zero_div", 1],["List.getLast_cons", 1],["Nat.Linear.Poly.combine", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Nat.Linear.ExprCnstr.toNormPoly", 1],["Nat.mul_mod_mul_left", 1],["Nat.coprime_comm", 1],["Bool.or_eq_true", 1],["Nat.gcd_pos_of_pos_left", 1],["Option.map_some'", 1],["Nat.gcd_self", 1],["Nat.mod_one", 1],["lt_irrefl", 1],["Sigma", 1],["List.mem_reverseAux", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["WellFounded.fix_eq", 1],["List.length_dropLast", 1],["exists_eq_right_right'", 1],["List.reverseAux_reverseAux", 1],["Nat.gcd_mul_left", 1],["Nat.coprime.coprime_mul_right", 1],["BinaryHeap.insert.proof_1", 1],["Decidable.of_not_not", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["List.card_eq_of_equiv", 1],["not_exists", 1],["Fin.ofNat'_succ", 1],["Bool.and_self", 1],["List.toArray_data", 1],["Nat.zero_mul", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["UnionFind.lt_rankMax'", 1],["UInt8.val", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List.cons_union", 1],["zero_lt_of_lt", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Nat.eq_zero_of_zero_dvd", 1],["List.Fin.exists_iff", 1],["List.length_erasep_of_mem", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.succ_mul", 1],["Nat.succ_lt_succ", 1],["Array.indexOfAux.proof_2", 1],["Nat.pred_lt'", 1],["Trans.trans", 1],["List.forall_mem_of_forall_mem_cons", 1],["List.equiv_iff_subset_and_subset", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["List.modifyHead", 1],["Nat.sub_add_eq_max", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_succ", 1],["List.get?_set_of_lt", 1],["Array.mk.sizeOf_spec", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.pos_iff_ne_zero", 1],["unsafeCast", 1],["Nat.le_succ_of_le", 1],["Nat.lt_irrefl", 1],["List.length_concat", 1],["Nat.pred_le", 1],["List.length_take", 1],["trivial", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Tactic.NormCast.Label.move", 1],["List.inj_on", 1],["List.mem_union_iff", 1],["List.length_add_eq_lengthTRAux", 1],["Tactic.NormCast.CoeFnType.coe", 1],["List.map₂", 1],["UFModel.Models.empty", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["List.filterAux", 1],["True.intro", 1],["Array.toArrayLit", 1],["GT.gt", 1],["EqIffBeqTrue", 1],["Option.getD", 1],["Nat.ble_succ_eq_true", 1],["imp_self", 1],["Nat.Linear.Poly.denote_fuse", 1],["Fin.nsmuls_eq", 1],["UInt32.ofNat", 1],["List.map_append", 1],["List.elem_eq_true_of_mem", 1],["List.mapTRAux_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Prod.mk.injEq", 1],["Function.funext_iff", 1],["Nat.succ.inj", 1],["Classical.byContradiction", 1],["UnionFind.rank_lt", 1],["List.erase_cons_head", 1],["Nat.gcd_div", 1],["id_eq", 1],["List.eq_of_mem_repeat'", 1],["UnionFind.rankMax", 1],["Nat.Linear.PolyCnstr.denote_mul", 1],["List.erasep_append_right", 1],["Array.indexOfAux", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.ble_self_eq_true", 1],["UnionFind.rankMaxAux.proof_1", 1],["false_implies", 1],["Array.get?_push_lt", 1],["List.get?_modifyNth_ne", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Or.resolve_left", 1],["List.mem_cons_self", 1],["List.length_singleton", 1],["Nat.Linear.Certificate.combineHyps", 1],["Neg.neg", 1],["Nat.sub_lt_sub_left", 1],["Option.map_eq_map", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.mem_map_of_mem", 1],["UFModel.Agrees.set", 1],["Nat.eq_of_beq_eq_true", 1],["And.imp", 1],["beq_self_eq_true'", 1],["Nat.mul_dvd_mul_right", 1],["not_false_iff", 1],["Nat.lt_add_right", 1],["List.cons.sizeOf_spec", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["List.length_map", 1],["List.get?_modifyNth_eq", 1],["Nat.add_le_add_right", 1],["Nat.succ_le_succ", 1],["List.card_subset_le", 1],["List.toArrayAux_data", 1],["Tactic.NormCast.Label.elim", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.mem_insert_iff", 1],["Nat.Linear.PolyCnstr.mul", 1],["List.ne_nil_of_length_pos", 1],["Nat.div_zero", 1],["UnionFind.lt_rankMax", 1],["Nat.succ_sub_succ", 1],["Nat.Linear.Expr.mulL", 1],["List.getLast_eq_get", 1],["PSigma", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["List.singleton_append", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["List.card_append_disjoint", 1],["List.toArrayAux", 1],["Array.isEqvAux.proof_3", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.mul_mod", 1],["Nat.div_le_self", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.dvd_zero", 1],["List.get_append_right_aux", 1],["Nat.add_le_add", 1],["le_antisymm", 1],["instDecidableEqNat", 1],["Nat.beq", 1],["true_implies", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.gcd_gcd_self_right_right", 1],["Subsingleton.allEq", 1],["and_self", 1],["List.length_replicate", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.Linear.Expr.inc", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["BinaryHeap.size_heapifyUp", 1],["not_lt_of_ge", 1],["Nat.succ.injEq", 1],["Array.isEqv", 1],["exists_imp_distrib", 1],["Nat.mod_add_mod", 1],["List.set_nil", 1],["Iff.symm", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["Fin.mk.injEq", 1],["Array.isEqvAux.proof_2", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.Linear.Poly.denote_mul", 1],["List.elem", 1],["or_iff_left_iff_imp", 1],["List.mem_of_ne_of_mem", 1],["Nat.lcm_dvd", 1],["Nat.add_mul_mod_self_right", 1],["Nat.eq_of_mul_eq_mul_right", 1],["List.get?_eq_some", 1],["Nat.dvd_lcm_right", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["List.erasep_of_forall_not", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.PolyCnstr.denote", 1],["List.exists_mem_of_length_pos", 1],["Array.toListLitAux", 1],["Nat.mul_dvd_mul", 1],["List.mapTRAux", 1],["Nat.coprime.pow_right", 1],["Array.indexOfAux.proof_1", 1],["List.mem_filterAux", 1],["List.eq_nil_of_length_eq_zero", 1],["Nat.gcd_mul_lcm", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.succ_inj'", 1],["List.map_cons", 1],["List.get?_append", 1],["Fin.elim0", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["List.mem_filter", 1],["NeqIffBeqFalse", 1],["Nat.Linear.ExprCnstr.denote_toNormPoly", 1],["Nat.one_pos", 1],["Array.eraseIdxSzAux", 1],["Array.ext'", 1],["Nat.mul_dvd_mul_left", 1],["Nat.mod_self", 1],["Nat.le_antisymm", 1],["BinaryHeap.mkHeap", 1],["List.length_eq_zero", 1],["List.union", 1],["Nat.Linear.Poly.denote_combine", 1],["not_or", 1],["Fin.ext", 1],["Nat.add_mod_mod", 1],["not_and", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["UFModel.Agrees.size_eq", 1],["Array.isEqvAux_self", 1],["List.card_le_card_cons", 1],["List.reverseAux_reverseAux_nil", 1],["List.length_pos_of_mem", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_mul_right_left", 1],["UFModel.Models.push", 1],["Nat.isValidChar", 1],["Option.some.injEq", 1],["Decidable.isFalse", 1],["Fin.one_val", 1],["BinaryHeap.popMaxAux", 1],["or", 1],["Nat.beq_refl", 1],["Option", 1],["List.union_equiv_append", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Nat.mod_eq_zero_of_dvd", 1],["List.redLength", 1],["id_map'", 1],["min_le_left", 1],["Nat.Linear.Expr.of_cancel_le", 1],["UFModel.Agrees.empty", 1],["le_of_lt", 1],["List.modifyNthTail_length", 1],["Nat.succ_sub_succ_eq_sub", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Sat.Fmla.subsumes.prop", 1],["List.mem_iff_get", 1],["Nat.coprime.gcd_both", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["List.mem_erasep_of_neg", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["List.replicateTR_loop_replicate_eq", 1],["Nat.exists_coprime", 1],["Nat.to_digits_core_length", 1],["Array.get?_set_ne", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_sub_add_right", 1],["Bool.and_false", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.erasep_subset", 1],["min_self", 1],["BinaryHeap.heapifyUp", 1],["UFModel.empty", 1],["List.foldr", 1],["List.mem_of_elem_eq_true", 1],["Nat.coprime.coprime_div_left", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["List.tail", 1],["or_comm", 1],["Nat.right_distrib", 1],["Array.get_eq_get", 1],["Subset.subset", 1],["Nat.lcm_one_left", 1],["List.mem_of_mem_erasep", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["List.reverseAux_eq_append", 1],["Nat.sub_lt_left_of_lt_add", 1],["Nat.le_of_lt_succ", 1],["List.mem_reverse", 1],["List.subset.refl", 1],["Nat.Linear.Certificate.of_combineHyps", 1],["List.nil_union", 1],["List.get_singleton", 1],["List.length_repeat'", 1],["Tactic.NormCast.Label.squash", 1],["Array.isEqvAux.proof_1", 1],["Sat.Valuation.satisfies_fmla.prop", 1],["List.erasep_append_left", 1]]],
["LE.le", 499, [["Eq.refl", 147],["Eq", 110],["Eq.mpr", 105],["congrArg", 91],["LE.le", 83],["Eq.trans", 83],["Eq.symm", 79],["OfNat.ofNat", 77],["congrFun", 67],["of_eq_true", 67],["rfl", 56],["HAdd.hAdd", 44],["eq_self", 44],["Fin.mk", 40],["congr", 39],["HMul.hMul", 36],["LT.lt", 36],["Nat.gcd", 35],["Fin.val", 34],["eq_true", 31],["Bool.true", 30],["Iff.intro", 29],["HSub.hSub", 25],["Nat.succ", 25],["Eq.mp", 23],["Nat.le_refl", 22],["le_refl", 20],["Nat.zero_le", 19],["HMod.hMod", 19],["PProd.fst", 19],["List.length", 19],["Option.some", 18],["Array.size", 18],["HEq.refl", 18],["List.nil", 18],["List.cons", 17],["Decidable.em", 16],["Nat.gcd_dvd_right", 16],["propext", 16],["List.get", 15],["dite", 15],["And.intro", 15],["Unit.unit", 15],["Classical.em", 14],["eq_true_of_decide", 13],["HDiv.hDiv", 13],["Nat.le_of_succ_le_succ", 13],["Array.get", 12],["Iff", 12],["Nat.le_of_lt", 12],["Nat.gcd_comm", 11],["Nat.le_trans", 11],["Nat.gcd_dvd_left", 11],["Nat.mod_lt", 11],["Nat.dvd_gcd", 11],["Bool.false", 10],["Fin.isLt", 10],["eq_false", 10],["eq_of_heq", 10],["Nat.lt_succ_self", 9],["Nat.lt_of_lt_of_le", 9],["Nat.le.dest", 9],["And", 9],["min", 9],["Not", 9],["Iff.mp", 9],["Trans.mk", 9],["Prod.mk", 9],["Nat.dvd_antisymm", 9],["List.get?", 8],["Nat.add_comm", 8],["And.left", 8],["Fin.size_positive", 8],["Exists.intro", 8],["absurd", 8],["ite_congr", 8],["Int.add_comm", 8],["if_neg", 7],["List.get?_eq_get", 7],["False.elim", 7],["Nat.add", 7],["Nat.gcd_zero_left", 7],["Decidable", 7],["UnionFind.arr", 7],["Iff.mpr", 7],["le_trans", 7],["inferInstanceAs", 7],["Neg.neg", 7],["if_pos", 7],["Dvd.dvd", 7],["le_of_lt", 7],["Nat.mul_comm", 7],["HAppend.hAppend", 7],["And.right", 7],["dite_congr", 7],["cond", 7],["iff_self", 7],["cond_true", 6],["Array.data", 6],["Nat.le.intro", 6],["Nat.eq_zero_or_pos", 6],["eq_false_of_decide", 6],["Option.none", 6],["Nat.le.refl", 6],["Bool.of_not_eq_true", 6],["cond_false", 6],["True", 6],["implies_congr", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.lt_or_ge", 6],["dite_true", 6],["List.length_cons", 5],["Nat.cast", 5],["Nat.le_add_right", 5],["le_of_not_lt", 5],["Nat.le_succ", 5],["min_le_left", 5],["Fin.val_eq_of_lt", 5],["Membership.mem", 5],["Nat.dvd_trans", 5],["Nat.mul_zero", 5],["Nat.le.step", 5],["le_antisymm", 5],["Nat.coprime", 5],["Iff.rfl", 5],["dif_pos", 5],["Int.le.intro", 5],["Nat.succ_le_succ", 5],["Nat.gcd_rec", 5],["dif_neg", 5],["Nat.coprime.symm", 5],["WellFounded.fix", 5],["Nat.zero", 5],["id", 5],["min_eq_left", 5],["Nat.dvd_mul_left", 5],["Eq.mpr_prop", 4],["UFModel.parent", 4],["Int.add_le_add", 4],["ite_true", 4],["Int.add_le_add_left", 4],["List.set", 4],["Nat.Linear.Poly.denote", 4],["UnionFind.size", 4],["UFNode.parent", 4],["UFNode.rank", 4],["Array.size_set", 4],["Int.le.dest", 4],["Nat.gcd_succ", 4],["Nat.gcd_dvd", 4],["Or.inl", 4],["Nat.div_zero", 4],["Or.inr", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Or.resolve_left", 4],["and", 4],["Nat.succ_pos", 4],["Nat.add_le_add_right", 4],["False", 4],["Fin", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["Array.get?_eq_get?", 4],["le_not_le_of_lt", 4],["Array.mk", 4],["Nat.dvd_mul_right", 4],["Nat.not_le_of_gt", 4],["PSigma.mk", 4],["not_le", 4],["Nat.pred", 3],["Nat.digitChar", 3],["Int.le_add_of_sub_right_le", 3],["sorryAx", 3],["Nat.coprime.coprime_dvd_right", 3],["Option.some.inj", 3],["Nat.not_lt_eq", 3],["Nat.mul_le_mul_left", 3],["Nat.add_le_add_left", 3],["min_le_right", 3],["Nat.mod_eq_of_lt", 3],["Or", 3],["Bool", 3],["Nat.zero_eq", 3],["Nat.sub_le_sub_right_iff", 3],["instDecidableLtToLTToPreorderToPartialOrder", 3],["WellFounded.fix_eq", 3],["le_of_eq", 3],["Exists", 3],["UFModel.Agrees.get_eq", 3],["Int.NonNeg", 3],["Nat.Linear.Expr.add", 3],["Nat.pos_of_dvd_of_pos", 3],["funext", 3],["Nat.zero_mul", 3],["ite_false", 3],["Nat.gcd_zero_right", 3],["Nat.add_sub_cancel", 3],["Nat.not_le_eq", 3],["Nat.sub_eq_zero_of_le", 3],["Decidable.isTrue", 3],["le_min", 3],["Nat.Linear.Expr.num", 3],["UFModel.rank", 3],["Nat.le_of_succ_le", 3],["Nat.lt_trans", 3],["List.append", 3],["ne_eq", 3],["min_eq_right", 3],["List.card", 3],["Nat.le_succ_of_le", 3],["Nat.Linear.Poly.denote_eq", 3],["GE.ge", 3],["Nat.Linear.Expr.var", 3],["List.length_nil", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.not_succ_le_zero", 3],["Nat.le_antisymm", 3],["Nat.succ_sub_succ", 3],["Decidable.isFalse", 3],["eq_min", 3],["decide_eq_false", 3],["not_lt", 3],["Fin.size_positive'", 3],["Nat.gcd_one_left", 3],["le_total", 3],["instDecidableLeToLEToPreorderToPartialOrder", 3],["Nat.gcd.induction", 3],["Nat.le_of_lt_succ", 3],["Int.NonNeg.mk", 3],["Nat.dvd_refl", 3],["Array.get?", 3],["Nat.sub_lt", 3],["Nat.Linear.ExprCnstr.mk", 3],["Option", 3],["Decidable.decide", 3],["Nat.lcm_comm", 3],["Nat.toDigitsCore", 3],["Nat.add_eq", 3],["Nat.le_total", 3],["Nat.gt_of_not_le", 2],["UnionFind.model'", 2],["Int.zero_add", 2],["of_decide_eq_true", 2],["Int.le_of_neg_le_neg", 2],["Nat.gcd_mul_left_left", 2],["Nat.pred_le_pred", 2],["List.cons_ne_nil", 2],["Nat.blt", 2],["Nat.mul_one", 2],["List.get_mem", 2],["Iff.refl", 2],["Int.ofNat_le", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["UFModel.Models.parent_eq", 2],["MonoidWithZero.zero_mul", 2],["Int.add_le_add_right", 2],["Nat.not_lt_of_le", 2],["if_false", 2],["Int.neg_le_neg", 2],["Nat.coprime.pow_left", 2],["min_comm", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Or.elim", 2],["FloatArray.size", 2],["decide_eq_true_iff", 2],["Nat.div_mul_cancel", 2],["Nat.zero_mod", 2],["Nat.coprime.gcd_left", 2],["Nat.sub_eq", 2],["Nat.le_of_not_lt", 2],["Int.sub_eq_add_neg", 2],["Nat.Linear.Expr.denote", 2],["Int.natAbs", 2],["List.length_set", 2],["Fin.eq_of_val_eq", 2],["Nat.add_left_comm", 2],["Nat.Linear.Poly", 2],["Nat.Linear.Expr.denote_toPoly", 2],["lt_or_le", 2],["Nat.succ_mul", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["List.getLast", 2],["Bool.and_true", 2],["Option.some_inj", 2],["Nat.Linear.Expr.toPoly", 2],["UFModel.Models.rank_eq", 2],["Nat.zero_min", 2],["List.drop", 2],["List.map", 2],["Int.le_refl", 2],["Subtype.property", 2],["List.nil_append", 2],["Nat.gcd_mul_right", 2],["not_lt_of_ge", 2],["Nat.min_zero", 2],["Nat.le_of_dvd", 2],["Trans.trans", 2],["lt_of_not_ge", 2],["Ne", 2],["BinaryHeap.arr", 2],["HPow.hPow", 2],["UFNode.mk", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.coprime.mul", 2],["Nat.dvd_mod_iff", 2],["SizeOf.sizeOf", 2],["BinaryHeap.size_pos_of_max", 2],["Prod", 2],["Nat.le_of_ble_eq_true", 2],["List.append_nil", 2],["List.reverse", 2],["Bool.and_eq_true", 2],["dite_false", 2],["List.get?_len_le", 2],["Int.neg_zero", 2],["UFModel.rank_lt", 2],["Int.add_zero", 2],["List.concat_eq_append", 2],["Fin.add_def", 2],["false_iff", 2],["Nat.lcm_zero_left", 2],["Nat.ble_eq_true_of_le", 2],["Nat.dvd_lcm_left", 2],["Nat.min_succ_succ", 2],["BinaryHeap.max", 2],["Nat.Linear.Poly.cancelAux", 2],["Nat.lt_of_not_le", 2],["List.card_nil", 2],["Nat.gcd_one_right", 2],["not_le_of_gt", 2],["Nat.coprime.coprime_mul_left", 2],["if_true", 2],["lt_of_le_not_le", 2],["Int.add_le_of_le_sub_right", 2],["Nat.zero_add", 2],["Nat.lt_irrefl", 2],["UFModel.Models.parent_eq'", 2],["Nat.add_zero", 2],["Nat.not_le_of_lt", 2],["Subsingleton.elim", 2],["Fin.ofNat'", 2],["Nat.Linear.Poly.of_isZero", 2],["List.get?_set_ne", 2],["List.card_cons_of_mem", 2],["Nat.le_or_le", 2],["Fin.mul_def", 2],["Int.sub_left_le_of_le_add", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.pred_le", 2],["ByteArray.size", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.le_div_iff_mul_le", 2],["Nat.Linear.Poly.isZero", 2],["Int.add_assoc", 2],["Int.ofNat_zero_le", 2],["UnionFind.rankMaxAux", 2],["UFModel.Models.size_eq", 2],["Nat.gcd_gcd_self_right_left", 1],["and_self", 1],["Int.neg_add_le_left_of_le_add", 1],["BoundedRandom.randomR", 1],["Int.le_add_of_neg_add_le_left", 1],["Array.isEqvAux.proof_1", 1],["Nat.add_le_add_iff_le_right", 1],["List.get_cons_zero", 1],["Subtype.val", 1],["Nat.le_of_add_le_add_left", 1],["Array.size_swap", 1],["Nat.ble", 1],["decide_eq_true", 1],["List.mem_cons_of_mem", 1],["List.get?_append_right", 1],["WellFoundedRelation.rel", 1],["Array.get?_push_lt", 1],["Int.sub_right_le_of_le_add", 1],["not_or_intro", 1],["sizeOf_nat", 1],["lt_of_lt_of_le", 1],["Nat.gcd_mul_lcm", 1],["UFModel.Agrees.push", 1],["Fin.elim0", 1],["Bool.or_eq_true", 1],["Nat.mul_dvd_mul_left", 1],["Option.map_some'", 1],["Fin.ext", 1],["Int.le_sub_right_of_add_le", 1],["Nat.add_mod_mod", 1],["lt_irrefl", 1],["Sigma", 1],["Nat.decLe", 1],["Nat.one_pos", 1],["List.card_le_card_cons", 1],["Nat.mod_self", 1],["Fin.one_val", 1],["Not.imp", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.mod_eq_zero_of_dvd", 1],["List.repeat'", 1],["Nat.coprime.coprime_div_left", 1],["UnionFind.findAux.proof_1", 1],["instTransLtToLTLeToLE.proof_1", 1],["left_comm", 1],["Nat.ge_of_not_lt", 1],["Nat.add_one", 1],["Nat.sub_succ_lt_self", 1],["le_of_not_gt", 1],["UnionFind.lt_rankMax'", 1],["Int.mul_le_mul_of_nonneg_left", 1],["Int.ofNat.inj", 1],["zero_lt_of_lt", 1],["Nat.mod.inductionOn", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.min_comm", 1],["Bool.and_false", 1],["Or.symm", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["le_of_not_le", 1],["Int.le_antisymm", 1],["Nat.succ_lt_succ", 1],["Nat.gcd_self", 1],["Subtype", 1],["Bool.and_self", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.Linear.Var.denote", 1],["Array.swap", 1],["Int.negSucc", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.instTransNatLtInstLTNatLeInstLENat.proof_1", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.add_left_cancel", 1],["min_self", 1],["Nat.sub_add_cancel", 1],["Nat.zero_div", 1],["UInt32.val", 1],["Int.mul_le_mul_of_nonneg_right", 1],["List.length_take", 1],["trivial", 1],["UFModel.push", 1],["PSigma", 1],["Nat.coprime_comm", 1],["Nat.div_le_of_le_mul", 1],["Int.le_add_of_sub_left_le", 1],["Nat.add_assoc", 1],["List.map₂", 1],["Nat.add_lt_add_right", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Nat.Linear.hugeFuel", 1],["Nat.eq_or_lt_of_le", 1],["True.intro", 1],["Nat.mul_lt_mul_of_pos_right", 1],["Array.toArrayLit", 1],["Decidable.le_iff_lt_or_eq", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.gcd_mul_left", 1],["Nat.to_digits_core_length", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Fin.ofNat'_succ", 1],["UInt32.ofNat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Nat.mod_zero", 1],["Nat.sub_le", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Int.mul_le_mul", 1],["Int.le_of_add_le_add_right", 1],["Int.mul_lt_mul_of_pos_left", 1],["UInt8.val", 1],["Int.ne_of_lt", 1],["Preorder.le_refl", 1],["Preorder.lt_iff_le_not_le", 1],["Int.le_def", 1],["instTransGeToLE.proof_1", 1],["Array.get_eq_get", 1],["UnionFind.rankMax", 1],["Nat.add_le_of_le_sub_left", 1],["List.getLast_cons", 1],["min_eq_right_of_lt", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["UnionFind.rankMaxAux.proof_1", 1],["List.get?_set_of_lt", 1],["Array.mk.sizeOf_spec", 1],["Int.le_of_lt_add_one", 1],["Nat.zero_lt_succ", 1],["Decidable.byContradiction", 1],["Nat.le_of_le_of_sub_le_sub_right", 1],["le_or_gt", 1],["Nat.div_eq", 1],["Nat.sub_lt_sub_left", 1],["Nat.lt_of_lt_of_eq", 1],["Functor.map", 1],["Int.ofNat_add", 1],["le_of_lt_or_eq", 1],["Nat.min_eq_left", 1],["instTransLeToLELtToLT.proof_1", 1],["Nat.mul_dvd_mul_right", 1],["lt_iff_le_not_le", 1],["Int.lt_add_of_sub_right_lt", 1],["Option.map_eq_map", 1],["add_neg_cancel_right", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["List.length_map", 1],["Nat.gcd_div", 1],["Nat.not_le_of_not_ble_eq_true", 1],["List.take", 1],["Ordering.isLE", 1],["MonoidWithZero.mul_zero", 1],["Nat.lcm_dvd", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.cast_mul", 1],["lt_iff_not_ge", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.lt_succ_iff", 1],["Int.le_of_lt", 1],["Classical.byContradiction", 1],["UnionFind.lt_rankMax", 1],["Nat.cast_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["List.getLast_eq_get", 1],["Array.get?_set_ne", 1],["Nat.coprime_mul_iff_left", 1],["Nat.eq_add_of_sub_eq", 1],["List.get?_concat_length", 1],["DecidableRel", 1],["Nat.le_of_not_le", 1],["lt_trichotomy", 1],["Nat.eq_zero_of_le_zero", 1],["UFModel.Models", 1],["Or.imp_right", 1],["Nat.le_add_left", 1],["Array.isEqvAux.proof_3", 1],["Nat.instTransNatLeInstLENat.proof_1", 1],["Nat.mul_mod", 1],["Nat.min", 1],["USize.decLe", 1],["Nat.le_step", 1],["Preorder.le_trans", 1],["Int.lt_iff_le_and_ne", 1],["ite_self", 1],["List.mem_cons_self", 1],["neg_neg", 1],["Nat.succ_le_of_lt", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Int.eq_natAbs_of_zero_le", 1],["Decidable.lt_or_eq_of_le", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Int.lt.dest", 1],["Nat.lt_iff_le_not_le", 1],["And.imp", 1],["Array.isEqv", 1],["Nat.Linear.Poly.denote_reverse", 1],["Nat.mod_add_mod", 1],["Int.eq_ofNat_of_zero_le", 1],["Array.isEqvAux_self", 1],["List.length_append", 1],["LinearOrder.decidable_le", 1],["BinaryHeap.heapifyDown", 1],["Fin.mk.injEq", 1],["Nat.lt_add_right", 1],["max", 1],["Fin.zero_def", 1],["Int.le_add_of_nonneg_left", 1],["UFModel.push.proof_1", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.sub_self", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Int.neg_add", 1],["Array.toListLitAux", 1],["Nat.sub_sub", 1],["Nat.div_le_self", 1],["Nat.dvd_zero", 1],["Int.mul_lt_mul_of_pos_right", 1],["Int.ofNat_nonneg", 1],["Nat.add_le_add", 1],["Array.push", 1],["List.get?_set_eq", 1],["Nat.Linear.Poly.combine", 1],["Iff.symm", 1],["Nat.gcd_pos_of_pos_left", 1],["UInt16.decLe", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.cons.sizeOf_spec", 1],["Nat.sub_succ", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.Linear.Poly.denote_combine", 1],["Array.size_push", 1],["Int.add_le_of_le_sub_left", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["LinearOrder.le_total", 1],["Ord.compare", 1],["Or.imp_left", 1],["Subtype.mk", 1],["Int.ofNat_natAbs_eq_of_nonneg", 1],["Nat.sub_eq_sub_min", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["List.reverse_cons", 1],["Nat.lt_succ_of_le", 1],["Nat.le_of_sub_eq_zero", 1],["UInt8.decLe", 1],["Option.map", 1],["Nat.mod_one", 1],["or", 1],["Nat.instTransNatLeInstLENatLtInstLTNat.proof_1", 1],["le_or_lt", 1],["List.reverse_nil", 1],["List.get_of_mem", 1],["Int.neg_nonpos_of_nonneg", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Int.le.intro_sub", 1],["Nat.isValidChar", 1],["List.get_append_right_aux", 1],["instTransGeToLEGtToLT.proof_1", 1],["Nat.gcd_gcd_self_right_right", 1],["le_of_not_ge", 1],["Subsingleton.allEq", 1],["UnionFind.findAux.proof_2", 1],["Nat.sub_le_sub_right", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.le_or_eq_or_le_succ", 1],["Nat.mul_le_mul", 1],["Nat.le_of_add_le_add_right", 1],["Nat.mul_lt_mul_of_pos_left", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.sub_zero", 1],["Int.sub_nonneg_of_le", 1],["Nat.find_min", 1],["Nat.exists_coprime", 1],["Int.nonneg_or_nonneg_neg", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_sub_add_right", 1],["min_assoc", 1],["UInt64.decLe", 1],["Fin.nsmuls_eq", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.coprime.gcd_both", 1],["List.card_cons_of_not_mem", 1],["UnionFind.rank_lt", 1],["UInt32.decLe", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.eq_of_mem_repeat'", 1],["Array.set", 1],["Nat.lcm_one_left", 1],["Int.le_sub_left_of_add_le", 1],["List.get?_append", 1],["Nat.lt_of_succ_le", 1],["ge_trans", 1],["Nat.mul_le_mul_right", 1],["Int.le_trans", 1],["Nat.sub_lt_left_of_lt_add", 1],["instTransLeToLE.proof_1", 1],["Nat.lt_eq", 1],["instTransGtToLTGeToLE.proof_1", 1],["Nat.not_lt", 1],["Decidable.byCases", 1],["Nat.Linear.Expr.toNormPoly", 1],["Float.decLe", 1],["List.get_singleton", 1],["Int.le_of_add_le_add_left", 1],["Nat.mul_eq", 1],["Nat.Linear.Poly.denote_append", 1]]],
["False", 493, [["Eq.refl", 113],["Eq", 90],["Iff.intro", 60],["False", 57],["congrArg", 55],["Eq.trans", 55],["Eq.mpr", 55],["absurd", 52],["rfl", 49],["Eq.symm", 49],["of_eq_true", 47],["Not", 46],["congrFun", 45],["OfNat.ofNat", 44],["propext", 42],["Nat.gcd", 35],["Bool.true", 34],["And.intro", 31],["eq_self", 30],["Iff", 29],["congr", 28],["And", 26],["HMul.hMul", 25],["mt", 20],["False.elim", 19],["eq_true_of_decide", 19],["HMod.hMod", 19],["HEq.refl", 19],["iff_self", 18],["List.nil", 17],["Fin.mk", 17],["Fin.val", 17],["Or.inl", 17],["Iff.mpr", 16],["Nat.gcd_dvd_right", 16],["eq_false", 16],["Or.inr", 16],["Iff.mp", 14],["And.right", 14],["Or", 14],["List.cons", 14],["HAdd.hAdd", 14],["Membership.mem", 13],["And.left", 13],["Eq.mp", 12],["Nat.gcd_comm", 11],["True", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Bool.false", 11],["ne_eq", 10],["Decidable.em", 10],["implies_congr", 10],["Nat.mod_lt", 10],["Exists.intro", 9],["eq_true", 9],["Iff.rfl", 9],["trivial", 9],["Nat.succ", 9],["dite", 9],["LT.lt", 9],["Nat.dvd_antisymm", 9],["eq_of_heq", 8],["not_not_intro", 8],["HDiv.hDiv", 8],["Fin.size_positive", 8],["forall_congr", 8],["Exists", 7],["Option.some", 7],["eq_false_of_decide", 7],["funext", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["id", 7],["PProd.fst", 6],["Classical.em", 6],["List.length", 6],["HAppend.hAppend", 6],["Nat.lt_irrefl", 6],["Decidable.isFalse", 6],["Fin.val_eq_of_lt", 5],["Nat.mul_comm", 5],["LE.le", 5],["Nat.dvd_trans", 5],["of_decide_eq_true", 5],["Or.elim", 5],["Nat.coprime", 5],["Nat.dvd_mul_left", 5],["false_and", 5],["Nat.gcd_rec", 5],["not_false", 5],["eq_false'", 5],["Nat.coprime.symm", 5],["Decidable.isTrue", 5],["sorryAx", 5],["of_decide_eq_false", 5],["Ne", 5],["Decidable.decide", 5],["lt_irrefl", 5],["Nat.not_le_of_gt", 5],["List.not_mem_nil", 4],["Nat.eq_zero_or_pos", 4],["iff_false_intro", 4],["Nat.dvd_mul_right", 4],["Nat.succ_ne_zero", 4],["Subtype.property", 4],["Option.none", 4],["HSub.hSub", 4],["Nat.coprime.coprime_dvd_left", 4],["Unit.unit", 4],["Nat.lcm", 4],["ite_congr", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["dite_congr", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["implies_true", 4],["Option.mem_def", 4],["dite_true", 4],["Iff.trans", 4],["Array.size", 3],["Nat.gcd.induction", 3],["UFModel.parent", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["Nat.gcd_one_left", 3],["List.mem_cons", 3],["Fin.eq_of_val_eq", 3],["em", 3],["List.disjoint", 3],["Fin.size_positive'", 3],["iff_def", 3],["Nat.dvd_refl", 3],["Nat.coprime.coprime_dvd_right", 3],["List.disjoint_append_left", 3],["Nat.lcm_comm", 3],["Nat.not_lt_zero", 3],["imp_not_comm", 3],["List.append_eq_nil", 3],["Decidable.not_not", 3],["Fin.isLt", 3],["and_congr", 3],["not_and", 3],["not_le_of_gt", 3],["dif_pos", 3],["dif_neg", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_zero_right", 3],["id_eq", 3],["not_not", 3],["List.disjoint_comm", 3],["UnionFind.size", 2],["and", 2],["Nat.add_eq", 2],["List.mem_append", 2],["Decidable", 2],["Nat.not_succ_le_zero", 2],["True.intro", 2],["decide_eq_false", 2],["iff_false", 2],["List.subset_cons", 2],["Nat.gcd_mul_left_left", 2],["and_imp", 2],["exists_eq_right", 2],["Decidable.by_contradiction", 2],["if_neg", 2],["Nat.coprime.gcd_left", 2],["Nat.le_of_lt", 2],["Or.resolve_left", 2],["Option.bind_eq_none", 2],["not_forall", 2],["le_refl", 2],["cond_true", 2],["Nat.mul_zero", 2],["Nat.le_lt_antisymm", 2],["List.get", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Option.isSome_some", 2],["true_and", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["UnionFind.rankMaxAux", 2],["Nat.le_of_succ_le_succ", 2],["Nat.lt_trans", 2],["dec_em", 2],["exists_imp_distrib", 2],["Decidable.not_or_of_imp", 2],["dite_false", 2],["List.singleton_disjoint", 2],["Array.isEqv", 2],["Not.elim", 2],["Nat.le_of_dvd", 2],["Acc", 2],["UFModel.rank", 2],["not_and_of_not_or_not", 2],["if_true", 2],["not_or", 2],["and_false", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Iff.symm", 2],["exists_prop", 2],["Decidable.not_imp_not", 2],["Nat.coprime.mul", 2],["not_exists", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Fin.add_def", 2],["Ne.symm", 2],["Nat.lcm_zero_left", 2],["Nat.coprime.pow_left", 2],["or_comm", 2],["List.length_pos_of_ne_nil", 2],["Option.isSome_none", 2],["ite", 2],["Or.swap", 2],["Decidable.not_and_distrib", 2],["cond", 2],["List.exists_of_erasep", 2],["Decidable.not_imp_comm", 2],["Decidable.imp_iff_not_or", 2],["Nat.not_le_of_lt", 2],["Nat.div_mul_cancel", 2],["Fin.ofNat'", 2],["Nat.dvd_lcm_left", 2],["implies_congr_ctx", 2],["Nonempty.intro", 2],["List.Mem.head", 2],["Nat.mod_eq_of_lt", 2],["Nat.find_x", 2],["WellFounded.intro", 2],["Nat.zero_mod", 2],["if_false", 2],["le_not_le_of_lt", 2],["Nat.gcd_mul_right", 2],["congr_arg", 2],["Nat.gt_of_not_le", 2],["PSum", 1],["UInt32.val", 1],["lt_iff_not_ge", 1],["Nat.lt_succ_iff", 1],["or_false", 1],["List.decidablePairwise", 1],["Nat.ble_eq_true_of_le", 1],["Quotient.exact", 1],["cond_false", 1],["Int.lt_irrefl", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["Nat.Linear.PolyCnstr.denote_mul", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Option.ne_none_iff_exists", 1],["Iff.comm", 1],["PSigma.RevLex.right", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.isNonZero", 1],["And.imp", 1],["Nat.succ_le_succ", 1],["Subsingleton.elim", 1],["Int.le.dest", 1],["Nat.Linear.PolyCnstr.mul", 1],["Nat.div_zero", 1],["Bool.not_false", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["Nat.Linear.Poly.isZero", 1],["Nat.coprime.coprime_div_left", 1],["WellFounded.fix'", 1],["Nat.to_digits_core_length", 1],["List.repeat'", 1],["Array.isEqvAux.proof_2", 1],["List.erasep_cons_of_neg", 1],["ne_false_of_eq_true", 1],["not_or_distrib", 1],["Nat.add_mul_mod_self_right", 1],["Eq.mpr_not", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["lt_or_eq_of_le", 1],["Nat.zero_le", 1],["not_of_not_imp", 1],["emptyRelation", 1],["em'", 1],["ofBoolUsing_eq_false", 1],["or_self", 1],["Nat.add_comm", 1],["not_imp_of_and_not", 1],["List.length_eq_zero", 1],["Nat.gcd_self", 1],["List", 1],["List.cons_append", 1],["Option.bind_eq_some", 1],["Nat.isValidChar", 1],["Int.ne_of_lt", 1],["or_imp_distrib", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["List.erasep", 1],["List.getLast_cons", 1],["Option.lt", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.mul_mod_mul_left", 1],["ne_false_of_self", 1],["Nat.mod_one", 1],["Decidable.byCases", 1],["Nat.zero_lt_succ", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["PSigma.revLex", 1],["Nat.lt_of_le_of_lt", 1],["Array.isEqvAux.proof_1", 1],["Nat.not_lt_eq", 1],["iff_true_intro", 1],["Nat.succ_sub_succ", 1],["Nat.lcm_dvd", 1],["Subtype.val", 1],["List.erase_eq_erasep", 1],["Nat.find_x.proof_1", 1],["sizeOf_nat", 1],["Nat.gcd_div", 1],["Nat.le_add_right", 1],["forall_eq", 1],["eq_comm", 1],["Bool.or_eq_true", 1],["List.remove", 1],["Int.le_refl", 1],["or_iff_left_iff_imp", 1],["List.nil_append", 1],["apply_ite", 1],["Int.lt_iff_le_and_ne", 1],["WellFounded.fix_eq", 1],["Int.lt.dest", 1],["Not.imp", 1],["Int.le_of_lt", 1],["iff_def'", 1],["Nat.coprime.coprime_mul_right", 1],["iff_of_false", 1],["List.ne_of_not_mem_cons", 1],["List.length_append", 1],["Nat.Linear.ExprCnstr.toNormPoly", 1],["Ne.irrefl", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.Linear.Certificate.combineHyps", 1],["Subtype.mk", 1],["UnionFind.lt_rankMax'", 1],["Bool.and_eq_true", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Inhabited.default", 1],["List.disjoint_nil_left", 1],["Array.isEqvAux_self", 1],["Eq.to_iff", 1],["Decidable.of_not_imp", 1],["Int.le_antisymm", 1],["Nat.lt_add_right", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["lt_of_not_ge", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["List.disjoint_of_subset_right", 1],["Classical.typeDecidable.proof_1", 1],["Nat.le_of_not_lt", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["UFModel.push", 1],["Option.ext", 1],["Nat.zero", 1],["List.disjoint_symm", 1],["List.cons_ne_nil", 1],["Fin.nsmuls_eq", 1],["not", 1],["forall_and_distrib", 1],["UnionFind.rank_lt", 1],["List.not_mem_of_not_mem_cons", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Bool.ff_ne_tt", 1],["Nat.not_le_eq", 1],["Array.isEqv_self", 1],["Or.neg_resolve_left", 1],["List.forall_mem_cons", 1],["UFModel.Agrees.set", 1],["imp_self", 1],["List.Mem.tail", 1],["Eq.mpr_prop", 1],["iff_not_self", 1],["UInt32.ofNat", 1],["Acc.intro", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Decidable.not_and_not_right", 1],["Nat.mul_div_assoc", 1],["exists_false", 1],["not_iff_false_intro", 1],["and_self", 1],["Nat.gcd_gcd_self_right_left", 1],["Sat.Literal.reify.mk", 1],["UnionFind.rankMax", 1],["Iff.elim_right", 1],["not.decidable_imp_symm", 1],["Nat.gcd_gcd_self_right_right", 1],["Function.injective.ne", 1],["WellFoundedRelation.rel", 1],["decide_eq_true", 1],["Nat.Linear.Poly.denote", 1],["Nat.Linear.PolyCnstr.denote", 1],["Nat.sub_lt_sub_left", 1],["Subsingleton.allEq", 1],["lt_of_lt_of_le", 1],["lt_iff_le_not_le", 1],["Nat.not_succ_le_self", 1],["Nat.mul_dvd_mul_right", 1],["exists_eq", 1],["Nat.gcd_mul_lcm", 1],["Array.get", 1],["Function.injective.ne_iff", 1],["Fin.ext", 1],["Decidable.iff_iff_and_or_not_and_not", 1],["Nat.mul_dvd_mul_left", 1],["and_not_self", 1],["imp.swap", 1],["Nat.add_mod_mod", 1],["List.ne_nil_of_length_pos", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.coprime_mul_iff_left", 1],["iff_true", 1],["List.getLast", 1],["Decidable.not_imp", 1],["Nonempty", 1],["Bool.not_true", 1],["le_of_lt", 1],["Decidable.not_iff_not", 1],["List.eq_or_mem_of_mem_cons", 1],["Classical.propDecidable", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Eq.subst", 1],["PSigma.mkSkipLeft.proof_1", 1],["ite_true", 1],["BEq.beq", 1],["ite_false", 1],["Nat.find_x.proof_3", 1],["true_implies", 1],["List.getLast_singleton", 1],["dec_em'", 1],["List.erase", 1],["Function.cantor_surjective", 1],["Nat.sub_succ_lt_self", 1],["le_of_not_gt", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_refl", 1],["Nat.lt_iff_le_not_le", 1],["not_lt_of_ge", 1],["iff_false_left", 1],["Nat.mod_add_mod", 1],["instDecidableXor.proof_4", 1],["not_forall_of_exists_not", 1],["Decidable.not_iff_comm", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Option.eq_none_iff_forall_not_mem", 1],["Nat.mul_one", 1],["Fin.mk.injEq", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Decidable.not_and_iff_or_not", 1],["lt_trans", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Option.bind", 1],["Nat.dvd_lcm_right", 1],["Nat.div_self", 1],["Prod.mk", 1],["List.erasep_of_forall_not", 1],["ite_not", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.not_lt_of_le", 1],["List.disjoint_of_subset_left", 1],["instDecidableXor.proof_2", 1],["Nat.zero_div", 1],["PSum.inl", 1],["exists_congr", 1],["Nat.pos_of_ne_zero", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["Nat.Linear.ExprCnstr.denote_toNormPoly", 1],["Fin", 1],["Nat.coprime_comm", 1],["Decidable.not_iff", 1],["if_pos", 1],["Fin.elim0", 1],["dite_not", 1],["Nat.succ_pos", 1],["Nat.coprime_one_left", 1],["and_true", 1],["Decidable.or_iff_not_and_not", 1],["Fin.val_eq_of_eq", 1],["List.erasep_cons_of_pos", 1],["Iff.elim_left", 1],["Decidable.iff_iff_not_or_and_or_not", 1],["Nat.succ_ne_self", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_of_not_le", 1],["Nat.one_pos", 1],["Option.some.injEq", 1],["Nat.mod_self", 1],["BinaryHeap.popMaxAux", 1],["or", 1],["Bool.of_not_eq_true", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["ne_of_gt", 1],["not_lt", 1],["Nat.zero_add", 1],["PSum.inr", 1],["UFModel.Agrees.empty", 1],["Bool.and_true", 1],["Decidable.and_iff_not_or_not", 1],["iff_iff_implies_and_implies", 1],["Preorder.lt_iff_le_not_le", 1],["List.mem_singleton", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Sat.Fmla.subsumes.prop", 1],["Nat.succ_mul", 1],["Function.RightInverse.surjective", 1],["instDecidableXor.proof_1", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["imp_intro", 1],["Nat.gcd_eq_left", 1],["Nat.sub_zero", 1],["Nat.Linear.Poly.of_isZero", 1],["Nat.exists_coprime", 1],["Not.decidable_imp_symm", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["UFModel.Agrees.push", 1],["false_or", 1],["WellFoundedRelation.wf", 1],["ne_of_lt", 1],["lt_asymm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.lt_or_ge", 1],["Decidable.of_not_not", 1],["UFNode.mk", 1],["Nat.lt_of_succ_lt_succ", 1],["Nat.lt_eq", 1],["Nat.Linear.Certificate.of_combineHyps", 1],["Decidable.iff_not_comm", 1],["List.get_singleton", 1],["Nat.Linear.Poly.denote_le", 1],["LawfulBEq.rfl", 1],["lt_or_gt_of_ne", 1],["Sat.Valuation.satisfies_fmla.prop", 1],["instDecidableXor.proof_3", 1],["Nat.add", 1],["Decidable.not_forall", 1]]],
["LT.lt", 485, [["Eq.refl", 133],["LT.lt", 104],["Eq", 88],["Eq.mpr", 86],["OfNat.ofNat", 86],["congrArg", 62],["Eq.trans", 55],["Eq.symm", 49],["congrFun", 48],["rfl", 46],["of_eq_true", 41],["HAdd.hAdd", 38],["Nat.gcd", 35],["Fin.val", 35],["Bool.true", 34],["Fin.mk", 34],["HMod.hMod", 33],["eq_self", 33],["HMul.hMul", 28],["Iff.intro", 24],["Nat.mod_lt", 24],["HSub.hSub", 21],["Eq.mp", 21],["congr", 20],["Nat.lt_of_lt_of_le", 19],["of_decide_eq_true", 17],["Nat.succ", 17],["Array.size", 16],["Nat.gcd_dvd_right", 16],["And.intro", 14],["Fin.isLt", 14],["LE.le", 14],["Option.some", 14],["dite", 13],["Nat.lt_succ_self", 12],["HEq.refl", 12],["Iff.mpr", 11],["List.length", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_true", 11],["Iff", 11],["List.cons", 11],["Nat.dvd_gcd", 11],["Classical.em", 10],["propext", 10],["absurd", 10],["Or.inl", 10],["eq_true_of_decide", 10],["HDiv.hDiv", 10],["Nat.sub_lt", 10],["False.elim", 9],["eq_false", 9],["Nat.lt_trans", 9],["Unit.unit", 9],["Decidable", 9],["Or.inr", 9],["Fin.size_positive", 9],["Nat.dvd_antisymm", 9],["List.nil", 8],["dite_congr", 8],["List.get", 8],["Array.get", 8],["Dvd.dvd", 8],["BinaryHeap.arr", 8],["Nat.zero_lt_succ", 8],["inferInstanceAs", 7],["lt_of_lt_of_le", 7],["max", 7],["Decidable.em", 7],["Bool.false", 7],["Nat.add_comm", 7],["Nat.lt_of_le_of_lt", 7],["And", 7],["Trans.mk", 7],["Int.add_comm", 7],["Nat.gcd_zero_left", 7],["Option.none", 7],["lt_of_le_not_le", 7],["Nat.zero_le", 7],["UFModel.parent", 7],["Not", 6],["iff_self", 6],["Nat.eq_zero_or_pos", 6],["if_pos", 6],["implies_congr", 6],["Nat.succ_le_succ", 6],["Int.zero_add", 6],["if_neg", 6],["dif_neg", 6],["Neg.neg", 6],["Nat.mul_comm", 6],["Decidable.decide", 6],["dite_true", 6],["Array.data", 5],["Nat.gcd_rec", 5],["And.right", 5],["Eq.mpr_prop", 5],["Nat.sub_le", 5],["Nat.dvd_mul_left", 5],["UFModel.rank", 5],["Array.size_set", 5],["Int.add_lt_add_left", 5],["lt_of_le_of_lt", 5],["Nat.coprime.symm", 5],["Nat.dvd_trans", 5],["ne_eq", 5],["Fin.val_eq_of_lt", 5],["HAppend.hAppend", 5],["False", 5],["And.left", 5],["ite_congr", 5],["Nat.succ_pos", 5],["PProd.fst", 5],["dif_pos", 5],["Nat.coprime", 5],["Or", 5],["Nat.lcm", 4],["Array.get?_eq_get?", 4],["True", 4],["GT.gt", 4],["UnionFind.size", 4],["Nat.add", 4],["Decidable.isTrue", 4],["Nat.le_of_lt", 4],["List.get?", 4],["Decidable.lt_or_eq_of_le", 4],["lt_of_not_ge", 4],["Nat.gcd_succ", 4],["le_trans", 4],["Nat.gcd_dvd", 4],["le_not_le_of_lt", 4],["Nat.dvd_mul_right", 4],["Exists.intro", 4],["Nat.le_add_right", 4],["WellFounded.fix_eq", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["List.get?_eq_get", 4],["Nat.zero", 4],["Nat.lt_irrefl", 4],["Int.neg_lt_neg", 4],["Int.add_lt_add_of_le_of_lt", 4],["Array.mk", 4],["le_antisymm", 4],["Nat.le_trans", 4],["Fin", 4],["Nat.lt_succ_of_le", 4],["Decidable.isFalse", 4],["Nat.eq_or_lt_of_le", 4],["Nat.add_lt_add_left", 4],["id", 4],["WellFounded.fix", 4],["Nat.lt_or_ge", 4],["not_le", 3],["le_of_lt", 3],["Nat.gcd_zero_right", 3],["max_eq_left", 3],["le_max_left", 3],["Trans.trans", 3],["Int.add_lt_add", 3],["Int.add_lt_add_of_lt_of_le", 3],["decide_eq_false", 3],["Nat.gcd_one_left", 3],["Nat.zero_lt_of_lt", 3],["Nat.gcd.induction", 3],["Fin.size_positive'", 3],["List.length_append", 3],["max_eq_right", 3],["Nat.toDigitsCore", 3],["Or.resolve_left", 3],["Nat.digitChar", 3],["lt_trans", 3],["le_refl", 3],["eq_false'", 3],["Iff.mp", 3],["Bool", 3],["instDecidableLtToLTToPreorderToPartialOrder", 3],["Int.lt_add_of_sub_right_lt", 3],["eq_of_heq", 3],["SizeOf.sizeOf", 3],["Nat.dvd_refl", 3],["Nat.le_of_succ_le_succ", 3],["ite", 3],["Iff.rfl", 3],["Nat.le_refl", 3],["Ne", 3],["Nat.lcm_comm", 3],["lt_irrefl", 3],["Nat.coprime.coprime_dvd_right", 3],["Prod.mk", 3],["eq_max", 3],["UnionFind.arr", 3],["Array.push", 3],["Int.le_of_lt", 3],["UFModel.rank_lt", 3],["Or.elim", 3],["Array.size_push", 3],["Int.add_lt_add_right", 3],["Option", 3],["dite_false", 3],["le_total", 3],["max_le", 3],["Array.get?", 3],["le_max_right", 3],["Nat.cast", 3],["eq_false_of_decide", 3],["List.set", 3],["le_of_not_lt", 3],["Nat.lt_of_succ_le", 3],["Array.set", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.not_le_of_gt", 3],["PSigma.mk", 3],["lt_or_le", 2],["Or.symm", 2],["List.cons_ne_nil", 2],["UnionFind.model'", 2],["Nat.not_eq_zero_of_lt", 2],["Subrelation.wf", 2],["UnionFind.rankMaxAux", 2],["Nat.mul", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Int.sub_right_lt_of_lt_add", 2],["UFModel.Models.parent_eq'", 2],["Nat.mul_one", 2],["Nat.add_eq", 2],["Int.le_refl", 2],["usize_size_eq", 2],["Nat.le_of_lt_succ", 2],["WellFoundedRelation.rel", 2],["Nat.sub_lt_sub_left", 2],["le_or_gt", 2],["Nat.not_lt_of_le", 2],["UFNode.mk", 2],["Fin.elim0", 2],["Nat.coprime.mul", 2],["Int.NonNeg.mk", 2],["Nat.Linear.Expr.add", 2],["Or.resolve_right", 2],["Nat.coprime.pow_left", 2],["Int.add_le_add_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["UFNode.rank", 2],["List.getLast", 2],["Nat.coprime.coprime_mul_left", 2],["UFModel.Models.rank_eq", 2],["BEq.beq", 2],["max_comm", 2],["Nat.succ_le_of_lt", 2],["Nat.mul_zero", 2],["Nat.gcd_mul_right", 2],["Nat.eq_zero_of_zero_dvd", 2],["Nat.add_succ", 2],["not_lt_of_ge", 2],["Nat.le_of_dvd", 2],["List.concat_eq_append", 2],["Int.add_le_add_right", 2],["Int.lt_iff_le_and_ne", 2],["decide_eq_true_iff", 2],["if_false", 2],["Nat.dvd_lcm_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["decide_eq_true_eq", 2],["Nat.dvd_mod_iff", 2],["List.length_cons", 2],["BinaryHeap.size_pos_of_max", 2],["Nat.gcd_one_right", 2],["Int.add_zero", 2],["Int.sub_left_lt_of_lt_add", 2],["Nat.pred", 2],["WellFoundedRelation.wf", 2],["Nat.div_mul_cancel", 2],["Nat.lt_of_succ_lt_succ", 2],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 2],["Fin.add_def", 2],["List.get?_set_ne", 2],["Nat.lcm_zero_left", 2],["Nat.le_antisymm", 2],["Int.negSucc", 2],["lt_of_le_of_ne", 2],["BinaryHeap.max", 2],["Nat.lt_of_not_le", 2],["List.length_pos_of_ne_nil", 2],["Nat.Linear.Expr.num", 2],["Nat.le_succ_of_le", 2],["not_le_of_gt", 2],["Nat.mod_eq_of_lt", 2],["if_true", 2],["Nat.le_of_not_lt", 2],["Nat.zero_add", 2],["Nat.sub_add_cancel", 2],["Fin.eq_of_val_eq", 2],["Nat.not_le_of_lt", 2],["USize.size", 2],["Fin.ofNat'", 2],["Nat.mul_lt_mul_of_pos_left", 2],["Nat.pos_of_ne_zero", 2],["Nat.pred_lt", 2],["Nat.coprime.gcd_left", 2],["Subsingleton.elim", 2],["Nat.Linear.Expr.var", 2],["Nat.not_succ_le_zero", 2],["mt", 2],["Int.ofNat_lt", 2],["Fin.mul_def", 2],["Nat.Linear.ExprCnstr.mk", 2],["Nat.zero_mod", 2],["Nat.gcd_mul_left_left", 2],["of_decide_eq_false", 2],["List.cons.sizeOf_spec", 2],["Option.some.inj", 2],["Nat.gt_of_not_le", 1],["Int.neg_neg_of_pos", 1],["Nat.isValidChar", 1],["Nat.lt_add_right", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.mod_le", 1],["Nat.sub_succ", 1],["Nat.succ_sub_succ_eq_sub", 1],["Int.neg_le_neg", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.add_sub_self_left", 1],["Int.NonNeg", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.pos_iff_ne_zero", 1],["Int.lt_add_of_sub_left_lt", 1],["Subtype.val", 1],["Int.mul_le_mul_of_nonneg_right", 1],["eq_of_beq", 1],["USize.decLt", 1],["beq_self_eq_true", 1],["List.get_append_right_aux", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["Nat.gcd_gcd_self_right_right", 1],["List.length_set", 1],["Array.isEqvAux.proof_1", 1],["max_eq_left_of_lt", 1],["Nat.not_lt_eq", 1],["Nat.le_of_add_le_add_left", 1],["Array.size_swap", 1],["Subsingleton.allEq", 1],["UFModel.Agrees.set", 1],["List.get?_append_right", 1],["Nat.mul_le_mul_of_nonneg_right", 1],["Nat.add_le_add_left", 1],["Nat.succ_ne_zero", 1],["Fin.modn_lt", 1],["sizeOf_nat", 1],["Nat.lt_by_cases", 1],["Int.lt_of_add_lt_add_left", 1],["Int.add_left_comm", 1],["false_iff", 1],["Int.add_lt_of_lt_sub_left", 1],["decidableLt_of_decidableLe.proof_2", 1],["List.hasDecidableLt.proof_4", 1],["Subtype.property", 1],["Nat.lt.base.proof_1", 1],["List.get?_append", 1],["UFNode.parent", 1],["decide_eq_true", 1],["Int.mul_lt_mul'", 1],["Prod.snd", 1],["Exists", 1],["HPow.hPow", 1],["Not.imp", 1],["List.lt.tail", 1],["Nat.coprime.coprime_mul_right", 1],["usize_size_gt_zero", 1],["Nat.Linear.Expr.inc", 1],["List.hasDecidableLt.proof_3", 1],["left_comm", 1],["Nat.gcd_mul_lcm", 1],["Int.mul_le_mul_of_nonneg_left", 1],["Nat.add_one", 1],["Nat.mul_dvd_mul_left", 1],["UnionFind.lt_rankMax'", 1],["Fin.ext", 1],["Nat.decLe", 1],["zero_lt_of_lt", 1],["Nat.mod.inductionOn", 1],["Nat.add_mod_mod", 1],["UInt64.decLt", 1],["UFModel.push", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.ble_eq_true_of_le", 1],["Int.le_antisymm", 1],["UInt16.decLt", 1],["Prod.fst", 1],["Nat.Linear.Var.denote.go", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Array.anyM.loop.proof_2", 1],["Nat.Linear.Var.denote", 1],["Int.neg_neg", 1],["Int.add_le_of_le_sub_right", 1],["Nat.sub_add_eq_max", 1],["Nat.coprime.coprime_div_left", 1],["Nat.sub_succ_lt_self", 1],["le_of_not_gt", 1],["GE.ge", 1],["Int.add_lt_of_lt_sub_right", 1],["List.repeat'", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.one_pos", 1],["Nat.mod_self", 1],["trivial", 1],["Bind.bind", 1],["Nat.le_div_iff_mul_le", 1],["USize.toNat", 1],["decidableLt_of_decidableLe.proof_1", 1],["Nat.zero_lt_one", 1],["Array.swap", 1],["Nat.mul_le_mul_of_nonneg_left", 1],["instTransLtToLTLeToLE.proof_1", 1],["MonoidWithZero.zero_mul", 1],["Nat.add_assoc", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["True.intro", 1],["Nat.mul_lt_mul_of_pos_right", 1],["Nat.div_self", 1],["Nat.instTransNatLtInstLTNatLeInstLENat.proof_1", 1],["Int.eq_zero_ofNatAbs_eq_zero", 1],["Nat.gcd_gcd_self_left_right", 1],["Bool.and_true", 1],["Array.isEqvAux_self", 1],["UInt32.ofNat", 1],["Int.sign_eq_neg_one_of_neg", 1],["Int.neg_of_sign_eq_neg_one", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.get?_push_eq", 1],["Nat.zero_div", 1],["Nat.mul_div_assoc", 1],["Int.mul_lt_mul_of_pos_left", 1],["Int.eq_succ_of_zero_lt", 1],["Nat.lt.base", 1],["Nat.gcd_gcd_self_right_left", 1],["Ordering.lt", 1],["lt_asymm", 1],["Decidable.of_not_not", 1],["min", 1],["Nat.coprime_comm", 1],["UnionFind.rankMax", 1],["Int.neg_add_lt_left_of_lt_add", 1],["min_eq_right_of_lt", 1],["Array.get?_push_lt", 1],["and_true", 1],["Nat.add_lt_add_right", 1],["Float.decLt", 1],["Decidable.le_iff_lt_or_eq", 1],["sorryAx", 1],["Array.anyM.loop.proof_1", 1],["Nat.Linear.Poly.denote", 1],["Nat.gcd_mul_left", 1],["UInt32.val", 1],["Nat.gcd_self", 1],["Fin.ofNat'_succ", 1],["FloatArray.size", 1],["Nat.Linear.fixedVar", 1],["gt_of_ge_of_gt", 1],["cond_true", 1],["UInt8.val", 1],["instTransLeToLELtToLT.proof_1", 1],["lt_iff_le_not_le", 1],["Nat.mul_dvd_mul_right", 1],["Nat.not_succ_le_self", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Preorder.lt_iff_le_not_le", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Int.natAbs", 1],["Int.lt_of_neg_lt_neg", 1],["Nat.succ_mul", 1],["gt_of_gt_of_ge", 1],["Nat.to_digits_core_length", 1],["Int.le.intro", 1],["List.ne_nil_of_length_pos", 1],["Int.ne_of_lt", 1],["UnionFind.lt_rankMax", 1],["true_and", 1],["UFModel.Agrees.get_eq", 1],["List.lt.head", 1],["Nat.div_lt_iff_lt_mul", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["UInt8.decLt", 1],["ne_of_lt", 1],["Nat.cast_succ", 1],["Option.some_inj", 1],["List.get?_set_of_lt", 1],["Or.imp_right", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Array.get_eq_get", 1],["System.Platform.numBits", 1],["ite_true", 1],["UInt32.decLt", 1],["ite_false", 1],["ite_self", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.lt_of_add_lt_add_left", 1],["Nat.le_of_succ_le", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["List.getLast_cons", 1],["le_of_lt_or_eq", 1],["Nat.mul_mod_mul_left", 1],["Int.lt_add_of_neg_add_lt_left", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.lt_iff_le_not_le", 1],["funext", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqv", 1],["Nat.mod_add_mod", 1],["Nat.sub_eq_zero_iff_le", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["List.hasDecidableLt.proof_2", 1],["Array.mk.sizeOf_spec", 1],["Fin.mk.injEq", 1],["Array.sizeOf_get_lt", 1],["Nat.cast_mul", 1],["Iff.refl", 1],["lt_iff_not_ge", 1],["Nat.lt_succ_iff", 1],["Nat.mul_succ", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.dvd_lcm_right", 1],["LinearOrder.decidable_lt", 1],["Int.add_left_cancel", 1],["Nat.lcm_dvd", 1],["Int.lt_irrefl", 1],["List.exists_mem_of_length_pos", 1],["Nat.sub_sub", 1],["Nat.le_lt_antisymm", 1],["lt_trichotomy", 1],["Nat.le_of_ble_eq_true", 1],["Nat.le_step", 1],["Nat.gcd_div", 1],["Int.sign_eq_one_of_pos", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.add_zero", 1],["Int.neg_zero", 1],["Function.comp", 1],["Int.ofNat_succ_pos", 1],["Int.lt_add_one_of_le", 1],["Nat.instTransNatLtInstLTNat.proof_1", 1],["And.imp", 1],["Int.le.dest", 1],["Array.get?_set_ne", 1],["List.lt.nil", 1],["Nat.coprime_one_left", 1],["Nat.lt_of_add_lt_add_right", 1],["Array.get?_eq_get", 1],["Ord.compare", 1],["Nat.lt.step.proof_1", 1],["Nat.decLt", 1],["Nat.lt_add_of_pos_right", 1],["List.length_pos_of_mem", 1],["Nat.gcd_mul_right_left", 1],["Nat.div_zero", 1],["Nat.pos_pow_of_pos", 1],["DecidableRel", 1],["max_assoc", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.instTransNatLeInstLENatLtInstLTNat.proof_1", 1],["le_or_lt", 1],["List.hasDecidableLt.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.lt_of_le_of_ne", 1],["Nat.dvd_zero", 1],["ne_of_gt", 1],["not_lt", 1],["Int.mul_lt_mul_of_pos_right", 1],["List.get?_len_le", 1],["Int.lt_add_succ", 1],["Iff.symm", 1],["instTransGeToLEGtToLT.proof_1", 1],["false_and", 1],["Pure.pure", 1],["Int.lt_iff_add_one_le", 1],["Nat.pow_succ", 1],["not_congr", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Ne.symm", 1],["BinaryHeap.size", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_sub_add_right", 1],["Int.lt.dest", 1],["cond", 1],["Nat.zero_lt_sub_of_lt", 1],["Int.eq_ofNat_of_zero_le", 1],["Int.lt_sub_left_of_add_lt", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["Array.anyM.loop.proof_3", 1],["Nat.coprime.pow_right", 1],["Nat.mod_one", 1],["Int.neg_succ_lt_zero", 1],["ByteArray.size", 1],["Int.pos_of_sign_eq_one", 1],["Nat.lcm_one_left", 1],["Nat.mul_le_mul_left", 1],["Int.ofNat_le", 1],["UFModel.Agrees.push", 1],["Nat.sub_lt_left_of_lt_add", 1],["List.length_eq_zero", 1],["Nat.lt_eq", 1],["Nonempty.elim", 1],["instTransGtToLTGeToLE.proof_1", 1],["Nat.pow_le_pow_of_le_right", 1],["Nat.gcd_pos_of_pos_left", 1],["min_eq_left", 1],["List.get_singleton", 1],["List.length_repeat'", 1],["Nat.lt_trichotomy", 1],["lt_or_gt_of_ne", 1],["Nat.mul_eq", 1]]],
["Iff", 427, [["Iff.intro", 224],["Iff", 95],["Eq.refl", 94],["congrArg", 79],["Eq", 79],["propext", 77],["Eq.trans", 73],["Eq.symm", 65],["Eq.mpr", 64],["And", 63],["of_eq_true", 60],["And.intro", 56],["congrFun", 54],["iff_self", 52],["congr", 43],["Iff.rfl", 41],["Exists", 37],["Or", 35],["Exists.intro", 32],["Membership.mem", 30],["False", 30],["rfl", 29],["eq_false", 27],["Or.inr", 25],["Not", 23],["Or.inl", 23],["Iff.mp", 22],["Iff.mpr", 22],["Iff.trans", 21],["eq_self", 20],["Option.some", 20],["And.right", 19],["funext", 19],["Bool.true", 19],["OfNat.ofNat", 18],["HAdd.hAdd", 17],["And.left", 16],["List.cons", 16],["Nonempty.intro", 16],["List.not_mem_nil", 14],["True", 14],["implies_congr", 14],["eq_false'", 14],["Option.none", 13],["HEq.refl", 13],["List.mem_cons", 13],["eq_of_heq", 13],["Iff.symm", 12],["False.elim", 12],["Nonempty", 12],["trivial", 11],["eq_true_of_decide", 11],["eq_true", 11],["false_and", 11],["forall_congr", 10],["LE.le", 10],["Unit.unit", 10],["Prod.mk", 10],["Bool.false", 10],["List.nil", 9],["eq_false_of_decide", 9],["Decidable.em", 9],["LT.lt", 9],["Or.elim", 9],["Eq.mp", 9],["Option.some.injEq", 9],["and_congr", 9],["HMul.hMul", 9],["exists_false", 8],["id", 8],["exists_congr", 8],["mt", 7],["eq_comm", 7],["forall_congr'", 6],["true_and", 6],["HSub.hSub", 6],["And.comm", 6],["not_not_intro", 6],["false_or", 6],["Prod.snd", 5],["Option.isSome_some", 5],["decide_eq_false", 5],["Prod.fst", 5],["or_assoc", 5],["dite", 5],["PProd.fst", 5],["Fin.val", 5],["ne_eq", 5],["or_false", 5],["and_comm", 5],["Option.mem_def", 5],["iff_true_intro", 5],["or_comm", 5],["List.mem_append", 4],["Ne", 4],["or_congr", 4],["Function.injective.eq_iff", 4],["Function.bijective.injective", 4],["iff_def", 4],["Nat.succ", 4],["Iff.refl", 4],["Function.funext_iff", 4],["Nat.add_sub_cancel", 4],["Nat.gcd", 4],["iff_false_intro", 4],["Or.comm", 4],["Prod.mk.injEq", 4],["absurd", 4],["Function.comp", 4],["Function.bijective.surjective", 4],["forall_eq", 4],["Dvd.dvd", 4],["Subtype.mk", 3],["List.length", 3],["HDiv.hDiv", 3],["Decidable.not_imp_comm", 3],["and_imp", 3],["not_le", 3],["Nat.succ_ne_zero", 3],["List.Mem.tail", 3],["Option.get", 3],["List.mem_map", 3],["Subtype.ext_iff", 3],["Bool", 3],["exists_eq_right", 3],["of_decide_eq_false", 3],["Option.map_some'", 3],["List.nil_append", 3],["HAppend.hAppend", 3],["Option.map_none'", 3],["decide_eq_true", 3],["Option", 3],["Iff.comm", 3],["List.Mem.head", 3],["id_eq", 3],["exists_prop", 3],["Decidable.not_not", 3],["imp_not_comm", 3],["Nat.cast", 3],["exists_eq_left'", 3],["List.cons_append", 3],["or_imp_distrib", 3],["Option.isSome_none", 3],["and_self", 3],["Decidable.decide", 3],["Fin", 3],["Nat.sub_le_sub_right_iff", 3],["true_or", 3],["forall_and_distrib", 3],["not_not", 3],["congr_arg", 3],["false_iff", 3],["add_right_cancel", 2],["mul_left_cancel", 2],["Not.decidable_imp_symm", 2],["List.mem_cons_of_mem", 2],["Classical.choice", 2],["Decidable.isTrue", 2],["Nat.mod_eq_zero_of_dvd", 2],["Int.ofNat.inj", 2],["Fin.mk", 2],["add_zero", 2],["Nat.not_lt_of_le", 2],["decide_eq_true_iff", 2],["and_true", 2],["Decidable.not_imp_not", 2],["Or.assoc", 2],["Decidable.not_and_distrib", 2],["iff_iff_implies_and_implies", 2],["Decidable.or_iff_not_imp_left", 2],["List.mem_cons_self", 2],["Int.le.dest", 2],["And.imp", 2],["Subtype.val", 2],["iff_false", 2],["Function.surjective.exists", 2],["Nat.add_comm", 2],["ite", 2],["List", 2],["Function.forall_update_iff", 2],["Option.bind_eq_some", 2],["List.mem_insert_iff", 2],["Function.injective.comp", 2],["not_forall", 2],["or_iff_left_iff_imp", 2],["not_and_of_not_or_not", 2],["List.disjoint_comm", 2],["add_left_cancel", 2],["Nat.gcd_zero_right", 2],["not_exists", 2],["Nat.gcd_zero_left", 2],["or_true", 2],["and_congr_right", 2],["Function.surjective.comp", 2],["Nat.coprime", 2],["of_decide_eq_true", 2],["add_left_cancel_iff", 2],["HMod.hMod", 2],["exists_eq_left", 2],["imp_self", 2],["if_ctx_congr_prop", 2],["Or.resolve_left", 2],["Decidable.by_contradiction", 2],["List.mem_map_of_mem", 2],["Nat.dvd_trans", 2],["List.map", 2],["Option.bind_eq_none", 2],["Ne.symm", 2],["List.disjoint", 2],["Or.imp_right", 2],["List.subset_def", 2],["ite_true", 2],["Nat.lt_of_not_le", 2],["ite_false", 2],["Or.imp", 2],["Option.some_ne_none", 2],["List.singleton_disjoint", 2],["imp_congr_left", 2],["And.left_comm", 2],["ite_congr", 2],["not_and", 2],["Function.surjective.forall", 2],["List.mem_singleton", 2],["Decidable.isFalse", 2],["Decidable.imp_iff_not_or", 2],["mul_right_cancel", 2],["Nat.not_le_of_lt", 2],["congr_fun", 2],["imp_intro", 2],["implies_true", 2],["Nat.le_of_not_lt", 2],["Nat.dvd_iff_mod_eq_zero", 1],["Nat.sub_eq_zero_of_le", 1],["List.append_eq_cons_iff", 1],["le_of_lt_or_eq", 1],["Nat.pos_of_ne_zero", 1],["Int.le_of_lt", 1],["Int.eq_zero_of_sign_eq_zero", 1],["Nat.le.intro", 1],["Function.injective.of_comp_iff", 1],["Subtype.coe_eta", 1],["lt_iff_not_ge", 1],["Nat.le_of_lt", 1],["List.insert_of_not_mem", 1],["And.imp_right", 1],["Classical.byContradiction", 1],["unique_of_exists_unique", 1],["List.get?", 1],["Nat.coprime.coprime_mul_left", 1],["Nat.eq_zero_of_le_zero", 1],["Nat.mod_add_div", 1],["Option.ne_none_iff_exists", 1],["List.length_singleton", 1],["lt_of_not_ge", 1],["instDecidableIff.proof_2", 1],["Nat.add_zero", 1],["Decidable.lt_or_eq_of_le", 1],["List.exists_or_eq_self_of_erasep", 1],["Nat.succ.inj", 1],["Subsingleton.elim", 1],["Decidable.imp_or_distrib", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["exists_imp_distrib", 1],["Function.surj_inv", 1],["Or.symm", 1],["not_congr", 1],["PProd", 1],["Iff.elim_right", 1],["not_or_distrib", 1],["List.get?_eq_some", 1],["Nat.mul_sub_left_distrib", 1],["Nat.zero_le", 1],["not_of_not_imp", 1],["or_self", 1],["Int.pos_of_sign_eq_one", 1],["Function.surjective.of_comp", 1],["Nat.gcd_one_left", 1],["Int.ofNat_le", 1],["Function.surjective.has_RightInverse", 1],["Prod.mk.eta", 1],["Nat.le_of_sub_eq_zero", 1],["not_imp_of_and_not", 1],["Prod.Lex.left", 1],["Nat.gcd_dvd", 1],["List.mem_append_left", 1],["Subtype", 1],["Nat.gt_of_not_le", 1],["Function.injective.ne_iff", 1],["List.get_of_mem", 1],["Nat.dvd_of_mod_eq_zero", 1],["imp_congr_ctx", 1],["Nat.coprime.symm", 1],["Nonempty.map", 1],["Fin.ext", 1],["List.erasep", 1],["imp_congr_right", 1],["Option.get_some", 1],["Nat.sub_le_sub_right", 1],["instDecidableIff.proof_1", 1],["imp.swap", 1],["if_ctx_simp_congr_prop", 1],["Function.surjective.of_comp_iff'", 1],["List.get", 1],["exists_eq", 1],["List.Pairwise", 1],["List.mem_of_elem_eq_true", 1],["exists₂_congr", 1],["List.length_cons", 1],["List.mem_of_mem_erasep", 1],["List.cons.injEq", 1],["Nat.add_le_add_iff_le_right", 1],["Fin.isLt", 1],["Nat.dvd_mul_right", 1],["List.join", 1],["Decidable.not_iff_not", 1],["iff_self_and", 1],["Function.surjective.forall₂", 1],["Nat.le_add_right", 1],["Nat.gcd_one_right", 1],["Function.LeftInverse.comp_eq_id", 1],["List.get?_eq_get", 1],["List.mem_bind", 1],["Nat.add_sub_cancel_left", 1],["not_forall_of_exists_not", 1],["Sum", 1],["Int.le_refl", 1],["Decidable.not_forall", 1],["Subtype.property", 1],["List.mem_iff_get", 1],["Sigma", 1],["Exists.elim", 1],["exists_eq_right_right'", 1],["Not.imp", 1],["Nat.gcd_self", 1],["List.append_subset_of_subset_of_subset", 1],["iff_def'", 1],["Nat.coprime.coprime_mul_right", 1],["iff_of_false", 1],["not_false", 1],["List.nil_union", 1],["List.mem_append_right", 1],["Prod", 1],["le_of_not_gt", 1],["Int.ofNat_eq_ofNat_iff", 1],["and_or_distrib_left", 1],["Sum.inl", 1],["Nat.le_of_lt_succ", 1],["Nat.dvd_add", 1],["Sum.inr", 1],["Function.injective.of_comp", 1],["Option.map_eq_none'", 1],["Nat.zero_mul", 1],["Nat.add_one", 1],["List.cons_union", 1],["Nat.mod.inductionOn", 1],["and_assoc", 1],["or_and_distrib_left", 1],["Option.eq_none_of_isNone", 1],["Option.none_bind", 1],["Nat.add_eq", 1],["Decidable.imp_or_distrib'", 1],["Int.le_antisymm", 1],["Decidable.not_imp_self", 1],["Decidable.not_and_iff_or_not", 1],["Nat.gcd_dvd_right", 1],["Decidable.not_or_of_imp", 1],["List.Perm.symm", 1],["Prod.Lex", 1],["Nat.gcd_rec", 1],["exists₃_congr", 1],["le_of_eq", 1],["Int.NonNeg.mk", 1],["Nat.zero", 1],["Nat.add_left_cancel", 1],["Int.ofNat", 1],["List.disjoint_symm", 1],["Option.some_bind", 1],["Nat.sub_add_cancel", 1],["List.Pairwise.cons", 1],["Subtype.forall", 1],["Nat.le_div_iff_mul_le", 1],["Decidable.of_not_not", 1],["Int.sign_eq_neg_one_of_neg", 1],["And.elim", 1],["Int.negSucc", 1],["List.mem_union_iff", 1],["Nat.not_succ_le_zero", 1],["List.insert_of_mem", 1],["Int.negSucc.inj", 1],["Nat.le.dest", 1],["List.exists_mem_cons_of_exists", 1],["True.intro", 1],["forall₃_congr", 1],["Int.eq_of_sub_eq_zero", 1],["Int.sign_zero", 1],["Function.surjective.of_comp_iff", 1],["Nat.gcd_comm", 1],["Option.isNone_some", 1],["List.append_left_injective", 1],["Nat.dvd_add_iff_left", 1],["Function.partial_inv", 1],["Int.neg_of_sign_eq_neg_one", 1],["List.append_right_injective", 1],["Decidable.not_and_not_right", 1],["Option.isNone_none", 1],["iff_of_true", 1],["List.eq_of_mem_singleton", 1],["List.filterAux", 1],["PSigma", 1],["iff_of_eq", 1],["not_iff_false_intro", 1],["Function.surjective.exists₂", 1],["ULift", 1],["exists_and_distrib_left", 1],["if_neg", 1],["List.get_mem", 1],["not.decidable_imp_symm", 1],["List.insert", 1],["or_iff_left_of_imp", 1],["false_implies", 1],["Function.injective.ne", 1],["Function.LeftInverse_surj_inv", 1],["Or.neg_resolve_left", 1],["And.symm", 1],["iff_true_left", 1],["PLift", 1],["Prod.mk.inj", 1],["Option.some_get", 1],["Nat.coprime_comm", 1],["Int.ofNat_add", 1],["le_refl", 1],["And.assoc", 1],["if_pos", 1],["and_false", 1],["ExistsUnique.exists", 1],["Nat.add_le_add_right", 1],["Decidable.iff_iff_and_or_not_and_not", 1],["Nat.zero_eq", 1],["Int.ne_of_lt", 1],["instDecidableIff.proof_3", 1],["Decidable.or_iff_not_imp_right", 1],["congr_arg2", 1],["List.ne_nil_of_length_pos", 1],["List.exists_mem_cons_of", 1],["Function.RightInverse_surj_inv", 1],["Nat.coprime_mul_iff_left", 1],["iff_true", 1],["Option.ext", 1],["or_iff_right_of_imp", 1],["Nat.cast_succ", 1],["And.congr_right_iff", 1],["not_iff_not_of_iff", 1],["Option.ne_none_iff_isSome", 1],["Function.injective.of_comp_iff'", 1],["List.Mem", 1],["sorryAx", 1],["Prod.forall", 1],["List.exists_of_mem_map", 1],["Decidable.le_iff_lt_or_eq", 1],["Function.has_LeftInverse.injective", 1],["Function.has_RightInverse.surjective", 1],["Prod.exists", 1],["Prod.lex_def", 1],["List.repeat'", 1],["Prod.swap_injective", 1],["le_antisymm", 1],["true_implies", 1],["PProd.mk", 1],["HEq.rfl", 1],["List.reverseAux", 1],["Decidable.not_iff_comm", 1],["Nat.div_eq", 1],["List.erase", 1],["Option.map_eq_map", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Function.bijective", 1],["Nat.lt_iff_le_not_le", 1],["Function.involutive.injective", 1],["Int.le.intro", 1],["Nat.succ.injEq", 1],["not_lt_of_ge", 1],["List.Fin.exists_iff", 1],["Not.elim", 1],["Option.eq_none_iff_forall_not_mem", 1],["List.elem_eq_true_of_mem", 1],["List.disjoint_append_left", 1],["Nat.coprime_iff_gcd_eq_one", 1],["decide_eq_true_eq", 1],["Option.bind", 1],["PLift.up", 1],["Int.NonNeg", 1],["List.exists_mem_of_length_pos", 1],["and_iff_left_of_imp", 1],["iff_not_self", 1],["Decidable.not_imp", 1],["Subtype.ext", 1],["Prod.mk.inj_iff", 1],["List.mem_filterAux", 1],["Nat.coprime.gcd_mul_left_cancel", 1],["List.map_cons", 1],["Int.sign_eq_one_of_pos", 1],["Int.lt_iff_le_and_ne", 1],["Function.injective.has_LeftInverse", 1],["List.mem_filter", 1],["Int.sign", 1],["Nat.dvd_add_iff_right", 1],["Decidable.not_iff", 1],["Decidable.and_iff_not_or_not", 1],["instDecidableIff.proof_4", 1],["PSum.inl", 1],["exists_imp_exists", 1],["Decidable.or_iff_not_and_not", 1],["List.remove", 1],["Or.imp_left", 1],["Preorder.lt_iff_le_not_le", 1],["Iff.elim_left", 1],["Decidable.iff_iff_not_or_and_or_not", 1],["List.length_pos_of_mem", 1],["Sigma.mk", 1],["Nat.succ_mul", 1],["List.length_pos_of_ne_nil", 1],["and_iff_right_of_imp", 1],["Nat.lt_succ_of_le", 1],["Option.isSome", 1],["List.eq_nil_of_length_eq_zero", 1],["not_le_of_gt", 1],["ULift.up", 1],["List.or_exists_of_exists_mem_cons", 1],["Classical.axiomOfChoice", 1],["List.mem_join", 1],["ne_of_gt", 1],["not_lt", 1],["List.get?_len_le", 1],["heq_of_eq", 1],["Int.sub_eq_zero_of_eq", 1],["dif_pos", 1],["Function.RightInverse.surjective", 1],["ne_of_lt", 1],["Int.lt_iff_add_one_le", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.mem_reverseAux", 1],["Nat.le_of_add_le_add_right", 1],["List.mem_erasep_of_neg", 1],["List.erase_eq_erasep", 1],["Function.swap", 1],["Nat.dvd_gcd", 1],["Function.RightInverse.comp_eq_id", 1],["iff_false_left", 1],["List.append_eq_nil", 1],["Nat.lt_of_lt_of_le", 1],["and_iff_left_iff_imp", 1],["exists_eq'", 1],["heq_iff_eq", 1],["forall₂_congr", 1],["Function.injective.eq_iff'", 1],["Decidable.of_not_imp", 1],["ExistsUnique", 1],["Nat.not_le_of_gt", 1],["Nonempty.elim", 1],["List.mem_reverse", 1],["List.ball_cons", 1],["forall_const", 1],["PSum.inr", 1],["PSigma.mk", 1],["Decidable.iff_not_comm", 1],["iff_iff_eq", 1],["lt_or_gt_of_ne", 1],["Prod.Lex.right", 1],["Nat.le_of_le_of_sub_le_sub_right", 1],["Function.LeftInverse.injective", 1],["PSum", 1]]],
["And", 407, [["And.intro", 157],["Eq.refl", 127],["Eq", 95],["Eq.symm", 89],["And", 79],["Iff.intro", 73],["Eq.mpr", 65],["Eq.trans", 63],["congrArg", 60],["congrFun", 50],["HEq.refl", 45],["rfl", 44],["of_eq_true", 43],["propext", 43],["Iff", 43],["eq_of_heq", 42],["OfNat.ofNat", 38],["congr", 37],["Nat.gcd", 35],["Exists.intro", 34],["Eq.propIntro", 31],["Exists", 29],["And.left", 27],["And.right", 26],["eq_self", 25],["HMul.hMul", 25],["iff_self", 23],["False", 23],["Or", 22],["List.cons", 22],["Fin.val", 22],["Membership.mem", 21],["Or.inl", 20],["HMod.hMod", 19],["Or.inr", 19],["Not", 19],["eq_false", 19],["Iff.rfl", 18],["Nat.gcd_dvd_right", 16],["HAdd.hAdd", 15],["Fin.mk", 15],["funext", 14],["Bool.true", 14],["false_and", 13],["dite", 12],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["List.nil", 11],["Iff.mp", 11],["Nat.dvd_gcd", 11],["Iff.mpr", 10],["Nat.mod_lt", 10],["Eq.mp", 10],["LT.lt", 9],["Decidable.em", 9],["Nat.dvd_antisymm", 9],["Iff.trans", 9],["False.elim", 8],["implies_congr", 8],["Fin.size_positive", 8],["HDiv.hDiv", 8],["eq_true_of_decide", 8],["List.not_mem_nil", 7],["Unit.unit", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["PProd.fst", 7],["List.mem_cons", 7],["Nat.succ", 7],["eq_true", 7],["and_congr", 6],["exists_false", 6],["And.imp", 6],["And.comm", 6],["true_and", 6],["HAppend.hAppend", 6],["Or.elim", 6],["ite_congr", 6],["Decidable.isTrue", 6],["Decidable.isFalse", 6],["eq_false'", 6],["Nat.mul_comm", 5],["LE.le", 5],["Fin.val_eq_of_lt", 5],["forall_congr", 5],["List.length", 5],["True", 5],["Nat.coprime.symm", 5],["Nat.coprime", 5],["Option.some", 5],["Nat.dvd_mul_left", 5],["Nat.dvd_trans", 5],["and_comm", 5],["Nat.gcd_rec", 5],["id", 5],["mt", 4],["Nat.eq_zero_or_pos", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["trivial", 4],["HSub.hSub", 4],["Prod.mk", 4],["ne_eq", 4],["UFModel.parent", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["List.Mem.tail", 4],["List.mem_cons_self", 4],["UnionFind.arr", 4],["Option.some.injEq", 4],["Nat.dvd_mul_right", 4],["Nat.gcd_dvd", 4],["Fin.isLt", 4],["UnionFind.size", 4],["Nat.gcd_succ", 4],["List.cons_append", 3],["List.mem_append", 3],["Nat.gcd.induction", 3],["Nat.lcm_comm", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["Classical.em", 3],["and_true", 3],["Array.get", 3],["false_or", 3],["List.Mem.head", 3],["Array.size", 3],["Nat.le_add_right", 3],["eq_comm", 3],["or_false", 3],["List.nil_append", 3],["UFNode.parent", 3],["Prod.fst", 3],["Ne", 3],["Option.none", 3],["Bool.false", 3],["UFModel.rank", 3],["UFNode.mk", 3],["or_imp_distrib", 3],["of_decide_eq_true", 3],["and_self", 3],["List.mem_cons_of_mem", 3],["Decidable", 3],["Prod.snd", 3],["exists_eq_left'", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Nat.dvd_refl", 3],["Fin.size_positive'", 3],["forall_and_distrib", 3],["Nat.gcd_zero_right", 3],["WellFounded.fix", 3],["Nat.coprime.coprime_dvd_right", 3],["PSigma.mk", 3],["and_imp", 3],["ite", 2],["Nat.lt_of_lt_of_le", 2],["Nat.dvd_lcm_left", 2],["Ne.symm", 2],["dif_neg", 2],["and_congr_right", 2],["UFModel.Models.empty", 2],["Nat.coprime.pow_left", 2],["Prod.mk.injEq", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["le_of_eq", 2],["exists_eq_left", 2],["Nat.coprime.coprime_mul_left", 2],["UFModel.Models", 2],["UFModel.Models.size_eq", 2],["PProd.mk", 2],["Nat.gcd_mul_left_left", 2],["Function.funext_iff", 2],["Nat.gcd_mul_right", 2],["And.left_comm", 2],["Option.map_none'", 2],["Function.forall_update_iff", 2],["if_neg", 2],["List", 2],["Function.LeftInverse_inv_fun", 2],["Or.resolve_left", 2],["not_and_of_not_or_not", 2],["Function.bijective.injective", 2],["Nat.sub_lt_sub_left", 2],["Option.map_some'", 2],["Nat.gcd_one_right", 2],["if_false", 2],["Fin.mul_def", 2],["UFModel.push", 2],["UnionFind.rankMaxAux", 2],["Nat.lt_succ_self", 2],["Nat.coprime.gcd_left", 2],["List.mem_bind", 2],["Function.comp", 2],["Function.inv_fun_on_pos", 2],["Nonempty", 2],["Nat.le_of_succ_le_succ", 2],["List.subset_def", 2],["ite_true", 2],["ite_false", 2],["exists_congr", 2],["or_comm", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Function.bijective", 2],["Nat.le_of_dvd", 2],["dite_congr", 2],["Nat.zero_mod", 2],["List.length_append", 2],["List.mem_map", 2],["if_pos", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["List.mem_join", 2],["dif_pos", 2],["Subtype.property", 2],["and_false", 2],["sorryAx", 2],["Fin.add_def", 2],["WellFounded.fix_eq", 2],["Nat.lcm_zero_left", 2],["not_and", 2],["Fin.eq_of_val_eq", 2],["Nat.mul_zero", 2],["Decidable.not_and_distrib", 2],["absurd", 2],["if_true", 2],["List.exists_of_erasep", 2],["Function.inv_fun_eq", 2],["implies_true", 2],["Fin.ofNat'", 2],["Decidable.not_not", 2],["Nat.coprime.mul", 2],["Nonempty.intro", 2],["iff_iff_implies_and_implies", 2],["Nat.div_mul_cancel", 2],["Function.bijective.surjective", 2],["UFModel.empty", 2],["Nat.mod_eq_of_lt", 2],["Nat.sub_lt", 2],["dite_true", 2],["List.map", 2],["eq_false_of_decide", 2],["Nat.gt_of_not_le", 1],["Nat.to_digits_core_length", 1],["Nat.le_of_lt", 1],["Nat.lt_succ_iff", 1],["And.imp_right", 1],["Tactic.NormCast.CoeFnInfo.mk", 1],["Option.decidable_exists_mem.proof_2", 1],["Tactic.NormCast.NormCastExtension.mk", 1],["Nat.coprime.coprime_div_left", 1],["Nat.lt_trans", 1],["Int.ne_of_lt", 1],["decidableBEx.proof_3", 1],["Iff.comm", 1],["Nat.add_zero", 1],["List.repeat'", 1],["Int.le.dest", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Int.le_add_of_nonneg_left", 1],["UFModel.push.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["UnionFind.model'", 1],["WellFounded.fix'", 1],["Iff.symm", 1],["List.exists_mem_cons_of", 1],["List.erasep_cons_of_neg", 1],["PProd", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List.append_inj", 1],["not_or_distrib", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.zero_le", 1],["not_of_not_imp", 1],["Nat.mul_mod_mul_left", 1],["ByteSliceT.mk", 1],["Prod.mk.eta", 1],["Int.ofNat_le", 1],["Nat.add_comm", 1],["not_imp_of_and_not", 1],["Prod.Lex.left", 1],["imp_congr_left", 1],["iff_def", 1],["ByteSlice.mk", 1],["Nat.zero_lt_succ", 1],["UFModel.Models.push", 1],["Option.decidable_exists_mem.proof_1", 1],["Nat.eq_zero_of_add_eq_zero_right", 1],["Nat.isValidChar", 1],["Function.inv_fun", 1],["Option.map_eq_map", 1],["id_eq", 1],["List.erasep", 1],["UnionFind.findAux.proof_2", 1],["Nat.lcm_dvd", 1],["Function.injective.comp", 1],["Equiv.mk", 1],["Nat.find_min", 1],["ExistsUnique.intro", 1],["Nat.coprime.gcd_both", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["or_self", 1],["Nat.gcd_self", 1],["and_assoc", 1],["List.Pairwise", 1],["DecidableRel", 1],["Int.lt_iff_le_and_ne", 1],["Function.LeftInverse_surj_inv", 1],["List.remove", 1],["List.cons.injEq", 1],["FloatSpec.mk", 1],["Tactic.Ring.Cache.mk", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.succ_ne_zero", 1],["List.ne_of_not_mem_cons", 1],["Nat.find_x.proof_1", 1],["UFModel.Agrees.push", 1],["Function.inv_fun_on_eq", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["List.not_mem_of_not_mem_cons", 1],["forall_eq", 1],["Nat.gcd_pos_of_pos_left", 1],["List.erase_eq_erasep", 1],["Subtype.mk", 1],["Nat.Linear.PolyCnstr.mk", 1],["Nat.add_right_cancel", 1],["Int.le_refl", 1],["List.append_eq_nil", 1],["Nat.gcd_div", 1],["lt_irrefl", 1],["Sat.Clause.reify.prop", 1],["Sigma", 1],["Exists.elim", 1],["Decidable.of_not_imp", 1],["WellFounded.intro", 1],["exists_eq_right_right'", 1],["Set.univ", 1],["ExistsUnique", 1],["Not.imp", 1],["Nat.add_eq", 1],["List.append_subset_of_subset_of_subset", 1],["Nat.coprime.coprime_mul_right", 1],["Int.le_of_lt", 1],["Prod.swap_surjective", 1],["List.eq_nil_of_length_eq_zero", 1],["Function.injective_id", 1],["Nat.Linear.Expr.add", 1],["not_exists", 1],["Prod", 1],["Function.inv_fun_on_neg", 1],["UnionFind.findAux.proof_1", 1],["and_or_distrib_left", 1],["or_true", 1],["Mathlib.Tactic.Lint.NamedLinter.mk", 1],["Nat.lt_add_right", 1],["Fin.nsmuls_eq", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.succ.inj", 1],["UnionFind.rank_lt", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["UnionFind.model", 1],["List.mem_append_right", 1],["Int.le_antisymm", 1],["Tactic.Ring.HornerExpr.xadd", 1],["or_and_distrib_left", 1],["Function.surj_inv", 1],["UFModel.Agrees.set", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Subtype.coind_injective", 1],["Int.add_le_of_le_sub_right", 1],["Function.LeftInverse.injective", 1],["List.get", 1],["Nat.Linear.Expr.mulL", 1],["List.append_eq_cons_iff", 1],["Option.some_bind", 1],["Nat.lt_irrefl", 1],["List.Pairwise.cons", 1],["Sat.Literal.reify.prop", 1],["Or.comm", 1],["BoundedRandom.randomR", 1],["And.elim", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["List.exists_mem_cons_of_exists", 1],["or_congr", 1],["Function.surjective.of_comp_iff", 1],["List.forall_mem_cons", 1],["WellFoundedRelation.rel", 1],["imp_self", 1],["Subsingleton.allEq", 1],["UInt32.ofNat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Decidable.not_and_not_right", 1],["Nat.mul_div_assoc", 1],["by_contra", 1],["List.mem_append_left", 1],["lt_of_lt_of_le", 1],["dite_false", 1],["Sat.Clause.reify.mk", 1],["exists_and_distrib_left", 1],["Nat.gcd_mul_lcm", 1],["UnionFind.rankMax", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_le_of_le_sub_left", 1],["UFModel.Models.parent_eq", 1],["Tactic.Ring.HornerExpr.const", 1],["Function.involutive.surjective", 1],["Nat.add_mod_mod", 1],["Function.surjective_id", 1],["Fin.one_val", 1],["And.symm", 1],["Nat.mod_eq_zero_of_dvd", 1],["List.join", 1],["Prod.mk.inj", 1],["Mathlib.Tactic.Lint.Linter.mk", 1],["lt_iff_le_not_le", 1],["Option.decidable_exists_mem.proof_3", 1],["Nat.mul_dvd_mul_right", 1],["And.assoc", 1],["iff_self_and", 1],["congr_arg2", 1],["EStateM.Result.ok", 1],["MProd.mk", 1],["Mathlib.Tactic.Sat.LRATStep.add", 1],["Int.ofNat_zero_le", 1],["Decidable.iff_iff_and_or_not_and_not", 1],["instDecidableXor.proof_4", 1],["and_not_self", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["Function.RightInverse_surj_inv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.coprime_mul_iff_left", 1],["instDecidableAnd.proof_1", 1],["Decidable.not_and_iff_or_not", 1],["And.congr_right_iff", 1],["MonoidWithZero.zero_mul", 1],["List.disjoint", 1],["Function.injective.of_comp_iff'", 1],["List.eq_or_mem_of_mem_cons", 1],["Or.imp_right", 1],["Nat.mul_mod", 1],["decidableBEx.proof_4", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Prod.lex_def", 1],["Nat.div_self", 1],["Function.surjective.comp", 1],["le_antisymm", 1],["Nat.find_x.proof_3", 1],["Or.imp", 1],["EStateM.Result.error", 1],["Nat.gcd_gcd_self_left_right", 1],["Function.bijective_iff_exists_unique", 1],["Prod.Lex", 1],["Nat.zero_div", 1],["List.erase", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mod_one", 1],["Nat.lt_iff_le_not_le", 1],["Function.involutive.injective", 1],["Nat.mod_add_mod", 1],["List.singleton_disjoint", 1],["Not.elim", 1],["StdGen.mk", 1],["unique_of_exists_unique", 1],["Function.surjective.of_comp_iff'", 1],["Fin.mk.injEq", 1],["Nat.coprime_comm", 1],["lt_of_le_of_ne", 1],["List.disjoint_append_left", 1],["Fin", 1],["ExistsUnique.exists", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Option.none_bind", 1],["List.erasep_of_forall_not", 1],["Nat.mod_self", 1],["Subtype.val", 1],["instDecidableXor.proof_2", 1],["Prod.swap_injective", 1],["Array.push", 1],["Prod.mk.inj_iff", 1],["List.mem_filterAux", 1],["imp_not_comm", 1],["Not.decidable_imp_symm", 1],["List.map_cons", 1],["Fin.ofNat'_succ", 1],["Nat.Linear.Expr.mulR", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["List.mem_filter", 1],["decidableBEx.proof_2", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Mathlib.Tactic.Sat.LClause.mk", 1],["Nat.succ_pos", 1],["Nat.coprime_one_left", 1],["forall_congr'", 1],["Decidable.or_iff_not_and_not", 1],["and_iff_left_of_imp", 1],["Subarray.mk", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["List.erasep_cons_of_pos", 1],["Decidable.iff_iff_not_or_and_or_not", 1],["Int.ofNat_natAbs_eq_of_nonneg", 1],["Nat.gcd_mul_right_left", 1],["and_iff_right_of_imp", 1],["Nat.eq_zero_of_add_eq_zero_left", 1],["or_iff_left_iff_imp", 1],["List.or_exists_of_exists_mem_cons", 1],["Decidable.and_iff_not_or_not", 1],["Nat.gcd_gcd_self_right_left", 1],["not_lt", 1],["Preorder.lt_iff_le_not_le", 1],["UFModel.Agrees.empty", 1],["Decidable.imp_iff_not_or", 1],["Nat.succ_mul", 1],["Subtype.coind_surjective", 1],["WellFoundedRelation.wf", 1],["Nat.gcd_eq_left_iff_dvd", 1],["instDecidableXor.proof_3", 1],["Acc", 1],["instDecidableXor.proof_1", 1],["Nat.gcd_eq_left", 1],["imp_intro", 1],["Int.sub_nonneg_of_le", 1],["Nat.exists_coprime", 1],["decidableBEx.proof_1", 1],["Function.LeftInverse.surjective", 1],["Function.RightInverse.surjective", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.find_x", 1],["UInt32.val", 1],["Decidable.not_imp", 1],["and_iff_left_iff_imp", 1],["true_or", 1],["Subrelation.wf", 1],["List.filterAux", 1],["Tactic.Ring.State.mk", 1],["PSigma", 1],["Nat.Linear.ExprCnstr.mk", 1],["Nat.lcm_one_left", 1],["UFModel.mk", 1],["Decidable.decide", 1],["Int.le_trans", 1],["Nat.not_le_of_gt", 1],["List.mem_reverse", 1],["List.ball_cons", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["instDecidableAnd.proof_2", 1],["Nat.add", 1],["Prod.Lex.right", 1],["congr_arg", 1],["Function.injective.of_comp_iff", 1]]],
["List", 396, [["List.cons", 166],["List.nil", 155],["Eq", 124],["PProd.fst", 121],["List", 106],["congrArg", 98],["Eq.trans", 91],["Eq.refl", 89],["of_eq_true", 82],["rfl", 73],["congrFun", 71],["Unit.unit", 69],["eq_self", 68],["Eq.symm", 62],["Eq.mpr", 61],["congr", 59],["OfNat.ofNat", 52],["HAppend.hAppend", 43],["Prod.mk", 42],["Bool.true", 33],["HAdd.hAdd", 32],["List.length", 23],["List.map", 23],["Membership.mem", 23],["ite", 23],["eq_false", 23],["propext", 21],["List.reverse", 20],["Prod", 20],["Option.some", 18],["cond", 17],["Nat.succ", 17],["funext", 16],["Fin.mk", 15],["Decidable.em", 15],["Not", 14],["And.intro", 14],["Eq.mp", 13],["And", 13],["Nat.add", 13],["Pure.pure", 13],["eq_true_of_decide", 13],["List.get?", 12],["Iff", 12],["LT.lt", 12],["Classical.em", 12],["Exists.intro", 12],["List.erase", 12],["Nat.Linear.Poly", 12],["Fin.val", 12],["List.not_mem_nil", 11],["Nat.Linear.Poly.denote", 11],["HEq.refl", 11],["Or", 11],["HSub.hSub", 11],["Nat.add_eq", 11],["Array.size", 11],["Functor.map", 11],["eq_true", 11],["Iff.intro", 11],["iff_self", 10],["Bind.bind", 10],["List.length_cons", 10],["Array.data", 10],["BEq.beq", 10],["Option.none", 9],["Nat.blt", 9],["Nat.add_comm", 9],["List.erasep", 9],["LE.le", 9],["eq_of_heq", 9],["List.reverseAux", 9],["List.append_nil", 9],["List.set", 9],["ite_congr", 9],["Bool.of_not_eq_true", 8],["HMul.hMul", 8],["implies_congr", 8],["Exists", 8],["Array.size_set", 8],["Nat.Linear.Var.denote", 8],["List.nil_append", 8],["Nat.zero_add", 8],["List.mem_cons", 8],["cond_false", 8],["cond_true", 8],["id", 8],["List.drop", 8],["Nat.mul_eq", 8],["HMod.hMod", 7],["List.cons_append", 7],["congr_arg", 6],["List.repeat'", 6],["List.erase_eq_erasep", 6],["Option", 6],["false_and", 6],["if_pos", 6],["Nat.Linear.Poly.denote_le", 6],["List.erasep_cons_of_neg", 6],["Ne.symm", 6],["Nat.add_left_comm", 6],["if_neg", 6],["Array.push", 6],["BinaryHeap.arr", 6],["Or.inl", 6],["Or.inr", 6],["List.length_nil", 6],["Nat.Linear.Poly.denote_eq", 6],["absurd", 6],["False", 6],["Bool.false", 5],["List.get?_eq_get", 5],["Fin.isLt", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.Linear.hugeFuel", 5],["Array.mk", 5],["And.left", 5],["List.modifyNthTail", 5],["List.reverse_cons", 5],["Nat", 5],["Nat.Linear.Poly.cancelAux", 5],["List.bind", 5],["And.right", 5],["List.append_assoc", 5],["HDiv.hDiv", 4],["Array.get", 4],["Nat.add_zero", 4],["List.concat", 4],["Nat.sub_eq", 4],["List.concat_eq_append", 4],["Nat.zero", 4],["ne_eq", 4],["Nat.toDigitsCore", 4],["Nat.digitChar", 4],["List.Mem.head", 4],["Array.get?_eq_get?", 4],["List.take", 4],["List.get", 4],["Iff.mpr", 4],["Subsingleton.elim", 4],["List.reverse_nil", 4],["List.erasep_cons_of_pos", 4],["Nat.Linear.Expr.toPoly", 4],["List.join", 4],["Ne", 3],["Seq.seq", 3],["Nat.mul", 3],["Array.set", 3],["Nat.Linear.Expr.denote", 3],["Nat.zero_eq", 3],["List.erase_cons", 3],["ite_true", 3],["List.splitAt", 3],["List.length_set", 3],["List.remove", 3],["List.filter", 3],["Nat.add_assoc", 3],["or_false", 3],["Function.comp", 3],["List.elem", 3],["List.exists_of_erasep", 3],["List.modifyNth", 3],["Array.size_push", 3],["List.mem_map", 3],["List.Mem.tail", 3],["and_imp", 3],["List.length_append", 3],["List.toArray", 3],["Nat.Linear.Poly.insertSorted", 3],["True", 3],["if_false", 3],["Nat.lt_succ_self", 3],["Array.get?", 3],["UFNode.mk", 3],["false_or", 2],["List.List.append_eq", 2],["List.filterAuxM", 2],["List.erasep_cons", 2],["List.modifyHead", 2],["List.cons_bind", 2],["List.get?_set_ne", 2],["List.card", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.card_nil", 2],["List.replicate", 2],["List.mem_join", 2],["List.forall_mem_cons", 2],["Array.getLit", 2],["List.removeNth", 2],["UFModel.Agrees.mk'", 2],["min", 2],["repr", 2],["List.mem_append", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.fixedVar", 2],["UnionFind.arr", 2],["List.foldrIdx", 2],["List.get?_modifyNth", 2],["Nat.Linear.Poly.denote_reverse", 2],["and", 2],["true_and", 2],["Option.some_inj", 2],["List.exists_of_mem_map", 2],["Nat.Linear.Poly.combineAux", 2],["False.elim", 2],["ite_false", 2],["Nat.pred", 2],["List.map₂Left", 2],["sorryAx", 2],["Nat.min_zero", 2],["mt", 2],["Option.some.inj", 2],["BinaryHeap.size_pos_of_max", 2],["eq_of_beq", 2],["beq_self_eq_true", 2],["List.mapTRAux", 2],["Nat.Linear.Expr.denote_toPoly", 2],["flip", 2],["List.mem_bind", 2],["Function.comp_apply", 2],["List.get?_set_eq", 2],["List.cons.injEq", 2],["PUnit.unit", 2],["List.set_eq_modifyNth", 2],["Nat.min_succ_succ", 2],["UFModel.parent", 2],["Nat.le_add_right", 2],["Inhabited.mk", 2],["Option.map", 2],["Iff.mp", 2],["if_true", 2],["Nat.zero_min", 2],["UFModel.push", 2],["exists_false", 2],["List.map₂Left'", 2],["List.beq", 2],["implies_true", 2],["Decidable.decide", 2],["List.exists_or_eq_self_of_erasep", 2],["List.tail", 2],["List.filterAux", 2],["forall_congr", 2],["Mathlib.Tactic.Lint.getLinters", 1],["Hashable.hash", 1],["DoResultPR.pure", 1],["List.splitOnP", 1],["ToString.mk", 1],["Union.mk", 1],["Nat.zero_le", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Array.ext'", 1],["List.reverseAux_eq_append", 1],["Option.getD", 1],["Nat.le_trans", 1],["Nat.Linear.Poly.combine", 1],["min_le_left", 1],["le_of_not_lt", 1],["List.splitOnPAux", 1],["UFModel.Models.push", 1],["Setoid.mk", 1],["List.erasep_append_left", 1],["Inter.mk", 1],["MonadState.get", 1],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 1],["Nat.succ_sub_succ_eq_sub", 1],["List.Perm", 1],["List.replicateTR_loop_replicate_eq", 1],["List.toArrayAux_data", 1],["List.mem_reverseAux", 1],["List.ofFnAux", 1],["dite", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["List.subset", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["min_self", 1],["Trans.trans", 1],["List.append", 1],["List.mem_of_mem_erasep", 1],["dif_neg", 1],["Nat.pred_lt'", 1],["List.mapIdxAux", 1],["List.subset.refl", 1],["Prod.mk.injEq", 1],["Nat.succ.inj", 1],["Mathlib.Tactic.Lint.getLinter", 1],["List.partitionAux", 1],["List.eq_of_mem_repeat'", 1],["MProd.snd", 1],["Array.mkEmpty", 1],["List.erase_cons_tail", 1],["Array.size_swap", 1],["List.getLast_append", 1],["List.get?_append", 1],["List.inter", 1],["Nat.add_le_add_left", 1],["Nat.succ_ne_zero", 1],["DoResultPR.return", 1],["sizeOf_nat", 1],["List.mem_cons_of_mem", 1],["UFModel.Agrees.set", 1],["Array.toListLitAux.proof_2", 1],["List.le", 1],["Or.elim", 1],["and_self", 1],["eq_comm", 1],["List.headD", 1],["WellFoundedRelation.rel", 1],["Option.map_some'", 1],["GT.gt", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["Subset.subset", 1],["lt_irrefl", 1],["panicWithPosWithDecl", 1],["Membership.mk", 1],["List.length_dropLast", 1],["exists_eq_right_right'", 1],["List.eraseRepsAux", 1],["ForInStep", 1],["BEq.mk", 1],["List.replicateTR.loop", 1],["List.transposeAux", 1],["not_exists", 1],["UFModel.Agrees.push", 1],["List.toArray_data", 1],["Sum.inl", 1],["Bool.true_and", 1],["List.map₂Right'", 1],["Sum.inr", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.to_digits_core_length", 1],["List.mapWithPrefixSuffix", 1],["Stream.mk", 1],["PProd.snd", 1],["List.lt", 1],["Prod.fst", 1],["Array", 1],["List.length_erasep_of_mem", 1],["eq_false_of_decide", 1],["unsafeCast", 1],["List.card_le_card_cons", 1],["MProd", 1],["Nat.succ_add", 1],["ForIn.mk", 1],["List.forall_mem_of_forall_mem_cons", 1],["List.spanAux", 1],["BinaryHeap.insert.proof_1", 1],["System.FilePath.mk", 1],["Nat.sub_add_eq_max", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["List.zip", 1],["List.map₂Right", 1],["List.toString", 1],["List.foldr", 1],["Nat.one_mul", 1],["Nat.lt_irrefl", 1],["mixHash", 1],["List.length_concat", 1],["List.sublistsAux", 1],["List.length_take", 1],["trivial", 1],["Nat.mul_one", 1],["List.card_cons_of_mem", 1],["Append.mk", 1],["ForM.mk", 1],["Nat.le_of_lt_succ", 1],["List.map₂", 1],["List.mapM", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["System.FilePath.pathSeparator", 1],["Array.toArrayLit", 1],["EqIffBeqTrue", 1],["Array.swap", 1],["imp_self", 1],["List.map_append", 1],["Prod.map", 1],["List.mapTRAux_eq", 1],["Array.get?_push_eq", 1],["EmptyCollection.mk", 1],["ForInStep.done", 1],["List.rangeAux", 1],["List.erase_cons_head", 1],["or_assoc", 1],["List.get_mem", 1],["or_iff_left_iff_imp", 1],["System.FilePath.normalize", 1],["List.erasep_append_right", 1],["List.insert", 1],["List.get?_modifyNth_ne", 1],["List.forIn", 1],["Nat.left_distrib", 1],["Or.resolve_left", 1],["Array.get_eq_get", 1],["Nat.Linear.Poly.fuse", 1],["List.scanrAux", 1],["Nat.mul_assoc", 1],["List.mem_map_of_mem", 1],["List.reverseAux_reverseAux", 1],["List.inj_on", 1],["le_refl", 1],["List.foldl", 1],["Array.toListLitAux.proof_1", 1],["MProd.mk", 1],["Nat.Linear.Poly.denote_sort_go", 1],["List.length_map", 1],["List.instLawfulBEqListInstBEqList.proof_1", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["eq_false'", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Bool.and_eq_true", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.toChunksAux", 1],["Nat.le_of_succ_le", 1],["UFModel.Agrees.get_eq", 1],["LT.mk", 1],["Nat.mul_comm", 1],["List.get?_concat_length", 1],["Subset.mk", 1],["List.getLast", 1],["List.singleton_append", 1],["Array.appendList", 1],["Nat.Linear.Expr.toNormPoly", 1],["List.sublists'Aux", 1],["Nat.le_of_succ_le_succ", 1],["ForIn'.mk", 1],["List.toArrayAux", 1],["List.Mem", 1],["List.mapWithPrefixSuffixAux", 1],["List.get?_set_of_lt", 1],["List.pwFilter", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_modifyNth_eq", 1],["List.filterMap", 1],["le_antisymm", 1],["instDecidableEqNat", 1],["MonadExcept.tryCatch", 1],["System.SearchPath.separator", 1],["Nat.sub", 1],["UFNode.value", 1],["ForIn.forIn", 1],["id_eq", 1],["Iff.rfl", 1],["UFModel.Models.empty", 1],["Nat.le_refl", 1],["List.forIn'", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["BinaryHeap.size_heapifyUp", 1],["MProd.fst", 1],["List.set_nil", 1],["UFModel.rank", 1],["dite_congr", 1],["List.hasDecEq", 1],["Nat.Linear.Poly.norm", 1],["Option.map_eq_map", 1],["Nat.Linear.Poly.denote_mul", 1],["List.reduceOption", 1],["List.mem_of_ne_of_mem", 1],["decide_eq_true_eq", 1],["HAppend.mk", 1],["List.erasep_of_forall_not", 1],["UFNode.rank", 1],["Nat.le_of_lt", 1],["Array.toListLitAux", 1],["List.eraseDupsAux", 1],["Nat.Linear.Poly.mul", 1],["LE.mk", 1],["List.erasep_subset", 1],["List.modifyNthTail_length", 1],["Nat.Linear.Poly.denote_combineAux", 1],["UFModel.Models", 1],["Nat.lt_trans", 1],["not_or", 1],["List.mem_filterAux", 1],["List.map_cons", 1],["System.FilePath.toString", 1],["List.notElem", 1],["List.forall_mem_nil", 1],["List.mem_filter", 1],["NeqIffBeqFalse", 1],["Nat.succ_inj'", 1],["Array.pop", 1],["List.length_replicate", 1],["Option.mem_def", 1],["LawfulBEq.mk", 1],["Nat.Linear.Poly.denote_combine", 1],["List.union", 1],["And.imp", 1],["not_false_iff", 1],["not_and", 1],["List.enumFrom", 1],["Array.get?_eq_get", 1],["List.format", 1],["Array.get?_set_ne", 1],["List.reverseAux_reverseAux_nil", 1],["List.forM", 1],["Array.foldr", 1],["Bool.and_false", 1],["Sigma.mk", 1],["Array.size_pop", 1],["Option.some.injEq", 1],["Nat.toSuperDigitsAux", 1],["max", 1],["UFModel.push.proof_1", 1],["dite_false", 1],["List.redLength", 1],["id_map'", 1],["Nat.zero_sub", 1],["UFModel.Agrees.empty", 1],["Nat.add_le_add", 1],["exists_imp_distrib", 1],["System.Platform.isWindows", 1],["dif_pos", 1],["Nat.Linear.Poly.sort", 1],["UnionFind.model'", 1],["List.mem_erasep_of_neg", 1],["List.get?_map", 1],["BinaryHeap.size", 1],["Hashable.mk", 1],["Prod.snd", 1],["List.zipWith", 1],["List.groupByAux", 1],["Array.get?_push_lt", 1],["UFModel.empty", 1],["List.findIdxs", 1],["Array.get?_set_eq", 1],["Nat.right_distrib", 1],["Bool.and_true", 1],["of_decide_eq_true", 1],["MonadStateOf.set", 1],["Nat.lt_eq", 1],["List.mem_reverse", 1],["ToStream.mk", 1],["Array.toList", 1],["List.mmap", 1],["ForInStep.yield", 1],["dite_true", 1],["List.length_repeat'", 1],["or_comm", 1],["List.intersperse", 1],["List.Perm.Equivalence", 1]]],
["Nat.succ", 385, [["Eq", 139],["Eq.refl", 128],["rfl", 117],["congrArg", 95],["Eq.mpr", 87],["OfNat.ofNat", 75],["Eq.trans", 75],["congrFun", 67],["of_eq_true", 65],["Eq.symm", 64],["eq_self", 56],["HMul.hMul", 54],["HAdd.hAdd", 50],["Nat.succ", 43],["congr", 42],["Fin.mk", 41],["Bool.true", 39],["Nat.gcd", 35],["List.nil", 28],["Fin.val", 24],["Nat.add_comm", 23],["Classical.em", 22],["Nat.Linear.Poly.denote", 22],["Nat.add", 21],["List.cons", 21],["LT.lt", 20],["HMod.hMod", 17],["eq_true_of_decide", 17],["Nat.add_eq", 17],["PProd.fst", 17],["Eq.mp", 16],["Unit.unit", 16],["Nat.gcd_dvd_right", 16],["Option.some", 16],["Nat.Linear.Var.denote", 16],["cond", 16],["Nat.mul_eq", 16],["List.get", 15],["Prod.mk", 15],["HEq.refl", 15],["HSub.hSub", 14],["List.length", 14],["cond_true", 14],["LE.le", 13],["Bool.of_not_eq_true", 13],["absurd", 13],["cond_false", 13],["Nat.zero_add", 13],["Iff.intro", 12],["Array.get", 12],["Nat.dvd_gcd", 11],["Array.size", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_true", 10],["propext", 10],["Int.natAbs", 10],["HAppend.hAppend", 10],["Nat.mod_lt", 10],["Nat.le_of_succ_le_succ", 10],["Exists.intro", 9],["And.intro", 9],["Nat.mul_comm", 9],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Int.ofNat", 8],["Nat.add_left_comm", 8],["List.get?", 8],["Fin.isLt", 8],["HDiv.hDiv", 7],["Bool.false", 7],["eq_of_heq", 7],["List.get?_eq_get", 7],["implies_congr", 7],["funext", 7],["Iff", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["id", 7],["Array.data", 7],["Nat.Linear.Poly.denote_le", 6],["Nat.Linear.Poly.denote_eq", 6],["Nat.cast", 6],["UnionFind.arr", 6],["Nat.blt", 6],["List.append_nil", 5],["Nat.Linear.Poly", 5],["Nat.coprime.symm", 5],["Nat.mul_one", 5],["List.nil_append", 5],["BEq.beq", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["dite_congr", 5],["And.left", 5],["Nat.eq_zero_or_pos", 5],["Prod", 5],["eq_of_beq", 5],["Neg.neg", 5],["iff_self", 5],["Nat.dvd_trans", 5],["Nat.coprime", 5],["Nat.Linear.Expr.denote", 5],["SubNegMonoid.gsmul_succ'", 5],["AddMonoid.nsmul_succ'", 5],["Nat.gcd_rec", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.lt_succ_self", 4],["Nat.Linear.Expr.num", 4],["Exists", 4],["HPow.hPow", 4],["Option.none", 4],["Nat.Linear.Expr.add", 4],["Nat.succ_le_succ", 4],["Int.negSucc", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.sub_eq", 4],["Nat.add_succ", 4],["Fin", 4],["True", 4],["Nat.zero", 4],["And.right", 4],["Nat.Linear.Expr.var", 4],["Nat.add_assoc", 4],["UFNode.rank", 4],["Eq.mpr_prop", 4],["UnionFind.size", 4],["Array.size_set", 4],["Nat.Linear.fixedVar", 4],["Nat.gcd_succ", 4],["dif_neg", 4],["Nat.add_zero", 4],["beq_self_eq_true", 4],["Nat.lcm", 4],["Array.mk", 4],["Array.get?_eq_get?", 4],["List.reverse", 4],["Not", 4],["and", 4],["False.elim", 4],["List.set", 4],["Nat.pred", 4],["Nat.gcd_dvd", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.dvd_mul_right", 4],["dif_pos", 4],["And", 4],["dite_true", 4],["Nat.dvd_refl", 3],["Nat.Linear.hugeFuel", 3],["Nat.zero_le", 3],["Int.negOfNat", 3],["UInt8.val", 3],["UFModel.Agrees.get_eq", 3],["Nat.gcd_one_left", 3],["Nat.le.step", 3],["Option.some.inj", 3],["Nat.gcd.induction", 3],["Nat.succ_mul", 3],["Nat.succ_sub_succ", 3],["Nat.lcm_comm", 3],["List.length_cons", 3],["BinaryHeap.arr", 3],["False", 3],["List.append", 3],["Int.add_comm", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.coprime.coprime_dvd_right", 3],["UInt32.val", 3],["Nat.gcd_zero_right", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.succ_pos", 3],["Nat", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.Linear.Var.denote.go", 3],["Fin.size_positive'", 3],["sorryAx", 3],["Nat.mul_zero", 3],["Or", 3],["Iff.mpr", 3],["Nat.one_mul", 3],["Decidable.decide", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.mul", 3],["UFNode.parent", 3],["Nat.add_right_comm", 2],["Nat.succ_lt_succ", 2],["le_of_not_lt", 2],["Nat.not_le_eq", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.Linear.Poly.isNonZero", 2],["Int.add_left_comm", 2],["List.get?_set_ne", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Int.le.dest", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.zero_mod", 2],["UnionFind.model'", 2],["Nat.gcd_mul_right", 2],["Nat.gcd_one_right", 2],["UFModel.Models.size_eq", 2],["Bool.and_eq_true", 2],["Fin.mul_def", 2],["Nat.gcd_mul_left_left", 2],["USize.mk", 2],["UInt64.val", 2],["UFModel.Models.parent_eq'", 2],["List.get_mem", 2],["Nat.Linear.monomialToExpr", 2],["UFModel.Models.parent_eq", 2],["List.reverse_nil", 2],["Or.resolve_left", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["UnionFind.rankMaxAux", 2],["Membership.mem", 2],["eq_false'", 2],["USize.val", 2],["Nat.zero_lt_succ", 2],["ne_eq", 2],["Array.push", 2],["dite", 2],["Int.mul_comm", 2],["Nat.zero_eq", 2],["Nat.le_of_lt_succ", 2],["Int.one_mul", 2],["UInt16.val", 2],["Monoid.npow_succ'", 2],["Nat.coprime.gcd_left", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["UInt16.mk", 2],["List.cons_ne_nil", 2],["List.length_set", 2],["List.getLast", 2],["Option.some_inj", 2],["Nat.not_lt_eq", 2],["UFModel.Models.rank_eq", 2],["List.List.append_eq", 2],["Nat.le_trans", 2],["Nat.mul_assoc", 2],["Iff.rfl", 2],["not_lt_of_ge", 2],["Nat.le_of_dvd", 2],["Fin.eq_of_val_eq", 2],["UInt8.mk", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.mul_succ", 2],["List.drop", 2],["Nat.coprime_iff_gcd_eq_one", 2],["decide_eq_true_eq", 2],["Nat.dvd_mod_iff", 2],["Int.eq_ofNat_of_zero_le", 2],["BinaryHeap.size_pos_of_max", 2],["Or.inl", 2],["Or.inr", 2],["UInt32.mk", 2],["Nat.left_distrib", 2],["UInt64.mk", 2],["Nat.div_mul_cancel", 2],["eq_false", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["Nat.mod_eq_of_lt", 2],["Array.size_push", 2],["BinaryHeap.max", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.Expr.denote_toPoly", 2],["List.reverse_cons", 2],["Nat.lt_succ_of_le", 2],["Nat.coprime.mul", 2],["nsmul_rec", 2],["Nat.Linear.Poly.insertSorted", 2],["forall_congr", 2],["UFModel.parent", 2],["Nat.pow_succ", 2],["Fin.ofNat'", 2],["Nat.Linear.Poly.of_isZero", 2],["SizeOf.sizeOf", 2],["Nat.le.refl", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Bool.and_true", 2],["WellFounded.fix", 2],["List.toArray", 2],["List.concat_eq_append", 2],["forall_const", 2],["eq_false_of_decide", 2],["Nat.dvd_lcm_left", 2],["Nat.succ_add", 2],["Prod.Lex.right", 1],["Nat.succ_sub_succ_eq_sub", 1],["Nat.coprime.gcd_both", 1],["Nat.sub_succ", 1],["Nat.gcd_div", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Subtype.mk", 1],["Nat.lt", 1],["WellFounded.intro", 1],["AddMonoidWithOne.natCast_succ", 1],["Id", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Decidable.byCases", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Fin.nsmuls_eq", 1],["Nat.lt_add_right", 1],["UnionFind.rank_lt", 1],["Array.isEqvAux.proof_1", 1],["Nat.succ.inj", 1],["List.cons.sizeOf_spec", 1],["Array.mkEmpty", 1],["Array.size_swap", 1],["Nat.ble", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.add_le_add_left", 1],["Array.isEqvAux_self", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["List.get?_append_right", 1],["Nat.succ_ne_zero", 1],["Nat.Linear.Expr.mulL", 1],["sizeOf_nat", 1],["Bool", 1],["Nat.le_add_right", 1],["Decidable.isTrue", 1],["Option.map_some'", 1],["Nat.add_sub_cancel_left", 1],["Bool.or_eq_true", 1],["List.get_cons_zero", 1],["Int.le_refl", 1],["Subtype.property", 1],["Nat.lt.base.proof_1", 1],["Nat.succ_eq_add_one", 1],["Sigma", 1],["List.get_append_right_aux", 1],["Exists.elim", 1],["WellFounded.fix_eq", 1],["WellFoundedRelation.rel", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_mul_lcm", 1],["Nat.coprime.coprime_mul_right", 1],["Subsingleton.allEq", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["Nat.add_mod_mod", 1],["le_trans", 1],["List.toArray_data", 1],["or_true", 1],["Nat.zero_mul", 1],["Int.ofNat_mul_negSucc_ofNat", 1],["UnionFind.lt_rankMax'", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Int.ofNat_mul_ofNat", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.add_sub_cancel", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["dite_false", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.Linear.Expr.inc", 1],["Int.mul_negSucc_ofNat_negSucc_ofNat", 1],["Nat.sub_succ_lt_self", 1],["Int.ofNat_zero_le", 1],["Nat.eq_zero_or_eq_succ_pred", 1],["Nat.not_lt_zero", 1],["Ne", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Fin.ofNat", 1],["List.toArrayAux_data", 1],["Nat.Linear.Expr.toNormPoly", 1],["Array.set", 1],["Array.swap", 1],["Exists.imp", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.le_succ_of_le", 1],["Nat.pred_le", 1],["Nat.gcd_gcd_self_left_right", 1],["Prod.Lex", 1],["Nat.zero_div", 1],["Nat.not_succ_le_zero", 1],["Fin.elim0", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.le.dest", 1],["Nat.one_pos", 1],["True.intro", 1],["Array.toArrayLit", 1],["Nat.mod_self", 1],["Int.eq_zero_ofNatAbs_eq_zero", 1],["Option", 1],["List.get?_append", 1],["Nat.mod_one", 1],["UInt32.ofNat", 1],["Nat.coprime_comm", 1],["Acc.intro", 1],["Prod.map", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Array.getLit", 1],["Nat.sub_le", 1],["Nat.mul_div_assoc", 1],["Nat.lt.base", 1],["ULift", 1],["if_pos", 1],["Nat.eq_or_lt_of_le", 1],["GT.gt", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Bool.and_false", 1],["pow_mul_comm", 1],["Nat.gcd_mul_left", 1],["UnionFind.rankMaxAux.proof_1", 1],["false_implies", 1],["Nat.Linear.Poly.denote_fuse", 1],["Int.ofNat_lt", 1],["Fin.ofNat'_succ", 1],["mt", 1],["List.mem_cons_of_mem", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.ble_eq_true_of_le", 1],["Nat.mul_dvd_mul_right", 1],["randNat", 1],["List.repeat'", 1],["Nat.coprime.coprime_div_left", 1],["Subtype.val", 1],["List.length_map", 1],["AddGroupWithOne.gsmul_neg'", 1],["Nat.add_le_add_right", 1],["Nat.le_succ", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["PSigma", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Or.elim", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.gcd_self", 1],["UnionFind.lt_rankMax", 1],["List.length_add_eq_lengthTRAux", 1],["UFNode.mk", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["UFModel.Models.empty", 1],["Subtype", 1],["Array.get_eq_get", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["BinaryHeap.insert.proof_1", 1],["Fin.ofNat.proof_1", 1],["Nat.le_add_left", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["List.getLast_cons", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.mul_mod_mul_left", 1],["le_antisymm", 1],["Nat.succ_le_of_lt", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.lt_succ_iff", 1],["Nat.le_of_lt", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_refl", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.pred_succ", 1],["Nat.le_of_succ_le", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqv", 1],["Nat.mod_add_mod", 1],["Iff.mp", 1],["UFModel.rank", 1],["Nat.add_div_right", 1],["Fin.mk.injEq", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.Linear.Poly.denote_mul", 1],["UFModel.Models", 1],["Nat.le_step", 1],["Bool.and_self", 1],["List.mem_cons_self", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Int.eq_natAbs_of_zero_le", 1],["Nat.dvd_lcm_right", 1],["Random.randFin", 1],["Option.map_eq_map", 1],["Eq.propIntro", 1],["Array.toListLitAux", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.sub_sub", 1],["Nat.le_of_ble_eq_true", 1],["AddGroupWithOne.gsmul_succ'", 1],["Subsingleton.elim", 1],["List.get?_set_eq", 1],["Nat.div_zero", 1],["max", 1],["Fin.zero_def", 1],["Nat.zero_sub", 1],["UFModel.rank_lt", 1],["Int.sign", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.length_nil", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_combine", 1],["Int.neg_eq_neg_one_mul", 1],["Nat.lcm_dvd", 1],["pow_succ'", 1],["Nat.coprime_one_left", 1],["Int.distrib_right", 1],["Array.get?_eq_get", 1],["Nat.lt.step.proof_1", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Int.natAbs_of_nonneg", 1],["Int.le.intro", 1],["Nat.gcd_mul_right_left", 1],["Array.isEqvAux.proof_2", 1],["List.length_pos_of_ne_nil", 1],["Array.get?_set_eq", 1],["List.map", 1],["Option.some.injEq", 1],["Decidable.isFalse", 1],["Option.map", 1],["ULift.up", 1],["or", 1],["Array.get?_set_ne", 1],["Nat.add_mul_mod_self_right", 1],["List.redLength", 1],["List.get?_len_le", 1],["UFModel.Agrees.empty", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.div_eq_sub_div", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["le_total", 1],["Int.neg_succ_lt_zero", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Prod.Lex.right'.proof_1", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Array.mk.sizeOf_spec", 1],["Nat.exists_coprime", 1],["Int.negSucc_ofNat_ofNat", 1],["Nat.eq_one_of_dvd_one", 1],["List.length_append", 1],["UInt8.toChar_aux", 1],["Array.ext'", 1],["Prod.Lex.left", 1],["Nat.Linear.Poly.combine", 1],["Int.neg_nonneg_of_nonpos", 1],["UFModel.empty", 1],["UFModel.Agrees.mk'", 1],["Int.ofNat_succ", 1],["List.get_of_mem", 1],["Random.mk", 1],["Nat.sub_lt", 1],["Nat.right_distrib", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.lcm_one_left", 1],["Nat.lt_of_succ_le", 1],["Nat.isValidChar", 1],["Nat.lt_eq", 1],["Int.natAbs_neg", 1],["Array.get?_push_lt", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Nat.gcd_gcd_self_right_left", 1],["of_decide_eq_true", 1],["congr_arg", 1]]],
["Not", 380, [["Eq.refl", 92],["Eq", 84],["Eq.mpr", 53],["Eq.trans", 51],["Iff.intro", 50],["congrArg", 50],["Not", 45],["rfl", 45],["Eq.symm", 43],["of_eq_true", 43],["OfNat.ofNat", 41],["congrFun", 41],["False", 36],["Nat.gcd", 35],["propext", 32],["Bool.true", 31],["And.intro", 29],["eq_self", 28],["Iff", 27],["congr", 27],["And", 25],["HMul.hMul", 25],["absurd", 23],["mt", 20],["HMod.hMod", 19],["eq_true_of_decide", 19],["Fin.val", 17],["Fin.mk", 17],["iff_self", 16],["Nat.gcd_dvd_right", 16],["eq_false", 15],["Or.inl", 15],["Or.inr", 14],["Iff.mpr", 13],["Membership.mem", 13],["Or", 12],["HAdd.hAdd", 12],["Nat.gcd_dvd_left", 11],["List.nil", 11],["Nat.gcd_comm", 11],["And.right", 11],["Nat.dvd_gcd", 11],["ne_eq", 10],["And.left", 10],["Decidable.em", 10],["Nat.mod_lt", 10],["dite", 9],["List.cons", 9],["Nat.succ", 9],["True", 9],["Iff.mp", 9],["HEq.refl", 9],["Bool.false", 9],["Nat.dvd_antisymm", 9],["LT.lt", 8],["not_not_intro", 8],["Eq.mp", 8],["HDiv.hDiv", 8],["Iff.rfl", 8],["Exists.intro", 8],["Fin.size_positive", 8],["eq_true", 8],["Exists", 7],["implies_congr", 7],["eq_false_of_decide", 7],["forall_congr", 7],["funext", 7],["False.elim", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["List.length", 6],["PProd.fst", 6],["HAppend.hAppend", 6],["id", 6],["Ne", 5],["Nat.dvd_mul_left", 5],["Option.some", 5],["Nat.gcd_rec", 5],["Nat.coprime.symm", 5],["Nat.coprime", 5],["false_and", 5],["eq_false'", 5],["sorryAx", 5],["lt_irrefl", 5],["Nat.dvd_trans", 5],["of_decide_eq_true", 5],["Or.elim", 5],["Nat.mul_comm", 5],["Fin.val_eq_of_lt", 5],["Nat.not_le_of_gt", 5],["Classical.em", 4],["of_decide_eq_false", 4],["dite_congr", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.lt_irrefl", 4],["trivial", 4],["Nat.eq_zero_or_pos", 4],["Nat.gcd_succ", 4],["Nat.dvd_mul_right", 4],["LE.le", 4],["Nat.succ_ne_zero", 4],["Subtype.property", 4],["Option.none", 4],["Nat.coprime.coprime_dvd_left", 4],["HSub.hSub", 4],["ite_congr", 4],["Option.mem_def", 4],["Decidable.isFalse", 4],["Decidable.isTrue", 4],["Nat.lcm", 4],["implies_true", 4],["dite_true", 4],["Iff.trans", 4],["Unit.unit", 3],["Nat.lcm_comm", 3],["Nat.coprime.coprime_dvd_right", 3],["and_congr", 3],["iff_def", 3],["Fin.eq_of_val_eq", 3],["List.append_eq_nil", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.toDigitsCore", 3],["dif_neg", 3],["imp_not_comm", 3],["Nat.digitChar", 3],["Fin.size_positive'", 3],["List.mem_cons", 3],["Nat.gcd_one_left", 3],["not_and", 3],["Nat.dvd_refl", 3],["UFModel.parent", 3],["Nat.gcd_zero_right", 3],["dif_pos", 3],["Decidable.not_not", 3],["id_eq", 3],["Fin.isLt", 3],["not_not", 3],["eq_of_heq", 3],["Decidable.decide", 3],["em", 3],["Nat.not_lt_zero", 3],["Nat.gcd.induction", 3],["Nat.gt_of_not_le", 2],["Option.isSome_none", 2],["UnionFind.size", 2],["Nat.div_mul_cancel", 2],["Decidable.not_imp_comm", 2],["Nat.mod_eq_of_lt", 2],["Nat.not_succ_le_zero", 2],["decide_eq_false", 2],["Nat.le_of_lt", 2],["Nat.gcd_mul_left_left", 2],["and_imp", 2],["List.not_mem_nil", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["exists_imp_distrib", 2],["Or.resolve_left", 2],["List.disjoint_comm", 2],["Iff.symm", 2],["Decidable.not_or_of_imp", 2],["le_not_le_of_lt", 2],["ite", 2],["Array.size", 2],["Nat.zero_mod", 2],["iff_false", 2],["if_false", 2],["true_and", 2],["Nat.coprime.pow_left", 2],["iff_false_intro", 2],["Nat.le_of_succ_le_succ", 2],["List.disjoint", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.gcd_left", 2],["Nat.mul_zero", 2],["implies_congr_ctx", 2],["List.singleton_disjoint", 2],["Nat.le_of_dvd", 2],["Nat.gcd_one_right", 2],["UFModel.rank", 2],["Fin.mul_def", 2],["Ne.symm", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Nat.gcd_mul_right", 2],["exists_prop", 2],["UnionFind.rankMaxAux", 2],["exists_eq_right", 2],["Option.bind_eq_none", 2],["Decidable.by_contradiction", 2],["Fin.add_def", 2],["Nat.not_le_of_lt", 2],["Nat.lcm_zero_left", 2],["not_false", 2],["not_forall", 2],["List.length_pos_of_ne_nil", 2],["Nat.coprime.mul", 2],["not_le_of_gt", 2],["not_exists", 2],["Or.swap", 2],["if_true", 2],["List.exists_of_erasep", 2],["Decidable.imp_iff_not_or", 2],["and_false", 2],["Nat.dvd_lcm_left", 2],["Option.isSome_some", 2],["Fin.ofNat'", 2],["Decidable.not_imp_not", 2],["dec_em", 2],["List.get", 2],["Decidable.not_and_distrib", 2],["not_and_of_not_or_not", 2],["dite_false", 2],["not_or", 2],["or_comm", 2],["Nat.find_x", 2],["congr_arg", 2],["Nat.gcd_gcd_self_right_left", 1],["UInt32.val", 1],["Nat.add", 1],["Nat.mod_one", 1],["Nat.ble_eq_true_of_le", 1],["lt_iff_not_ge", 1],["Nat.lt_succ_iff", 1],["List.decidablePairwise", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime.coprime_div_left", 1],["Nat.to_digits_core_length", 1],["Int.lt_irrefl", 1],["List.repeat'", 1],["Option.ne_none_iff_exists", 1],["Iff.comm", 1],["Nat.add_zero", 1],["And.imp", 1],["Nat.succ_le_succ", 1],["Subsingleton.elim", 1],["Int.le.dest", 1],["Nat.div_zero", 1],["Bool.not_false", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["ne_false_of_eq_true", 1],["WellFounded.fix'", 1],["or_self", 1],["Int.ne_of_lt", 1],["Array.isEqvAux.proof_2", 1],["List.erasep_cons_of_neg", 1],["Nat.gcd_self", 1],["not_or_distrib", 1],["Nat.add_mul_mod_self_right", 1],["Eq.mpr_not", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["lt_or_eq_of_le", 1],["Nat.zero_le", 1],["not_of_not_imp", 1],["em'", 1],["ofBoolUsing_eq_false", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.add_comm", 1],["not_imp_of_and_not", 1],["List.length_eq_zero", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List", 1],["List.cons_append", 1],["Option.bind_eq_some", 1],["Nat.isValidChar", 1],["Nat.mul_mod_mul_left", 1],["List.getLast_cons", 1],["List.erasep", 1],["ne_false_of_self", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Subtype.val", 1],["Nat.zero_lt_succ", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Decidable.byCases", 1],["UFModel.Agrees.push", 1],["Nat.succ_sub_succ", 1],["Nat.lcm_dvd", 1],["Array.isEqvAux.proof_1", 1],["Nat.not_lt_eq", 1],["iff_true_intro", 1],["List.erase_eq_erasep", 1],["Nat.gcd_div", 1],["Array.isEqvAux_self", 1],["Int.lt_iff_le_and_ne", 1],["Nat.find_x.proof_1", 1],["sizeOf_nat", 1],["Int.le_of_lt", 1],["Nat.le_add_right", 1],["forall_eq", 1],["eq_comm", 1],["List.remove", 1],["Int.le_refl", 1],["or_iff_left_iff_imp", 1],["List.nil_append", 1],["apply_ite", 1],["Int.lt.dest", 1],["WellFounded.fix_eq", 1],["List.ne_of_not_mem_cons", 1],["Not.imp", 1],["List.length_append", 1],["iff_def'", 1],["Nat.coprime.coprime_mul_right", 1],["iff_of_false", 1],["Nat.gcd_pos_of_pos_left", 1],["UFModel.push", 1],["Subtype.mk", 1],["Nat.lt_add_right", 1],["lt_of_not_ge", 1],["Eq.to_iff", 1],["Decidable.of_not_imp", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["WellFounded.intro", 1],["List.Mem.head", 1],["Nat.le_of_not_lt", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Int.le_antisymm", 1],["Option.ext", 1],["List.not_mem_of_not_mem_cons", 1],["Nat.add_eq", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["List.Mem.tail", 1],["Nat.not_le_eq", 1],["Nat.zero", 1],["Or.neg_resolve_left", 1],["UFModel.Agrees.set", 1],["not", 1],["iff_false_left", 1],["iff_not_self", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Bool.ff_ne_tt", 1],["True.intro", 1],["exists_false", 1],["List.forall_mem_cons", 1],["and_self", 1],["imp_self", 1],["List.cons_ne_nil", 1],["Eq.mpr_prop", 1],["UInt32.ofNat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Decidable.not_and_not_right", 1],["Nat.mul_div_assoc", 1],["Sat.Literal.reify.mk", 1],["not_iff_false_intro", 1],["Iff.elim_right", 1],["Nat.gcd_gcd_self_right_right", 1],["UnionFind.rankMax", 1],["if_neg", 1],["WellFoundedRelation.rel", 1],["not.decidable_imp_symm", 1],["decide_eq_true", 1],["Function.injective.ne", 1],["Subsingleton.allEq", 1],["lt_of_lt_of_le", 1],["exists_eq", 1],["Nat.sub_lt_sub_left", 1],["lt_iff_le_not_le", 1],["Nat.not_succ_le_self", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_mul_lcm", 1],["Array.get", 1],["Function.injective.ne_iff", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Decidable.iff_iff_and_or_not_and_not", 1],["imp.swap", 1],["and_not_self", 1],["Nat.add_mod_mod", 1],["Fin.one_val", 1],["List.ne_nil_of_length_pos", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["Nat.mod_eq_zero_of_dvd", 1],["Decidable.not_imp", 1],["Nat.coprime_mul_iff_left", 1],["iff_true", 1],["Decidable.not_iff_not", 1],["List.getLast", 1],["Bool.not_true", 1],["dec_em'", 1],["Function.cantor_surjective", 1],["List.eq_or_mem_of_mem_cons", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Eq.subst", 1],["ite_true", 1],["BEq.beq", 1],["ite_false", 1],["Nat.find_x.proof_3", 1],["Nat.sub_succ_lt_self", 1],["List.getLast_singleton", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["instDecidableXor.proof_4", 1],["List.erase", 1],["le_of_not_gt", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_refl", 1],["Nat.lt_iff_le_not_le", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["not_forall_of_exists_not", 1],["Nat.mod_add_mod", 1],["Not.elim", 1],["Decidable", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Option.eq_none_iff_forall_not_mem", 1],["Nat.mul_one", 1],["Fin.mk.injEq", 1],["Decidable.not_iff_comm", 1],["Decidable.not_and_iff_or_not", 1],["List.disjoint_append_left", 1],["MonoidWithZero.zero_mul", 1],["lt_trans", 1],["decide_eq_true_eq", 1],["Option.bind", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["List.erasep_of_forall_not", 1],["ite_not", 1],["Nat.div_self", 1],["Nat.gcd_gcd_self_left_right", 1],["instDecidableXor.proof_2", 1],["Nat.not_lt_of_le", 1],["Nat.zero_div", 1],["exists_congr", 1],["Nat.le_lt_antisymm", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["List.mem_append", 1],["Fin", 1],["Decidable.not_iff", 1],["Nat.coprime_comm", 1],["if_pos", 1],["dite_not", 1],["Nat.succ_pos", 1],["Nat.coprime_one_left", 1],["Nat.pos_of_ne_zero", 1],["Decidable.or_iff_not_and_not", 1],["Fin.val_eq_of_eq", 1],["List.erasep_cons_of_pos", 1],["Iff.elim_left", 1],["Decidable.iff_iff_not_or_and_or_not", 1],["Nat.succ_ne_self", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_of_not_le", 1],["and_true", 1],["Option.some.injEq", 1],["Nat.one_pos", 1],["BinaryHeap.popMaxAux", 1],["Nat.mod_self", 1],["or_false", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["ne_of_gt", 1],["not_lt", 1],["UInt8.val", 1],["Bool.and_true", 1],["Not.decidable_imp_symm", 1],["Decidable.and_iff_not_or_not", 1],["iff_iff_implies_and_implies", 1],["List.mem_singleton", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Preorder.lt_iff_le_not_le", 1],["Nat.succ_mul", 1],["instDecidableXor.proof_1", 1],["imp_intro", 1],["Nat.gcd_eq_left", 1],["Nat.sub_zero", 1],["Nat.exists_coprime", 1],["false_or", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nonempty.intro", 1],["Decidable.not_forall", 1],["lt_asymm", 1],["Function.RightInverse.surjective", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.lt_or_ge", 1],["Decidable.of_not_not", 1],["ne_of_lt", 1],["Nat.lt_of_succ_lt_succ", 1],["Nat.lt_eq", 1],["Decidable.iff_not_comm", 1],["instDecidableXor.proof_3", 1],["List.get_singleton", 1],["LawfulBEq.rfl", 1],["lt_or_gt_of_ne", 1],["UFNode.mk", 1],["Acc", 1]]],
["HMul.hMul", 300, [["HMul.hMul", 163],["Eq", 151],["congrArg", 96],["Eq.refl", 95],["Eq.mpr", 93],["Eq.trans", 89],["rfl", 86],["OfNat.ofNat", 82],["congr", 74],["of_eq_true", 73],["eq_self", 68],["congrFun", 67],["Eq.symm", 62],["HAdd.hAdd", 59],["Nat.mul_comm", 30],["propext", 25],["Nat.succ", 23],["HMod.hMod", 23],["forall_congr", 20],["HPow.hPow", 20],["forall_const", 20],["HDiv.hDiv", 19],["Nat.gcd", 17],["Nat.mul_zero", 17],["Semigroup.mul_assoc", 16],["CommSemigroup.mul_comm", 12],["Nat.zero_mul", 12],["Int.ofNat", 12],["Nat.mul_succ", 11],["Fin.val", 11],["Fin.mk", 11],["LE.le", 11],["Nat.mod_lt", 11],["mul_one", 10],["HSub.hSub", 10],["Nat.zero_eq", 10],["Unit.unit", 10],["MonoidWithZero.zero_mul", 10],["Fin.size_positive", 9],["Neg.neg", 9],["Fin.eq_of_val_eq", 8],["MonoidWithZero.mul_zero", 8],["one_mul", 8],["Fin.mul_def", 8],["Nat.succ_mul", 8],["Nat.add_comm", 8],["Int.negOfNat", 8],["Bool.true", 8],["add_zero", 7],["USize.mul_def", 7],["add_mul", 7],["UInt8.mul_def", 7],["UInt64.mul_def", 7],["UInt16.val", 7],["UInt32.mul_def", 7],["Distrib.left_distrib", 7],["UInt8.val", 7],["UInt32.val", 7],["Nat.mul_assoc", 7],["USize.val", 7],["UInt64.val", 7],["eq_true", 7],["UInt16.mul_def", 7],["UInt32.mk", 6],["UInt64.mk", 6],["Int.negSucc", 6],["Iff.intro", 6],["Int.mul_comm", 6],["UInt16.mk", 6],["Distrib.right_distrib", 6],["UInt8.mk", 6],["Exists.intro", 6],["USize.mk", 6],["Nat.zero_add", 6],["Nat.eq_zero_or_pos", 6],["Eq.mp", 6],["Nat.zero_le", 5],["Decidable.em", 5],["Trans.trans", 5],["eq_true_of_decide", 5],["add_assoc", 5],["Iff.mp", 5],["Nat.Linear.Var.denote", 5],["Nat.zero", 5],["Nat.add_assoc", 5],["Nat.add", 5],["Dvd.dvd", 5],["Tactic.Ring.horner", 5],["Nat.gcd_dvd_right", 5],["Nat.dvd_antisymm", 5],["Nat.mul_eq", 5],["pow_succ'", 4],["Int.ofNat_mul_negSucc_ofNat", 4],["le_refl", 4],["Int.mul_negSucc_ofNat_negSucc_ofNat", 4],["And", 4],["Nat.mul", 4],["Int.ofNat_mul_ofNat", 4],["PProd.fst", 4],["And.intro", 4],["Nat.le_div_iff_mul_le", 4],["Int.negSucc_ofNat_ofNat", 4],["Nat.gcd_comm", 4],["Nat.add_eq", 4],["UInt8", 4],["not_le", 4],["Nat.zero_mod", 4],["LT.lt", 4],["Nat.mod_eq_of_lt", 4],["Nat.Linear.Poly.denote", 4],["UInt32", 4],["Nat.lcm", 4],["pow_zero", 4],["UInt16", 4],["Nat.div_zero", 4],["UInt64", 4],["Nat.add_zero", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.left_distrib", 4],["pow_add", 4],["USize", 4],["Iff", 3],["Nat.coprime", 3],["Nat.mul_one", 3],["pow_mul_comm", 3],["USize.eq_of_val_eq", 3],["Nat.mul_dvd_mul", 3],["UInt64.eq_of_val_eq", 3],["Nat.zero_div", 3],["Nat.add_left_comm", 3],["cond_true", 3],["Nat.lt_of_lt_of_le", 3],["Fin.isLt", 3],["UInt16.eq_of_val_eq", 3],["Nat.dvd_refl", 3],["Nat.le_antisymm", 3],["Nat.lcm_comm", 3],["Inv.inv", 3],["Bool.of_not_eq_true", 3],["Nat.pred", 3],["Nat.mul_mod", 3],["Int.one_mul", 3],["Nat.dvd_mul_left", 3],["Nat.le_refl", 3],["And.left", 3],["add_comm", 3],["cond_false", 3],["Nat.mul_le_mul_left", 3],["UInt32.eq_of_val_eq", 3],["mul_add", 3],["Nat.dvd_gcd", 3],["Int.neg_mul_eq_neg_mul_symm", 3],["Int.distrib_right", 3],["Int.mul_neg_eq_neg_mul_symm", 3],["Fin.zero_def", 3],["Nat.mul_lt_mul_of_pos_left", 3],["Nat.sub_zero", 3],["Nat.right_distrib", 3],["cond", 3],["add_left_comm", 3],["UInt8.eq_of_val_eq", 3],["mul_left_inv", 3],["Int.distrib_left", 3],["Classical.em", 3],["False.elim", 2],["Nat.gcd_rec", 2],["UInt8.zero_def", 2],["Int.mul_lt_mul_of_pos_right", 2],["Nat.mul_pred_left", 2],["le_not_le_of_lt", 2],["UInt16.zero_def", 2],["Int.ofNat_mul_negOfNat", 2],["True", 2],["Iff.mpr", 2],["UInt32.mk_val_eq", 2],["USize.one_def", 2],["Int.negSucc_ofNat_mul_negOfNat", 2],["Nat.mul_lt_mul_of_pos_right", 2],["UInt64.zero_def", 2],["Nat.gcd_mul_left_left", 2],["Int.zero_mul", 2],["Nat.mul_mod_mul_left", 2],["UInt16.one_def", 2],["Int.mul_lt_mul_of_pos_left", 2],["UInt32.zero_def", 2],["Nat.coprime.symm", 2],["Nat.gcd_dvd_left", 2],["Nat.add_right_comm", 2],["Monoid.one_mul", 2],["Monoid.mul_one", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.div_eq", 2],["Subtype.property", 2],["UInt32.one_def", 2],["and_self", 2],["Int.mul_le_mul_of_nonneg_right", 2],["Int.add_comm", 2],["And.right", 2],["Int.natAbs", 2],["Int.sub_eq_add_neg", 2],["eq_false", 2],["UInt64.mk_val_eq", 2],["Monoid.npow_succ'", 2],["Nat.mul_dvd_mul_left", 2],["Nat.add_mod_mod", 2],["USize.add_def", 2],["Int.add_right_neg", 2],["Nat.dvd_mul_right", 2],["Int.mul_zero", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["USize.zero_def", 2],["Int.subNatNat", 2],["ite_true", 2],["ite_false", 2],["BEq.beq", 2],["le_antisymm", 2],["UInt64.add_def", 2],["neg_neg", 2],["UInt8.add_def", 2],["Iff.rfl", 2],["Int.mul_le_mul_of_nonneg_left", 2],["BinaryHeap.heapifyDown", 2],["UInt8.mk_val_eq", 2],["Nat.add_div_right", 2],["Nat.cast_mul", 2],["Fin.size_positive'", 2],["Prod.mk", 2],["Nat.add_mul_mod_self_left", 2],["Nat.coprime.mul", 2],["Nat.le_of_lt", 2],["UInt64.one_def", 2],["Fin.add_def", 2],["ite_congr", 2],["Nat.one_mul", 2],["Nat.lcm_zero_left", 2],["Int.neg_eq_of_add_eq_zero", 2],["UInt16.add_def", 2],["mul_right_inv", 2],["UInt8.one_def", 2],["mul_left_comm", 2],["lt_of_le_not_le", 2],["Nat.mod.inductionOn", 2],["UInt32.add_def", 2],["Nat.pow_succ", 2],["mul_right_cancel", 2],["Nat.add_sub_cancel", 2],["Nat.add_succ", 2],["Nat.coprime.dvd_of_dvd_mul_left", 2],["Nat.dvd_lcm_left", 2],["USize.mk_val_eq", 2],["mul_left_cancel", 2],["UInt16.mk_val_eq", 2],["eq_of_beq", 2],["Nat.zero_sub", 2],["Nat.mod_le", 1],["eq_false_of_decide", 1],["Nat.coprime.coprime_mul_left", 1],["Nat.mul_sub_right_distrib", 1],["Nat.succ_add", 1],["Nat.mul_le_mul_of_nonneg_right", 1],["List.nil", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.Expr.mulL", 1],["Int.ofNat_succ_pos", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.mul_pos", 1],["Option.some", 1],["Nat.add_mul_div_left", 1],["Nat.gcd_dvd", 1],["Int.negSucc_ofNat_add_ofNat", 1],["Bool", 1],["Nat.sub_add_cancel", 1],["Nat.dvd_zero", 1],["not_congr", 1],["Nat.Linear.Expr.var", 1],["pow_mul", 1],["Int.le_of_lt", 1],["Nat.not_succ_le_zero", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Nat.le.dest", 1],["Nat.add_sub_add_left", 1],["Nat.gcd_mul_lcm", 1],["Fin.one_def", 1],["Int.ofNat_add_ofNat", 1],["decide_eq_false", 1],["iff_self", 1],["Nat.cast_zero", 1],["Nat.mod_eq_zero_of_dvd", 1],["mul_pow", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["lt_of_le_of_lt", 1],["Nat.mod_zero", 1],["Nat.mul_div_assoc", 1],["Int.mul_le_mul", 1],["Nat.add_mul_mod_self_right", 1],["Int.eq_succ_of_zero_lt", 1],["Nat.mul_sub_left_distrib", 1],["le_of_lt", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.gcd.induction", 1],["Int.subNatNat_add", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.blt", 1],["Nat.Linear.Var.denote.go", 1],["Nat.strong_rec_on", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.mul_div_cancel", 1],["Nat.Linear.fixedVar", 1],["ite", 1],["Nat.mod_eq", 1],["Nat.mul_dvd_mul_right", 1],["Nat.dvd_trans", 1],["Nat.gcd_mul_right", 1],["Nat.lcm_dvd", 1],["Not", 1],["Fin", 1],["Nat.mul_le_mul_of_nonneg_left", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2", 1],["Nat.mul_mod_right", 1],["Nat.coprime.gcd_both", 1],["List.cons", 1],["eq_of_heq", 1],["le_trans", 1],["Nat.cast_add", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.coprime_mul_iff_left", 1],["Int.negOfNat_eq_subNatNat_zero", 1],["Nat.pos_of_dvd_of_pos", 1],["Nat.cast_succ", 1],["dite", 1],["Int.eq_ofNat_of_zero_le", 1],["beq_self_eq_true", 1],["Nat.coprime.gcd_left", 1],["Int.negOfNat_add", 1],["Nat.le_trans", 1],["Nat.div_div_eq_div_mul", 1],["decide_eq_true_iff", 1],["Nat.add_mul_div_right", 1],["Nat.lt_of_le_of_lt", 1],["Nat.Linear.Expr.denote", 1],["Nat.succ_le_of_lt", 1],["Int.ofNat_succ", 1],["Nat.add_le_add_iff_le_right", 1],["Nat.mod_add_div", 1],["Nat.coprime_comm", 1],["Nat.pred_succ", 1],["Nat.mod_add_mod", 1],["Nat.add_mod_right", 1],["Nat.lt_or_eq_of_le", 1],["Fin.mk.injEq", 1],["Int.negSucc_ofNat_mul_subNatNat", 1],["Fin.elim0", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.cast", 1],["Nat.coprime_iff_gcd_eq_one", 1],["Nat.mul_div_right", 1],["Nat.dvd_lcm_right", 1],["Int.ofNat_add_negSucc_ofNat", 1],["Nat.div_mul_cancel", 1],["Nat.gcd_mul_left", 1],["zero_add", 1],["Nat.sub_sub", 1],["Int.ofNat_nonneg", 1],["Nat.le_add_right", 1],["Option", 1],["Nat.sub_succ", 1],["Int.ofNat.injEq", 1],["pow_succ", 1],["Int.sign", 1],["Int.ofNat_zero", 1],["Int.negOfNat_mul_ofNat", 1],["Int.sub_nat_self", 1],["Int.mul_lt_mul'", 1],["Int.neg_eq_neg_one_mul", 1],["Nat.succ_pos", 1],["Exists", 1],["eq_of_sub_eq_zero'", 1],["Int.negOfNat_mul_negSucc_ofNat", 1],["Nat.coprime.coprime_mul_right", 1],["Int.neg_mul_eq_mul_neg", 1],["Option.none", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_of_not_le", 1],["Int.neg_mul_eq_neg_mul", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_zero_left", 1],["Nat.pred_zero", 1],["Nat.Linear.Poly.insertSorted", 1],["neg_add_self", 1],["Nat.not_le_of_lt", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1", 1],["Fin.ofNat'", 1],["Int.negSucc_ofNat_add_negSucc_ofNat", 1],["Nat.sub_le_sub_right_iff", 1],["inv_inv", 1],["Nat.exists_coprime", 1],["HEq.refl", 1],["pow_one", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4", 1],["Nat.add_one", 1],["Int.ofNat_mul_subNatNat", 1],["Nat.add_lt_add_left", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Fin.nsmuls_eq", 1],["false_iff", 1],["CommSemiring.mul_comm", 1],["Nat.lcm_one_left", 1],["Nat.lt_of_succ_le", 1],["Nat.mul_le_mul_right", 1],["Nat.mul_div_cancel'", 1],["SubNegMonoid.sub_eq_add_neg", 1],["Group.mul_left_inv", 1],["Bool.false", 1]]],
["HSub.hSub", 290, [["Eq.refl", 106],["Eq", 100],["rfl", 93],["Eq.mpr", 86],["HSub.hSub", 71],["OfNat.ofNat", 64],["HAdd.hAdd", 51],["Eq.trans", 40],["Eq.symm", 40],["congrArg", 39],["Nat.gcd", 35],["HMul.hMul", 35],["congrFun", 32],["of_eq_true", 31],["eq_self", 25],["Nat.succ", 21],["congr", 21],["HMod.hMod", 19],["Fin.val", 16],["Nat.gcd_dvd_right", 16],["Bool.true", 16],["Fin.mk", 15],["LT.lt", 15],["Nat.mod_lt", 12],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.add_comm", 10],["Nat.sub_lt", 10],["Iff.intro", 10],["List.length", 9],["Nat.sub_zero", 9],["Nat.dvd_antisymm", 9],["Iff", 9],["LE.le", 9],["Nat.pred", 8],["Nat.mul_comm", 8],["Nat.sub_add_cancel", 8],["Fin.size_positive", 8],["Neg.neg", 8],["Nat.zero_eq", 8],["And.intro", 8],["Dvd.dvd", 8],["eq_true_of_decide", 7],["Unit.unit", 7],["Nat.succ_sub_succ", 7],["Int.sub_eq_add_neg", 7],["Nat.zero", 7],["Exists.intro", 7],["HDiv.hDiv", 7],["Nat.gcd_zero_left", 7],["Nat.sub_le", 7],["PProd.fst", 7],["Nat.lt_of_lt_of_le", 7],["Int.subNatNat", 6],["Iff.mpr", 6],["of_decide_eq_true", 6],["Nat.eq_zero_or_pos", 6],["Nat.add_sub_cancel", 6],["Eq.mp", 6],["Nat.le.dest", 6],["dite", 6],["And", 5],["Nat.gcd_rec", 5],["Nat.sub_eq_zero_of_le", 5],["Nat.dvd_trans", 5],["Nat.dvd_mul_left", 5],["Array.size", 5],["Nat.coprime.symm", 5],["Int.ofNat", 5],["Fin.val_eq_of_lt", 5],["Trans.trans", 5],["propext", 5],["Nat.add_succ", 5],["Nat.zero_sub", 5],["Nat.sub_sub", 5],["Nat.coprime", 5],["Nat.sub_succ", 5],["iff_self", 5],["Nat.mul_zero", 4],["Nat.gcd_succ", 4],["HEq.refl", 4],["Nat.lt_succ_self", 4],["Nat.lt_of_le_of_lt", 4],["Nat.dvd_mul_right", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.lcm", 4],["And.left", 4],["Nat.gcd_dvd", 4],["Iff.rfl", 4],["Nat.zero_add", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["WellFounded.fix", 4],["Int.add_zero", 3],["Nat.coprime.coprime_dvd_right", 3],["Int.ofNat_zero", 3],["WellFounded.fix_eq", 3],["Nat.zero_mul", 3],["Nat.zero_le", 3],["Nat.gcd_one_left", 3],["List.get", 3],["Iff.mp", 3],["Nat.succ_sub_succ_eq_sub", 3],["List.length_cons", 3],["Nat.pred_le", 3],["Int.neg_lt_neg", 3],["Nat.add_sub_of_le", 3],["Fin.size_positive'", 3],["Nat.zero_lt_of_lt", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd.induction", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.succ_mul", 3],["And.right", 3],["Nat.gcd_zero_right", 3],["List.cons", 3],["Int.negSucc", 3],["absurd", 3],["HAppend.hAppend", 3],["Int.neg_le_neg", 3],["False.elim", 3],["Nat.le_of_lt", 3],["Nat.sub_self", 3],["Nat.add_zero", 3],["Bool.false", 3],["Nat.add_sub_add_right", 3],["True", 3],["id", 3],["PSigma.mk", 3],["Nat.div_zero", 2],["WellFoundedRelation.rel", 2],["Option.some", 2],["max", 2],["Nat.add_sub_self_left", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Nat.lt_irrefl", 2],["Nat.zero_lt_succ", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["List.length_append", 2],["Nat.add_assoc", 2],["Nat.sub_succ_lt_self", 2],["sizeOf_nat", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.div_mul_cancel", 2],["Int.sub_right_lt_of_lt_add", 2],["Nat.add_sub_cancel_left", 2],["min", 2],["Int.ofNat_sub", 2],["Int.subNatNat_elim", 2],["if_pos", 2],["Int.add_lt_add_left", 2],["Fin.eq_of_val_eq", 2],["Not", 2],["Fin.isLt", 2],["Subtype.mk", 2],["Nat.coprime.pow_left", 2],["Int.subNatNat_of_sub_eq_zero", 2],["List.repeat'", 2],["Int.add_right_neg", 2],["Nat.coprime.mul", 2],["Nat.mod_eq_of_lt", 2],["Nat.lcm_zero_left", 2],["funext", 2],["Nat.sub_eq_iff_eq_add", 2],["Nat.le_refl", 2],["Nat.le_of_dvd", 2],["Nat.lt_of_succ_lt_succ", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.le.intro", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Int.neg_add", 2],["Nat.mul_pred_left", 2],["Nat.sub_le_sub_right_iff", 2],["Fin.add_def", 2],["Nat.dvd_lcm_left", 2],["Nat.lt_succ_of_le", 2],["Nat.zero_mod", 2],["eq_false_of_decide", 2],["Fin.ofNat'", 2],["List.get?", 2],["Nat.coprime.coprime_mul_left", 2],["Int.add_assoc", 2],["Nat.coprime.gcd_left", 2],["List.nil", 2],["Nat.le_trans", 2],["Nat.lt_eq", 2],["Decidable.decide", 2],["Int.add_le_add_left", 2],["Nat.le_total", 1],["lt_of_le_of_lt", 1],["Int.lt_sub_left_of_add_lt", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_sub_left_distrib", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["List.removeNth", 1],["Nat.div_eq", 1],["Nat.sub_eq_sub_min", 1],["min_eq_right", 1],["Int.lt_add_of_sub_right_lt", 1],["Nat.le_of_sub_eq_zero", 1],["Array.eraseIdxSzAux", 1],["ite", 1],["Nat.mod_eq", 1],["List.cons_append", 1],["Int.neg_neg_of_pos", 1],["Nat.isValidChar", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.add_right_comm", 1],["Nat.lcm_dvd", 1],["Int.add_le_add_right", 1],["Nat.sub_le_sub_right", 1],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 1],["and", 1],["Nat.coprime.gcd_both", 1],["Int.neg_add_cancel_right", 1],["Int.sub_eq_zero_of_eq", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Iff.refl", 1],["Int.sub_left_lt_of_lt_add", 1],["Nat.gcd_pos_of_pos_left", 1],["min_le_left", 1],["Nat.pred_lt", 1],["Nat.succ_pred_eq_of_pos", 1],["max_eq_left", 1],["Classical.em", 1],["Nat.Linear.Expr.num", 1],["Nat.gcd_div", 1],["Array.isEqvAux.proof_1", 1],["Nat.not_lt_eq", 1],["Array.size_swap", 1],["Nat.le_of_not_lt", 1],["Decidable.em", 1],["List.get?_append_right", 1],["dif_neg", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.sub_pos_of_lt", 1],["Int.subNatNat_of_sub_eq_succ", 1],["Nat.le_add_right", 1],["Fin.nsmuls_eq", 1],["Int.negOfNat", 1],["List.drop", 1],["UnionFind.rank_lt", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Subtype.property", 1],["Nat.not_le_eq", 1],["Int.add_neg_cancel_right", 1],["Exists.elim", 1],["Nat.add_eq", 1],["List.length_dropLast", 1],["Int.add_left_comm", 1],["Exists", 1],["Decidable.isTrue", 1],["Nat.coprime.coprime_mul_right", 1],["Option.none", 1],["Nat.Linear.Expr.add", 1],["Array.isEqvAux_self", 1],["List.get_append_right_aux", 1],["Nat.pred_zero", 1],["Subsingleton.allEq", 1],["lt_of_lt_of_le", 1],["Nat.add_one", 1],["Int.sub_right_le_of_le_add", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_gcd_self_right_right", 1],["Bool", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.succ_add", 1],["Nat.add_mod_mod", 1],["Int.le_sub_right_of_add_le", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.sub_add_eq_max", 1],["Fin.one_val", 1],["List.get?_eq_get", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.not_lt_zero", 1],["Int.add_lt_add_of_le_of_lt", 1],["AddGroupWithOne.sub_eq_add_neg", 1],["List.cons_ne_nil", 1],["Ne", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin", 1],["Nat.mul_one", 1],["Int.sub_left_le_of_le_add", 1],["Int.add_lt_add", 1],["Int.add_lt_add_of_lt_of_le", 1],["Nat.Linear.Expr.var", 1],["Array.swap", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["MonoidWithZero.zero_mul", 1],["Int.subNatNat_add_right", 1],["Nat.add_sub_add_left", 1],["decide_eq_false", 1],["Int.zero_add", 1],["Int.eq_of_sub_eq_zero", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.div_self", 1],["UInt32.ofNat", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.not_lt_of_le", 1],["Nat.mul_div_assoc", 1],["Nat.pred_le_pred", 1],["Nat.zero_div", 1],["Nat.not_eq_zero_of_lt", 1],["Int.sub_self", 1],["GE.ge", 1],["decide_eq_true_iff", 1],["max_eq_right", 1],["Int.add_le_add", 1],["Nat.coprime_comm", 1],["Int.le_add_of_sub_right_le", 1],["Nat.one_pos", 1],["Nat.sub_lt_sub_left", 1],["FloatArray.size", 1],["Int.ofNat_add", 1],["Nat.mul_dvd_mul_right", 1],["Int.nonneg_def", 1],["Array.get", 1],["Int.zero_mul", 1],["Nat.eq_or_lt_of_le", 1],["Fin.ofNat'_succ", 1],["Option", 1],["Int.natAbs", 1],["Nat.gcd_mul_left", 1],["eq_of_heq", 1],["UInt8.val", 1],["UnionFind.lt_rankMax", 1],["Option.some.inj", 1],["Nat.coprime_mul_iff_left", 1],["Nat.sub_self_add", 1],["Nat.mod_self", 1],["List.getLast", 1],["Nat.le_of_succ_le_succ", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Bool.and_true", 1],["List.append", 1],["List.getLast_singleton", 1],["Int.add_lt_add_right", 1],["Nat.le_of_le_of_sub_le_sub_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mod_one", 1],["Nat.pred_succ", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["Nat.coprime.coprime_div_left", 1],["dite_congr", 1],["Fin.mk.injEq", 1],["BinaryHeap.arr", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Nat.sub_eq_zero_iff_le", 1],["Int.mul_neg_eq_neg_mul_symm", 1],["Array.data", 1],["Nat.lt_succ_iff", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["UInt32.val", 1],["Prod.mk", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Or.inl", 1],["Int.sub_nat_self", 1],["Nat.mul_sub_right_distrib", 1],["eq_true", 1],["Nat.lt_trans", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["Array.pop", 1],["Subtype", 1],["Int.negSucc_ofNat_coe", 1],["Int.neg_mul_eq_neg_mul_symm", 1],["Nat.coprime_one_left", 1],["Nat.lt_of_add_lt_add_right", 1],["Int.distrib_right", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Int.lt_add_one_of_le", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Subsingleton.elim", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Int.neg_nonpos_of_nonneg", 1],["eq_false'", 1],["le_of_not_ge", 1],["dif_pos", 1],["le_total", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Array.size_pop", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Fin.zero_def", 1],["Nat.eq_one_of_dvd_one", 1],["BinaryHeap.size", 1],["Nat.mul_mod_mul_left", 1],["UInt8.toChar_aux", 1],["Nat.zero_lt_sub_of_lt", 1],["List.getLast_cons", 1],["Nat.gcd_self", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.right_distrib", 1],["Nat.dvd_zero", 1],["ByteArray.size", 1],["Nat.Linear.ExprCnstr.mk", 1],["Nat.lcm_one_left", 1],["Int.le_sub_left_of_add_le", 1],["Nat.lt_or_ge", 1],["Int.subNatNat_add_left", 1],["Nat.dvd_add_iff_left", 1],["Int.subNatNat_add_add", 1],["Nat.sub_lt_left_of_lt_add", 1],["Array.isEqvAux.proof_2", 1],["Int.distrib_left", 1],["min_eq_left", 1],["ne_eq", 1],["List.length_repeat'", 1],["List.get_singleton", 1],["dite_true", 1]]],
["List.nil", 290, [["Eq", 144],["Eq.refl", 136],["congrArg", 123],["Eq.trans", 115],["rfl", 108],["of_eq_true", 105],["congrFun", 87],["eq_self", 81],["Eq.mpr", 80],["Eq.symm", 76],["List.cons", 73],["List.nil", 70],["congr", 67],["OfNat.ofNat", 54],["Bool.true", 38],["HAppend.hAppend", 38],["Fin.mk", 34],["PProd.fst", 34],["List.length", 31],["HAdd.hAdd", 31],["propext", 30],["eq_false", 28],["HEq.refl", 27],["Membership.mem", 25],["LT.lt", 24],["And", 22],["Not", 20],["List.get?", 20],["funext", 19],["Iff.intro", 19],["eq_true_of_decide", 19],["Iff", 19],["Option.some", 19],["Exists.intro", 18],["eq_true", 18],["Fin.val", 17],["List.get", 17],["Nat.succ", 17],["Array.size", 17],["Classical.em", 17],["Eq.mp", 16],["List.length_cons", 16],["And.intro", 15],["Nat.add", 15],["Unit.unit", 15],["List.map", 15],["iff_self", 14],["Exists", 14],["eq_of_heq", 14],["List.not_mem_nil", 13],["Nat.add_eq", 13],["Decidable.em", 13],["HSub.hSub", 13],["Or", 13],["Array.get", 12],["Prod.mk", 12],["List.cons_append", 12],["False", 12],["Nat.Linear.Poly.denote", 11],["Array.data", 11],["cond", 11],["List.nil_append", 11],["List.erase", 10],["false_and", 10],["List.set", 9],["implies_congr", 9],["LE.le", 9],["Fin.isLt", 9],["List.get?_eq_get", 9],["List.append_nil", 9],["cond_true", 9],["Nat.add_comm", 9],["cond_false", 9],["Nat.le_of_succ_le_succ", 9],["List.erasep", 9],["Bool.of_not_eq_true", 9],["Array.size_set", 8],["Bool.false", 8],["ne_eq", 8],["List.mem_cons", 8],["HMul.hMul", 8],["Nat.zero_add", 8],["Nat.Linear.Var.denote", 8],["Nat.mul_eq", 8],["List.reverse", 7],["False.elim", 7],["List.length_nil", 7],["ite_congr", 7],["absurd", 7],["And.left", 7],["Functor.map", 7],["UnionFind.arr", 7],["id", 7],["congr_arg", 6],["Nat.blt", 6],["List.reverseAux", 6],["Iff.mpr", 6],["if_pos", 6],["And.right", 6],["Ne.symm", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.add_zero", 6],["List.erasep_cons_of_neg", 6],["BinaryHeap.arr", 6],["List.erase_eq_erasep", 6],["if_neg", 6],["dite_congr", 6],["Or.inr", 6],["Or.inl", 6],["Nat.Linear.Poly.denote_eq", 6],["List.drop", 5],["Array.mk", 5],["Subsingleton.elim", 5],["List", 5],["List.repeat'", 5],["Nat.add_left_comm", 5],["Nat.Linear.Poly", 5],["Option.none", 5],["Nat.zero", 5],["Nat.zero_eq", 5],["Array.push", 5],["True", 5],["sorryAx", 5],["or_false", 5],["dite_true", 5],["List.reverse_cons", 5],["List.append_assoc", 5],["List.length_append", 4],["Iff.mp", 4],["Nat.Linear.Poly.denote_append", 4],["Eq.mpr_prop", 4],["Array.get?_eq_get?", 4],["List.Mem.head", 4],["Nat.lt_succ_self", 4],["UFModel.Agrees.get_eq", 4],["true_and", 4],["List.getLast", 4],["dif_neg", 4],["List.append_eq_nil", 4],["UFModel.parent", 4],["Nat.Linear.Poly.cancelAux", 4],["UnionFind.size", 4],["List.reverse_nil", 4],["UFNode.rank", 4],["List.erasep_cons_of_pos", 4],["implies_true", 4],["Prod", 4],["dif_pos", 4],["Nat.sub_eq", 4],["List.concat_eq_append", 4],["eq_comm", 3],["eq_false_of_decide", 3],["UFNode.mk", 3],["Nat.Linear.Expr.num", 3],["exists_false", 3],["Nat.Linear.Expr.var", 3],["Nat.Linear.hugeFuel", 3],["List.append", 3],["and_imp", 3],["ite", 3],["eq_false'", 3],["Ne", 3],["Array.set", 3],["List.erase_cons", 3],["List.concat", 3],["ite_true", 3],["Iff.rfl", 3],["Nat.Linear.Expr.denote", 3],["List.length_set", 3],["List.mem_cons_self", 3],["Option.some.inj", 3],["List.mem_map", 3],["List.modifyNthTail", 3],["List.exists_of_erasep", 3],["List.remove", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Array.size_push", 3],["UFNode.parent", 3],["UnionFind.model'", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.ExprCnstr.mk", 3],["List.Mem.tail", 3],["Nat.mul", 3],["Array.get?", 3],["forall_congr", 3],["Decidable.decide", 3],["List.modifyNth", 3],["Sat.Clause.reify.prop", 2],["List.exists_or_eq_self_of_erasep", 2],["UnionFind.rankMaxAux", 2],["List.card", 2],["max", 2],["Nat.zero_sub", 2],["Nat.one_mul", 2],["List.mem_append", 2],["List.disjoint_comm", 2],["Nat.left_distrib", 2],["Function.comp", 2],["Nat.Linear.Expr.denote_toPoly", 2],["List.cons_bind", 2],["List.get?_set_ne", 2],["List.removeNth", 2],["Nat.lt_irrefl", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.mul_assoc", 2],["Nat.add_assoc", 2],["false_or", 2],["UFModel.Models.size_eq", 2],["List.forall_mem_cons", 2],["imp_self", 2],["UFModel.Agrees.mk'", 2],["mt", 2],["Sat.Clause.reify.mk", 2],["implies_congr_ctx", 2],["min", 2],["List.get_mem", 2],["UFModel.Models.parent_eq", 2],["UFModel.Models.parent_eq'", 2],["List.take", 2],["Nat.Linear.Poly.denote_reverse", 2],["eq_of_beq", 2],["List.mem_join", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["List.get_of_mem", 2],["List.mem_cons_of_mem", 2],["Option.some_inj", 2],["dite_false", 2],["List.disjoint", 2],["List.exists_of_mem_map", 2],["UFModel.Models.rank_eq", 2],["List.get?_modifyNth", 2],["BEq.beq", 2],["ite_false", 2],["List.join", 2],["List.mem_bind", 2],["and", 2],["List.cons_ne_nil", 2],["Nat.min_zero", 2],["UFModel.rank", 2],["Nat.not_le_eq", 2],["Nat.pred", 2],["UFModel.Models.empty", 2],["decide_eq_true_eq", 2],["BinaryHeap.size_pos_of_max", 2],["SizeOf.sizeOf", 2],["Function.comp_apply", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["and_self", 2],["List.get?_set_eq", 2],["List.cons.injEq", 2],["List.set_eq_modifyNth", 2],["Nat.not_lt_eq", 2],["Nat.succ_pos", 2],["Nat.lt_succ_iff", 2],["Nat.min_succ_succ", 2],["BinaryHeap.max", 2],["WellFoundedRelation.rel", 2],["Nat.succ_ne_zero", 2],["List.length_pos_of_ne_nil", 2],["sizeOf_nat", 2],["Option.map", 2],["Bool.and_true", 2],["List.get?_len_le", 2],["Nat.le_add_right", 2],["Nat.Linear.Poly.insertSorted", 2],["le_of_not_lt", 2],["UFModel.push", 2],["List.bind", 2],["Nat.zero_min", 2],["UFModel.empty", 2],["WellFounded.fix", 2],["List.toArray", 2],["UFModel.Models", 2],["List.card_nil", 2],["List.erasep_cons", 2],["Nat.lt_eq", 2],["List.replicate", 2],["Trans.trans", 1],["Array.isEqvAux_self", 1],["forall_eq", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["List.get?_set_of_lt", 1],["List.mem_reverseAux", 1],["Option.map_some'", 1],["Subtype.property", 1],["BinaryHeap.insert.proof_1", 1],["lt_irrefl", 1],["Sigma", 1],["Nat.lt_of_lt_of_le", 1],["HDiv.hDiv", 1],["WellFounded.fix_eq", 1],["List.length_dropLast", 1],["exists_eq_right_right'", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["not_exists", 1],["Subtype.mk", 1],["List.toArray_data", 1],["Nat.zero_mul", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["UnionFind.lt_rankMax'", 1],["Nat.le_of_succ_le", 1],["PSigma", 1],["List.disjoint_nil_left", 1],["List.length_erasep_of_mem", 1],["UnionFind.rankMaxAux.proof_2", 1],["List.card_cons_of_mem", 1],["Nat.pred_lt'", 1],["List.toArrayAux_data", 1],["Nat.succ_add", 1],["or_iff_left_iff_imp", 1],["Nat.succ_lt_succ", 1],["List.forall_mem_of_forall_mem_cons", 1],["Sat.Clause.reify_and", 1],["Array.mk.sizeOf_spec", 1],["List.modifyHead", 1],["Nat.sub_add_eq_max", 1],["Classical.byContradiction", 1],["Nat.to_digits_core_length", 1],["id_eq", 1],["Nat.Linear.Poly.denote_combineAux", 1],["List.inj_on", 1],["Prod.mk.injEq", 1],["Nat.succ.inj", 1],["trivial", 1],["List.length_concat", 1],["List.length_take", 1],["Nat.lt_trans", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Sat.Clause.reify_zero", 1],["List.length_singleton", 1],["UnionFind.rank_lt", 1],["List.map₂", 1],["Option.map_eq_map", 1],["True.intro", 1],["Array.toArrayLit", 1],["And.imp", 1],["EqIffBeqTrue", 1],["not_false_iff", 1],["List.eq_of_mem_repeat'", 1],["Array.get?_push_lt", 1],["List.map_append", 1],["Sat.Valuation.satisfies", 1],["List.mapTRAux_eq", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Array.getLit", 1],["List.eq_of_mem_singleton", 1],["Array.size_pop", 1],["List.erase_cons_head", 1],["Nat.succ_sub_succ", 1],["UFModel.push.proof_1", 1],["UnionFind.rankMax", 1],["UFModel.Agrees.set", 1],["Nat.add_le_add", 1],["List.erasep_append_right", 1],["exists_imp_distrib", 1],["UnionFind.rankMaxAux.proof_1", 1],["List.get?_modifyNth_ne", 1],["Nat.toDigitsCore", 1],["List.get?_append", 1],["Or.resolve_left", 1],["Nat.digitChar", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["List.singleton_append", 1],["Nat.sub_lt_sub_left", 1],["List.length_replicate", 1],["List.mem_map_of_mem", 1],["Nat.Linear.fixedVar", 1],["Nat.lt_add_right", 1],["le_refl", 1],["List.cons.sizeOf_spec", 1],["List.get?_modifyNth_eq", 1],["Sat.Valuation.satisfies_fmla.mk", 1],["List.length_map", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.add_le_add_right", 1],["unsafeCast", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.get_append_right_aux", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.ne_nil_of_length_pos", 1],["List.append_eq_cons_iff", 1],["UnionFind.lt_rankMax", 1],["List.eq_nil_of_length_eq_zero", 1],["Nat.mul_zero", 1],["Nat.mul_comm", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["List.get?_eq_some", 1],["Or.elim", 1],["Nat.Linear.Poly.denote_fuse", 1],["List.get_cons_zero", 1],["Nat.zero_le", 1],["List.toArrayAux", 1],["Array.isEqvAux.proof_3", 1],["List.erasep_subset", 1],["Nat.succ_inj'", 1],["Eq.subst", 1],["Nat.Linear.Poly.combineAux", 1],["Array.ext'", 1],["List.length_eq_zero", 1],["not_or", 1],["le_antisymm", 1],["instDecidableEqNat", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Array.get?_set_ne", 1],["Sat.Fmla.reify.mk", 1],["of_decide_eq_true", 1],["List.card_le_card_cons", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.succ.injEq", 1],["Array.isEqv", 1],["List.singleton_disjoint", 1],["List.mem_iff_get", 1],["Not.elim", 1],["List.set_nil", 1],["Option.getD", 1],["UFModel.Models.push", 1],["Nat.sub_succ_lt_self", 1],["Nat.Linear.Poly.denote_mul", 1],["Subset.subset", 1],["List.mem_of_ne_of_mem", 1],["if_false", 1],["List.erasep_of_forall_not", 1],["Fin.elim0", 1],["min_le_left", 1],["Array.toListLitAux", 1],["Nat.succ_sub_succ_eq_sub", 1],["List.mapTRAux", 1],["Array.get_eq_get", 1],["List.replicateTR_loop_replicate_eq", 1],["Nat.mul_one", 1],["List.replicateTR.loop", 1],["dite", 1],["List.mem_filterAux", 1],["List.map_cons", 1],["Nat.one_pos", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["List.mem_filter", 1],["NeqIffBeqFalse", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_lt_succ", 1],["Array.pop", 1],["List.modifyNthTail_length", 1],["Option.mem_def", 1],["List.mem_nil_iff", 1],["Nat.Linear.Poly.denote_combine", 1],["UFModel.Agrees.push", 1],["Array.swap", 1],["beq_self_eq_true", 1],["not_and", 1],["Array.get?_eq_get", 1],["List.mem_of_mem_erasep", 1],["List.reverseAux_eq_append", 1],["List.reverseAux_reverseAux_nil", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["List.subset.refl", 1],["Nat.le_trans", 1],["Option.some.injEq", 1],["Array.isEqvAux.proof_1", 1],["Bool.and_false", 1],["and_false", 1],["List.redLength", 1],["id_map'", 1],["Nat.Linear.Poly.combine", 1],["List.filterAux", 1],["UFModel.Agrees.empty", 1],["List.reverseAux_reverseAux", 1],["Array.mkEmpty", 1],["List.erase_cons_tail", 1],["List.mem_singleton", 1],["Array.size_swap", 1],["List.mem_erasep_of_neg", 1],["List.get?_map", 1],["BinaryHeap.size", 1],["Nat.add_sub_add_right", 1],["List.erasep_append_left", 1],["HMod.hMod", 1],["List.getLast_append", 1],["List.getLast_cons", 1],["List.List.append_eq", 1],["Nat.add_le_add_left", 1],["List.get?_append_right", 1],["Nat.sub_lt", 1],["Nat.right_distrib", 1],["List.tail", 1],["List.Fin.exists_iff", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Subtype", 1],["List.mem_reverse", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Sat.Fmla.one", 1],["List.length_repeat'", 1],["Subtype.val", 1],["min_self", 1]]],
["List.cons", 267, [["Eq", 135],["congrArg", 118],["Eq.refl", 113],["Eq.trans", 111],["of_eq_true", 104],["rfl", 94],["congrFun", 85],["eq_self", 83],["List.cons", 81],["Eq.mpr", 73],["Eq.symm", 68],["congr", 67],["List.nil", 54],["OfNat.ofNat", 43],["Membership.mem", 39],["HAdd.hAdd", 36],["HAppend.hAppend", 34],["propext", 32],["Bool.true", 30],["eq_false", 28],["PProd.fst", 27],["List.length", 24],["And.intro", 23],["Or", 22],["Iff", 21],["Exists.intro", 20],["And", 20],["Not", 19],["Iff.intro", 18],["eq_true_of_decide", 17],["HEq.refl", 17],["Decidable.em", 17],["funext", 16],["List.mem_cons", 16],["Unit.unit", 16],["eq_true", 16],["List.map", 15],["eq_of_heq", 15],["iff_self", 15],["Eq.mp", 15],["Fin.mk", 15],["LT.lt", 14],["List.length_cons", 14],["Nat.succ", 14],["List.get?", 13],["Exists", 13],["Prod.mk", 13],["Nat.add", 12],["Nat.add_eq", 12],["Classical.em", 12],["List.not_mem_nil", 12],["Nat.Linear.Poly.denote", 12],["Fin.val", 12],["List.cons_append", 11],["List.nil_append", 11],["Option.some", 11],["implies_congr", 10],["Nat.add_comm", 10],["Array.data", 10],["List.erase", 10],["Array.size", 10],["absurd", 10],["cond", 10],["List.append_nil", 9],["ite_congr", 9],["HMul.hMul", 9],["List.set", 9],["Iff.mpr", 9],["Or.inr", 9],["Nat.zero_add", 9],["Nat.Linear.Var.denote", 9],["List.erasep", 9],["Nat.mul_eq", 9],["Array.size_set", 8],["cond_true", 8],["LE.le", 8],["cond_false", 8],["if_neg", 8],["List.Mem.tail", 8],["Or.inl", 8],["if_pos", 8],["List.card", 8],["Bool.of_not_eq_true", 8],["List", 7],["Nat.add_left_comm", 7],["List.reverse", 7],["List.reverseAux", 7],["List.length_nil", 7],["Functor.map", 7],["HSub.hSub", 7],["congr_arg", 7],["List.erase_eq_erasep", 6],["List.erasep_cons_of_neg", 6],["false_and", 6],["Nat.Linear.Poly.denote_eq", 6],["Nat.Linear.Poly.denote_le", 6],["Subsingleton.elim", 6],["Ne.symm", 6],["Nat.blt", 6],["BinaryHeap.arr", 6],["False", 6],["And.left", 6],["List.insert", 6],["Bool.false", 5],["List.get?_eq_get", 5],["Nat.Linear.Poly.denote_append", 5],["And.right", 5],["Array.mk", 5],["List.get", 5],["Iff.rfl", 5],["Fin.isLt", 5],["Array.push", 5],["ite", 5],["List.reverse_cons", 5],["Nat.Linear.Poly", 5],["List.repeat'", 5],["List.append_assoc", 5],["or_false", 5],["List.Mem.head", 5],["Array.get", 4],["False.elim", 4],["Nat.lt_succ_self", 4],["false_or", 4],["Prod", 4],["ne_eq", 4],["Nat.sub_eq", 4],["List.reverse_nil", 4],["List.erasep_cons_of_pos", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.zero_eq", 4],["forall_congr", 4],["True", 4],["List.concat_eq_append", 4],["Nat.add_zero", 4],["Array.get?_eq_get?", 4],["List.mem_insert_iff", 4],["List.erase_cons", 3],["Nat.add_assoc", 3],["Or.elim", 3],["Nat.Linear.Expr.toPoly", 3],["List.concat", 3],["mt", 3],["HDiv.hDiv", 3],["UFNode.mk", 3],["List.insert_of_not_mem", 3],["List.mem_cons_self", 3],["List.modifyNth", 3],["if_false", 3],["Nat.Linear.Expr.denote", 3],["List.length_set", 3],["Nat.succ_ne_zero", 3],["List.mem_map", 3],["List.drop", 3],["Sat.Clause.reify.prop", 3],["HMod.hMod", 3],["ite_true", 3],["List.insert_of_mem", 3],["Nat.Linear.hugeFuel", 3],["and_imp", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["true_and", 3],["List.getLast", 3],["Array.size_push", 3],["List.remove", 3],["List.length_append", 3],["List.modifyNthTail", 3],["List.exists_of_erasep", 3],["Array.set", 3],["id", 3],["Array.get?", 3],["eq_false'", 2],["List.set_eq_modifyNth", 2],["UFModel.parent", 2],["List.List.append_eq", 2],["Nat.le_add_right", 2],["List.erasep_cons", 2],["Nat.zero_min", 2],["eq_comm", 2],["forall_eq", 2],["List.card_nil", 2],["List.replicate", 2],["List.card_cons_of_mem", 2],["UFModel.push", 2],["eq_false_of_decide", 2],["List.cons_bind", 2],["List.get?_set_ne", 2],["Nat.zero", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Function.comp_apply", 2],["List.instDecidableMemListInstMembershipList", 2],["exists_false", 2],["Nat.Linear.Poly.denote_reverse", 2],["List.mem_append", 2],["List.forall_mem_cons", 2],["imp_self", 2],["List.exists_or_eq_self_of_erasep", 2],["or_assoc", 2],["Sat.Clause.reify.mk", 2],["min", 2],["Nat.mul", 2],["Iff.mp", 2],["and_self", 2],["le_refl", 2],["List.take", 2],["not_or", 2],["Function.comp", 2],["List.removeNth", 2],["UFModel.Agrees.mk'", 2],["Option.some_inj", 2],["Nat.le_of_succ_le_succ", 2],["List.disjoint", 2],["List.eq_or_mem_of_mem_cons", 2],["List.exists_of_mem_map", 2],["Ne", 2],["ite_false", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["List.singleton_disjoint", 2],["Nat.min_zero", 2],["sorryAx", 2],["BinaryHeap.size_pos_of_max", 2],["UnionFind.arr", 2],["List.get?_set_eq", 2],["List.get?_modifyNth", 2],["Nat.pred", 2],["Nat.min_succ_succ", 2],["Nat.Linear.Expr.denote_toPoly", 2],["List.bind", 2],["Option.map", 2],["List.mem_bind", 2],["if_true", 2],["List.mem_cons_of_mem", 2],["Nat.Linear.Poly.insertSorted", 2],["List.card_cons_of_not_mem", 2],["Option.some.inj", 2],["implies_true", 2],["List.toArray", 2],["true_or", 2],["List.cons.injEq", 2],["UFModel.Agrees.set", 1],["List.erasep_subset", 1],["List.foldr", 1],["List.subset.refl", 1],["BinaryHeap.insert.proof_1", 1],["Nat.le_succ", 1],["Bool.and_self", 1],["Nat.not_lt_eq", 1],["Nat.lt_of_lt_of_le", 1],["Array.mkEmpty", 1],["List.erase_cons_tail", 1],["Array.size_swap", 1],["List.getLast_append", 1],["List.nil_union", 1],["List.modifyNthTail_length", 1],["Nat.add_le_add_left", 1],["List.get?_set_of_lt", 1],["sizeOf_nat", 1],["Bool.and_false", 1],["Nat.one_mul", 1],["UFModel.Models.empty", 1],["SizeOf.sizeOf", 1],["Nat.mul_one", 1],["Eq.propIntro", 1],["Option.map_some'", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["le_of_not_lt", 1],["lt_irrefl", 1],["List.replicateTR.loop", 1],["List.length_dropLast", 1],["exists_eq_right_right'", 1],["List.erasep_append_left", 1],["Option.none", 1],["Nat.Linear.Expr.add", 1],["List.card_eq_of_equiv", 1],["not_exists", 1],["Nat.le_of_lt_succ", 1],["List.toArray_data", 1],["or_true", 1],["min_self", 1],["Nat.pred_lt'", 1],["List.cons_union", 1],["Sat.Clause.reify_and", 1],["UFModel.Agrees.push", 1],["List.filterAux", 1],["Array.swap", 1],["List.length_erasep_of_mem", 1],["Nat.succ_add", 1],["of_decide_eq_true", 1],["List.forall_mem_of_forall_mem_cons", 1],["Nat.to_digits_core_length", 1],["Nat.lt_of_lt_of_eq", 1],["List.modifyHead", 1],["Nat.sub_add_eq_max", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Sat.Fmla.reify.mk", 1],["Nat.left_distrib", 1],["Array.get_eq_get", 1],["Nat.Linear.Poly.denote_combineAux", 1],["UFModel.Models", 1],["Nat.lt_irrefl", 1],["List.Pairwise.cons", 1],["List.length_concat", 1],["List.length_take", 1],["trivial", 1],["List.Perm.refl", 1],["forall_and_distrib", 1],["And.elim", 1],["Nat.lt_trans", 1],["List.mem_union_iff", 1],["List.length_singleton", 1],["Sat.Clause.reify_zero", 1],["Nat.Linear.Expr.var", 1],["List.card_append_disjoint", 1],["List.map₂", 1],["List.append", 1],["And.imp", 1],["List.exists_mem_cons_of_exists", 1],["Array.toArrayLit", 1],["EqIffBeqTrue", 1],["not_false_iff", 1],["Nat.Linear.Expr.num", 1],["Sat.Valuation.satisfies", 1],["List.map_append", 1],["List.mapTRAux_eq", 1],["Array.get?_push_eq", 1],["Array.getLit", 1],["List.eq_of_mem_singleton", 1],["by_contra", 1],["List.inj_on", 1],["List.erase_cons_head", 1],["Array.size_pop", 1],["max", 1],["List.get_mem", 1],["List.exists_mem_cons_of", 1],["UFModel.push.proof_1", 1],["List.erasep_append_right", 1],["Nat.le_of_succ_le", 1],["List.get?_modifyNth_ne", 1],["Nat.add_le_add", 1],["exists_imp_distrib", 1],["Or.resolve_left", 1],["UnionFind.model'", 1],["List.disjoint_comm", 1],["List.singleton_append", 1],["List.Perm.trans", 1],["List.mem_map_of_mem", 1],["Nat.Linear.fixedVar", 1],["Option.map_eq_map", 1],["Nat.Linear.Poly.denote_sort_go", 1],["id_eq", 1],["UFNode.rank", 1],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 1],["List.length_map", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.add_le_add_right", 1],["Array.get?_set_eq", 1],["List.Perm.swap", 1],["Nat.succ_inj'", 1],["Array.get?_set_ne", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Array.get?_push_lt", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["UFModel.Agrees.get_eq", 1],["Nat.mul_comm", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["unsafeCast", 1],["List.length_replicate", 1],["List.Perm.cons", 1],["List.append_eq_cons_iff", 1],["WellFoundedRelation.rel", 1],["List.Mem", 1],["List.toArrayAux", 1],["Nat.zero_le", 1],["Nat.Linear.Poly.denote_fuse", 1],["List.subset_def", 1],["Nat.Linear.Poly.combineAux", 1],["min_le_left", 1],["BEq.beq", 1],["Array.ext'", 1],["le_antisymm", 1],["instDecidableEqNat", 1],["or_comm", 1],["UFNode.value", 1],["List.reverseAux_reverseAux", 1],["List.reverseAux_eq_append", 1],["Nat.le_trans", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.succ.injEq", 1],["BinaryHeap.size_heapifyUp", 1],["List.get?_modifyNth_eq", 1],["Sat.Valuation.satisfies_fmla.mk", 1],["List.set_nil", 1],["Not.elim", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.Linear.Poly.combine", 1],["Nat.Linear.Poly.denote_mul", 1],["Option.getD", 1],["List.disjoint_append_left", 1],["List.mem_of_ne_of_mem", 1],["decide_eq_true_eq", 1],["List.erasep_of_forall_not", 1],["List.mem_join", 1],["Nat.mul_assoc", 1],["Array.toListLitAux", 1],["Sat.Fmla.one", 1],["List.mapTRAux", 1],["List.Perm", 1],["List.cons_ne_nil", 1],["UFModel.Models.push", 1],["or_imp_distrib", 1],["List.mem_reverseAux", 1],["List.mem_filterAux", 1],["List.map_cons", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["List.Pairwise_cons", 1],["List.forall_mem_nil", 1],["List.mem_filter", 1],["NeqIffBeqFalse", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["Array.pop", 1],["List.toArrayAux_data", 1],["Option.mem_def", 1],["List.union", 1],["Nat.Linear.Poly.denote_combine", 1],["List.union_equiv_append", 1],["Sat.Literal.reify.prop", 1],["not_and", 1],["Array.get?_eq_get", 1],["eq_of_beq", 1],["List.reverseAux_reverseAux_nil", 1],["Nat.succ_ne_self", 1],["List.card_le_card_cons", 1],["dif_neg", 1],["Option.some.injEq", 1],["List.cons_subset", 1],["List.or_exists_of_exists_mem_cons", 1],["and", 1],["or_iff_left_iff_imp", 1],["Prod.mk.injEq", 1],["List.redLength", 1],["id_map'", 1],["dite_false", 1],["UFModel.Agrees.empty", 1],["List.replicateTR_loop_replicate_eq", 1],["Nat.succ.inj", 1],["List.mem_singleton", 1],["dif_pos", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["List.mem_erasep_of_neg", 1],["List.get?_map", 1],["BinaryHeap.size", 1],["List.get?_append", 1],["List.Pairwise", 1],["List.join", 1],["Subset.subset", 1],["UFModel.empty", 1],["Iff.trans", 1],["beq_self_eq_true", 1],["List.mem_of_mem_erasep", 1],["Nat.right_distrib", 1],["List.tail", 1],["Nat.Linear.ExprCnstr.mk", 1],["Decidable.decide", 1],["Nat.lt_eq", 1],["List.mem_reverse", 1],["dite_true", 1],["List.length_repeat'", 1],["List.eq_of_mem_repeat'", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.not_le_eq", 1]]],
["Eq.refl", 231, [["Eq", 90],["Eq.refl", 90],["rfl", 64],["Eq.mpr", 58],["congrArg", 53],["Eq.trans", 49],["OfNat.ofNat", 46],["Eq.symm", 43],["of_eq_true", 40],["congrFun", 40],["Fin.mk", 40],["Nat.gcd", 35],["eq_self", 33],["Fin.val", 26],["HMul.hMul", 25],["LT.lt", 21],["congr", 21],["HMod.hMod", 19],["Bool.true", 18],["Option.some", 17],["HAdd.hAdd", 16],["List.nil", 16],["Nat.gcd_dvd_right", 16],["List.length", 15],["List.cons", 15],["List.get", 15],["HEq.refl", 13],["And.intro", 12],["Array.get", 11],["Nat.gcd_comm", 11],["Array.size", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.mod_lt", 10],["eq_true_of_decide", 10],["eq_true", 10],["Eq.mp", 9],["Nat.succ", 9],["Nat.dvd_antisymm", 9],["List.get?", 8],["Fin.isLt", 8],["Iff", 8],["Iff.intro", 8],["eq_false", 8],["Nat.le_of_succ_le_succ", 8],["HDiv.hDiv", 8],["Fin.size_positive", 8],["Nat.gcd_zero_left", 7],["PProd.fst", 7],["dite_congr", 7],["Dvd.dvd", 7],["Decidable.em", 7],["And.left", 7],["List.get?_eq_get", 7],["dif_neg", 6],["Classical.em", 6],["propext", 6],["funext", 6],["iff_self", 6],["Nat.add", 6],["UnionFind.arr", 6],["Exists.intro", 6],["dif_pos", 6],["Array.data", 6],["dite_true", 6],["Nat.coprime.symm", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Nat.gcd_rec", 5],["Nat.dvd_mul_left", 5],["Eq.mpr_prop", 5],["Nat.dvd_trans", 5],["eq_of_heq", 5],["And", 5],["And.right", 5],["HAppend.hAppend", 5],["HSub.hSub", 5],["Fin.val_eq_of_lt", 5],["Bool.false", 5],["Option.get", 4],["List.set", 4],["Nat.gcd_succ", 4],["UFModel.parent", 4],["Nat.dvd_mul_right", 4],["Array.get?_eq_get?", 4],["Array.mk", 4],["UFModel.Agrees.get_eq", 4],["Iff.mpr", 4],["List.getLast", 4],["Not", 4],["Nat.eq_zero_or_pos", 4],["Array.size_set", 4],["ite_congr", 4],["Subtype.property", 4],["False.elim", 4],["Exists", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["UnionFind.size", 4],["UFNode.rank", 4],["Nat.coprime.coprime_dvd_left", 4],["id", 4],["Nat.lcm", 4],["Nat.lt_succ_self", 3],["Nat.coprime.coprime_dvd_right", 3],["UFNode.parent", 3],["List.append", 3],["Function.update_noteq", 3],["Option.none", 3],["Nat.Linear.Expr.add", 3],["Fin.size_positive'", 3],["List.length_cons", 3],["Nat.dvd_refl", 3],["Nat.gcd_one_left", 3],["List.concat_eq_append", 3],["dite_false", 3],["LE.le", 3],["Nat.lcm_comm", 3],["sorryAx", 3],["dite", 3],["ne_eq", 3],["BinaryHeap.arr", 3],["Option.some.inj", 3],["True", 3],["Nat.Linear.Expr.var", 3],["Nat.pos_of_dvd_of_pos", 3],["Membership.mem", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.toDigitsCore", 3],["absurd", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.num", 3],["Array.get?", 3],["Nat.gcd_zero_right", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.digitChar", 3],["Iff.trans", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.gcd_mul_left_left", 2],["UnionFind.rankMaxAux", 2],["Fin.eq_of_val_eq", 2],["Function.forall_update_iff", 2],["Nat.mul_zero", 2],["SizeOf.sizeOf", 2],["UFNode.mk", 2],["implies_congr", 2],["Nat.add_eq", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["UnionFind.model'", 2],["of_decide_eq_true", 2],["Nat.zero_mod", 2],["if_false", 2],["Fin.elim0", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.gcd_left", 2],["le_of_not_lt", 2],["List.length_set", 2],["Nat.not_lt_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.gcd_mul_right", 2],["List.drop", 2],["Nat.coprime.mul", 2],["eq_false_of_decide", 2],["Nat.dvd_lcm_left", 2],["Iff.mp", 2],["Unit.unit", 2],["List.get?_set_ne", 2],["True.intro", 2],["UFModel.Models.size_eq", 2],["Nat.dvd_mod_iff", 2],["Function.funext_iff", 2],["List.get_mem", 2],["UFModel.Models.parent_eq", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["UFModel.Models.parent_eq'", 2],["Nat.zero_eq", 2],["Nat.not_le_eq", 2],["Option.some_inj", 2],["UFModel.Models.rank_eq", 2],["Decidable.isTrue", 2],["Iff.rfl", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["Nat.coprime_iff_gcd_eq_one", 2],["if_true", 2],["BinaryHeap.size_pos_of_max", 2],["Array.push", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["Nat.succ_pos", 2],["Array.size_push", 2],["BinaryHeap.max", 2],["Nat.gcd_one_right", 2],["Fin.ofNat'", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["WellFounded.fix", 2],["Fin.mul_def", 2],["Function.update_same", 2],["Decidable.decide", 2],["List.cons_ne_nil", 2],["Nat.gcd_div", 1],["List.get_of_mem", 1],["Nat.isValidChar", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.coprime_comm", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["if_pos", 1],["Nat.one_pos", 1],["Ne.symm", 1],["Nat.lt_add_right", 1],["Nat.mod_self", 1],["Bool.and_true", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["Array.isEqvAux.proof_1", 1],["UInt8.val", 1],["Array.size_swap", 1],["List.getLast_append", 1],["Function.eq_update_iff", 1],["List.get?_append_right", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["sizeOf_nat", 1],["Nat.succ_mul", 1],["Nat.le_add_right", 1],["Option.map_some'", 1],["UInt32.val", 1],["Array.get?_push_lt", 1],["List.nil_append", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["lt_irrefl", 1],["Sigma", 1],["Ne", 1],["WellFounded.fix_eq", 1],["PSigma", 1],["Array.set", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.to_digits_core_length", 1],["Function.update_comp_eq_of_injective'", 1],["Nat.le_of_lt_succ", 1],["eq_false'", 1],["not_exists", 1],["Array.get_eq_get", 1],["Nat.le_of_succ_le", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["UnionFind.rankMaxAux.proof_2", 1],["false_iff", 1],["Nat.mul_mod_mul_left", 1],["Nat.find_x", 1],["List.getLast_cons", 1],["Nat.zero_lt_succ", 1],["Nat.succ_lt_succ", 1],["Option.isSome_some", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Array.isEqvAux_self", 1],["Nat.lt_of_lt_of_le", 1],["Option.map_eq_map", 1],["List.get?_append", 1],["List.get?_set_of_lt", 1],["Nat.zero", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Nat.succ_sub_succ", 1],["Nat.sub_succ_lt_self", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Quot.ind", 1],["List.get_append_right_aux", 1],["Array.toArrayLit", 1],["Nat.lcm_dvd", 1],["Nat.mul_one", 1],["List.mem_cons_of_mem", 1],["UInt32.ofNat", 1],["Array.get?_push_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Array.swap", 1],["Array.get?_set_ne", 1],["UFModel.Agrees.push", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Subsingleton.allEq", 1],["List.length_append", 1],["Nat.gcd_gcd_self_right_right", 1],["UnionFind.rankMaxAux.proof_1", 1],["List.repeat'", 1],["Function.injective.ne", 1],["Nat.gcd_pos_of_pos_left", 1],["UFModel.push", 1],["Subtype.mk", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["Nat.lt_succ_iff", 1],["Nat.coprime.coprime_div_left", 1],["List.length_map", 1],["MonoidWithZero.zero_mul", 1],["List.concat", 1],["Nat.gcd_gcd_self_left_right", 1],["Subtype", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["Nat.gcd_self", 1],["List.eq_of_mem_repeat'", 1],["true_and", 1],["UnionFind.lt_rankMax", 1],["BinaryHeap.insert.proof_1", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Nat.div_self", 1],["UFModel.Agrees.set", 1],["Function.update_eq_iff", 1],["List.mem_cons_self", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["ite_true", 1],["ite_false", 1],["le_antisymm", 1],["Function.apply_update", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["UFModel.Models", 1],["Nat.zero_div", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["And.imp", 1],["List.get_cons_zero", 1],["Subsingleton.elim", 1],["Fin.mk.injEq", 1],["List.map", 1],["WellFoundedRelation.rel", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["Nat.div_zero", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Fin.zero_def", 1],["max", 1],["Array.toListLitAux", 1],["Or.inl", 1],["exists_prop", 1],["List.get?_set_eq", 1],["UFModel.push.proof_1", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["UFModel.rank_lt", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.mul_dvd_mul_left", 1],["List.length_nil", 1],["Option.get_some", 1],["Nat.zero_sub", 1],["Nat.dvd_zero", 1],["Nat.mod_one", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Subtype.val", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Option.some.injEq", 1],["Option.map", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Array.isEqvAux.proof_2", 1],["not_lt", 1],["List.get?_len_le", 1],["UFModel.Agrees.empty", 1],["False", 1],["Nat.add_mod_mod", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Fin.one_val", 1],["Nat.lt_of_lt_of_eq", 1],["BinaryHeap.heapifyUp", 1],["Nat.add_mul_mod_self_right", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["Nat.sub_lt", 1],["Nat.zero_le", 1],["Nat.lcm_one_left", 1],["List.cons.sizeOf_spec", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["Nat.add_comm", 1],["List.get_singleton", 1]]],
["rfl", 220, [["Eq", 86],["Eq.refl", 85],["rfl", 59],["Eq.mpr", 57],["congrArg", 52],["Eq.trans", 48],["OfNat.ofNat", 46],["Eq.symm", 41],["Fin.mk", 40],["of_eq_true", 39],["congrFun", 39],["Nat.gcd", 35],["eq_self", 32],["Fin.val", 26],["HMul.hMul", 25],["LT.lt", 21],["congr", 20],["HMod.hMod", 19],["HAdd.hAdd", 16],["Nat.gcd_dvd_right", 16],["List.nil", 16],["List.length", 15],["List.get", 15],["Bool.true", 15],["Option.some", 15],["List.cons", 15],["Nat.gcd_dvd_left", 11],["And.intro", 11],["Array.size", 11],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["eq_true_of_decide", 10],["Nat.mod_lt", 10],["eq_true", 10],["HEq.refl", 10],["Eq.mp", 9],["Nat.succ", 9],["Nat.dvd_antisymm", 9],["List.get?", 8],["Iff.intro", 8],["Fin.size_positive", 8],["Nat.le_of_succ_le_succ", 8],["eq_false", 8],["HDiv.hDiv", 8],["Fin.isLt", 8],["Nat.gcd_zero_left", 7],["Decidable.em", 7],["dite_congr", 7],["PProd.fst", 7],["Dvd.dvd", 7],["Iff", 7],["List.get?_eq_get", 7],["Classical.em", 6],["Exists.intro", 6],["UnionFind.arr", 6],["And.left", 6],["dif_neg", 6],["Array.data", 6],["dif_pos", 6],["Nat.add", 6],["dite_true", 6],["Nat.coprime.symm", 5],["Nat.gcd_rec", 5],["Bool.false", 5],["Nat.mul_comm", 5],["iff_self", 5],["HAppend.hAppend", 5],["propext", 5],["Fin.val_eq_of_lt", 5],["funext", 5],["Eq.mpr_prop", 5],["HSub.hSub", 5],["Nat.dvd_trans", 5],["And.right", 5],["Nat.coprime", 5],["Nat.dvd_mul_left", 5],["List.set", 4],["Not", 4],["False.elim", 4],["UnionFind.size", 4],["eq_of_heq", 4],["Array.mk", 4],["UFModel.Agrees.get_eq", 4],["Nat.eq_zero_or_pos", 4],["List.getLast", 4],["Nat.gcd_succ", 4],["Nat.dvd_mul_right", 4],["UFNode.rank", 4],["And", 4],["UFModel.parent", 4],["Nat.gcd_dvd", 4],["Iff.mpr", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Array.size_set", 4],["ite_congr", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.lcm", 4],["id", 4],["Array.get?_eq_get?", 4],["Nat.lt_succ_self", 3],["Subtype.property", 3],["UFNode.parent", 3],["Fin.size_positive'", 3],["Exists", 3],["Option.none", 3],["Nat.Linear.Expr.add", 3],["dite_false", 3],["Nat.dvd_refl", 3],["True", 3],["Nat.gcd_one_left", 3],["List.concat_eq_append", 3],["Nat.lcm_comm", 3],["LE.le", 3],["Option.some.inj", 3],["Nat.pos_of_dvd_of_pos", 3],["ne_eq", 3],["dite", 3],["BinaryHeap.arr", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.num", 3],["Nat.Linear.Expr.var", 3],["Nat.gcd_zero_right", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["List.append", 3],["List.length_cons", 3],["Function.update_noteq", 3],["Nat.toDigitsCore", 3],["Nat.Linear.ExprCnstr.mk", 3],["Array.get?", 3],["Nat.digitChar", 3],["Iff.trans", 2],["True.intro", 2],["UFModel.Models.size_eq", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_mul_left_left", 2],["Nat.coprime.pow_left", 2],["Function.funext_iff", 2],["le_of_not_lt", 2],["sorryAx", 2],["List.get_mem", 2],["Fin.eq_of_val_eq", 2],["UFModel.Models.parent_eq", 2],["Nat.mul_zero", 2],["Nat.coprime.gcd_left", 2],["Nat.lt_trans", 2],["List.length_set", 2],["Nat.not_lt_eq", 2],["UFModel.Models.parent_eq'", 2],["Nat.add_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.zero_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.not_le_eq", 2],["List.drop", 2],["Membership.mem", 2],["of_decide_eq_true", 2],["SizeOf.sizeOf", 2],["UFNode.mk", 2],["Nat.zero_mod", 2],["Option.some_inj", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.coprime.mul", 2],["Nat.gcd_mul_right", 2],["Iff.rfl", 2],["Nat.le_of_dvd", 2],["implies_congr", 2],["UFModel.rank", 2],["Nat.gcd_one_right", 2],["Nat.coprime.coprime_mul_left", 2],["eq_false_of_decide", 2],["BinaryHeap.max", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["Array.push", 2],["Nat.dvd_lcm_left", 2],["Nat.add_zero", 2],["Fin.add_def", 2],["UnionFind.model'", 2],["Fin.mul_def", 2],["Nat.lcm_zero_left", 2],["Nat.succ_pos", 2],["Array.size_push", 2],["Function.forall_update_iff", 2],["absurd", 2],["if_true", 2],["List.cons_ne_nil", 2],["Fin.ofNat'", 2],["Unit.unit", 2],["UnionFind.rankMaxAux", 2],["Function.update_same", 2],["WellFounded.fix", 2],["List.get?_set_ne", 2],["Decidable.decide", 2],["Nat.div_mul_cancel", 2],["if_false", 2],["Nat.gcd_gcd_self_right_left", 1],["Nat.succ_sub_succ", 1],["Array.mk.sizeOf_spec", 1],["Nat.lcm_dvd", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UFModel.push", 1],["Array.get?_set_ne", 1],["Nat.lt_of_lt_of_eq", 1],["List.length_append", 1],["Nat.gcd_div", 1],["Nat.gcd_pos_of_pos_left", 1],["Array.isEqvAux_self", 1],["Subtype.mk", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Array.isEqvAux.proof_1", 1],["Ne.symm", 1],["Array.size_swap", 1],["List.getLast_append", 1],["List.cons.sizeOf_spec", 1],["List.get?_append_right", 1],["Nat.lt_add_right", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["sizeOf_nat", 1],["Fin.nsmuls_eq", 1],["Nat.le_add_right", 1],["Option.map_some'", 1],["UnionFind.rank_lt", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.nil_append", 1],["Nat.mod_one", 1],["lt_irrefl", 1],["Sigma", 1],["List.eq_of_mem_repeat'", 1],["WellFounded.fix_eq", 1],["Ne", 1],["UFModel.Agrees.set", 1],["Nat.coprime.coprime_mul_right", 1],["Quot.ind", 1],["Function.apply_update", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["List.get_append_right_aux", 1],["WellFoundedRelation.rel", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Subsingleton.allEq", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Nat.succ_lt_succ", 1],["Nat.add_mod_mod", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Array.set", 1],["Subtype.val", 1],["List.get?_append", 1],["Nat.zero", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Function.update_comp_eq_of_injective'", 1],["Nat.sub_succ_lt_self", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["List.mem_cons_of_mem", 1],["UFModel.Agrees.push", 1],["Array.toArrayLit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.elim0", 1],["Nat.le_of_lt_succ", 1],["UInt32.ofNat", 1],["Array.get?_push_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Nat.mul_one", 1],["Array.swap", 1],["MonoidWithZero.zero_mul", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.zero_div", 1],["Function.injective.ne", 1],["Nat.one_pos", 1],["Nat.coprime.coprime_div_left", 1],["List.repeat'", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["if_pos", 1],["Nat.coprime_comm", 1],["List.length_map", 1],["Nat.mod_self", 1],["Bool.and_true", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Array.get?_push_lt", 1],["Nat.succ_mul", 1],["Function.eq_update_iff", 1],["UnionFind.lt_rankMax", 1],["List.concat", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["Subtype", 1],["UInt32.val", 1],["Function.update_eq_iff", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_set_of_lt", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["ite_true", 1],["ite_false", 1],["le_antisymm", 1],["Nat.gcd_self", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["PSigma", 1],["BinaryHeap.insert.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["Nat.to_digits_core_length", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Array.get_eq_get", 1],["Fin.mk.injEq", 1],["Nat.lt_succ_iff", 1],["Nat.le_of_succ_le", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.mul_mod_mul_left", 1],["List.mem_cons_self", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["List.getLast_cons", 1],["UFModel.Models", 1],["Array.toListLitAux", 1],["Or.inl", 1],["List.get?_set_eq", 1],["Nat.zero_lt_succ", 1],["Subsingleton.elim", 1],["And.imp", 1],["UFModel.rank_lt", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["List.length_nil", 1],["max", 1],["UFModel.push.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.zero_sub", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Nat.dvd_zero", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Option.map", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Iff.mp", 1],["List.map", 1],["List.get?_len_le", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Option.map_eq_map", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_mul_mod_self_right", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["BinaryHeap.heapifyUp", 1],["Nat.zero_le", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.sub_lt", 1],["Nat.add_comm", 1],["Nat.lcm_one_left", 1],["List.get_of_mem", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["Nat.isValidChar", 1],["List.get_singleton", 1]]],
["rfl.proof_1", 220, [["Eq", 86],["Eq.refl", 85],["rfl", 59],["Eq.mpr", 57],["congrArg", 52],["Eq.trans", 48],["OfNat.ofNat", 46],["Eq.symm", 41],["Fin.mk", 40],["of_eq_true", 39],["congrFun", 39],["Nat.gcd", 35],["eq_self", 32],["Fin.val", 26],["HMul.hMul", 25],["LT.lt", 21],["congr", 20],["HMod.hMod", 19],["HAdd.hAdd", 16],["Nat.gcd_dvd_right", 16],["List.nil", 16],["List.length", 15],["List.get", 15],["Bool.true", 15],["Option.some", 15],["List.cons", 15],["Nat.gcd_dvd_left", 11],["And.intro", 11],["Array.size", 11],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["eq_true_of_decide", 10],["Nat.mod_lt", 10],["eq_true", 10],["HEq.refl", 10],["Eq.mp", 9],["Nat.succ", 9],["Nat.dvd_antisymm", 9],["List.get?", 8],["Iff.intro", 8],["Fin.size_positive", 8],["Nat.le_of_succ_le_succ", 8],["eq_false", 8],["HDiv.hDiv", 8],["Fin.isLt", 8],["Nat.gcd_zero_left", 7],["Decidable.em", 7],["dite_congr", 7],["PProd.fst", 7],["Dvd.dvd", 7],["Iff", 7],["List.get?_eq_get", 7],["Classical.em", 6],["Exists.intro", 6],["UnionFind.arr", 6],["And.left", 6],["dif_neg", 6],["Array.data", 6],["dif_pos", 6],["Nat.add", 6],["dite_true", 6],["Nat.coprime.symm", 5],["Nat.gcd_rec", 5],["Bool.false", 5],["Nat.mul_comm", 5],["iff_self", 5],["HAppend.hAppend", 5],["propext", 5],["Fin.val_eq_of_lt", 5],["funext", 5],["Eq.mpr_prop", 5],["HSub.hSub", 5],["Nat.dvd_trans", 5],["And.right", 5],["Nat.coprime", 5],["Nat.dvd_mul_left", 5],["List.set", 4],["Not", 4],["False.elim", 4],["UnionFind.size", 4],["eq_of_heq", 4],["Array.mk", 4],["UFModel.Agrees.get_eq", 4],["Nat.eq_zero_or_pos", 4],["List.getLast", 4],["Nat.gcd_succ", 4],["Nat.dvd_mul_right", 4],["UFNode.rank", 4],["And", 4],["UFModel.parent", 4],["Nat.gcd_dvd", 4],["Iff.mpr", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Array.size_set", 4],["ite_congr", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.lcm", 4],["id", 4],["Array.get?_eq_get?", 4],["Nat.lt_succ_self", 3],["Subtype.property", 3],["UFNode.parent", 3],["Fin.size_positive'", 3],["Exists", 3],["Option.none", 3],["Nat.Linear.Expr.add", 3],["dite_false", 3],["Nat.dvd_refl", 3],["True", 3],["Nat.gcd_one_left", 3],["List.concat_eq_append", 3],["Nat.lcm_comm", 3],["LE.le", 3],["Option.some.inj", 3],["Nat.pos_of_dvd_of_pos", 3],["ne_eq", 3],["dite", 3],["BinaryHeap.arr", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.num", 3],["Nat.Linear.Expr.var", 3],["Nat.gcd_zero_right", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["List.append", 3],["List.length_cons", 3],["Function.update_noteq", 3],["Nat.toDigitsCore", 3],["Nat.Linear.ExprCnstr.mk", 3],["Array.get?", 3],["Nat.digitChar", 3],["Iff.trans", 2],["True.intro", 2],["UFModel.Models.size_eq", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_mul_left_left", 2],["Nat.coprime.pow_left", 2],["Function.funext_iff", 2],["le_of_not_lt", 2],["sorryAx", 2],["List.get_mem", 2],["Fin.eq_of_val_eq", 2],["UFModel.Models.parent_eq", 2],["Nat.mul_zero", 2],["Nat.coprime.gcd_left", 2],["Nat.lt_trans", 2],["List.length_set", 2],["Nat.not_lt_eq", 2],["UFModel.Models.parent_eq'", 2],["Nat.add_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.zero_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.not_le_eq", 2],["List.drop", 2],["Membership.mem", 2],["of_decide_eq_true", 2],["SizeOf.sizeOf", 2],["UFNode.mk", 2],["Nat.zero_mod", 2],["Option.some_inj", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.coprime.mul", 2],["Nat.gcd_mul_right", 2],["Iff.rfl", 2],["Nat.le_of_dvd", 2],["implies_congr", 2],["UFModel.rank", 2],["Nat.gcd_one_right", 2],["Nat.coprime.coprime_mul_left", 2],["eq_false_of_decide", 2],["BinaryHeap.max", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["Array.push", 2],["Nat.dvd_lcm_left", 2],["Nat.add_zero", 2],["Fin.add_def", 2],["UnionFind.model'", 2],["Fin.mul_def", 2],["Nat.lcm_zero_left", 2],["Nat.succ_pos", 2],["Array.size_push", 2],["Function.forall_update_iff", 2],["absurd", 2],["if_true", 2],["List.cons_ne_nil", 2],["Fin.ofNat'", 2],["Unit.unit", 2],["UnionFind.rankMaxAux", 2],["Function.update_same", 2],["WellFounded.fix", 2],["List.get?_set_ne", 2],["Decidable.decide", 2],["Nat.div_mul_cancel", 2],["if_false", 2],["Nat.gcd_gcd_self_right_left", 1],["Nat.succ_sub_succ", 1],["Array.mk.sizeOf_spec", 1],["Nat.lcm_dvd", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UFModel.push", 1],["Array.get?_set_ne", 1],["Nat.lt_of_lt_of_eq", 1],["List.length_append", 1],["Nat.gcd_div", 1],["Nat.gcd_pos_of_pos_left", 1],["Array.isEqvAux_self", 1],["Subtype.mk", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Array.isEqvAux.proof_1", 1],["Ne.symm", 1],["Array.size_swap", 1],["List.getLast_append", 1],["List.cons.sizeOf_spec", 1],["List.get?_append_right", 1],["Nat.lt_add_right", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["sizeOf_nat", 1],["Fin.nsmuls_eq", 1],["Nat.le_add_right", 1],["Option.map_some'", 1],["UnionFind.rank_lt", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.nil_append", 1],["Nat.mod_one", 1],["lt_irrefl", 1],["Sigma", 1],["List.eq_of_mem_repeat'", 1],["WellFounded.fix_eq", 1],["Ne", 1],["UFModel.Agrees.set", 1],["Nat.coprime.coprime_mul_right", 1],["Quot.ind", 1],["Function.apply_update", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["List.get_append_right_aux", 1],["WellFoundedRelation.rel", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Subsingleton.allEq", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Nat.succ_lt_succ", 1],["Nat.add_mod_mod", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Array.set", 1],["Subtype.val", 1],["List.get?_append", 1],["Nat.zero", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Function.update_comp_eq_of_injective'", 1],["Nat.sub_succ_lt_self", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["List.mem_cons_of_mem", 1],["UFModel.Agrees.push", 1],["Array.toArrayLit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.elim0", 1],["Nat.le_of_lt_succ", 1],["UInt32.ofNat", 1],["Array.get?_push_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Nat.mul_one", 1],["Array.swap", 1],["MonoidWithZero.zero_mul", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.zero_div", 1],["Function.injective.ne", 1],["Nat.one_pos", 1],["Nat.coprime.coprime_div_left", 1],["List.repeat'", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["if_pos", 1],["Nat.coprime_comm", 1],["List.length_map", 1],["Nat.mod_self", 1],["Bool.and_true", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Array.get?_push_lt", 1],["Nat.succ_mul", 1],["Function.eq_update_iff", 1],["UnionFind.lt_rankMax", 1],["List.concat", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["Subtype", 1],["UInt32.val", 1],["Function.update_eq_iff", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_set_of_lt", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["ite_true", 1],["ite_false", 1],["le_antisymm", 1],["Nat.gcd_self", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["PSigma", 1],["BinaryHeap.insert.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["Nat.to_digits_core_length", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Array.get_eq_get", 1],["Fin.mk.injEq", 1],["Nat.lt_succ_iff", 1],["Nat.le_of_succ_le", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.mul_mod_mul_left", 1],["List.mem_cons_self", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["List.getLast_cons", 1],["UFModel.Models", 1],["Array.toListLitAux", 1],["Or.inl", 1],["List.get?_set_eq", 1],["Nat.zero_lt_succ", 1],["Subsingleton.elim", 1],["And.imp", 1],["UFModel.rank_lt", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["List.length_nil", 1],["max", 1],["UFModel.push.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.zero_sub", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Nat.dvd_zero", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Option.map", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Iff.mp", 1],["List.map", 1],["List.get?_len_le", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Option.map_eq_map", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_mul_mod_self_right", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["BinaryHeap.heapifyUp", 1],["Nat.zero_le", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.sub_lt", 1],["Nat.add_comm", 1],["Nat.lcm_one_left", 1],["List.get_of_mem", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["Nat.isValidChar", 1],["List.get_singleton", 1]]],
["Eq.symm", 214, [["Eq", 84],["Eq.refl", 83],["rfl", 56],["Eq.mpr", 56],["congrArg", 52],["Eq.trans", 48],["OfNat.ofNat", 46],["Eq.symm", 41],["Fin.mk", 40],["of_eq_true", 39],["congrFun", 39],["Nat.gcd", 35],["eq_self", 32],["Fin.val", 26],["HMul.hMul", 25],["LT.lt", 21],["congr", 20],["HMod.hMod", 19],["HAdd.hAdd", 16],["Nat.gcd_dvd_right", 16],["List.get", 15],["Bool.true", 15],["Option.some", 15],["List.length", 15],["List.nil", 14],["List.cons", 14],["Nat.gcd_dvd_left", 11],["And.intro", 11],["Array.size", 11],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["eq_true_of_decide", 10],["Nat.mod_lt", 10],["eq_true", 10],["HEq.refl", 10],["Eq.mp", 9],["Nat.succ", 9],["Nat.dvd_antisymm", 9],["List.get?", 8],["Iff.intro", 8],["Fin.size_positive", 8],["Nat.le_of_succ_le_succ", 8],["eq_false", 8],["HDiv.hDiv", 8],["Fin.isLt", 8],["Nat.gcd_zero_left", 7],["Decidable.em", 7],["dite_congr", 7],["PProd.fst", 7],["Dvd.dvd", 7],["Iff", 7],["List.get?_eq_get", 7],["Classical.em", 6],["dif_neg", 6],["Nat.add", 6],["Array.data", 6],["UnionFind.arr", 6],["Exists.intro", 6],["dif_pos", 6],["And.left", 6],["dite_true", 6],["Eq.mpr_prop", 5],["Nat.dvd_trans", 5],["Nat.dvd_mul_left", 5],["Fin.val_eq_of_lt", 5],["funext", 5],["HSub.hSub", 5],["Nat.coprime", 5],["Nat.gcd_rec", 5],["Bool.false", 5],["Nat.mul_comm", 5],["propext", 5],["iff_self", 5],["And.right", 5],["Nat.coprime.symm", 5],["Not", 4],["Nat.dvd_mul_right", 4],["Nat.coprime.coprime_dvd_left", 4],["Iff.mpr", 4],["Nat.lcm", 4],["List.set", 4],["Array.get?_eq_get?", 4],["False.elim", 4],["Nat.gcd_dvd", 4],["UnionFind.size", 4],["Nat.eq_zero_or_pos", 4],["Array.size_set", 4],["UFModel.parent", 4],["HAppend.hAppend", 4],["eq_of_heq", 4],["Array.mk", 4],["UFModel.Agrees.get_eq", 4],["UFNode.rank", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["And", 4],["Nat.gcd_succ", 4],["ite_congr", 4],["id", 4],["Option.none", 3],["dite_false", 3],["Nat.pos_of_dvd_of_pos", 3],["Fin.size_positive'", 3],["Function.update_noteq", 3],["Nat.dvd_refl", 3],["Nat.Linear.Expr.num", 3],["Nat.Linear.Expr.var", 3],["Nat.Linear.Expr.add", 3],["dite", 3],["List.append", 3],["LE.le", 3],["Nat.lcm_comm", 3],["Nat.gcd.induction", 3],["Nat.lt_succ_self", 3],["Option.some.inj", 3],["BinaryHeap.arr", 3],["Nat.toDigitsCore", 3],["Nat.coprime.coprime_dvd_right", 3],["True", 3],["List.length_cons", 3],["UFNode.parent", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.digitChar", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["ne_eq", 3],["Nat.gcd_zero_right", 3],["Nat.Linear.ExprCnstr.mk", 3],["Exists", 3],["Iff.trans", 2],["List.get?_set_ne", 2],["UnionFind.rankMaxAux", 2],["Function.forall_update_iff", 2],["True.intro", 2],["UFModel.Models.size_eq", 2],["Nat.div_mul_cancel", 2],["Nat.gcd_mul_left_left", 2],["if_false", 2],["Function.funext_iff", 2],["Nat.mod_eq_of_lt", 2],["Nat.coprime.pow_left", 2],["List.get_mem", 2],["le_of_not_lt", 2],["UFModel.Models.parent_eq", 2],["sorryAx", 2],["Fin.eq_of_val_eq", 2],["Nat.mul_zero", 2],["Nat.coprime.gcd_left", 2],["implies_congr", 2],["List.length_set", 2],["Nat.not_lt_eq", 2],["UFModel.Models.parent_eq'", 2],["Nat.zero_eq", 2],["Nat.add_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.not_le_eq", 2],["List.drop", 2],["Subtype.property", 2],["Membership.mem", 2],["List.getLast", 2],["Option.some_inj", 2],["of_decide_eq_true", 2],["UFModel.Models.rank_eq", 2],["SizeOf.sizeOf", 2],["UFNode.mk", 2],["Iff.rfl", 2],["Nat.le_of_dvd", 2],["Nat.zero_mod", 2],["UFModel.rank", 2],["Nat.coprime.mul", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.gcd_mul_right", 2],["BinaryHeap.max", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["Array.push", 2],["Nat.gcd_one_right", 2],["eq_false_of_decide", 2],["Fin.add_def", 2],["List.concat_eq_append", 2],["Nat.dvd_lcm_left", 2],["Nat.lcm_zero_left", 2],["Nat.succ_pos", 2],["Array.size_push", 2],["UnionFind.model'", 2],["if_true", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["Function.update_same", 2],["WellFounded.fix", 2],["Unit.unit", 2],["Decidable.decide", 2],["Fin.mul_def", 2],["List.cons_ne_nil", 2],["Nat.gcd_gcd_self_right_left", 1],["Nat.lt_of_lt_of_eq", 1],["Array.get?_set_ne", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_div", 1],["List.length_append", 1],["Array.isEqvAux_self", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Subtype.mk", 1],["Ne.symm", 1],["List.cons.sizeOf_spec", 1],["Nat.lt_add_right", 1],["Array.isEqvAux.proof_1", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Array.size_swap", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.get?_append_right", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["sizeOf_nat", 1],["Nat.mod_one", 1],["Nat.le_add_right", 1],["Option.map_some'", 1],["Ne", 1],["List.eq_of_mem_repeat'", 1],["List.nil_append", 1],["List.get_append_right_aux", 1],["Sigma", 1],["lt_irrefl", 1],["UFModel.Agrees.set", 1],["WellFounded.fix_eq", 1],["Subsingleton.allEq", 1],["Function.apply_update", 1],["Nat.coprime.coprime_mul_right", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["Nat.gcd_gcd_self_right_right", 1],["WellFoundedRelation.rel", 1],["Array.set", 1],["Subtype.val", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_mul_lcm", 1],["UnionFind.rankMaxAux.proof_2", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.succ_lt_succ", 1],["Fin.one_val", 1],["UInt32.val_eq_of_lt", 1],["Nat.coprime.gcd_right", 1],["List.get?_append", 1],["Function.update_comp_eq_of_injective'", 1],["List.mem_cons_of_mem", 1],["UFModel.Agrees.push", 1],["Nat.sub_succ_lt_self", 1],["Nat.zero", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.coprime.coprime_div_left", 1],["Array.toArrayLit", 1],["Nat.le_of_lt_succ", 1],["Nat.mul_one", 1],["Array.swap", 1],["UInt32.ofNat", 1],["Array.get?_push_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["MonoidWithZero.zero_mul", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.div_self", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.zero_div", 1],["List.repeat'", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.mod_self", 1],["Function.injective.ne", 1],["Bool.and_true", 1],["if_pos", 1],["Nat.coprime_comm", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["Array.get?_push_lt", 1],["Function.eq_update_iff", 1],["List.length_map", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Subtype", 1],["Nat.succ_mul", 1],["Nat.gcd_self", 1],["UInt32.val", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["UnionFind.lt_rankMax", 1],["BinaryHeap.insert.proof_1", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_set_of_lt", 1],["Function.update_eq_iff", 1],["PSigma", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.to_digits_core_length", 1],["ite_true", 1],["ite_false", 1],["le_antisymm", 1],["List.map", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["Array.get_eq_get", 1],["Nat.le_of_succ_le", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.lt_succ_iff", 1],["Nat.mul_mod_mul_left", 1],["Fin.mk.injEq", 1],["List.getLast_cons", 1],["Nat.zero_lt_succ", 1],["List.mem_cons_self", 1],["Iff.mp", 1],["UFModel.Models", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Subsingleton.elim", 1],["Array.toListLitAux", 1],["Or.inl", 1],["List.get?_set_eq", 1],["And.imp", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["UFModel.rank_lt", 1],["max", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["List.length_nil", 1],["Nat.zero_sub", 1],["UFModel.push.proof_1", 1],["Nat.dvd_zero", 1],["Option.map_eq_map", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Array.mk.sizeOf_spec", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Option.map", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["absurd", 1],["Array.isEqvAux.proof_2", 1],["List.get?_len_le", 1],["Array.get?_set_eq", 1],["Nat.succ_sub_succ", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Nat.add_mul_mod_self_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["Nat.zero_le", 1],["UFModel.push", 1],["Nat.add_comm", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["Nat.lcm_dvd", 1],["List.get_singleton", 1]]],
["Nat.pred", 213, [["Eq.refl", 88],["Eq", 84],["rfl", 63],["Eq.mpr", 61],["congrArg", 53],["Eq.trans", 48],["OfNat.ofNat", 44],["Eq.symm", 40],["congrFun", 39],["of_eq_true", 37],["Fin.mk", 37],["Nat.gcd", 35],["HMul.hMul", 29],["eq_self", 28],["Fin.val", 24],["congr", 23],["LT.lt", 22],["HAdd.hAdd", 18],["List.nil", 18],["Bool.true", 18],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["Nat.succ", 15],["Option.some", 15],["List.get", 15],["List.length", 14],["List.cons", 14],["HEq.refl", 13],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Array.get", 11],["Eq.mp", 11],["Nat.dvd_gcd", 11],["Nat.pred", 10],["HSub.hSub", 10],["Array.size", 10],["Classical.em", 10],["Nat.mod_lt", 10],["eq_true", 10],["eq_true_of_decide", 9],["Nat.dvd_antisymm", 9],["Iff.intro", 9],["Nat.le_of_succ_le_succ", 8],["Nat.add", 8],["List.get?", 8],["Fin.size_positive", 8],["HAppend.hAppend", 8],["Fin.isLt", 8],["Dvd.dvd", 7],["List.get?_eq_get", 7],["LE.le", 7],["PProd.fst", 7],["Nat.gcd_zero_left", 7],["And.intro", 7],["Iff", 7],["propext", 7],["Nat.mul_comm", 6],["Array.data", 6],["Prod.mk", 6],["UnionFind.arr", 6],["Exists.intro", 6],["Bool.false", 6],["HDiv.hDiv", 5],["Nat.zero", 5],["Nat.coprime", 5],["Nat.coprime.symm", 5],["iff_self", 5],["dite_congr", 5],["Nat.gcd_rec", 5],["And.left", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["eq_of_heq", 5],["absurd", 5],["id", 5],["Nat.dvd_trans", 5],["Nat.dvd_mul_right", 4],["Array.get?_eq_get?", 4],["Nat.add_comm", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.gcd_succ", 4],["UFNode.rank", 4],["And.right", 4],["List.length_cons", 4],["UnionFind.size", 4],["Nat.Linear.Poly.denote_le", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["Array.size_set", 4],["dif_neg", 4],["cond_true", 4],["Nat.lcm", 4],["And", 4],["Nat.add_eq", 4],["Array.mk", 4],["False.elim", 4],["Bool.of_not_eq_true", 4],["Nat.gcd_dvd", 4],["List.set", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["cond_false", 4],["Nat.Linear.Poly.denote_eq", 4],["cond", 4],["dif_pos", 4],["dite_true", 4],["Nat.Linear.Expr.add", 3],["True", 3],["Nat.gcd_zero_right", 3],["Not", 3],["Nat.pos_of_dvd_of_pos", 3],["UFModel.Agrees.get_eq", 3],["Nat.gcd.induction", 3],["Unit.unit", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.lt_succ_self", 3],["Nat.Linear.Poly.denote", 3],["Nat.Linear.Expr.num", 3],["Nat.zero_add", 3],["List.append", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.Linear.Expr.var", 3],["funext", 3],["List.nil_append", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["UFNode.parent", 3],["Exists", 3],["Option.some.inj", 3],["Fin.size_positive'", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Option.none", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.zero_eq", 3],["Nat.mul_eq", 2],["List.concat_eq_append", 2],["Nat.mod_eq_of_lt", 2],["eq_false_of_decide", 2],["Nat.dvd_lcm_left", 2],["SizeOf.sizeOf", 2],["UFModel.parent", 2],["Iff.mpr", 2],["Nat.Linear.Var.denote", 2],["Nat.le.refl", 2],["Nat.mul_zero", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.coprime_mul_left", 2],["List.get?_set_ne", 2],["Nat.lt_trans", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.add_zero", 2],["Nat.zero_sub", 2],["Nat.Linear.hugeFuel", 2],["UFModel.Models.size_eq", 2],["UnionFind.model'", 2],["Nat.gcd_mul_left_left", 2],["Nat.not_le_eq", 2],["Bool.and_true", 2],["Nat.blt", 2],["List.get_mem", 2],["le_of_not_lt", 2],["UFModel.Models.parent_eq", 2],["UFModel.Models.parent_eq'", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.zero_mod", 2],["Nat.gcd_mul_right", 2],["and", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["List.cons_ne_nil", 2],["dite", 2],["UnionFind.rankMaxAux", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.coprime.gcd_left", 2],["Subtype.property", 2],["Membership.mem", 2],["List.length_set", 2],["List.getLast", 2],["Option.some_inj", 2],["Nat.not_lt_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.add_left_comm", 2],["ne_eq", 2],["Iff.rfl", 2],["Nat.pred_succ", 2],["Nat.le_of_dvd", 2],["Nat.Linear.Poly.denote_append", 2],["BinaryHeap.arr", 2],["Nat.Linear.Poly", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["sorryAx", 2],["BinaryHeap.size_pos_of_max", 2],["List.drop", 2],["eq_false", 2],["Fin.eq_of_val_eq", 2],["List.append_nil", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse_cons", 2],["Nat.succ_mul", 2],["List.reverse", 2],["Prod", 2],["Fin.ofNat'", 2],["Nat.coprime.mul", 2],["List.length_append", 2],["Nat.le_succ", 2],["Nat.div_mul_cancel", 2],["WellFounded.fix", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Decidable.decide", 2],["Nat.sub_eq", 2],["Nat.gcd_gcd_self_right_left", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["Nat.coprime.gcd_both", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Bool.and_self", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.lcm_dvd", 1],["Subtype.val", 1],["Array.get?_set_ne", 1],["Nat.le_trans", 1],["Nat.pred_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.Linear.Poly.combine", 1],["Array.mk.sizeOf_spec", 1],["Nat.Linear.Expr.denote", 1],["Array.isEqvAux_self", 1],["Array.isEqvAux.proof_1", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.succ_pred_eq_of_pos", 1],["Array.size_swap", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.add_le_add_left", 1],["List.get?_append_right", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Subtype.mk", 1],["List.map", 1],["sizeOf_nat", 1],["Int.subNatNat", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Option.map_some'", 1],["List.erase_eq_erasep", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.gcd_div", 1],["Fin.nsmuls_eq", 1],["Sigma", 1],["UnionFind.rank_lt", 1],["WellFounded.fix_eq", 1],["Nat.mul_pred_left", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["of_decide_eq_true", 1],["Nat.Linear.Expr.toNormPoly", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["Nat.pred_zero", 1],["or_true", 1],["Nat.lt_add_right", 1],["Nat.zero_mul", 1],["WellFoundedRelation.rel", 1],["UnionFind.lt_rankMax'", 1],["List.cons.sizeOf_spec", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.add_sub_cancel", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["List.length_erasep_of_mem", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.succ_lt_succ", 1],["Fin.one_val", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_eq_zero_of_dvd", 1],["Array.get?_push_lt", 1],["List.get_append_right_aux", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.sub_succ_lt_self", 1],["Subsingleton.allEq", 1],["Or", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["dite_false", 1],["Nat.le_of_lt_succ", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_one", 1],["True.intro", 1],["Array.toArrayLit", 1],["Array.swap", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.gcd_gcd_self_left_right", 1],["UInt32.ofNat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Nat.div_self", 1],["Nat.zero_div", 1],["Nat.not_eq_zero_of_lt", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.coprime_comm", 1],["if_pos", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Fin.elim0", 1],["Nat.mul_dvd_mul_right", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["List.length_map", 1],["Nat.one_pos", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.mod_self", 1],["Ne", 1],["Array.set", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.get?_append", 1],["UnionFind.lt_rankMax", 1],["Nat.sub_pos_of_lt", 1],["Bool.and_false", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_set_of_lt", 1],["Int.subNatNat_of_sub_eq_succ", 1],["List.mem_cons_of_mem", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Int.negSucc", 1],["le_antisymm", 1],["UFNode.mk", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["Nat.lt_of_succ_lt_succ", 1],["UInt32.val", 1],["List.erase", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_refl", 1],["Nat.mod_one", 1],["not_lt_of_ge", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["List.repeat'", 1],["Nat.lt_succ_iff", 1],["UFModel.rank", 1],["Fin.mk.injEq", 1],["implies_congr", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime.coprime_div_left", 1],["UFModel.Models", 1],["List.mem_cons_self", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["PSigma", 1],["Nat.Linear.Poly.denote_fuse", 1],["Subsingleton.elim", 1],["Array.toListLitAux", 1],["Or.inl", 1],["Nat.div_zero", 1],["List.get?_set_eq", 1],["Array.push", 1],["Fin.zero_def", 1],["max", 1],["UFModel.rank_lt", 1],["Nat.gcd_self", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["List.length_nil", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.dvd_zero", 1],["Array.size_push", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Array.get_eq_get", 1],["Nat.gcd_mul_right_left", 1],["eq_false'", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_succ_of_le", 1],["Array.isEqvAux.proof_2", 1],["Option.map", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Array.get?_set_eq", 1],["Nat.le_of_succ_le", 1],["List.get?_len_le", 1],["List.exists_of_erasep", 1],["False", 1],["Nat.add_mul_mod_self_right", 1],["Nat.mul_dvd_mul", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Nat.coprime.pow_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.mul_mod_mul_left", 1],["List.getLast_cons", 1],["Nat.zero_lt_succ", 1],["Iff.mp", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["Subtype", 1],["List.get_singleton", 1]]],
["False.elim", 205, [["Eq.refl", 82],["Eq", 80],["Eq.mpr", 56],["rfl", 54],["congrArg", 49],["OfNat.ofNat", 45],["Eq.trans", 44],["Fin.mk", 39],["Eq.symm", 38],["congrFun", 37],["of_eq_true", 36],["Nat.gcd", 35],["eq_self", 29],["Fin.val", 26],["HMul.hMul", 25],["LT.lt", 21],["HMod.hMod", 19],["congr", 18],["Nat.gcd_dvd_right", 16],["List.nil", 16],["List.get", 15],["HAdd.hAdd", 15],["List.length", 15],["List.cons", 15],["Option.some", 15],["Bool.true", 14],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Array.get", 11],["HEq.refl", 10],["eq_true", 10],["Nat.mod_lt", 10],["Array.size", 10],["Eq.mp", 9],["And.intro", 9],["Nat.succ", 9],["eq_true_of_decide", 9],["Nat.dvd_antisymm", 9],["Nat.le_of_succ_le_succ", 8],["HDiv.hDiv", 8],["Fin.size_positive", 8],["List.get?", 8],["Fin.isLt", 8],["List.get?_eq_get", 7],["Nat.gcd_zero_left", 7],["Iff", 7],["Iff.intro", 7],["And.left", 7],["PProd.fst", 7],["Exists.intro", 7],["Dvd.dvd", 7],["Classical.em", 6],["dite_congr", 6],["UnionFind.arr", 6],["eq_false", 6],["Nat.add", 6],["Array.data", 6],["Bool.false", 5],["Nat.mul_comm", 5],["Fin.val_eq_of_lt", 5],["HSub.hSub", 5],["Nat.coprime", 5],["Nat.gcd_rec", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["propext", 5],["And.right", 5],["HAppend.hAppend", 5],["Nat.dvd_mul_left", 5],["iff_self", 5],["dite_true", 5],["dif_neg", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["Array.size_set", 4],["False.elim", 4],["Subtype.property", 4],["Nat.dvd_mul_right", 4],["eq_of_heq", 4],["Array.mk", 4],["UFModel.Agrees.get_eq", 4],["Nat.gcd_succ", 4],["List.getLast", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["And", 4],["ite_congr", 4],["Nat.gcd_dvd", 4],["UFNode.rank", 4],["UnionFind.size", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Decidable.em", 4],["List.set", 4],["dif_pos", 4],["Array.get?_eq_get?", 4],["id", 4],["UFModel.parent", 4],["Nat.coprime.coprime_dvd_right", 3],["Option.some.inj", 3],["True", 3],["List.concat_eq_append", 3],["Nat.pos_of_dvd_of_pos", 3],["UFNode.parent", 3],["Nat.gcd_one_left", 3],["Exists", 3],["List.append", 3],["LE.le", 3],["Nat.gcd_zero_right", 3],["Option.none", 3],["Nat.Linear.Expr.var", 3],["Fin.size_positive'", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.Expr.num", 3],["Nat.gcd.induction", 3],["Not", 3],["Nat.toDigitsCore", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["List.length_cons", 3],["Nat.digitChar", 3],["Nat.dvd_refl", 3],["Nat.lt_succ_self", 3],["Nat.Linear.ExprCnstr.mk", 3],["Array.get?", 3],["Nat.lcm_comm", 3],["Nat.coprime.gcd_left", 2],["Unit.unit", 2],["Nat.add_zero", 2],["List.get?_set_ne", 2],["UnionFind.model'", 2],["Nat.zero_mod", 2],["UFModel.Models.size_eq", 2],["Nat.gcd_mul_right", 2],["Nat.gcd_mul_left_left", 2],["UFModel.Models.parent_eq'", 2],["List.cons_ne_nil", 2],["Membership.mem", 2],["List.get_mem", 2],["Nat.gcd_one_right", 2],["UFModel.Models.parent_eq", 2],["Fin.mul_def", 2],["dite", 2],["Iff.mp", 2],["UnionFind.rankMaxAux", 2],["ne_eq", 2],["Iff.mpr", 2],["Nat.mul_zero", 2],["List.length_set", 2],["Nat.zero_eq", 2],["Nat.not_lt_eq", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["dite_false", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["if_false", 2],["sorryAx", 2],["List.drop", 2],["Fin.eq_of_val_eq", 2],["Option.some_inj", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["UFModel.Models.rank_eq", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Iff.rfl", 2],["Nat.le_of_dvd", 2],["Nat.add_eq", 2],["UFModel.rank", 2],["BinaryHeap.arr", 2],["of_decide_eq_true", 2],["Nat.coprime.mul", 2],["absurd", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["Fin.elim0", 2],["SizeOf.sizeOf", 2],["Fin.add_def", 2],["UFNode.mk", 2],["eq_false_of_decide", 2],["Nat.lcm_zero_left", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["implies_congr", 2],["if_true", 2],["Nat.coprime.pow_left", 2],["Fin.ofNat'", 2],["Nat.dvd_lcm_left", 2],["le_of_not_lt", 2],["Nat.coprime.coprime_mul_left", 2],["WellFounded.fix", 2],["Nat.not_le_eq", 2],["Decidable.decide", 2],["Nat.lt_trans", 2],["List.get_singleton", 1],["Nat.isValidChar", 1],["Array.get?_set_ne", 1],["Nat.gcd_div", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.length_append", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.gcd_pos_of_pos_left", 1],["Array.isEqvAux_self", 1],["Subtype.mk", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["List.cons.sizeOf_spec", 1],["Nat.lt_add_right", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Array.isEqvAux.proof_1", 1],["Ne.symm", 1],["Array.size_swap", 1],["nonempty_of_exists", 1],["List.getLast_append", 1],["Fin.nsmuls_eq", 1],["List.get?_append_right", 1],["UnionFind.rank_lt", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["sizeOf_nat", 1],["List.get_append_right_aux", 1],["Nat.le_add_right", 1],["Option.map_some'", 1],["List.eq_of_mem_repeat'", 1],["Subsingleton.allEq", 1],["List.nil_append", 1],["UFModel.Agrees.set", 1],["Sigma", 1],["lt_irrefl", 1],["Nat.gcd_gcd_self_right_right", 1],["WellFounded.fix_eq", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.mod_one", 1],["WellFoundedRelation.rel", 1],["Ne", 1],["Array.set", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.mul_dvd_mul_left", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Subtype.val", 1],["List.get?_append", 1],["Nat.succ_lt_succ", 1],["List.mem_cons_of_mem", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["UFModel.Agrees.push", 1],["Nat.sub_succ_lt_self", 1],["Nat.one_pos", 1],["Nat.coprime.coprime_div_left", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.zero", 1],["Classical.epsilon_spec_aux", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Nat.mod_self", 1],["Nat.le_of_lt_succ", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["True.intro", 1],["Nat.mul_one", 1],["Array.toArrayLit", 1],["Array.swap", 1],["MonoidWithZero.zero_mul", 1],["Nat.gcd_gcd_self_left_right", 1],["UInt32.ofNat", 1],["Array.get?_push_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Nat.zero_div", 1],["Bool.and_true", 1],["List.repeat'", 1],["UnionFind.rankMaxAux.proof_1", 1],["Classical.strongIndefiniteDescription", 1],["if_pos", 1],["Nat.coprime_comm", 1],["List.concat", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["Fin.ofNat'_succ", 1],["UInt32.val", 1],["List.length_map", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.succ_mul", 1],["Subtype", 1],["PSigma", 1],["Nat.gcd_self", 1],["Nat.to_digits_core_length", 1],["UnionFind.lt_rankMax", 1],["Nat.lt_of_lt_of_le", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_set_of_lt", 1],["Nat.find_x", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Array.get_eq_get", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.le_of_succ_le", 1],["ite_true", 1],["ite_false", 1],["le_antisymm", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["funext", 1],["Nat.mul_mod_mul_left", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["not_lt_of_ge", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["List.getLast_cons", 1],["Nat.lt_succ_iff", 1],["Nat.zero_lt_succ", 1],["Fin.mk.injEq", 1],["Array.get?_push_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["List.mem_cons_self", 1],["Option.map_eq_map", 1],["UFModel.Models", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Array.mk.sizeOf_spec", 1],["Subsingleton.elim", 1],["Array.toListLitAux", 1],["Or.inl", 1],["List.get?_set_eq", 1],["Array.push", 1],["And.imp", 1],["Nat.div_zero", 1],["UFModel.rank_lt", 1],["Fin.zero_def", 1],["max", 1],["List.length_nil", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.zero_sub", 1],["Classical.epsilon_spec", 1],["UFModel.push.proof_1", 1],["Array.size_push", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Nat.dvd_zero", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Option.map", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Nat.succ_sub_succ", 1],["List.map", 1],["not_lt", 1],["List.get?_len_le", 1],["UFModel.Agrees.empty", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Nat.lcm_dvd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_mul_mod_self_right", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["Nat.zero_le", 1],["Nat.sub_lt", 1],["UFModel.push", 1],["Nat.lcm_one_left", 1],["Nat.add_comm", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["List.get_of_mem", 1]]],
["dite", 203, [["Eq", 82],["Eq.refl", 67],["Eq.mpr", 50],["congrArg", 44],["Eq.trans", 42],["rfl", 41],["OfNat.ofNat", 36],["congrFun", 36],["Nat.gcd", 35],["of_eq_true", 34],["eq_self", 30],["Eq.symm", 26],["HMul.hMul", 25],["Fin.mk", 24],["Fin.val", 21],["HMod.hMod", 19],["congr", 18],["Nat.gcd_dvd_right", 16],["Bool.true", 13],["dite", 13],["dif_pos", 12],["dite_congr", 11],["HAdd.hAdd", 11],["Nat.gcd_comm", 11],["Option.some", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["LT.lt", 10],["Nat.mod_lt", 10],["Decidable.em", 10],["And.intro", 9],["eq_true_of_decide", 9],["eq_true", 9],["Nat.dvd_antisymm", 9],["eq_false", 9],["dite_true", 9],["Eq.mpr_prop", 8],["Iff", 8],["Iff.intro", 8],["dif_neg", 8],["Exists.intro", 8],["Fin.size_positive", 8],["HDiv.hDiv", 8],["funext", 8],["Array.size", 7],["Nat.succ", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["Classical.em", 6],["And.left", 6],["Iff.mpr", 5],["dite_false", 5],["List.cons", 5],["Nat.mul_comm", 5],["Eq.mp", 5],["Nat.gcd_rec", 5],["Array.get", 5],["Fin.isLt", 5],["Fin.val_eq_of_lt", 5],["Option.none", 5],["Nat.dvd_trans", 5],["iff_self", 5],["Nat.coprime", 5],["Nat.dvd_mul_left", 5],["Nat.coprime.symm", 5],["Array.data", 5],["ne_eq", 4],["Nat.gcd_dvd", 4],["Array.get?_eq_get?", 4],["Exists", 4],["Nat.gcd_succ", 4],["True.intro", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.lcm", 4],["And.right", 4],["Nat.dvd_mul_right", 4],["Subtype.property", 4],["Nat.coprime.coprime_dvd_left", 4],["True", 4],["Not", 4],["Array.mk", 4],["Nat.eq_zero_or_pos", 4],["propext", 3],["List.nil", 3],["UFModel.rank", 3],["Nat.gcd_zero_right", 3],["UFModel.parent", 3],["ite_congr", 3],["List.length", 3],["Function.update_noteq", 3],["BinaryHeap.arr", 3],["Nat.coprime.coprime_dvd_right", 3],["implies_congr", 3],["Subsingleton.elim", 3],["absurd", 3],["And", 3],["Nat.toDigitsCore", 3],["Nat.pos_of_dvd_of_pos", 3],["Fin.size_positive'", 3],["Nonempty.intro", 3],["Nat.gcd_one_left", 3],["Nat.gcd.induction", 3],["Array.get?", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.digitChar", 3],["Iff.mp", 3],["Iff.trans", 2],["Nat.coprime.pow_left", 2],["of_decide_eq_true", 2],["Nat.le_of_dvd", 2],["Nat.gcd_mul_left_left", 2],["le_of_not_lt", 2],["Bool.false", 2],["Function.funext_iff", 2],["Function.inv_fun_eq", 2],["not_false", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Nat.gcd_mul_right", 2],["Array.size_set", 2],["HSub.hSub", 2],["Nat.mul_zero", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nonempty", 2],["Classical.choose", 2],["Classical.choice", 2],["List.concat_eq_append", 2],["UFModel.Models.rank_eq", 2],["Nat.dvd_lcm_left", 2],["HAppend.hAppend", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["List.get?_eq_get", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["Array.size_push", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["Array.push", 2],["Nat.coprime.gcd_left", 2],["Fin.eq_of_val_eq", 2],["UFModel.rank_lt", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["trivial", 2],["Function.forall_update_iff", 2],["Eq.mpr_not", 2],["UnionFind.size", 2],["BinaryHeap.max", 2],["List.get?", 2],["Nat.coprime.coprime_mul_left", 2],["if_true", 2],["Fin.ofNat'", 2],["Decidable.decide", 2],["Function.update_same", 2],["Function.LeftInverse_inv_fun", 2],["if_false", 2],["Function.inv_fun_on_pos", 2],["List.set", 2],["Bool.and_true", 1],["zero_lt_of_lt", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Option.get", 1],["Nat.eq_zero_of_zero_dvd", 1],["Function.inv_fun", 1],["Nat.coprime.coprime_mul_right", 1],["Fin.nsmuls_eq", 1],["Nat.gcd_self", 1],["LE.le", 1],["Function.inv_fun_on_neg", 1],["Function.update_eq_iff", 1],["Function.extend_def", 1],["UnionFind.rank_lt", 1],["not_iff_not_of_iff", 1],["Membership.mem", 1],["Classical.propDecidable", 1],["UFModel.Models.parent_eq'", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["eq_false_of_decide", 1],["Function.apply_update", 1],["UnionFind.rankMax", 1],["Decidable.isTrue", 1],["le_antisymm", 1],["if_neg", 1],["WellFoundedRelation.rel", 1],["BinaryHeap.insert.proof_1", 1],["lt_of_lt_of_le", 1],["Nat.gcd_mul_lcm", 1],["sizeOf_nat", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Array.get_eq_get", 1],["Nat.add_mod_mod", 1],["Array.get?_push_eq", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_gcd_self_right_left", 1],["not_not_intro", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["nonempty_of_exists", 1],["Function.is_partial_inv_left", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.sub_succ_lt_self", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.zero_lt_succ", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["Nat.le_add_right", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.coprime.gcd_right", 1],["UInt32.val", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Fin.mk.injEq", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.gcd_div", 1],["Function.inv_fun_on_eq", 1],["Function.injective.ne", 1],["Unit.unit", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["UFNode.rank", 1],["Decidable", 1],["Array.isEqvAux_self", 1],["List.get?_set_ne", 1],["Nat.mul_div_assoc", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["sorryAx", 1],["Function.partial_inv_of_injective", 1],["Nat.lcm_dvd", 1],["Function.extend_apply", 1],["Nat.gcd_mul_left", 1],["Ne", 1],["Fin", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["mt", 1],["Option.some.inj", 1],["Array.set", 1],["Nat.succ_mul", 1],["Nat.sub_lt_sub_left", 1],["Nat.mod_one", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.lt_irrefl", 1],["Classical.epsilon_spec_aux", 1],["Array.get?_set_ne", 1],["Nat.find_x", 1],["List.get?_set_of_lt", 1],["Nat.mul_dvd_mul_right", 1],["Classical.epsilon_spec", 1],["Function.partial_inv", 1],["UFNode.mk", 1],["Function.sometimes_eq", 1],["Nat.succ_pos", 1],["Function.update_comp_eq_of_injective'", 1],["Option.isSome_some", 1],["Nat.coprime_one_left", 1],["lt_irrefl", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["List.get", 1],["List.get?_append", 1],["UInt32.ofNat", 1],["Option.isSome", 1],["Nat.gcd_mul_right_left", 1],["Classical.choose_spec", 1],["Nat.lt_trans", 1],["Option.some.injEq", 1],["And.imp", 1],["Decidable.isFalse", 1],["UFNode.parent", 1],["Nat.div_zero", 1],["Nat.gcd_gcd_self_right_right", 1],["Function.extend", 1],["UnionFind.lt_rankMax'", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["not_lt", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["UnionFind.model'", 1],["Subsingleton.allEq", 1],["Subtype.val", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["UnionFind.arr", 1],["dif_ctx_congr", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Function.LeftInverse.surjective", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["Nat.mul_div_cancel_left", 1],["id", 1],["Array.isEqvAux.proof_1", 1],["WellFounded.fix_eq", 1],["Nat.add_comm", 1],["BinaryHeap.heapifyUp", 1],["WellFounded.fix", 1],["ite", 1],["Function.eq_update_iff", 1],["Array.get?_push_lt", 1],["Classical.strongIndefiniteDescription", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Set.univ", 1],["Nat.to_digits_core_length", 1],["Nat.lt_eq", 1],["Nat.coprime.coprime_div_left", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["False.elim", 1],["UFModel.Agrees.push", 1],["Function.sometimes", 1],["UFModel.push", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.mod_self", 1],["exists_apply_eq_apply", 1],["congr_arg", 1],["UnionFind.lt_rankMax", 1]]],
["HEq.refl", 200, [["Eq.refl", 83],["Eq", 80],["Eq.mpr", 56],["rfl", 52],["congrArg", 49],["OfNat.ofNat", 45],["Eq.trans", 44],["Eq.symm", 40],["Fin.mk", 38],["congrFun", 37],["of_eq_true", 36],["Nat.gcd", 35],["eq_self", 29],["Fin.val", 25],["HMul.hMul", 25],["LT.lt", 21],["HMod.hMod", 19],["congr", 18],["Option.some", 17],["Bool.true", 17],["Nat.gcd_dvd_right", 16],["HAdd.hAdd", 15],["List.get", 15],["List.length", 15],["List.nil", 14],["List.cons", 14],["HEq.refl", 13],["Nat.gcd_dvd_left", 11],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Array.size", 10],["Nat.mod_lt", 10],["eq_true", 10],["Eq.mp", 9],["Nat.succ", 9],["eq_true_of_decide", 9],["And.intro", 9],["Nat.dvd_antisymm", 9],["Fin.isLt", 8],["Nat.le_of_succ_le_succ", 8],["Fin.size_positive", 8],["Iff", 8],["HDiv.hDiv", 8],["List.get?", 8],["List.get?_eq_get", 7],["Iff.intro", 7],["PProd.fst", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["Classical.em", 6],["Nat.add", 6],["propext", 6],["dite_congr", 6],["Exists.intro", 6],["And.left", 6],["UnionFind.arr", 6],["iff_self", 6],["Array.data", 6],["Nat.coprime.symm", 5],["Fin.val_eq_of_lt", 5],["eq_of_heq", 5],["Nat.mul_comm", 5],["Bool.false", 5],["HSub.hSub", 5],["And", 5],["Nat.dvd_mul_left", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["eq_false", 5],["Nat.gcd_rec", 5],["dite_true", 5],["List.set", 4],["Array.get?_eq_get?", 4],["And.right", 4],["UnionFind.size", 4],["Option.get", 4],["False.elim", 4],["Nat.dvd_mul_right", 4],["UFNode.rank", 4],["Exists", 4],["Nat.coprime.coprime_dvd_left", 4],["Decidable.em", 4],["dif_neg", 4],["Nat.lcm", 4],["Nat.gcd_succ", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["Array.size_set", 4],["Nat.gcd_dvd", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Array.mk", 4],["HAppend.hAppend", 4],["dif_pos", 4],["id", 4],["Nat.gcd_zero_right", 3],["Not", 3],["Nat.lt_succ_self", 3],["Membership.mem", 3],["UFNode.parent", 3],["Option.none", 3],["Nat.Linear.Expr.add", 3],["List.append", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.Linear.Expr.var", 3],["Nat.Linear.Expr.num", 3],["Nat.gcd.induction", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["UFModel.parent", 3],["Nat.gcd_one_left", 3],["sorryAx", 3],["UFModel.Agrees.get_eq", 3],["LE.le", 3],["Fin.size_positive'", 3],["List.length_cons", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["ite_congr", 3],["True", 3],["Array.get?", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.mul_zero", 2],["le_of_not_lt", 2],["Iff.mpr", 2],["Unit.unit", 2],["Nat.coprime.coprime_mul_left", 2],["List.get?_set_ne", 2],["Nat.lt_trans", 2],["Iff.mp", 2],["UFModel.Models.size_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.gcd_mul_left_left", 2],["Nat.add_zero", 2],["Nat.not_le_eq", 2],["ne_eq", 2],["List.get_mem", 2],["UnionFind.model'", 2],["UFModel.Models.parent_eq", 2],["funext", 2],["UFModel.Models.parent_eq'", 2],["List.drop", 2],["dite_false", 2],["Nat.add_eq", 2],["Subtype.property", 2],["of_decide_eq_true", 2],["Nat.zero_mod", 2],["Nat.zero_eq", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Nat.coprime.gcd_left", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Fin.elim0", 2],["UnionFind.rankMaxAux", 2],["List.cons_ne_nil", 2],["List.getLast", 2],["Option.some_inj", 2],["List.length_set", 2],["UFModel.Models.rank_eq", 2],["if_false", 2],["Nat.coprime.mul", 2],["Iff.rfl", 2],["Nat.le_of_dvd", 2],["Nat.not_lt_eq", 2],["UFModel.rank", 2],["BinaryHeap.arr", 2],["Nat.succ_pos", 2],["UFNode.mk", 2],["Nat.coprime.pow_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["SizeOf.sizeOf", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["eq_false_of_decide", 2],["Nat.lcm_zero_left", 2],["Nat.div_mul_cancel", 2],["BinaryHeap.max", 2],["if_true", 2],["List.concat_eq_append", 2],["Fin.ofNat'", 2],["Nat.dvd_lcm_left", 2],["Nat.mod_eq_of_lt", 2],["dite", 2],["WellFounded.fix", 2],["Decidable.decide", 2],["implies_congr", 2],["Nat.gcd_mul_right", 2],["List.get_singleton", 1],["Nat.isValidChar", 1],["Nat.gcd_gcd_self_right_left", 1],["UFModel.Agrees.push", 1],["List.length_append", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.gcd_pos_of_pos_left", 1],["List.cons.sizeOf_spec", 1],["Subtype.mk", 1],["Nat.lt_add_right", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.mod_one", 1],["Array.isEqvAux.proof_1", 1],["Option.isSome_some", 1],["Fin.nsmuls_eq", 1],["Array.size_swap", 1],["UnionFind.rank_lt", 1],["List.get?_append_right", 1],["List.get_append_right_aux", 1],["Subsingleton.allEq", 1],["sizeOf_nat", 1],["List.eq_of_mem_repeat'", 1],["Nat.le_add_right", 1],["Option.map_some'", 1],["Nat.gcd_gcd_self_right_right", 1],["Ne", 1],["List.nil_append", 1],["Decidable.isTrue", 1],["Sigma", 1],["lt_irrefl", 1],["List.get_cons_zero", 1],["WellFounded.fix_eq", 1],["Array.set", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.coprime_mul_right", 1],["Subtype.val", 1],["List.get?_append", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["not_exists", 1],["Nat.mul_dvd_mul_left", 1],["Option.get_some", 1],["UnionFind.lt_rankMax'", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.add_mod_mod", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["List.mem_cons_of_mem", 1],["Array.get?_push_lt", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_lt_succ", 1],["Nat.one_pos", 1],["UInt32.val_eq_of_lt", 1],["Nat.coprime.gcd_right", 1],["Nat.sub_succ_lt_self", 1],["List.repeat'", 1],["Nat.mod_self", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Bool.and_true", 1],["Nat.zero", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Nat.le_of_lt_succ", 1],["Nat.mul_one", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["True.intro", 1],["Array.swap", 1],["Array.toArrayLit", 1],["MonoidWithZero.zero_mul", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.div_self", 1],["UInt32.ofNat", 1],["Array.get?_push_eq", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UnionFind.findAux", 1],["Nat.mul_div_assoc", 1],["Array.getLit", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.zero_div", 1],["if_neg", 1],["UnionFind.rankMax", 1],["false_iff", 1],["Subtype", 1],["Nat.gcd_self", 1],["UnionFind.rankMaxAux.proof_1", 1],["if_pos", 1],["Nat.coprime_comm", 1],["UInt32.val", 1],["Fin.ofNat'_succ", 1],["Nat.sub_lt_sub_left", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.gcd_mul_left", 1],["List.length_map", 1],["UInt8.val", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.succ_mul", 1],["PSigma", 1],["List.map", 1],["Nat.to_digits_core_length", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.lt_of_lt_of_le", 1],["true_and", 1],["UnionFind.lt_rankMax", 1],["List.get?_set_of_lt", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.coprime_mul_iff_left", 1],["Nat.find_x", 1],["eq_false'", 1],["Array.get_eq_get", 1],["Nat.le_of_succ_le", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["le_antisymm", 1],["Nat.mul_mod_mul_left", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["List.getLast_cons", 1],["Nat.zero_lt_succ", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["not_lt_of_ge", 1],["Nat.mod_add_mod", 1],["Array.isEqv", 1],["Nat.lt_succ_iff", 1],["Array.mk.sizeOf_spec", 1],["Array.isEqvAux_self", 1],["Fin.mk.injEq", 1],["Option.map_eq_map", 1],["List.mem_cons_self", 1],["UFModel.push", 1],["UFModel.Models", 1],["Nat.succ_sub_succ", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Subsingleton.elim", 1],["And.imp", 1],["Array.toListLitAux", 1],["Or.inl", 1],["exists_prop", 1],["List.get?_set_eq", 1],["Array.push", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["UFModel.rank_lt", 1],["max", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["List.length_nil", 1],["Nat.zero_sub", 1],["UFModel.push.proof_1", 1],["Nat.dvd_zero", 1],["Array.size_push", 1],["Nat.coprime_one_left", 1],["Array.get?_eq_get", 1],["Nat.gcd_div", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Option.some.injEq", 1],["Option.map", 1],["Decidable.isFalse", 1],["absurd", 1],["Nat.lcm_dvd", 1],["not_lt", 1],["List.get?_len_le", 1],["UFModel.Agrees.empty", 1],["False", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.exists_coprime", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.add_mul_mod_self_right", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["Nat.zero_le", 1],["Nat.sub_lt", 1],["Array.get?_set_ne", 1],["Nat.lcm_one_left", 1],["Nat.add_comm", 1],["Nat.lt_eq", 1],["PSigma.mk", 1],["List.get_of_mem", 1]]],
["Bool", 200, [["Bool.true", 65],["Bool.false", 50],["Eq.refl", 48],["Eq", 40],["Unit.unit", 38],["Bool", 37],["Eq.symm", 35],["OfNat.ofNat", 32],["rfl", 26],["Eq.trans", 23],["congrArg", 23],["congrFun", 22],["BEq.beq", 22],["of_eq_true", 20],["Decidable.decide", 20],["eq_self", 18],["HAdd.hAdd", 18],["PProd.fst", 18],["and", 18],["congr", 17],["Pure.pure", 16],["Bind.bind", 15],["LE.le", 15],["Prod.mk", 15],["LT.lt", 14],["Array.size", 13],["HSub.hSub", 12],["not", 11],["Iff.intro", 11],["cond", 10],["List.nil", 10],["ite", 10],["Fin.val", 9],["dite", 9],["List.cons", 9],["HMul.hMul", 8],["eq_false_of_decide", 8],["or", 8],["Eq.mpr", 8],["eq_true_of_decide", 8],["Eq.mp", 7],["Classical.em", 7],["True", 7],["Nat.Linear.Poly.denote", 7],["Option.none", 7],["propext", 7],["Option.some", 6],["of_decide_eq_true", 6],["cond_false", 6],["Nat.zero_add", 6],["cond_true", 6],["funext", 6],["Nat.add_comm", 6],["False", 6],["Bool.of_not_eq_true", 6],["Nat.add_left_comm", 5],["Nat.add_eq", 5],["Iff", 5],["eq_true", 5],["Nat.Linear.Var.denote", 5],["Nat.add", 5],["iff_self", 5],["Fin.mk", 5],["id", 5],["Array.get", 5],["WellFounded.fix", 5],["Nat.mul_eq", 5],["Id.run", 4],["HAppend.hAppend", 4],["Option.isSome_some", 4],["Nat.blt", 4],["Nat.ble", 4],["Nat.Linear.Poly.denote_le", 4],["Fin", 4],["GE.ge", 4],["Nat.Linear.Poly.denote_eq", 4],["Option", 3],["List.reverse", 3],["Array.anyM", 3],["Decidable.em", 3],["Nat.Linear.Poly", 3],["absurd", 3],["HMod.hMod", 3],["eq_false'", 3],["Nat.mod_lt", 3],["Nat.succ", 3],["Prod", 3],["Option.isSome_none", 3],["Nat.anyAux", 3],["PUnit.unit", 3],["List.any", 3],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Poly.denote_append", 3],["Not", 3],["decide_eq_false", 3],["List.elem", 3],["eq_false", 3],["List.append_nil", 2],["List.all", 2],["Array.isEqvAux.proof_1", 2],["decide_eq_true_iff", 2],["Nat.le_of_ble_eq_true", 2],["Nat.add_assoc", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Option.isSome", 2],["Nat.Linear.PolyCnstr.lhs", 2],["Bool.and_true", 2],["List.nil_append", 2],["Iff.mpr", 2],["sizeOf_nat", 2],["HEq.refl", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse_cons", 2],["Subsingleton.elim", 2],["Array.isEqvAux.proof_3", 2],["Nat.Linear.PolyCnstr.eq", 2],["Subarray.as", 2],["Subarray.stop", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.PolyCnstr.rhs", 2],["Prod.snd", 2],["System.Platform.isWindows", 2],["Nat.Linear.Poly.denote_reverse", 2],["dif_pos", 2],["Array.isEqvAux.proof_2", 2],["System.FilePath.metadata", 2],["WellFoundedRelation.rel", 2],["Array.allM", 2],["Subarray.start", 2],["Array.contains", 2],["Nat.sub_eq", 2],["Nat.ble_eq_true_of_le", 2],["List.foldr", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.sub_succ_lt_self", 2],["Nat.lt_eq", 2],["False.elim", 2],["CoeDep.mk", 2],["Substring.any", 2],["Prod.fst", 2],["Substring.bsize", 2],["List.mem_of_elem_eq_true", 1],["ptrAddrUnsafe", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.le_of_not_lt", 1],["EmptyCollection.emptyCollection", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Nat.any", 1],["liftM", 1],["Tactic.NormCast.Label.elim", 1],["dif_neg", 1],["Option.get", 1],["Nonempty", 1],["Nat.Linear.Expr.toNormPoly", 1],["Bool.not_true", 1],["Classical.choice", 1],["Nat.ble_self_eq_true", 1],["Array.isEqvAux", 1],["Tactic.NormCast.Label.move", 1],["instLawfulBEqBoolInstBEqInstDecidableEqBool.proof_1", 1],["exists_false", 1],["UInt64", 1],["Decidable.isTrue", 1],["Nat.Linear.Poly.combineAux", 1],["Option.getD", 1],["UInt8.isLower", 1],["decide_eq_true", 1],["Nat.Linear.Expr.toPoly", 1],["System.FilePath.toString", 1],["Nat.beq", 1],["Ordering.gt", 1],["Decidable", 1],["Substring.startPos", 1],["Inhabited.mk", 1],["System.Platform.getIsWindows", 1],["UInt8.isDigit", 1],["Nat.Linear.Expr.denote", 1],["Array.isEqvAux_self", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Array.anyMUnsafe.any", 1],["Ordering.eq", 1],["List.isPrefixOf", 1],["instDecidableEqBool.proof_1", 1],["Array.isEqv", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Nat.Linear.Poly.denote_fuse", 1],["System.Platform.getIsEmscripten", 1],["dite_congr", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["System.Platform.isOSX", 1],["Nat.not_lt_of_le", 1],["GT.gt", 1],["beq_self_eq_true'", 1],["decide_eq_true_eq", 1],["Array.anyM.proof_1", 1],["Option.isNone_some", 1],["Bool.and_false", 1],["Ordering.lt", 1],["Option.eq_none_of_isNone", 1],["Random.randBool", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Option.isNone_none", 1],["WellFounded.fix_eq", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["ToBool.mk", 1],["Nat.ble_succ_eq_true", 1],["Tactic.Ring.HornerExpr.xadd", 1],["Array.uget", 1],["Substring.all", 1],["System.FilePath.pathSeparators", 1],["LawfulBEq.mk", 1],["Nat.Linear.Poly.denote_combine", 1],["false_iff", 1],["not_le", 1],["Array.binSearchAux", 1],["Array.anyM.loop.proof_2", 1],["Array.isPrefixOfAux", 1],["Mathlib.Tactic.Lint.nolintAttr", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["UInt8.isUpper", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.lt_of_not_le", 1],["ne_eq", 1],["Option.some.injEq", 1],["Nat.Linear.Poly.isNonZero", 1],["Array.isPrefixOfAux.proof_2", 1],["Decidable.isFalse", 1],["List.elem_eq_true_of_mem", 1],["List.contains", 1],["Nat.beq_refl", 1],["Exists", 1],["System.Platform.getIsOSX", 1],["Bool.not_false", 1],["Array.anyM.loop.proof_1", 1],["bne", 1],["not_lt", 1],["Coe.mk", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Except.toBool", 1],["Functor.map", 1],["FloatArray.size", 1],["Nat.Linear.fixedVar", 1],["Nat.eq_of_beq_eq_true", 1],["Subarray.allM", 1],["ToString.mk", 1],["Nat.not_le_of_lt", 1],["Substring.str", 1],["Array.any", 1],["Random.rand", 1],["UInt8.isAlpha", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["System.FilePath.isAbsolute", 1],["Hashable.mk", 1],["Nonempty.intro", 1],["randNat", 1],["List.anyM", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Poly.combine", 1],["Array.anyM.loop.proof_3", 1],["Ordering", 1],["Nat.add_le_add_right", 1],["Tactic.NormCast.Label.squash", 1],["Nat.add_le_add_left", 1],["ByteArray.size", 1],["Random.mk", 1],["Subarray.anyM", 1],["Nat.right_distrib", 1],["Ord.mk", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["eq_of_heq", 1],["ReprAtom.mk", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Array.isPrefixOfAux.proof_1", 1],["lcProof", 1],["dite_true", 1],["Array.isPrefixOfAux.proof_3", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["LawfulBEq.rfl", 1],["exists_eq'", 1],["instDecidableEqBool.proof_2", 1],["CoeSort.mk", 1]]],
["Nat.le.step", 192, [["Eq.refl", 79],["Eq", 77],["Eq.mpr", 55],["congrArg", 48],["rfl", 48],["OfNat.ofNat", 45],["Eq.trans", 43],["Fin.mk", 38],["Eq.symm", 38],["congrFun", 36],["Nat.gcd", 35],["of_eq_true", 35],["eq_self", 28],["HMul.hMul", 25],["Fin.val", 25],["LT.lt", 21],["HMod.hMod", 19],["congr", 17],["Nat.gcd_dvd_right", 16],["Option.some", 15],["List.get", 15],["List.length", 15],["HAdd.hAdd", 15],["List.cons", 14],["List.nil", 14],["Bool.true", 14],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Array.size", 10],["eq_true", 10],["Nat.mod_lt", 10],["HEq.refl", 10],["eq_true_of_decide", 9],["Nat.succ", 9],["Eq.mp", 9],["Nat.dvd_antisymm", 9],["Nat.le_of_succ_le_succ", 8],["HDiv.hDiv", 8],["List.get?", 8],["Fin.isLt", 8],["Fin.size_positive", 8],["And.intro", 8],["Nat.gcd_zero_left", 7],["Iff.intro", 7],["List.get?_eq_get", 7],["Iff", 7],["Dvd.dvd", 7],["PProd.fst", 7],["Array.data", 6],["dite_congr", 6],["Classical.em", 6],["Nat.add", 6],["UnionFind.arr", 6],["Exists.intro", 6],["Bool.false", 5],["eq_false", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_trans", 5],["propext", 5],["And.left", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["Nat.coprime.symm", 5],["iff_self", 5],["Nat.coprime", 5],["HSub.hSub", 5],["dite_true", 5],["List.set", 4],["Array.get?_eq_get?", 4],["Decidable.em", 4],["Nat.dvd_mul_right", 4],["And", 4],["Nat.gcd_succ", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["eq_of_heq", 4],["dif_neg", 4],["Nat.lcm", 4],["And.right", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Array.mk", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["dif_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["UnionFind.size", 4],["id", 4],["False.elim", 4],["Option.none", 3],["Nat.gcd_zero_right", 3],["UFModel.Agrees.get_eq", 3],["UFModel.parent", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["List.append", 3],["LE.le", 3],["Nat.Linear.Expr.num", 3],["True", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.add", 3],["Fin.size_positive'", 3],["List.length_cons", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.toDigitsCore", 3],["Option.some.inj", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.Linear.Expr.var", 3],["ite_congr", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.digitChar", 3],["UFNode.parent", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Exists", 3],["Not", 3],["Nat.lt_succ_self", 3],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["List.getLast", 2],["Membership.mem", 2],["Option.some_inj", 2],["List.get_mem", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.div_mul_cancel", 2],["dite_false", 2],["Nat.zero_mod", 2],["UFModel.Models.parent_eq", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Nat.coprime.mul", 2],["ne_eq", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["Unit.unit", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["BinaryHeap.arr", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["List.cons_ne_nil", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["UFModel.Models.size_eq", 2],["List.length_set", 2],["Fin.eq_of_val_eq", 2],["List.get?_set_ne", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Fin.add_def", 2],["Nat.coprime.pow_left", 2],["UnionFind.model'", 2],["Nat.lcm_zero_left", 2],["Nat.zero_eq", 2],["UFNode.mk", 2],["SizeOf.sizeOf", 2],["Nat.succ_pos", 2],["Nat.mod_eq_of_lt", 2],["implies_congr", 2],["BinaryHeap.max", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["if_true", 2],["UFModel.Models.parent_eq'", 2],["Nat.not_lt_eq", 2],["Decidable.decide", 2],["Fin.ofNat'", 2],["of_decide_eq_true", 2],["Nat.coprime.gcd_left", 2],["WellFounded.fix", 2],["Nat.gcd_mul_left_left", 2],["Nat.add_eq", 2],["eq_false_of_decide", 2],["List.concat_eq_append", 2],["le_of_not_lt", 2],["if_false", 2],["dite", 2],["List.drop", 2],["Iff.mpr", 2],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["Fin.elim0", 1],["List.getLast_eq_get", 1],["Nat.one_pos", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Array.mk.sizeOf_spec", 1],["Nat.mod_self", 1],["Nat.le_add_right", 1],["Fin.nsmuls_eq", 1],["Bool.and_true", 1],["Nat.lt_add_right", 1],["Nat.zero", 1],["UInt32.ofNat", 1],["UnionFind.rank_lt", 1],["Nat.lt_of_lt_of_eq", 1],["List.cons.sizeOf_spec", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.coprime_mul_right", 1],["Subtype.property", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["WellFoundedRelation.rel", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Nat.gcd_mul_lcm", 1],["UInt32.val", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Nat.mod_one", 1],["PSigma", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux_self", 1],["Nat.to_digits_core_length", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["List.nil_append", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.lt_irrefl", 1],["trivial", 1],["lt_irrefl", 1],["Array.swap", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Fin.mk.injEq", 1],["Nat.succ_lt_succ", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Ne", 1],["Nat.gcd_gcd_self_left_right", 1],["UnionFind.rankMax", 1],["if_neg", 1],["Array.set", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Array.get_eq_get", 1],["List.get?_append", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Array.push", 1],["List.get?_set_eq", 1],["Nat.le_of_succ_le", 1],["Nat.gcd_mul_left", 1],["Iff.mp", 1],["Nat.zero_lt_succ", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["List.get_append_right_aux", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["UnionFind.rankMaxAux.proof_1", 1],["Array.get?_push_lt", 1],["Nat.gcd_gcd_self_right_right", 1],["UnionFind.lt_rankMax'", 1],["Array.isEqvAux.proof_1", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Subsingleton.allEq", 1],["List.mem_cons_of_mem", 1],["Nat.gcd_div", 1],["Array.size_push", 1],["Nat.lcm_dvd", 1],["Array.size_swap", 1],["Nat.coprime.gcd_right", 1],["funext", 1],["Nat.coprime_one_left", 1],["List.repeat'", 1],["Nat.coprime.coprime_div_left", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["Sigma", 1],["Nat.coprime_div_gcd_div_gcd", 1],["zero_lt_of_lt", 1],["Nat.sub_lt_sub_left", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Array.get?_set_ne", 1],["List.mem_cons_self", 1],["Functor.map", 1],["And.imp", 1],["Decidable.isFalse", 1],["Subsingleton.elim", 1],["Option.map", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.mul_dvd_mul_right", 1],["max", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["Subtype.val", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mul_div_cancel_left", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.length_append", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.gcd_self", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["WellFounded.fix_eq", 1],["List.length_map", 1],["Subtype", 1],["Nat.add_comm", 1],["List.map", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["UInt32.val_eq_of_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["True.intro", 1],["List.get?_append_right", 1],["Nat.lt_eq", 1],["Subtype.mk", 1],["UFModel.push", 1],["and", 1],["Nat.coprime.gcd_both", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Option.map_some'", 1],["Array.toArrayLit", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["sizeOf_nat", 1]]],
["eq_of_heq", 191, [["Eq.refl", 79],["Eq", 77],["Eq.mpr", 55],["congrArg", 48],["rfl", 48],["OfNat.ofNat", 45],["Eq.trans", 43],["Fin.mk", 38],["Eq.symm", 38],["congrFun", 36],["Nat.gcd", 35],["of_eq_true", 35],["eq_self", 28],["HMul.hMul", 25],["Fin.val", 25],["LT.lt", 21],["HMod.hMod", 19],["congr", 17],["Nat.gcd_dvd_right", 16],["Option.some", 15],["List.get", 15],["List.length", 15],["HAdd.hAdd", 15],["List.cons", 14],["List.nil", 14],["Bool.true", 14],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Array.size", 10],["eq_true", 10],["Nat.mod_lt", 10],["HEq.refl", 10],["eq_true_of_decide", 9],["Nat.succ", 9],["Eq.mp", 9],["Nat.dvd_antisymm", 9],["Nat.le_of_succ_le_succ", 8],["HDiv.hDiv", 8],["List.get?", 8],["Fin.isLt", 8],["Fin.size_positive", 8],["And.intro", 8],["Nat.gcd_zero_left", 7],["Iff.intro", 7],["List.get?_eq_get", 7],["Iff", 7],["Dvd.dvd", 7],["PProd.fst", 7],["Array.data", 6],["dite_congr", 6],["Classical.em", 6],["Nat.add", 6],["UnionFind.arr", 6],["Exists.intro", 6],["Bool.false", 5],["eq_false", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_trans", 5],["propext", 5],["And.left", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["Nat.coprime.symm", 5],["iff_self", 5],["Nat.coprime", 5],["HSub.hSub", 5],["dite_true", 5],["List.set", 4],["Array.get?_eq_get?", 4],["Decidable.em", 4],["Nat.dvd_mul_right", 4],["And", 4],["Nat.gcd_succ", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["eq_of_heq", 4],["dif_neg", 4],["Nat.lcm", 4],["And.right", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Array.mk", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["dif_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["UnionFind.size", 4],["id", 4],["False.elim", 4],["Option.none", 3],["Nat.gcd_zero_right", 3],["UFModel.Agrees.get_eq", 3],["UFModel.parent", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["List.append", 3],["LE.le", 3],["Nat.Linear.Expr.num", 3],["True", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.add", 3],["Fin.size_positive'", 3],["List.length_cons", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.toDigitsCore", 3],["Option.some.inj", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.Linear.Expr.var", 3],["ite_congr", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.digitChar", 3],["UFNode.parent", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Exists", 3],["Not", 3],["Nat.lt_succ_self", 3],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["List.getLast", 2],["Membership.mem", 2],["Option.some_inj", 2],["List.get_mem", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.div_mul_cancel", 2],["dite_false", 2],["Nat.zero_mod", 2],["UFModel.Models.parent_eq", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Nat.coprime.mul", 2],["ne_eq", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["Unit.unit", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["BinaryHeap.arr", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["List.cons_ne_nil", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["UFModel.Models.size_eq", 2],["List.length_set", 2],["Fin.eq_of_val_eq", 2],["List.get?_set_ne", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Fin.add_def", 2],["Nat.coprime.pow_left", 2],["UnionFind.model'", 2],["Nat.lcm_zero_left", 2],["Nat.zero_eq", 2],["UFNode.mk", 2],["SizeOf.sizeOf", 2],["Nat.succ_pos", 2],["Nat.mod_eq_of_lt", 2],["implies_congr", 2],["BinaryHeap.max", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["if_true", 2],["UFModel.Models.parent_eq'", 2],["Nat.not_lt_eq", 2],["Decidable.decide", 2],["Fin.ofNat'", 2],["of_decide_eq_true", 2],["Nat.coprime.gcd_left", 2],["WellFounded.fix", 2],["Nat.gcd_mul_left_left", 2],["Nat.add_eq", 2],["eq_false_of_decide", 2],["List.concat_eq_append", 2],["le_of_not_lt", 2],["if_false", 2],["dite", 2],["List.drop", 2],["Iff.mpr", 2],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["Fin.elim0", 1],["List.getLast_eq_get", 1],["Nat.one_pos", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Array.mk.sizeOf_spec", 1],["Nat.mod_self", 1],["Nat.le_add_right", 1],["Fin.nsmuls_eq", 1],["Bool.and_true", 1],["Nat.lt_add_right", 1],["Nat.zero", 1],["UInt32.ofNat", 1],["UnionFind.rank_lt", 1],["Nat.lt_of_lt_of_eq", 1],["List.cons.sizeOf_spec", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.coprime_mul_right", 1],["Subtype.property", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["WellFoundedRelation.rel", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Nat.gcd_mul_lcm", 1],["UInt32.val", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Nat.mod_one", 1],["PSigma", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux_self", 1],["Nat.to_digits_core_length", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["List.nil_append", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.lt_irrefl", 1],["trivial", 1],["lt_irrefl", 1],["Array.swap", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Fin.mk.injEq", 1],["Nat.succ_lt_succ", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Ne", 1],["Nat.gcd_gcd_self_left_right", 1],["UnionFind.rankMax", 1],["if_neg", 1],["Array.set", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Array.get_eq_get", 1],["List.get?_append", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Array.push", 1],["List.get?_set_eq", 1],["Nat.le_of_succ_le", 1],["Nat.gcd_mul_left", 1],["Iff.mp", 1],["Nat.zero_lt_succ", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["List.get_append_right_aux", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["UnionFind.rankMaxAux.proof_1", 1],["Array.get?_push_lt", 1],["Nat.gcd_gcd_self_right_right", 1],["UnionFind.lt_rankMax'", 1],["Array.isEqvAux.proof_1", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Subsingleton.allEq", 1],["List.mem_cons_of_mem", 1],["Nat.gcd_div", 1],["Array.size_push", 1],["Nat.lcm_dvd", 1],["Array.size_swap", 1],["Nat.coprime.gcd_right", 1],["funext", 1],["Nat.coprime_one_left", 1],["List.repeat'", 1],["Nat.coprime.coprime_div_left", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["Sigma", 1],["Nat.coprime_div_gcd_div_gcd", 1],["zero_lt_of_lt", 1],["Nat.sub_lt_sub_left", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Array.get?_set_ne", 1],["List.mem_cons_self", 1],["Functor.map", 1],["And.imp", 1],["Decidable.isFalse", 1],["Subsingleton.elim", 1],["Option.map", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.mul_dvd_mul_right", 1],["max", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["Subtype.val", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mul_div_cancel_left", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.length_append", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.gcd_self", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["WellFounded.fix_eq", 1],["List.length_map", 1],["Subtype", 1],["Nat.add_comm", 1],["List.map", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["UInt32.val_eq_of_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["True.intro", 1],["List.get?_append_right", 1],["Nat.lt_eq", 1],["Subtype.mk", 1],["UFModel.push", 1],["and", 1],["Nat.coprime.gcd_both", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Option.map_some'", 1],["Array.toArrayLit", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["sizeOf_nat", 1]]],
["Nat.le_trans", 191, [["Eq.refl", 79],["Eq", 77],["Eq.mpr", 55],["congrArg", 48],["rfl", 48],["OfNat.ofNat", 45],["Eq.trans", 43],["Fin.mk", 38],["Eq.symm", 38],["congrFun", 36],["Nat.gcd", 35],["of_eq_true", 35],["eq_self", 28],["HMul.hMul", 25],["Fin.val", 25],["LT.lt", 21],["HMod.hMod", 19],["congr", 17],["Nat.gcd_dvd_right", 16],["Option.some", 15],["List.get", 15],["List.length", 15],["HAdd.hAdd", 15],["List.cons", 14],["List.nil", 14],["Bool.true", 14],["Array.get", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Array.size", 10],["eq_true", 10],["Nat.mod_lt", 10],["HEq.refl", 10],["eq_true_of_decide", 9],["Nat.succ", 9],["Eq.mp", 9],["Nat.dvd_antisymm", 9],["Nat.le_of_succ_le_succ", 8],["HDiv.hDiv", 8],["List.get?", 8],["Fin.isLt", 8],["Fin.size_positive", 8],["And.intro", 8],["Nat.gcd_zero_left", 7],["Iff.intro", 7],["List.get?_eq_get", 7],["Iff", 7],["Dvd.dvd", 7],["PProd.fst", 7],["Array.data", 6],["dite_congr", 6],["Classical.em", 6],["Nat.add", 6],["UnionFind.arr", 6],["Exists.intro", 6],["Bool.false", 5],["eq_false", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_trans", 5],["propext", 5],["And.left", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["Nat.coprime.symm", 5],["iff_self", 5],["Nat.coprime", 5],["HSub.hSub", 5],["dite_true", 5],["List.set", 4],["Array.get?_eq_get?", 4],["Decidable.em", 4],["Nat.dvd_mul_right", 4],["And", 4],["Nat.gcd_succ", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["eq_of_heq", 4],["dif_neg", 4],["Nat.lcm", 4],["And.right", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Array.mk", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["dif_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["UnionFind.size", 4],["id", 4],["False.elim", 4],["Option.none", 3],["Nat.gcd_zero_right", 3],["UFModel.Agrees.get_eq", 3],["UFModel.parent", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["List.append", 3],["LE.le", 3],["Nat.Linear.Expr.num", 3],["True", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.add", 3],["Fin.size_positive'", 3],["List.length_cons", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.toDigitsCore", 3],["Option.some.inj", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.Linear.Expr.var", 3],["ite_congr", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.digitChar", 3],["UFNode.parent", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Exists", 3],["Not", 3],["Nat.lt_succ_self", 3],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["List.getLast", 2],["Membership.mem", 2],["Option.some_inj", 2],["List.get_mem", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.div_mul_cancel", 2],["dite_false", 2],["Nat.zero_mod", 2],["UFModel.Models.parent_eq", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Nat.coprime.mul", 2],["ne_eq", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["Unit.unit", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["BinaryHeap.arr", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["List.cons_ne_nil", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["UFModel.Models.size_eq", 2],["List.length_set", 2],["Fin.eq_of_val_eq", 2],["List.get?_set_ne", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Fin.add_def", 2],["Nat.coprime.pow_left", 2],["UnionFind.model'", 2],["Nat.lcm_zero_left", 2],["Nat.zero_eq", 2],["UFNode.mk", 2],["SizeOf.sizeOf", 2],["Nat.succ_pos", 2],["Nat.mod_eq_of_lt", 2],["implies_congr", 2],["BinaryHeap.max", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["if_true", 2],["UFModel.Models.parent_eq'", 2],["Nat.not_lt_eq", 2],["Decidable.decide", 2],["Fin.ofNat'", 2],["of_decide_eq_true", 2],["Nat.coprime.gcd_left", 2],["WellFounded.fix", 2],["Nat.gcd_mul_left_left", 2],["Nat.add_eq", 2],["eq_false_of_decide", 2],["List.concat_eq_append", 2],["le_of_not_lt", 2],["if_false", 2],["dite", 2],["List.drop", 2],["Iff.mpr", 2],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["Fin.elim0", 1],["List.getLast_eq_get", 1],["Nat.one_pos", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Array.mk.sizeOf_spec", 1],["Nat.mod_self", 1],["Nat.le_add_right", 1],["Fin.nsmuls_eq", 1],["Bool.and_true", 1],["Nat.lt_add_right", 1],["Nat.zero", 1],["UInt32.ofNat", 1],["UnionFind.rank_lt", 1],["Nat.lt_of_lt_of_eq", 1],["List.cons.sizeOf_spec", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.coprime_mul_right", 1],["Subtype.property", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["WellFoundedRelation.rel", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Nat.gcd_mul_lcm", 1],["UInt32.val", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Nat.mod_one", 1],["PSigma", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux_self", 1],["Nat.to_digits_core_length", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["List.nil_append", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.lt_irrefl", 1],["trivial", 1],["lt_irrefl", 1],["Array.swap", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Fin.mk.injEq", 1],["Nat.succ_lt_succ", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Ne", 1],["Nat.gcd_gcd_self_left_right", 1],["UnionFind.rankMax", 1],["if_neg", 1],["Array.set", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Array.get_eq_get", 1],["List.get?_append", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Array.push", 1],["List.get?_set_eq", 1],["Nat.le_of_succ_le", 1],["Nat.gcd_mul_left", 1],["Iff.mp", 1],["Nat.zero_lt_succ", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["List.get_append_right_aux", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["UnionFind.rankMaxAux.proof_1", 1],["Array.get?_push_lt", 1],["Nat.gcd_gcd_self_right_right", 1],["UnionFind.lt_rankMax'", 1],["Array.isEqvAux.proof_1", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Subsingleton.allEq", 1],["List.mem_cons_of_mem", 1],["Nat.gcd_div", 1],["Array.size_push", 1],["Nat.lcm_dvd", 1],["Array.size_swap", 1],["Nat.coprime.gcd_right", 1],["funext", 1],["Nat.coprime_one_left", 1],["List.repeat'", 1],["Nat.coprime.coprime_div_left", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["Sigma", 1],["Nat.coprime_div_gcd_div_gcd", 1],["zero_lt_of_lt", 1],["Nat.sub_lt_sub_left", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Array.get?_set_ne", 1],["List.mem_cons_self", 1],["Functor.map", 1],["And.imp", 1],["Decidable.isFalse", 1],["Subsingleton.elim", 1],["Option.map", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.mul_dvd_mul_right", 1],["max", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["Subtype.val", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mul_div_cancel_left", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.length_append", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.gcd_self", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["WellFounded.fix_eq", 1],["List.length_map", 1],["Subtype", 1],["Nat.add_comm", 1],["List.map", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["UInt32.val_eq_of_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["True.intro", 1],["List.get?_append_right", 1],["Nat.lt_eq", 1],["Subtype.mk", 1],["UFModel.push", 1],["and", 1],["Nat.coprime.gcd_both", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Option.map_some'", 1],["Array.toArrayLit", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["sizeOf_nat", 1]]],
["Nat.le.refl", 189, [["Eq.refl", 75],["Eq", 75],["Eq.mpr", 52],["rfl", 48],["congrArg", 46],["OfNat.ofNat", 42],["Eq.trans", 41],["Fin.mk", 39],["Nat.gcd", 35],["Eq.symm", 34],["congrFun", 34],["of_eq_true", 33],["eq_self", 26],["HMul.hMul", 25],["Fin.val", 25],["LT.lt", 20],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["List.get", 15],["Option.some", 15],["congr", 14],["HAdd.hAdd", 13],["List.nil", 13],["Bool.true", 13],["List.length", 12],["Array.get", 11],["Array.size", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["List.cons", 11],["Nat.dvd_gcd", 11],["HEq.refl", 10],["Nat.mod_lt", 10],["eq_true", 9],["Nat.dvd_antisymm", 9],["Fin.isLt", 8],["And.intro", 8],["Eq.mp", 8],["eq_true_of_decide", 8],["Fin.size_positive", 8],["List.get?", 8],["Nat.le_of_succ_le_succ", 8],["Nat.succ", 8],["Dvd.dvd", 7],["List.get?_eq_get", 7],["Nat.gcd_zero_left", 7],["Iff", 7],["PProd.fst", 7],["Iff.intro", 7],["Array.data", 6],["Nat.add", 6],["Classical.em", 6],["dite_congr", 6],["UnionFind.arr", 6],["Exists.intro", 6],["And.left", 5],["iff_self", 5],["Nat.gcd_rec", 5],["HSub.hSub", 5],["HDiv.hDiv", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["Nat.mul_comm", 5],["propext", 5],["Bool.false", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["dite_true", 5],["List.set", 4],["Nat.lcm", 4],["eq_of_heq", 4],["Nat.gcd_dvd", 4],["Nat.dvd_mul_right", 4],["And", 4],["Nat.gcd_succ", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["Array.mk", 4],["And.right", 4],["dif_neg", 4],["Array.get?_eq_get?", 4],["HAppend.hAppend", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["UnionFind.size", 4],["Nat.coprime.coprime_dvd_left", 4],["dif_pos", 4],["id", 4],["Nat.Linear.Expr.num", 3],["Exists", 3],["List.append", 3],["UFModel.Agrees.get_eq", 3],["List.length_cons", 3],["Nat.pos_of_dvd_of_pos", 3],["True", 3],["Option.none", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.add", 3],["Fin.size_positive'", 3],["BinaryHeap.arr", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.Linear.Expr.var", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.gcd_one_left", 3],["eq_false", 3],["Nat.gcd_zero_right", 3],["UFNode.parent", 3],["UFModel.parent", 3],["Nat.coprime.coprime_dvd_right", 3],["Not", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["False.elim", 3],["Nat.lt_succ_self", 3],["Nat.dvd_lcm_left", 2],["le_of_not_lt", 2],["List.getLast", 2],["LE.le", 2],["Option.some_inj", 2],["List.drop", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.mul_zero", 2],["List.get?_set_ne", 2],["Nat.zero_mod", 2],["Membership.mem", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Nat.coprime.mul", 2],["List.get_mem", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["dite_false", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["UFModel.Models.parent_eq", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["ne_eq", 2],["Unit.unit", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["Array.push", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["List.length_set", 2],["Fin.eq_of_val_eq", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["List.cons_ne_nil", 2],["Fin.add_def", 2],["UFModel.Models.size_eq", 2],["Fin.ofNat'", 2],["Nat.lcm_zero_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["UFNode.mk", 2],["SizeOf.sizeOf", 2],["Array.size_push", 2],["Nat.div_mul_cancel", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["Nat.zero_eq", 2],["UnionFind.model'", 2],["Decidable.decide", 2],["Nat.not_lt_eq", 2],["Nat.mod_eq_of_lt", 2],["Nat.coprime.pow_left", 2],["WellFounded.fix", 2],["Nat.coprime.gcd_left", 2],["UFModel.Models.parent_eq'", 2],["List.concat_eq_append", 2],["Nat.add_eq", 2],["Nat.gcd_mul_left_left", 2],["dite", 2],["eq_false_of_decide", 2],["Iff.mpr", 2],["UFModel.Agrees.push", 1],["of_decide_eq_true", 1],["Array.toArrayLit", 1],["UnionFind.lt_rankMax", 1],["BinaryHeap.insert.proof_1", 1],["List.getLast_eq_get", 1],["Nat.coprime.gcd_right", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["Fin.nsmuls_eq", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_self", 1],["sizeOf_nat", 1],["Bool.and_true", 1],["UnionFind.rank_lt", 1],["Nat.lt_of_lt_of_eq", 1],["List.get?_append_right", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.le_add_right", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["UInt32.ofNat", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["WellFoundedRelation.rel", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["Nat.gcd_mul_lcm", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["UInt32.val", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mod_one", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux_self", 1],["PSigma", 1],["BinaryHeap.size_heapifyUp", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["Nat.zero", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["List.nil_append", 1],["List.cons.sizeOf_spec", 1],["Array.swap", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Fin.mk.injEq", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Ne", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.gcd_gcd_self_right_left", 1],["lt_irrefl", 1],["Array.set", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["List.get?_append", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Array.get_eq_get", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Array.mk.sizeOf_spec", 1],["List.getLast_cons", 1],["List.get?_set_eq", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.le_of_succ_le", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["Iff.mp", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["Nat.zero_lt_succ", 1],["List.get_append_right_aux", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.gcd_gcd_self_right_right", 1],["Array.isEqvAux.proof_1", 1],["Option.map_eq_map", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["UnionFind.lt_rankMax'", 1],["Nat.succ_sub_succ", 1],["Array.get?_push_lt", 1],["Subsingleton.allEq", 1],["Nat.lcm_dvd", 1],["Nat.succ_lt_succ", 1],["Sigma", 1],["funext", 1],["Nat.coprime_one_left", 1],["List.mem_cons_of_mem", 1],["List.repeat'", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["Array.size_swap", 1],["Nat.coprime.coprime_div_left", 1],["Nat.sub_lt_sub_left", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Array.get?_set_ne", 1],["List.mem_cons_self", 1],["Functor.map", 1],["And.imp", 1],["Decidable.isFalse", 1],["Option.map", 1],["Subsingleton.elim", 1],["Nat.div_zero", 1],["absurd", 1],["max", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["zero_lt_of_lt", 1],["Nat.mul_dvd_mul_right", 1],["Subtype.val", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_div", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["List.length_append", 1],["Nat.gcd_self", 1],["WellFounded.fix_eq", 1],["Nat.add_comm", 1],["List.length_map", 1],["List.map", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.mul_div_cancel_left", 1],["Subtype", 1],["Nat.lt_eq", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.coprime.gcd_both", 1],["and", 1],["PSigma.mk", 1],["List.get_singleton", 1],["True.intro", 1],["Subtype.mk", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UFModel.push", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Option.map_some'", 1]]],
["Nat.zero", 187, [["Eq.refl", 74],["Eq", 73],["Eq.mpr", 52],["rfl", 50],["congrArg", 44],["OfNat.ofNat", 40],["Eq.trans", 39],["Fin.mk", 37],["Nat.gcd", 35],["Eq.symm", 33],["congrFun", 32],["of_eq_true", 31],["HMul.hMul", 25],["eq_self", 24],["Fin.val", 24],["LT.lt", 20],["Nat.gcd_dvd_right", 16],["HMod.hMod", 16],["Option.some", 15],["List.get", 15],["congr", 14],["List.nil", 13],["Bool.true", 13],["HAdd.hAdd", 12],["List.length", 12],["Array.get", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["List.cons", 11],["HEq.refl", 10],["Array.size", 10],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Nat.succ", 8],["eq_true", 8],["Eq.mp", 8],["List.get?", 8],["eq_true_of_decide", 8],["Fin.size_positive", 8],["Fin.isLt", 8],["Nat.le_of_succ_le_succ", 8],["And.intro", 7],["Dvd.dvd", 7],["Iff.intro", 7],["Nat.gcd_zero_left", 7],["PProd.fst", 7],["List.get?_eq_get", 7],["Iff", 7],["UnionFind.arr", 6],["Classical.em", 6],["Nat.add", 6],["Array.data", 6],["Exists.intro", 6],["Nat.dvd_trans", 5],["HSub.hSub", 5],["Bool.false", 5],["iff_self", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["propext", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["dite_congr", 5],["And.left", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["List.set", 4],["Nat.dvd_mul_right", 4],["Array.get?_eq_get?", 4],["Eq.mpr_prop", 4],["Nat.coprime.coprime_dvd_left", 4],["And.right", 4],["UnionFind.size", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["Nat.gcd_succ", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["And", 4],["id", 4],["eq_of_heq", 4],["dif_pos", 4],["Array.mk", 4],["Nat.lcm", 4],["dif_neg", 4],["dite_true", 4],["True", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.coprime.coprime_dvd_right", 3],["Exists", 3],["UFNode.parent", 3],["List.length_cons", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.Expr.var", 3],["Nat.pos_of_dvd_of_pos", 3],["List.append", 3],["Fin.size_positive'", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["UFModel.Agrees.get_eq", 3],["Nat.lcm_comm", 3],["Nat.Linear.Expr.num", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["Option.none", 3],["Not", 3],["False.elim", 3],["Nat.gcd.induction", 3],["Nat.lt_succ_self", 3],["Nat.coprime.gcd_left", 2],["UnionFind.rankMaxAux", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.mul", 2],["Nat.gcd_mul_left_left", 2],["le_of_not_lt", 2],["Nat.gcd_mul_right", 2],["Membership.mem", 2],["List.get_mem", 2],["UFModel.Models.parent_eq", 2],["ne_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["List.cons_ne_nil", 2],["Nat.div_mul_cancel", 2],["Nat.zero_eq", 2],["Nat.mod_eq_of_lt", 2],["List.concat_eq_append", 2],["eq_false_of_decide", 2],["List.drop", 2],["Iff.mpr", 2],["Nat.dvd_lcm_left", 2],["List.getLast", 2],["LE.le", 2],["Option.some_inj", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.mul_zero", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["SizeOf.sizeOf", 2],["Nat.le_of_dvd", 2],["BinaryHeap.arr", 2],["Unit.unit", 2],["Nat.coprime_iff_gcd_eq_one", 2],["List.length_set", 2],["Nat.dvd_mod_iff", 2],["List.get?_set_ne", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["eq_false", 2],["Nat.not_lt_eq", 2],["Nat.lcm_zero_left", 2],["Fin.ofNat'", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["Nat.add_eq", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["UnionFind.model'", 2],["UFModel.Models.size_eq", 2],["WellFounded.fix", 2],["UFModel.Models.parent_eq'", 2],["Decidable.decide", 2],["Nat.zero_mod", 2],["UFModel.parent", 2],["dite", 2],["Bool.and_true", 1],["Subtype", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["UnionFind.lt_rankMax", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.getLast_eq_get", 1],["Ne", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["UnionFind.rankMaxAux.proof_2", 1],["Array.get?_push_lt", 1],["Fin.nsmuls_eq", 1],["Array.set", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["if_neg", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_lt_succ", 1],["Array.isEqvAux_self", 1],["List.eq_of_mem_repeat'", 1],["Option.map_some'", 1],["Array.get_eq_get", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_gcd_self_right_left", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["List.getLast_cons", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_mul_lcm", 1],["UInt32.val_eq_of_lt", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Subtype.property", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_of_succ_le", 1],["Nat.sub_succ_lt_self", 1],["Iff.mp", 1],["not_lt_of_ge", 1],["Nat.zero_lt_succ", 1],["Array.isEqv", 1],["Nat.mod_one", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.gcd_div", 1],["Array.get?_push_eq", 1],["UFModel.rank", 1],["Array.swap", 1],["List.nil_append", 1],["Fin.mk.injEq", 1],["UnionFind.rankMaxAux.proof_1", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["UnionFind.findAux", 1],["Nat.gcd_gcd_self_left_right", 1],["Sigma", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["List.get?_append", 1],["UInt32.val", 1],["Subtype.val", 1],["Array.isEqvAux.proof_1", 1],["Nat.lcm_dvd", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Array.getLit", 1],["Array.push", 1],["List.get?_set_eq", 1],["WellFounded.fix_eq", 1],["Nat.gcd_mul_left", 1],["Nat.lt_add_right", 1],["Nat.mul_div_assoc", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["Nat.zero", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["List.cons.sizeOf_spec", 1],["UnionFind.lt_rankMax'", 1],["Nat.sub_lt_sub_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Array.get?_set_ne", 1],["Functor.map", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Array.size_swap", 1],["List.get_append_right_aux", 1],["UFNode.mk", 1],["Array.size_push", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_gcd_self_right_right", 1],["sizeOf_nat", 1],["funext", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Subsingleton.allEq", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["List.mem_cons_of_mem", 1],["List.repeat'", 1],["List.length_append", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Nat.coprime.coprime_div_left", 1],["List.mem_cons_self", 1],["List.length_map", 1],["Decidable.isFalse", 1],["Option.map", 1],["Subsingleton.elim", 1],["Nat.div_zero", 1],["absurd", 1],["max", 1],["Fin.zero_def", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["dite_false", 1],["zero_lt_of_lt", 1],["Nat.lt_of_lt_of_eq", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.mul_div_cancel_left", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.coprime_mul_right", 1],["True.intro", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.add_comm", 1],["List.map", 1],["List.get?_append_right", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Array.toArrayLit", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["PSigma", 1],["Subtype.mk", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.lt_eq", 1],["Nat.coprime.gcd_both", 1],["and", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UInt32.ofNat", 1],["Nat.gcd_self", 1],["Nat.mod_self", 1]]],
["Nat.le_succ", 186, [["Eq.refl", 75],["Eq", 74],["Eq.mpr", 52],["rfl", 48],["congrArg", 45],["OfNat.ofNat", 41],["Eq.trans", 40],["Fin.mk", 38],["Nat.gcd", 35],["Eq.symm", 34],["congrFun", 33],["of_eq_true", 32],["HMul.hMul", 25],["Fin.val", 25],["eq_self", 25],["LT.lt", 20],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["List.get", 15],["Option.some", 15],["congr", 14],["Bool.true", 13],["List.nil", 13],["HAdd.hAdd", 12],["List.length", 12],["Array.get", 11],["List.cons", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["HEq.refl", 10],["Array.size", 10],["Nat.mod_lt", 10],["eq_true", 9],["Nat.dvd_antisymm", 9],["Fin.isLt", 8],["Eq.mp", 8],["eq_true_of_decide", 8],["Fin.size_positive", 8],["List.get?", 8],["Nat.le_of_succ_le_succ", 8],["Nat.succ", 8],["And.intro", 7],["Iff.intro", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["List.get?_eq_get", 7],["Iff", 7],["PProd.fst", 7],["Array.data", 6],["Nat.add", 6],["Classical.em", 6],["dite_congr", 6],["UnionFind.arr", 6],["Exists.intro", 6],["And.left", 5],["iff_self", 5],["Nat.gcd_rec", 5],["HSub.hSub", 5],["HDiv.hDiv", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["Nat.mul_comm", 5],["propext", 5],["Bool.false", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["dite_true", 5],["List.set", 4],["Nat.lcm", 4],["dif_neg", 4],["Nat.dvd_mul_right", 4],["And", 4],["Nat.gcd_succ", 4],["Eq.mpr_prop", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["Array.mk", 4],["eq_of_heq", 4],["And.right", 4],["Array.get?_eq_get?", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["UnionFind.size", 4],["Nat.coprime.coprime_dvd_left", 4],["dif_pos", 4],["id", 4],["Option.none", 3],["Exists", 3],["UFModel.parent", 3],["UFModel.Agrees.get_eq", 3],["eq_false", 3],["List.append", 3],["Nat.Linear.Expr.num", 3],["True", 3],["Nat.gcd.induction", 3],["Nat.Linear.Expr.add", 3],["Fin.size_positive'", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["List.length_cons", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.gcd_one_left", 3],["Nat.Linear.Expr.var", 3],["Nat.pos_of_dvd_of_pos", 3],["UFNode.parent", 3],["Nat.gcd_zero_right", 3],["Nat.coprime.coprime_dvd_right", 3],["Not", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["False.elim", 3],["Nat.lt_succ_self", 3],["Nat.dvd_lcm_left", 2],["Iff.mpr", 2],["le_of_not_lt", 2],["List.getLast", 2],["LE.le", 2],["Option.some_inj", 2],["List.drop", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["List.cons_ne_nil", 2],["Nat.mul_zero", 2],["Nat.zero_mod", 2],["Membership.mem", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Nat.coprime.mul", 2],["List.get_mem", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["dite_false", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["UFModel.rank", 2],["BinaryHeap.arr", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["UFModel.Models.parent_eq", 2],["ne_eq", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["Unit.unit", 2],["List.length_set", 2],["Fin.eq_of_val_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Fin.add_def", 2],["Fin.ofNat'", 2],["UFModel.Models.size_eq", 2],["Nat.lcm_zero_left", 2],["List.get?_set_ne", 2],["UFNode.mk", 2],["SizeOf.sizeOf", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["Nat.div_mul_cancel", 2],["UnionFind.model'", 2],["Decidable.decide", 2],["Nat.not_lt_eq", 2],["Nat.zero_eq", 2],["Nat.mod_eq_of_lt", 2],["WellFounded.fix", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.gcd_left", 2],["List.concat_eq_append", 2],["UFModel.Models.parent_eq'", 2],["Nat.add_eq", 2],["dite", 2],["eq_false_of_decide", 2],["Nat.gcd_mul_left_left", 2],["UFModel.Agrees.push", 1],["Array.toArrayLit", 1],["of_decide_eq_true", 1],["UInt32.val_eq_of_lt", 1],["UnionFind.lt_rankMax", 1],["List.get?_append_right", 1],["List.getLast_eq_get", 1],["Fin.elim0", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["Nat.one_pos", 1],["sizeOf_nat", 1],["Fin.nsmuls_eq", 1],["Nat.mod_self", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Bool.and_true", 1],["Nat.le_add_right", 1],["UnionFind.rank_lt", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.lt_add_right", 1],["List.eq_of_mem_repeat'", 1],["Nat.coprime.coprime_mul_right", 1],["UInt32.ofNat", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.zero", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["Subtype.property", 1],["WellFoundedRelation.rel", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_mul_lcm", 1],["Array.get?_push_eq", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["UnionFind.findAux", 1],["UInt32.val", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Nat.mod_one", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["PSigma", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux_self", 1],["not_lt_of_ge", 1],["List.cons.sizeOf_spec", 1],["Array.isEqv", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["List.nil_append", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Array.mk.sizeOf_spec", 1],["Array.swap", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Fin.mk.injEq", 1],["lt_irrefl", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Ne", 1],["Nat.gcd_gcd_self_left_right", 1],["Array.set", 1],["Array.size_swap", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["if_neg", 1],["UnionFind.rankMax", 1],["List.get?_append", 1],["Array.get_eq_get", 1],["List.get_append_right_aux", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["List.getLast_cons", 1],["Array.push", 1],["List.get?_set_eq", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.le_of_succ_le", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["Iff.mp", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["Nat.zero_lt_succ", 1],["Nat.gcd_gcd_self_right_right", 1],["UnionFind.rankMaxAux.proof_1", 1],["Array.isEqvAux.proof_1", 1],["Array.get?_push_lt", 1],["Option.map_eq_map", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["UnionFind.lt_rankMax'", 1],["Nat.succ_sub_succ", 1],["Subsingleton.allEq", 1],["Array.size_push", 1],["UnionFind.rankMaxAux.proof_2", 1],["Nat.lcm_dvd", 1],["Nat.gcd_div", 1],["funext", 1],["Nat.coprime_one_left", 1],["List.mem_cons_of_mem", 1],["List.repeat'", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["Sigma", 1],["Nat.coprime.coprime_div_left", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Nat.sub_lt_sub_left", 1],["List.mem_cons_self", 1],["Array.get?_set_ne", 1],["And.imp", 1],["Decidable.isFalse", 1],["Option.map", 1],["Subsingleton.elim", 1],["Nat.div_zero", 1],["absurd", 1],["max", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["Functor.map", 1],["Nat.mul_dvd_mul_right", 1],["zero_lt_of_lt", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Subtype.val", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.mul_div_cancel_left", 1],["Nat.gcd_self", 1],["List.length_append", 1],["Nat.add_comm", 1],["WellFounded.fix_eq", 1],["List.length_map", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["List.map", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.gcd_pos_of_pos_left", 1],["Subtype", 1],["Nat.succ_lt_succ", 1],["Nat.lt_eq", 1],["Nat.coprime.gcd_both", 1],["and", 1],["PSigma.mk", 1],["List.get_singleton", 1],["True.intro", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Subtype.mk", 1],["UFModel.push", 1],["Option.map_some'", 1]]],
["Nat.pred_le_pred", 185, [["Eq.refl", 74],["Eq", 73],["Eq.mpr", 52],["rfl", 48],["congrArg", 44],["OfNat.ofNat", 40],["Eq.trans", 39],["Fin.mk", 37],["Nat.gcd", 35],["Eq.symm", 33],["congrFun", 32],["of_eq_true", 31],["HMul.hMul", 25],["eq_self", 24],["Fin.val", 24],["LT.lt", 20],["Nat.gcd_dvd_right", 16],["HMod.hMod", 16],["Option.some", 15],["List.get", 15],["congr", 14],["List.nil", 13],["Bool.true", 13],["HAdd.hAdd", 12],["List.length", 12],["Array.get", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["List.cons", 11],["HEq.refl", 10],["Array.size", 10],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Nat.succ", 8],["eq_true", 8],["Eq.mp", 8],["List.get?", 8],["eq_true_of_decide", 8],["Fin.size_positive", 8],["Fin.isLt", 8],["Nat.le_of_succ_le_succ", 8],["And.intro", 7],["Dvd.dvd", 7],["Iff.intro", 7],["Nat.gcd_zero_left", 7],["PProd.fst", 7],["List.get?_eq_get", 7],["Iff", 7],["UnionFind.arr", 6],["Classical.em", 6],["Nat.add", 6],["Array.data", 6],["Exists.intro", 6],["Nat.dvd_trans", 5],["HSub.hSub", 5],["Bool.false", 5],["iff_self", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["propext", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["dite_congr", 5],["And.left", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["List.set", 4],["Nat.dvd_mul_right", 4],["Array.get?_eq_get?", 4],["Eq.mpr_prop", 4],["Nat.coprime.coprime_dvd_left", 4],["And.right", 4],["UnionFind.size", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["Nat.gcd_succ", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["And", 4],["id", 4],["eq_of_heq", 4],["dif_pos", 4],["Array.mk", 4],["Nat.lcm", 4],["dif_neg", 4],["dite_true", 4],["True", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.coprime.coprime_dvd_right", 3],["Exists", 3],["UFNode.parent", 3],["List.length_cons", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.Expr.var", 3],["Nat.pos_of_dvd_of_pos", 3],["List.append", 3],["Fin.size_positive'", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["UFModel.Agrees.get_eq", 3],["Nat.lcm_comm", 3],["Nat.Linear.Expr.num", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["Option.none", 3],["Not", 3],["False.elim", 3],["Nat.gcd.induction", 3],["Nat.lt_succ_self", 3],["Nat.coprime.gcd_left", 2],["UnionFind.rankMaxAux", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.mul", 2],["Nat.gcd_mul_left_left", 2],["le_of_not_lt", 2],["Nat.gcd_mul_right", 2],["Membership.mem", 2],["List.get_mem", 2],["UFModel.Models.parent_eq", 2],["ne_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["List.cons_ne_nil", 2],["Nat.div_mul_cancel", 2],["Nat.zero_eq", 2],["Nat.mod_eq_of_lt", 2],["List.concat_eq_append", 2],["eq_false_of_decide", 2],["List.drop", 2],["Iff.mpr", 2],["Nat.dvd_lcm_left", 2],["List.getLast", 2],["LE.le", 2],["Option.some_inj", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.mul_zero", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["SizeOf.sizeOf", 2],["Nat.le_of_dvd", 2],["BinaryHeap.arr", 2],["Unit.unit", 2],["Nat.coprime_iff_gcd_eq_one", 2],["List.length_set", 2],["Nat.dvd_mod_iff", 2],["List.get?_set_ne", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["eq_false", 2],["Nat.not_lt_eq", 2],["Nat.lcm_zero_left", 2],["Fin.ofNat'", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["Nat.add_eq", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["UnionFind.model'", 2],["UFModel.Models.size_eq", 2],["WellFounded.fix", 2],["UFModel.Models.parent_eq'", 2],["Decidable.decide", 2],["Nat.zero_mod", 2],["UFModel.parent", 2],["dite", 2],["Bool.and_true", 1],["Subtype", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["UnionFind.lt_rankMax", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.getLast_eq_get", 1],["Ne", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["UnionFind.rankMaxAux.proof_2", 1],["Array.get?_push_lt", 1],["Fin.nsmuls_eq", 1],["Array.set", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["if_neg", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_lt_succ", 1],["Array.isEqvAux_self", 1],["List.eq_of_mem_repeat'", 1],["Option.map_some'", 1],["Array.get_eq_get", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_gcd_self_right_left", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["List.getLast_cons", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_mul_lcm", 1],["UInt32.val_eq_of_lt", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Subtype.property", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_of_succ_le", 1],["Nat.sub_succ_lt_self", 1],["Iff.mp", 1],["not_lt_of_ge", 1],["Nat.zero_lt_succ", 1],["Array.isEqv", 1],["Nat.mod_one", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.gcd_div", 1],["Array.get?_push_eq", 1],["UFModel.rank", 1],["Array.swap", 1],["List.nil_append", 1],["Fin.mk.injEq", 1],["UnionFind.rankMaxAux.proof_1", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["UnionFind.findAux", 1],["Nat.gcd_gcd_self_left_right", 1],["Sigma", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["List.get?_append", 1],["UInt32.val", 1],["Subtype.val", 1],["Array.isEqvAux.proof_1", 1],["Nat.lcm_dvd", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Array.getLit", 1],["Array.push", 1],["List.get?_set_eq", 1],["WellFounded.fix_eq", 1],["Nat.gcd_mul_left", 1],["Nat.lt_add_right", 1],["Nat.mul_div_assoc", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["Nat.zero", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["List.cons.sizeOf_spec", 1],["UnionFind.lt_rankMax'", 1],["Nat.sub_lt_sub_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Array.get?_set_ne", 1],["Functor.map", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Array.size_swap", 1],["List.get_append_right_aux", 1],["UFNode.mk", 1],["Array.size_push", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_gcd_self_right_right", 1],["sizeOf_nat", 1],["funext", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Subsingleton.allEq", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["List.mem_cons_of_mem", 1],["List.repeat'", 1],["List.length_append", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Nat.coprime.coprime_div_left", 1],["List.mem_cons_self", 1],["List.length_map", 1],["Decidable.isFalse", 1],["Option.map", 1],["Subsingleton.elim", 1],["Nat.div_zero", 1],["absurd", 1],["max", 1],["Fin.zero_def", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["dite_false", 1],["zero_lt_of_lt", 1],["Nat.lt_of_lt_of_eq", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.mul_div_cancel_left", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.coprime_mul_right", 1],["True.intro", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.add_comm", 1],["List.map", 1],["List.get?_append_right", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Array.toArrayLit", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["PSigma", 1],["Subtype.mk", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.lt_eq", 1],["Nat.coprime.gcd_both", 1],["and", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UInt32.ofNat", 1],["Nat.gcd_self", 1],["Nat.mod_self", 1]]],
["Nat.le_of_succ_le_succ", 185, [["Eq.refl", 74],["Eq", 73],["Eq.mpr", 52],["rfl", 48],["congrArg", 44],["OfNat.ofNat", 40],["Eq.trans", 39],["Fin.mk", 37],["Nat.gcd", 35],["Eq.symm", 33],["congrFun", 32],["of_eq_true", 31],["HMul.hMul", 25],["eq_self", 24],["Fin.val", 24],["LT.lt", 20],["Nat.gcd_dvd_right", 16],["HMod.hMod", 16],["Option.some", 15],["List.get", 15],["congr", 14],["List.nil", 13],["Bool.true", 13],["HAdd.hAdd", 12],["List.length", 12],["Array.get", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["List.cons", 11],["HEq.refl", 10],["Array.size", 10],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Nat.succ", 8],["eq_true", 8],["Eq.mp", 8],["List.get?", 8],["eq_true_of_decide", 8],["Fin.size_positive", 8],["Fin.isLt", 8],["Nat.le_of_succ_le_succ", 8],["And.intro", 7],["Dvd.dvd", 7],["Iff.intro", 7],["Nat.gcd_zero_left", 7],["PProd.fst", 7],["List.get?_eq_get", 7],["Iff", 7],["UnionFind.arr", 6],["Classical.em", 6],["Nat.add", 6],["Array.data", 6],["Exists.intro", 6],["Nat.dvd_trans", 5],["HSub.hSub", 5],["Bool.false", 5],["iff_self", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["propext", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["dite_congr", 5],["And.left", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["List.set", 4],["Nat.dvd_mul_right", 4],["Array.get?_eq_get?", 4],["Eq.mpr_prop", 4],["Nat.coprime.coprime_dvd_left", 4],["And.right", 4],["UnionFind.size", 4],["Nat.gcd_dvd", 4],["HAppend.hAppend", 4],["Nat.eq_zero_or_pos", 4],["UFNode.rank", 4],["Array.size_set", 4],["Nat.gcd_succ", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["And", 4],["id", 4],["eq_of_heq", 4],["dif_pos", 4],["Array.mk", 4],["Nat.lcm", 4],["dif_neg", 4],["dite_true", 4],["True", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.coprime.coprime_dvd_right", 3],["Exists", 3],["UFNode.parent", 3],["List.length_cons", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.Expr.var", 3],["Nat.pos_of_dvd_of_pos", 3],["List.append", 3],["Fin.size_positive'", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["UFModel.Agrees.get_eq", 3],["Nat.lcm_comm", 3],["Nat.Linear.Expr.num", 3],["Nat.gcd_one_left", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["Option.none", 3],["Not", 3],["False.elim", 3],["Nat.gcd.induction", 3],["Nat.lt_succ_self", 3],["Nat.coprime.gcd_left", 2],["UnionFind.rankMaxAux", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.mul", 2],["Nat.gcd_mul_left_left", 2],["le_of_not_lt", 2],["Nat.gcd_mul_right", 2],["Membership.mem", 2],["List.get_mem", 2],["UFModel.Models.parent_eq", 2],["ne_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["List.cons_ne_nil", 2],["Nat.div_mul_cancel", 2],["Nat.zero_eq", 2],["Nat.mod_eq_of_lt", 2],["List.concat_eq_append", 2],["eq_false_of_decide", 2],["List.drop", 2],["Iff.mpr", 2],["Nat.dvd_lcm_left", 2],["List.getLast", 2],["LE.le", 2],["Option.some_inj", 2],["Nat.not_le_eq", 2],["UFModel.Models.rank_eq", 2],["Nat.mul_zero", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["SizeOf.sizeOf", 2],["Nat.le_of_dvd", 2],["BinaryHeap.arr", 2],["Unit.unit", 2],["Nat.coprime_iff_gcd_eq_one", 2],["List.length_set", 2],["Nat.dvd_mod_iff", 2],["List.get?_set_ne", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["eq_false", 2],["Nat.not_lt_eq", 2],["Nat.lcm_zero_left", 2],["Fin.ofNat'", 2],["Nat.succ_pos", 2],["BinaryHeap.max", 2],["Nat.add_eq", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["UnionFind.model'", 2],["UFModel.Models.size_eq", 2],["WellFounded.fix", 2],["UFModel.Models.parent_eq'", 2],["Decidable.decide", 2],["Nat.zero_mod", 2],["UFModel.parent", 2],["dite", 2],["Bool.and_true", 1],["Subtype", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["UnionFind.lt_rankMax", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["List.getLast_eq_get", 1],["Ne", 1],["Nat.coprime_mul_iff_left", 1],["List.get?_concat_length", 1],["UnionFind.rankMaxAux.proof_2", 1],["Array.get?_push_lt", 1],["Fin.nsmuls_eq", 1],["Array.set", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["if_neg", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_lt_succ", 1],["Array.isEqvAux_self", 1],["List.eq_of_mem_repeat'", 1],["Option.map_some'", 1],["Array.get_eq_get", 1],["Array.isEqvAux.proof_3", 1],["Nat.mul_mod", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_gcd_self_right_left", 1],["Decidable.isTrue", 1],["List.get_cons_zero", 1],["le_antisymm", 1],["List.getLast_cons", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_mul_lcm", 1],["UInt32.val_eq_of_lt", 1],["Nat.mul_dvd_mul_left", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Subtype.property", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Array.mk.sizeOf_spec", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.le_of_succ_le", 1],["Nat.sub_succ_lt_self", 1],["Iff.mp", 1],["not_lt_of_ge", 1],["Nat.zero_lt_succ", 1],["Array.isEqv", 1],["Nat.mod_one", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_of_lt_succ", 1],["Nat.gcd_div", 1],["Array.get?_push_eq", 1],["UFModel.rank", 1],["Array.swap", 1],["List.nil_append", 1],["Fin.mk.injEq", 1],["UnionFind.rankMaxAux.proof_1", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["UnionFind.findAux", 1],["Nat.gcd_gcd_self_left_right", 1],["Sigma", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["List.get?_append", 1],["UInt32.val", 1],["Subtype.val", 1],["Array.isEqvAux.proof_1", 1],["Nat.lcm_dvd", 1],["Array.toListLitAux", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["if_pos", 1],["Array.getLit", 1],["Array.push", 1],["List.get?_set_eq", 1],["WellFounded.fix_eq", 1],["Nat.gcd_mul_left", 1],["Nat.lt_add_right", 1],["Nat.mul_div_assoc", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["UFModel.rank_lt", 1],["Nat.zero", 1],["Nat.succ_mul", 1],["List.length_nil", 1],["List.cons.sizeOf_spec", 1],["UnionFind.lt_rankMax'", 1],["Nat.sub_lt_sub_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Array.get?_set_ne", 1],["Functor.map", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Array.size_swap", 1],["List.get_append_right_aux", 1],["UFNode.mk", 1],["Array.size_push", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_gcd_self_right_right", 1],["sizeOf_nat", 1],["funext", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Subsingleton.allEq", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["List.mem_cons_of_mem", 1],["List.repeat'", 1],["List.length_append", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Nat.coprime.coprime_div_left", 1],["List.mem_cons_self", 1],["List.length_map", 1],["Decidable.isFalse", 1],["Option.map", 1],["Subsingleton.elim", 1],["Nat.div_zero", 1],["absurd", 1],["max", 1],["Fin.zero_def", 1],["Nat.zero_sub", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.get?_len_le", 1],["dite_false", 1],["zero_lt_of_lt", 1],["Nat.lt_of_lt_of_eq", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.mul_div_cancel_left", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.coprime_mul_right", 1],["True.intro", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.add_comm", 1],["List.map", 1],["List.get?_append_right", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Array.toArrayLit", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["PSigma", 1],["Subtype.mk", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.lt_eq", 1],["Nat.coprime.gcd_both", 1],["and", 1],["PSigma.mk", 1],["List.get_singleton", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["UInt32.ofNat", 1],["Nat.gcd_self", 1],["Nat.mod_self", 1]]],
["List.length", 183, [["Eq.refl", 71],["Eq", 65],["OfNat.ofNat", 57],["rfl", 52],["congrArg", 52],["Eq.mpr", 47],["Eq.trans", 46],["List.length", 42],["Eq.symm", 41],["of_eq_true", 37],["Fin.mk", 35],["Array.size", 33],["congrFun", 33],["eq_self", 32],["LT.lt", 32],["HAdd.hAdd", 27],["congr", 25],["List.cons", 20],["Fin.val", 20],["Option.some", 18],["List.length_cons", 18],["List.nil", 17],["Nat.succ", 17],["Nat.lt_of_lt_of_le", 16],["List.get", 15],["Bool.true", 15],["HSub.hSub", 15],["Nat.lt_succ_self", 15],["PProd.fst", 14],["HEq.refl", 14],["Array.get", 13],["Nat.le_refl", 11],["Fin.isLt", 11],["eq_true", 10],["List.get?", 10],["BinaryHeap.arr", 10],["Eq.mp", 9],["Nat.le_of_succ_le_succ", 9],["Array.data", 9],["HAppend.hAppend", 8],["List.length_nil", 8],["UnionFind.arr", 7],["List.get?_eq_get", 7],["Array.size_set", 7],["Subtype.property", 7],["Iff.intro", 7],["eq_of_heq", 6],["UnionFind.size", 6],["eq_true_of_decide", 6],["Classical.em", 6],["eq_false", 6],["Exists.intro", 6],["WellFounded.fix", 6],["Nat.add", 6],["False.elim", 6],["dite_congr", 6],["Bool.false", 5],["Nat.le_of_lt", 5],["Option.none", 5],["Eq.mpr_prop", 5],["Subtype.mk", 5],["List.length_append", 5],["Nat.sub_lt", 5],["of_decide_eq_true", 5],["LE.le", 5],["List.set", 5],["Decidable.em", 4],["Unit.unit", 4],["UFNode.rank", 4],["List.repeat'", 4],["Nat.zero_eq", 4],["Array.mk", 4],["dif_neg", 4],["Array.get?_eq_get?", 4],["Nat.lt_of_le_of_lt", 4],["dif_pos", 4],["BinaryHeap.heapifyDown", 4],["Array.push", 4],["Nat.add_zero", 4],["dite_true", 4],["PSigma.mk", 4],["dite", 4],["Nat.Linear.Expr.var", 3],["Nat.toDigitsCore", 3],["Nat.Linear.Expr.add", 3],["List.append", 3],["Subtype", 3],["List.length_set", 3],["Nat.digitChar", 3],["UFNode.parent", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["ite_congr", 3],["Nat.zero_lt_of_lt", 3],["Nat.add_assoc", 3],["HDiv.hDiv", 3],["Array.size_push", 3],["Nat.succ_pos", 3],["Exists", 3],["funext", 3],["Nat.add_eq", 3],["UFModel.Agrees.get_eq", 3],["Nat.zero_sub", 3],["FloatArray.size", 3],["UnionFind.model'", 3],["ByteArray.size", 3],["id", 3],["Nat.add_comm", 3],["HMod.hMod", 3],["List.cons_append", 3],["Array.get?", 3],["Not", 3],["Nat.sub_le", 3],["Nat.Linear.ExprCnstr.mk", 3],["Nat.Linear.Expr.num", 3],["Array.set", 3],["List.drop", 3],["Nat.le_of_succ_le", 2],["Nat.zero", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["ne_eq", 2],["List.map", 2],["List.insert", 2],["Subtype.val", 2],["List.get?_len_le", 2],["Nat.not_lt_eq", 2],["dite_false", 2],["Iff.mpr", 2],["List.getLast", 2],["And", 2],["Option.some_inj", 2],["UFNode.mk", 2],["Nat.succ_add", 2],["UFModel.Models.parent_eq'", 2],["Nat.le_add_right", 2],["SizeOf.sizeOf", 2],["Nat.min_succ_succ", 2],["Nat.not_le_eq", 2],["UFModel.Models.size_eq", 2],["Nat.lt_succ_iff", 2],["UFModel.parent", 2],["implies_congr", 2],["BinaryHeap.max", 2],["Nat.zero_min", 2],["List.length_pos_of_ne_nil", 2],["UFModel.Models", 2],["Nat.lt_trans", 2],["UFModel.Models.rank_eq", 2],["if_true", 2],["max", 2],["List.cons_ne_nil", 2],["Nat.zero_add", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["WellFoundedRelation.rel", 2],["le_of_not_lt", 2],["UFModel.Models.parent_eq", 2],["sizeOf_nat", 2],["BinaryHeap.size", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["propext", 2],["List.get?_set_ne", 2],["Nat.sub_succ_lt_self", 2],["UnionFind.rankMaxAux", 2],["Nat.min_zero", 2],["Iff.mp", 2],["Array.swap", 2],["Array.size_swap", 2],["Nat.lt_of_succ_le", 2],["Decidable.decide", 2],["List.nil_append", 2],["Nat.lt_eq", 2],["if_false", 2],["List.concat_eq_append", 2],["Nat.pred", 2],["Membership.mem", 2],["eq_false_of_decide", 2],["List.get_mem", 2],["And.left", 2],["min", 2],["congr_arg", 1],["List.concat", 1],["Array.isEqvAux.proof_3", 1],["Array.toArrayLit", 1],["unsafeCast", 1],["List.get_cons_zero", 1],["BEq.beq", 1],["le_antisymm", 1],["Array.isEqvAux.proof_1", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["List.replicate", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["List.modifyNthTail_length", 1],["List.erase", 1],["List.length_erasep_of_mem", 1],["Bool.and_true", 1],["le_of_lt", 1],["WellFounded.fix_eq", 1],["List.length_dropLast", 1],["BinaryHeap.size_heapifyUp", 1],["UnionFind.rankMaxAux.proof_2", 1],["not_lt_of_ge", 1],["Nat.succ.injEq", 1],["Array.isEqv", 1],["Array.get?_push_eq", 1],["Nat.le_of_lt_succ", 1],["Decidable.of_not_not", 1],["UFModel.rank", 1],["UnionFind.findAux", 1],["Trans.trans", 1],["min_self", 1],["BinaryHeap.popMaxAux.proof_2", 1],["Array.getLit", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["BinaryHeap.insert.proof_1", 1],["decide_eq_true_eq", 1],["Nat.succ_lt_succ", 1],["PSigma", 1],["List.exists_mem_of_length_pos", 1],["Array.toListLitAux", 1],["if_pos", 1],["True", 1],["Nat.to_digits_core_length", 1],["List.modifyNthTail", 1],["List.get?_set_eq", 1],["List.eq_nil_of_length_eq_zero", 1],["UFModel.rank_lt", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Array.indexOfAux.proof_2", 1],["UnionFind.rankMax", 1],["if_neg", 1],["And.right", 1],["Array.pop", 1],["And.intro", 1],["eq_false'", 1],["Array.get_eq_get", 1],["BinaryHeap.mkHeap", 1],["List.get?_set_of_lt", 1],["List.getLast_cons", 1],["UFModel.push", 1],["Array.mk.sizeOf_spec", 1],["List.length_add_eq_lengthTRAux", 1],["Nat.zero_lt_succ", 1],["List.modifyHead", 1],["List.erase_eq_erasep", 1],["Nat.sub_add_eq_max", 1],["UnionFind.rankMaxAux.proof_1", 1],["List.length_replicate", 1],["Option.map_eq_map", 1],["Nat.succ_sub_succ", 1],["Nat.succ_ne_zero", 1],["Nat.lt_of_lt_of_eq", 1],["List.insert_of_not_mem", 1],["Classical.byContradiction", 1],["Array.get?_eq_get", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Option.map_some'", 1],["min_le_left", 1],["List.length_pos_of_mem", 1],["Array.indexOfAux", 1],["UFModel.Agrees.size_eq", 1],["Ne", 1],["List.reverse_cons", 1],["Nat.sub_lt_sub_left", 1],["List.mem_cons_self", 1],["List.length_singleton", 1],["Array.get?_set_ne", 1],["Nat.succ_le_succ", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["absurd", 1],["Array.size_pop", 1],["Array.get?_push_lt", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Functor.map", 1],["le_refl", 1],["Nat.lt_add_right", 1],["Nat.div_le_self", 1],["List.exists_of_erasep", 1],["HMul.hMul", 1],["Array.isEqvAux_self", 1],["List.length_map", 1],["List.cons.sizeOf_spec", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.take", 1],["List.get?_map", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Array.indexOfAux.proof_1", 1],["Nat.le_succ_of_le", 1],["List.removeNth", 1],["Nat.zero_le", 1],["Nat.add_sub_add_right", 1],["Nat.lt_irrefl", 1],["List.length_concat", 1],["Array.eraseIdxSzAux", 1],["BinaryHeap.heapifyUp", 1],["Nat.pred_le", 1],["List.length_eq_zero", 1],["ite", 1],["List.length_take", 1],["List.ne_nil_of_length_pos", 1],["List.get_of_mem", 1],["trivial", 1],["UnionFind.lt_rankMax", 1],["List.get?_append", 1],["UFModel.Models.push", 1],["Nat.pos_iff_ne_zero", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Nat.sub_lt_left_of_lt_add", 1],["List.get_append_right_aux", 1],["Sigma", 1],["UnionFind.lt_rankMax'", 1],["Nat.succ_sub_succ_eq_sub", 1],["and", 1],["List.mem_cons_of_mem", 1],["List.get_singleton", 1],["List.length_repeat'", 1],["List.get?_append_right", 1],["List.reverse", 1],["UnionFind.rank_lt", 1],["List.map₂", 1],["List.insert_of_mem", 1],["List.eq_of_mem_repeat'", 1],["True.intro", 1]]],
["HMod.hMod", 178, [["Eq", 66],["Eq.refl", 63],["HMod.hMod", 55],["rfl", 50],["Eq.mpr", 50],["OfNat.ofNat", 38],["HMul.hMul", 36],["Nat.gcd", 35],["Nat.mod_lt", 28],["Eq.trans", 25],["congrArg", 24],["congrFun", 22],["Eq.symm", 21],["of_eq_true", 20],["HAdd.hAdd", 18],["LT.lt", 18],["eq_self", 16],["Fin.val", 16],["Nat.gcd_dvd_right", 16],["Nat.gcd_dvd_left", 11],["congr", 11],["Nat.gcd_comm", 11],["Fin.mk", 11],["Nat.dvd_gcd", 11],["HDiv.hDiv", 10],["Fin.size_positive", 9],["Nat.dvd_antisymm", 9],["Dvd.dvd", 8],["Nat.mul_comm", 8],["Nat.succ", 8],["HSub.hSub", 8],["Iff", 8],["Nat.eq_zero_or_pos", 7],["And.intro", 7],["Nat.gcd_zero_left", 7],["Bool.true", 7],["Nat.mod_eq_of_lt", 7],["Nat.mul_zero", 6],["Nat.dvd_trans", 6],["Iff.intro", 6],["eq_true_of_decide", 6],["Nat.coprime", 5],["Fin.isLt", 5],["Eq.mp", 5],["Nat.dvd_mul_left", 5],["Nat.gcd_rec", 5],["iff_self", 5],["Nat.coprime.symm", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_right", 5],["Nat.lcm", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Fin.eq_of_val_eq", 4],["ite_congr", 4],["And", 4],["And.right", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["And.left", 4],["Nat.zero_mod", 4],["Decidable.em", 4],["Nat.coprime.coprime_dvd_left", 4],["dite", 3],["propext", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_zero_right", 3],["Nat.mod_zero", 3],["True", 3],["Nat.gcd.induction", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["Nat.coprime.coprime_dvd_right", 3],["List.cons", 3],["LE.le", 3],["eq_false", 3],["Fin.size_positive'", 3],["Nat.mod_add_mod", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.gcd_one_left", 3],["List.length", 3],["Nat.add_comm", 3],["Nat.mod_eq", 3],["Fin.mul_def", 2],["Nat.mod.inductionOn", 2],["Nat.add_mod_right", 2],["Nat.coprime.gcd_left", 2],["Nat.mod_eq_sub_mod", 2],["Nat.dvd_lcm_left", 2],["Nat.add_mod_mod", 2],["Iff.rfl", 2],["Nat.mod_eq_zero_of_dvd", 2],["Nat.coprime.mul", 2],["Nat.gcd_one_right", 2],["Nat.lcm_zero_left", 2],["Nat.le_refl", 2],["Nat.mul_succ", 2],["Nat.mul_mod_mul_left", 2],["Nat.le_of_dvd", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_lt_succ", 2],["Nat.dvd_mod_iff", 2],["Nat.gcd_mul_right", 2],["Nat.add_mul_mod_self_left", 2],["Or.inl", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["eq_true", 2],["Fin.add_def", 2],["Nat.coprime.pow_left", 2],["Nat.sub_zero", 2],["Nat.gcd_mul_left_left", 2],["of_decide_eq_true", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.add_zero", 2],["if_true", 2],["Fin.ofNat'", 2],["Nat.mul_mod_right", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.zero_le", 2],["Nat.div_mul_cancel", 2],["Nat.zero", 2],["Nat.add_assoc", 2],["if_false", 2],["Nat.sub_add_cancel", 1],["Fin.nsmuls_eq", 1],["Nat.add_sub_cancel", 1],["Nat.le_add_left", 1],["Nat.mul_mod", 1],["Nat.gcd_self", 1],["Nat.mul_div_assoc", 1],["and_self", 1],["Decidable.isTrue", 1],["ite_true", 1],["ite_false", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.dvd_add_iff_left", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.to_digits_core_length", 1],["Fin.one_val", 1],["Fin.modn_lt", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_gcd_self_right_right", 1],["Or.elim", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.strong_rec_on", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["List.nil", 1],["Iff.mp", 1],["Nat.lt_irrefl", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["WellFounded.fix_eq", 1],["Nat.mod_le", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.coprime.gcd_right", 1],["Subsingleton.allEq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Nat.div_eq", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_self", 1],["Nat.lcm_dvd", 1],["trivial", 1],["if_pos", 1],["Nat.coprime_comm", 1],["Nat.mod_one", 1],["Or.inr", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Exists.elim", 1],["Fin.ofNat'_succ", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_mul_left", 1],["Fin.modn_def", 1],["UInt8.val", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_mul", 1],["Nat.mod_mod", 1],["Nat.gcd_div", 1],["Nat.mul_div_cancel_left", 1],["Nat.lt_of_le_of_lt", 1],["Nat.le_trans", 1],["Nat.lt_of_lt_of_le", 1],["Nat.mod_add_div", 1],["Exists", 1],["Nat.coprime_one_left", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.le_of_lt", 1],["implies_congr", 1],["UInt32.ofNat", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_trans", 1],["USize.toNat", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.zero_mul", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.sub_self", 1],["Nat.zero_add", 1],["Nat.dvd_zero", 1],["Unit.unit", 1],["Iff.symm", 1],["Nat.gcd_eq_left_iff_dvd", 1],["zero_lt_of_lt", 1],["Nat.coprime.coprime_mul_right", 1],["lt_of_le_of_lt", 1],["Nat.add_mul_mod_self_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.lt_of_succ_lt_succ", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.coprime_mul_iff_left", 1],["UInt8.toChar_aux", 1],["Or", 1],["Nat.eq_zero_of_zero_dvd", 1],["id", 1],["Nat.dvd_iff_mod_eq_zero", 1],["WellFounded.fix", 1],["ite", 1],["Iff.mpr", 1],["Nat.sub_lt", 1],["Nat.dvd_of_mod_eq_zero", 1],["Fin.mod_def", 1],["Nat.lcm_one_left", 1],["Nat.lt_or_ge", 1],["Nat.isValidChar", 1],["Nat.not_lt_zero", 1],["UInt32.val", 1],["Nat.coprime.gcd_both", 1],["PSigma.mk", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["False.elim", 1]]],
["Exists", 177, [["Exists.intro", 91],["Exists", 66],["Eq", 44],["Iff.intro", 39],["Eq.refl", 34],["rfl", 32],["Eq.symm", 32],["And.intro", 31],["And", 27],["Eq.trans", 22],["congrArg", 19],["funext", 18],["of_eq_true", 18],["Eq.mpr", 17],["Iff", 17],["Membership.mem", 16],["List.cons", 15],["congrFun", 14],["HEq.refl", 14],["iff_self", 14],["propext", 14],["congr", 12],["False", 12],["eq_of_heq", 11],["Option.some", 11],["eq_false", 10],["OfNat.ofNat", 10],["List.nil", 10],["exists_congr", 8],["exists_false", 8],["eq_false'", 7],["True", 7],["Iff.mp", 7],["eq_self", 7],["HAdd.hAdd", 7],["Or", 7],["Or.inr", 6],["Bool.true", 6],["Option.some.injEq", 6],["false_and", 6],["Or.inl", 6],["Not", 6],["Exists.elim", 5],["Nat.cast", 5],["Nonempty.intro", 5],["List.length", 5],["HAppend.hAppend", 5],["dite", 5],["Nonempty", 4],["And.right", 4],["Function.RightInverse.surjective", 4],["Option.none", 4],["PProd.fst", 4],["List.mem_cons_self", 4],["Prod.mk", 4],["absurd", 4],["Eq.mp", 4],["Unit.unit", 4],["eq_true", 4],["List.Mem.tail", 4],["Fin.mk", 4],["Iff.trans", 4],["Array.size", 3],["eq_true_of_decide", 3],["Or.elim", 3],["and_congr", 3],["UnionFind.arr", 3],["List.Mem.head", 3],["Iff.mpr", 3],["Function.bijective.injective", 3],["Function.surjective.comp", 3],["forall_congr", 3],["Classical.choose", 3],["eq_comm", 3],["And.left", 3],["Nat.succ", 3],["Fin.val", 3],["exists_prop", 3],["trivial", 3],["List.get", 3],["List.cons_append", 3],["Decidable.isFalse", 3],["exists_eq_left'", 3],["Function.LeftInverse_inv_fun", 3],["Function.bijective.surjective", 3],["Function.inv_fun_eq", 2],["List.mem_cons_of_mem", 2],["exists_imp_exists", 2],["Function.inv_fun", 2],["and_self", 2],["Decidable.isTrue", 2],["Int.add_comm", 2],["ne_eq", 2],["eq_false_of_decide", 2],["Array.get", 2],["List.not_mem_nil", 2],["List.get?_eq_get", 2],["Decidable", 2],["Function.bijective", 2],["Int.nonneg_def", 2],["List.mem_join", 2],["Subsingleton.elim", 2],["id_eq", 2],["List.exists_mem_of_length_pos", 2],["Option.map_some'", 2],["Subtype.mk", 2],["List.nil_append", 2],["sorryAx", 2],["Subtype.property", 2],["UFNode.parent", 2],["mt", 2],["Function.inv_fun_on_pos", 2],["Function.surj_inv", 2],["exists_eq_right", 2],["HSub.hSub", 2],["not_forall", 2],["Option.mem_def", 2],["UFModel.Models.empty", 2],["true_and", 2],["implies_congr", 2],["List.get?", 2],["UFModel.Models", 2],["Classical.choose_spec", 2],["exists_eq_left", 2],["Function.RightInverse_surj_inv", 2],["UFModel.empty", 2],["not_exists", 2],["Int.le.dest", 2],["Decidable.em", 2],["List.exists_of_erasep", 2],["exists_imp_distrib", 2],["Subtype.val", 2],["UFModel.Models.size_eq", 2],["Bool.false", 2],["Nat.gcd", 2],["Function.surjective.exists", 2],["Nat.add_comm", 2],["Nonempty.elim", 2],["Option.map_none'", 2],["List.map", 2],["List.get_of_mem", 2],["not_not", 2],["Nat.succ_ne_zero", 2],["LT.lt", 2],["Neg.neg", 2],["PSigma.mk", 2],["Option.get", 2],["Option.bind_eq_none", 2],["exists₂_congr", 1],["Function.surjective.of_comp_iff'", 1],["Option.some_get", 1],["Option.decidable_exists_mem.proof_3", 1],["Prod.swap_surjective", 1],["UnionFind.model", 1],["Int.eq_ofNat_of_zero_le", 1],["List.mem_cons", 1],["HMul.hMul", 1],["Function.LeftInverse_surj_inv", 1],["Nat.coprime", 1],["Nat.succ_lt_succ", 1],["Nat.div_mul_cancel", 1],["Int.natAbs", 1],["Int.le.dest_sub", 1],["Fin.isLt", 1],["imp_congr_left", 1],["exists_eq'", 1],["ExistsUnique", 1],["false_iff", 1],["Subtype.coind_injective", 1],["List.erase_eq_erasep", 1],["Function.LeftInverse.RightInverse", 1],["Classical.strongIndefiniteDescription", 1],["Set.univ", 1],["List.mem_map", 1],["Function.inv_fun_on_neg", 1],["Function.extend_def", 1],["Function.injective.of_comp_iff'", 1],["Classical.propDecidable", 1],["List.eq_or_mem_of_mem_cons", 1],["UFModel.push", 1],["exists₃_congr", 1],["Int.sub_eq_add_neg", 1],["List.append_eq_cons_iff", 1],["Option.some_bind", 1],["Int.add_left_comm", 1],["Function.has_LeftInverse.injective", 1],["Prod.ext'", 1],["Function.has_RightInverse.surjective", 1],["Classical.epsilon_spec_aux", 1],["Function.LeftInverse.injective", 1],["nonempty_of_exists", 1],["exists_and_distrib_left", 1],["Quot.inductionOn", 1],["Option.get_some", 1],["Option.isSome_some", 1],["Function.bijective_iff_exists_unique", 1],["List.erase", 1],["Iff.rfl", 1],["Function.injective_id", 1],["Quot.exists_rep", 1],["List.mem_iff_get", 1],["Function.is_partial_inv_left", 1],["UnionFind.findAux.proof_1", 1],["exists_eq", 1],["Int.ofNat_zero_le", 1],["Function.involutive.injective", 1],["Option.some_ne_none", 1],["Nat.succ.injEq", 1],["not_lt_of_ge", 1],["List.length_cons", 1],["dite_congr", 1],["Exists.imp", 1],["decidableBEx.proof_4", 1],["Prod.snd", 1],["add_zero", 1],["Int.NonNeg.mk", 1],["Option.bind", 1],["List.mem_append", 1],["Nat.eq_zero_or_eq_succ_pred", 1],["List.erasep_of_forall_not", 1],["Nat.not_succ_le_zero", 1],["exists_prop_decidable.proof_2", 1],["Int.eq_neg_of_eq_neg", 1],["List.join", 1],["Int.NonNeg", 1],["Nat.coprime_div_gcd_div_gcd", 1],["ExistsUnique.exists", 1],["Option.ne_none_iff_isSome", 1],["not_forall_of_exists_not", 1],["List.mem_bind", 1],["Array.push", 1],["Prod.swap_injective", 1],["Prod.exists", 1],["Function.partial_inv_of_injective", 1],["List.map_cons", 1],["List.exists_mem_cons_of_exists", 1],["Function.extend_apply", 1],["Function.injective.has_LeftInverse", 1],["Prod.fst", 1],["List.forall_mem_nil", 1],["List.Fin.exists_iff", 1],["decidableBEx.proof_2", 1],["Subtype.coe_injective", 1],["or_false", 1],["Function.surjective.of_comp_iff", 1],["List.forall_mem_cons", 1],["Option.none_bind", 1],["Eq.mpr_prop", 1],["Function.partial_inv", 1],["Classical.epsilon_spec", 1],["HDiv.hDiv", 1],["UFNode.mk", 1],["UnionFind.size", 1],["Nat.succ_pos", 1],["forall_congr'", 1],["Prod.map", 1],["not_and", 1],["Function.injective.of_comp_iff", 1],["and_comm", 1],["Prod.swap_LeftInverse", 1],["Int.negSucc", 1],["Option.decidable_exists_mem.proof_2", 1],["Nat.le_add_right", 1],["List.erasep_cons_of_pos", 1],["List.length_pos_of_mem", 1],["Sigma.mk", 1],["List.length_pos_of_ne_nil", 1],["decidable_of_decidable_of_iff", 1],["And.comm", 1],["PSigma", 1],["Option.ne_none_iff_exists", 1],["List.length_singleton", 1],["Function.inv_fun_on_eq", 1],["Sigma", 1],["false_or", 1],["Subtype.coe_eta", 1],["List.or_exists_of_exists_mem_cons", 1],["Classical.axiomOfChoice", 1],["Int.add_assoc", 1],["Nat.gcd_dvd_left", 1],["Function.extend", 1],["List.get_mem", 1],["decidableBEx.proof_3", 1],["Subtype.coind_surjective", 1],["Decidable.not_forall", 1],["UnionFind.model'", 1],["dif_pos", 1],["exists_prop_decidable.proof_1", 1],["List.exists_mem_cons_of", 1],["List.erasep_cons_of_neg", 1],["not.decidable_imp_symm", 1],["List.get?_eq_some", 1],["add_left_neg", 1],["Nat.exists_coprime", 1],["decidableBEx.proof_1", 1],["Function.LeftInverse.surjective", 1],["Int.natAbs_eq", 1],["UFModel.Models.parent_eq", 1],["Function.surjective.of_comp", 1],["id", 1],["Nat.gcd_dvd_right", 1],["Int.neg_nonneg_of_nonpos", 1],["WellFounded.fix", 1],["List.repeat'", 1],["Option.map_eq_map", 1],["unique_of_exists_unique", 1],["Function.involutive.surjective", 1],["UFModel.Models.push", 1],["Option.decidable_exists_mem.proof_1", 1],["Function.surjective", 1],["Or.resolve_left", 1],["List.erasep", 1],["UnionFind.findAux.proof_2", 1],["Function.surjective_id", 1],["Function.injective.comp", 1],["ExistsUnique.intro", 1],["List.cons.injEq", 1],["Function.surjective.has_RightInverse", 1],["Subtype.existsOfSubtype.proof_1", 1],["Subtype", 1],["False.elim", 1],["Nat.pred", 1],["Function.surjective.exists₂", 1],["exists_apply_eq_apply", 1],["Subtype.coind", 1],["congr_arg", 1],["Function.comp", 1]]],
["Or", 175, [["Or.inr", 56],["Or.inl", 54],["Eq", 51],["Or", 48],["Eq.refl", 43],["Iff.intro", 37],["Eq.trans", 28],["congrArg", 28],["of_eq_true", 26],["Eq.symm", 25],["propext", 24],["congrFun", 23],["Eq.mpr", 22],["congr", 21],["eq_self", 19],["rfl", 19],["And.intro", 17],["And", 16],["Iff", 15],["Fin.val", 14],["OfNat.ofNat", 14],["HMod.hMod", 13],["Fin.mk", 13],["List.cons", 12],["eq_false", 12],["Membership.mem", 12],["Iff.rfl", 11],["Or.elim", 11],["Nat.mod_lt", 10],["HAdd.hAdd", 10],["Decidable.em", 10],["False", 10],["dite", 10],["Bool.true", 9],["List.mem_cons", 9],["Not", 9],["Fin.size_positive", 8],["id", 8],["True", 7],["Function.comp", 7],["iff_self", 7],["False.elim", 7],["false_or", 7],["or_comm", 6],["eq_true", 6],["Nat.succ", 6],["Unit.unit", 6],["Iff.mp", 6],["Exists", 6],["absurd", 6],["eq_true_of_decide", 5],["List.nil", 5],["Or.imp_right", 5],["Exists.intro", 5],["Or.imp", 5],["or_assoc", 5],["PProd.fst", 5],["Eq.mp", 5],["HEq.refl", 5],["HMul.hMul", 5],["LT.lt", 5],["List.not_mem_nil", 4],["funext", 4],["or_congr", 4],["LE.le", 4],["HSub.hSub", 4],["ite_congr", 4],["List.length", 4],["Or.comm", 4],["implies_congr", 4],["Decidable.lt_or_eq_of_le", 4],["eq_of_heq", 4],["Iff.trans", 4],["em", 3],["or_true", 3],["And.right", 3],["Or.resolve_left", 3],["HDiv.hDiv", 3],["Fin.size_positive'", 3],["Nat.digitChar", 3],["Or.imp_left", 3],["Nat.toDigitsCore", 3],["Decidable.isFalse", 3],["Neg.neg", 3],["Bool.false", 3],["Iff.symm", 3],["false_and", 3],["trivial", 3],["Nat.zero_le", 3],["of_decide_eq_true", 3],["true_or", 3],["Nat.lt_or_ge", 3],["Decidable.isTrue", 3],["Or.symm", 3],["Classical.em", 3],["And.left", 3],["Decidable.byCases", 2],["forall_congr", 2],["Decidable.not_and_distrib", 2],["lt_or_le", 2],["Nat.succ_mul", 2],["Fin.add_def", 2],["List.nil_append", 2],["or_self", 2],["lt_of_not_ge", 2],["and_self", 2],["Int.NonNeg", 2],["Decidable.or_iff_not_imp_left", 2],["List.mem_insert_iff", 2],["Or.assoc", 2],["Nat.le_of_lt", 2],["not_and_of_not_or_not", 2],["HAppend.hAppend", 2],["lt_trichotomy", 2],["List.mem_cons_self", 2],["UFModel.parent", 2],["And.imp", 2],["dec_em", 2],["Or.swap", 2],["Fin.mul_def", 2],["if_true", 2],["Decidable.imp_iff_not_or", 2],["Decidable.not_or_of_imp", 2],["List.mem_cons_of_mem", 2],["or_false", 2],["Fin.ofNat'", 2],["Array.size", 2],["Decidable.not_not", 2],["dite_congr", 2],["Nonempty.intro", 2],["Int.natAbs", 2],["implies_true", 2],["if_false", 2],["List.cons_append", 2],["GT.gt", 2],["Decidable.decide", 2],["true_and", 2],["eq_false'", 2],["dite_true", 2],["List.mem_append", 2],["Nonempty", 2],["Fin.eq_of_val_eq", 2],["PSum", 1],["and_not_self", 1],["Nat.mod_eq_of_lt", 1],["Int.sub_eq_add_neg", 1],["UInt32.val_eq_of_lt", 1],["UFModel.Agrees.get_eq", 1],["WellFounded.fix_eq", 1],["List.Mem.head", 1],["Iff.refl", 1],["dif_neg", 1],["Iff.mpr", 1],["List.getLast", 1],["sizeOf_nat", 1],["List.nil_union", 1],["Fin.nsmuls_eq", 1],["List.Mem", 1],["or_and_distrib_left", 1],["UFModel.push", 1],["Or.neg_resolve_left", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux.proof_1", 1],["UFModel.Agrees.set", 1],["or_iff_right_of_imp", 1],["Nat.mul_mod", 1],["Option.none", 1],["Nat.lt_by_cases", 1],["exists_false", 1],["List.append_eq_cons_iff", 1],["List.Mem.tail", 1],["Int.ofNat", 1],["ite_true", 1],["Prod.lex_def", 1],["ite_false", 1],["Nat.zero_mod", 1],["Option.some", 1],["le_antisymm", 1],["WellFoundedRelation.rel", 1],["Nat.lt_irrefl", 1],["true_implies", 1],["neg_neg", 1],["Nat.le_succ_of_le", 1],["Fin.ext", 1],["List.getLast_singleton", 1],["Sat.Valuation.satisfies_fmla.mk", 1],["Nat.add_mod_mod", 1],["PSum.inl", 1],["Nat.le_add_right", 1],["Fin.one_val", 1],["dec_em'", 1],["List.get", 1],["Nat.le_refl", 1],["not_exists", 1],["Nat.sub_succ_lt_self", 1],["Subsingleton.allEq", 1],["Nat.pred_succ", 1],["instDecidableXor.proof_4", 1],["Array.isEqv", 1],["dite_false", 1],["Nat.mod_add_mod", 1],["Prod.snd", 1],["UFModel.rank", 1],["Decidable.not_and_iff_or_not", 1],["Nat.not_succ_le_zero", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["List.insert_of_mem", 1],["Nat.not_lt_zero", 1],["Sum", 1],["Prod.Lex", 1],["Int.NonNeg.mk", 1],["decide_eq_true_eq", 1],["List.exists_mem_cons_of_exists", 1],["True.intro", 1],["List.erasep_of_forall_not", 1],["Int.neg_add", 1],["Ne.symm", 1],["lt_of_le_of_ne", 1],["and_true", 1],["and_false", 1],["instDecidableXor.proof_2", 1],["Nat.eq_or_lt_of_le", 1],["Prod.fst", 1],["Decidable.le_iff_lt_or_eq", 1],["Decidable", 1],["GE.ge", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["mt", 1],["Nat.eq_zero_of_add_eq_zero_left", 1],["Nat.one_pos", 1],["Decidable.and_iff_not_or_not", 1],["Bool.and_true", 1],["iff_iff_implies_and_implies", 1],["UInt32.ofNat", 1],["Ne", 1],["Nat.lt_of_succ_lt_succ", 1],["instDecidableXor.proof_3", 1],["UInt32.val", 1],["Sum.inl", 1],["Nat.le_antisymm", 1],["ne_of_lt", 1],["by_contra", 1],["List.filterAux", 1],["And.comm", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["le_of_lt_or_eq", 1],["instDecidableOr.proof_1", 1],["Nat.add", 1],["not_and", 1],["Decidable.or_iff_not_and_not", 1],["List.insert_of_not_mem", 1],["and_or_distrib_left", 1],["And.imp_right", 1],["LinearOrder.le_total", 1],["and_congr", 1],["Nat.to_digits_core_length", 1],["Decidable.iff_iff_not_or_and_or_not", 1],["Sat.Fmla.reify.mk", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_trans", 1],["PSum.inr", 1],["Sum.inr", 1],["Nat.succ_le_succ", 1],["Subsingleton.elim", 1],["Decidable.or_iff_not_imp_right", 1],["eq_comm", 1],["List.or_exists_of_exists_mem_cons", 1],["List.exists_mem_cons_of", 1],["le_or_lt", 1],["List.insert", 1],["List.getLast_cons", 1],["lt_of_le_not_le", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["ne_of_gt", 1],["System.Platform.getNumBits", 1],["List.exists_of_erasep", 1],["Int.natAbs_eq", 1],["List.cons.injEq", 1],["or_iff_left_of_imp", 1],["List.reverseAux", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["le_total", 1],["UFModel.Agrees.push", 1],["false_implies", 1],["id_eq", 1],["instDecidableXor.proof_1", 1],["not_or_distrib", 1],["imp_intro", 1],["Subtype.property", 1],["UInt8.toChar_aux", 1],["Option.lift_or_get", 1],["em'", 1],["Decidable.imp_or_distrib", 1],["Nat.add_comm", 1],["Prod.Lex.left", 1],["Int.add_comm", 1],["List.cons_union", 1],["WellFounded.fix", 1],["List", 1],["Array.isEqvAux_self", 1],["Nat.lt_trichotomy", 1],["Nat.sub_lt", 1],["lt_irrefl", 1],["Nat.isValidChar", 1],["List.cons_ne_nil", 1],["Sat.Fmla.reify.prop", 1],["Nat.lt_eq", 1],["List.mem_reverse", 1],["eq_false_of_decide", 1],["Int.nonneg_or_nonneg_neg", 1],["and", 1],["Array.get", 1],["List.get_singleton", 1],["Decidable.imp_or_distrib'", 1],["Fin.isLt", 1],["lt_or_gt_of_ne", 1],["Decidable.iff_iff_and_or_not_and_not", 1],["Sat.Valuation.satisfies_fmla.prop", 1],["Prod.Lex.right", 1],["Nat.le_total", 1],["List.set", 1],["or_iff_left_iff_imp", 1]]],
["Option", 173, [["Option.some", 81],["Option.none", 76],["Eq", 58],["Option", 49],["Unit.unit", 39],["Eq.refl", 30],["rfl", 28],["Eq.trans", 27],["Eq.symm", 27],["congrArg", 26],["Pure.pure", 24],["of_eq_true", 24],["ite", 23],["Bool.true", 22],["congrFun", 21],["OfNat.ofNat", 19],["Bind.bind", 18],["eq_self", 18],["PProd.fst", 18],["List.get?", 15],["congr", 13],["Prod.mk", 13],["dite", 12],["Functor.map", 11],["Option.map", 11],["Fin.mk", 11],["funext", 11],["LT.lt", 11],["List.cons", 10],["propext", 10],["List.nil", 10],["Iff", 9],["Exists", 8],["PUnit.unit", 8],["HAdd.hAdd", 8],["Option.map_some'", 8],["id", 8],["Array.size", 8],["Eq.mpr", 7],["BEq.beq", 7],["Option.map_none'", 7],["HAppend.hAppend", 7],["iff_self", 7],["OptionT.mk", 7],["Option.bind", 7],["Fin", 6],["id_eq", 6],["HEq.refl", 5],["HSub.hSub", 5],["Option.mem_def", 5],["List", 5],["liftM", 5],["MProd.mk", 4],["Iff.intro", 4],["MProd.fst", 4],["Nat", 4],["Array.get", 4],["Bool", 4],["Decidable.em", 4],["Prod", 4],["MProd.snd", 4],["Option.some_bind", 4],["List.get?_eq_get", 4],["ForIn.forIn", 4],["Option.none_bind", 4],["ForInStep.done", 4],["List.get", 4],["eq_false", 4],["List.length", 4],["Bool.false", 4],["Id.run", 4],["Not", 4],["ForInStep.yield", 4],["eq_false'", 3],["Eq.mp", 3],["implies_congr", 3],["And", 3],["False", 3],["decide_eq_false", 3],["forall_congr", 3],["Nat.zero", 3],["Iff.mpr", 3],["False.elim", 3],["exists_eq_right", 3],["Fin.val", 3],["True", 3],["eq_false_of_decide", 3],["Option.bind_eq_none", 2],["MProd", 2],["Function.comp", 2],["decide_eq_true_iff", 2],["LE.le", 2],["Membership.mem", 2],["if_pos", 2],["exists_prop", 2],["Array.push", 2],["List.foldl", 2],["ite_congr", 2],["Nat.le_of_succ_le_succ", 2],["Nat.succ", 2],["System.FilePath.toString", 2],["eq_true_of_decide", 2],["List.length_cons", 2],["System.FilePath.pathSeparators", 2],["exists_eq_left'", 2],["false_and", 2],["BinaryHeap.max", 2],["ForInStep", 2],["Option.some.injEq", 2],["exists_false", 2],["List.get?_len_le", 2],["OptionT.fail", 2],["MonadExceptOf.mk", 2],["List.contains", 2],["List.modifyNth", 2],["HMul.hMul", 2],["Option.map_map", 2],["List.get?_modifyNth", 2],["Array.findSomeRevM?", 2],["List.cons_append", 2],["Array.get?", 2],["Option.bind_eq_some", 2],["not_not", 2],["not_forall", 2],["Iff.mp", 2],["and", 2],["System.FilePath.fileName", 2],["List.set_eq_modifyNth", 2],["BinaryHeap.arr", 2],["List.set", 2],["Tactic.NormCast.NormCastExtension.down", 1],["Array.findSomeM?", 1],["ToString.mk", 1],["Tactic.NormCast.proveEqUsing", 1],["ToBool.mk", 1],["Subtype.val", 1],["LT.mk", 1],["MonadState.get", 1],["Membership.mk", 1],["Fin.underflowingSub", 1],["Function.comp_apply", 1],["Nat.le_of_not_lt", 1],["OptionT.tryCatch", 1],["false_iff", 1],["List.map₂Right", 1],["dif_neg", 1],["Fin.overflowingAdd", 1],["List.getLast", 1],["List.map", 1],["Nonempty", 1],["Nat.succ.inj", 1],["OptionT.lift", 1],["LawfulFunctor.mk", 1],["Classical.choice", 1],["Option.pmap.proof_1", 1],["Classical.ofNonempty", 1],["Option.format", 1],["UInt64", 1],["StateRefT'.run'", 1],["Decidable.isTrue", 1],["Tactic.NormCast.normCastExt", 1],["List.get_cons_zero", 1],["mixHash", 1],["decide_eq_true", 1],["List.get?_modifyNth_eq", 1],["instDecidableEqNat", 1],["BEq.mk", 1],["Tactic.NormCast.CoeFnInfo.numArgs", 1],["Option.maybe", 1],["Substring.isNat", 1],["Iff.rfl", 1],["Nat.add_eq", 1],["List.map₂Left", 1],["List.mem_iff_get", 1],["Tactic.NormCast.getCoeFnInfo?", 1],["Option.pbind.proof_1", 1],["Option.map_id", 1],["Or", 1],["Alternative.mk", 1],["Option.eq_none_iff_forall_not_mem", 1],["BinaryHeap.heapifyDown", 1],["Array.findIdx?", 1],["BinaryHeap.replaceMax.proof_2", 1],["Nat.not_lt_of_le", 1],["MonadControl.mk", 1],["not_exists", 1],["Array.isEmpty", 1],["Exists.intro", 1],["Monad.mk", 1],["MonadExcept.tryCatch", 1],["BinaryHeap.size_pos_of_max", 1],["Option.lift_or_get", 1],["Sum.inl", 1],["Or.inl", 1],["Mathlib.Tactic.Lint.withSimpTheoremInfos", 1],["Or.inr", 1],["List.get?_set_eq", 1],["DoResultPR.return", 1],["eq_true", 1],["reprArg", 1],["mt", 1],["List.Fin.exists_iff", 1],["Option.some.inj", 1],["Array.indexOfAux.proof_2", 1],["instLawfulFunctorOptionInstFunctorOption.proof_1", 1],["Classical.em", 1],["Option.toBool", 1],["Inhabited.mk", 1],["CoeTail.mk", 1],["le_of_not_lt", 1],["ToString.toString", 1],["BinaryHeap", 1],["Functor.mk", 1],["Array.binSearchAux", 1],["Tactic.NormCast.coeExt", 1],["Nat.add", 1],["not_and", 1],["Nat.lt_succ_iff", 1],["Classical.byContradiction", 1],["tryCatchThe", 1],["Option.orElse", 1],["List.map₂Right'", 1],["Fin.overflowingMul", 1],["Array.indexOfAux", 1],["Nat.lt_of_not_le", 1],["throwThe", 1],["Sum.inr", 1],["Nat.add_zero", 1],["not_false_iff", 1],["Subsingleton.elim", 1],["not_le", 1],["Decidable.isFalse", 1],["or", 1],["max", 1],["not_lt", 1],["BinaryHeap.replaceMax.proof_1", 1],["id_map'", 1],["Decidable", 1],["System.FilePath.mk", 1],["List.map₂Left'", 1],["Nat.not_le_of_lt", 1],["Array.set", 1],["dif_pos", 1],["PUnit", 1],["Array.foldl", 1],["Option.getD", 1],["Array.findM?", 1],["List.get?_eq_some", 1],["if_neg", 1],["Hashable.hash", 1],["DoResultPR.pure", 1],["BinaryHeap.popMax", 1],["Array.filterMap", 1],["Array.indexOfAux.proof_1", 1],["Hashable.mk", 1],["Nat.add_sub_add_right", 1],["cond", 1],["min", 1],["MonadFunctor.mk", 1],["HOrElse.hOrElse", 1],["Array.findRevM?", 1],["Array.data", 1],["WellFounded.fix", 1],["List.toArray", 1],["MonadLift.mk", 1],["ne_eq", 1],["BinaryHeap.mk", 1],["List.get?_modifyNth_ne", 1],["EStateM.run", 1],["List.get_of_mem", 1],["Array", 1],["Decidable.decide", 1],["MonadStateOf.set", 1],["List.getLast?.proof_1", 1],["Substring.foldl", 1],["if_false", 1],["OptionT.orElse", 1],["FloatArray.get", 1],["OptionT.run", 1],["Option.lt", 1],["Array.toList", 1],["Option.mapM", 1],["Classical.choose", 1],["FloatArray.size", 1],["Array.findIdx?.loop.proof_1", 1],["Tactic.NormCast.CoeFnInfo.coercee", 1],["addParenHeuristic", 1],["OrElse.mk", 1],["congr_arg", 1],["Nat.Linear.fixedVar", 1]]],
["PUnit", 171, [["Bind.bind", 94],["Pure.pure", 82],["Bool.true", 54],["ite", 52],["Eq", 50],["PUnit.unit", 46],["List.nil", 45],["OfNat.ofNat", 40],["List.toArray", 37],["Unit.unit", 35],["List.cons", 32],["HAppend.hAppend", 28],["liftM", 25],["Option.none", 22],["Prod.mk", 17],["Bool.false", 17],["MonadExcept.throw", 15],["ForInStep.yield", 15],["ForIn.forIn", 15],["Option.some", 13],["ForInStep", 11],["Unit", 10],["HSub.hSub", 9],["Bool", 9],["PProd.fst", 9],["Prod.snd", 8],["inferInstanceAs", 8],["Prod", 8],["cond", 8],["Array.append", 8],["Array.toList", 8],["Array.size", 8],["Prod.fst", 7],["BEq.beq", 7],["Array.push", 7],["Tactic.NormCast.CoeFnType.coe", 6],["Option", 5],["Array", 5],["Tactic.NormCast.normCastExt", 5],["Functor.map", 5],["Tactic.NormCast.CoeFnInfo.mk", 5],["Array.map", 5],["ForInStep.done", 5],["Array.isEmpty", 5],["Option.getD", 4],["MProd.snd", 4],["Tactic.Ring.HornerExpr.e", 4],["MProd.mk", 4],["GT.gt", 4],["Array.mapM", 4],["MonadExcept.tryCatch", 4],["Nat", 4],["EStateM", 4],["Alternative.failure", 4],["HAdd.hAdd", 4],["PUnit", 4],["EmptyCollection.emptyCollection", 4],["MProd.fst", 4],["Tactic.Ring.mkAppCS", 4],["Tactic.NormCast.coeDelaborator", 4],["Function.comp", 4],["Tactic.Ring.HornerExpr.xadd'", 3],["Tactic.NormCast.pushCastExt", 3],["not", 3],["Tactic.Ring.RingM", 3],["Tactic.Ring.HornerExpr.const", 3],["Tactic.NormCast.NormCastExtension.up", 3],["MProd", 3],["ToString.toString", 3],["Tactic.NormCast.derive", 3],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 3],["List", 3],["LT.lt", 3],["Tactic.NormCast.NormCastExtension.down", 3],["Array.qsort", 2],["MonadReader.read", 2],["StateRefT'.run'", 2],["Tactic.TryThis.delabToRefinableSyntax", 2],["Tactic.NormCast.CoeFnInfo.numArgs", 2],["Tactic.NormCast.proveEqUsingDown", 2],["Tactic.NormCast.coeExt", 2],["List.mapM", 2],["Array.getOp", 2],["Tactic.Ring.Cache.α", 2],["Monad", 2],["Classical.ofNonempty", 2],["Tactic.NormCast.countCoes", 2],["MonadFinally", 2],["DoResultPR.return", 2],["Subarray.stop", 2],["Sum.inl", 2],["Mathlib.Tactic.Lint.getDeclsInCurrModule", 2],["modify", 2],["PProd.snd", 2],["Mathlib.Tactic.Lint.printWarnings", 2],["Option.map", 2],["Empty", 2],["Subarray.as", 2],["Nonempty", 2],["Subarray.start", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Inhabited.default", 2],["Array.foldl", 2],["System.FilePath.metadata", 2],["DoResultPR.pure", 2],["Tactic.TryThis.addSuggestion", 2],["Tactic.NormCast.NormCastExtension.squash", 2],["Tactic.Ring.HornerExpr", 2],["Tactic.NormCast.countHeadCoes", 2],["Tactic.Ring.State.mk", 2],["ToString.mk", 2],["PUnit.subsingleton", 2],["Decidable.decide", 2],["SeqRight.seqRight", 2],["Array.filterM", 2],["MonadState.get", 2],["Tactic.instNonemptyDeclCache", 2],["and", 2],["Tactic.NormCast.isNumeral?", 2],["Mathlib.Tactic.Sat.buildClause", 2],["Tactic.NormCast.CoeFnInfo.coercee", 2],["Mathlib.Tactic.Lint.NamedLinter.name", 2],["Id", 1],["Array.filterMapM", 1],["Except.toBool", 1],["Mathlib.Tactic.Sat.buildProofStep", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Tactic.NormCast.addCoeDelaborator", 1],["Tactic.Ring.Cache.mk", 1],["MonadState.modifyGet", 1],["Tactic.NormCast.proveEqUsing", 1],["Tactic.NormCast.splittingProcedure", 1],["Mathlib.Tactic.Sat.Clause", 1],["HMul.hMul", 1],["MonadLift.mk", 1],["Tactic.NormCast.upwardAndElim", 1],["Mathlib.Tactic.Lint.Linter.errorsFound", 1],["Mathlib.Tactic.Lint.sortResults", 1],["Mathlib.Tactic.Lint.printWarning", 1],["Array.foldrM", 1],["Tactic.Ring.addAtom", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["Mathlib.Tactic.Lint.getLinter", 1],["OptionT.tryCatch", 1],["Stream.next?", 1],["Subarray", 1],["Mathlib.Eval.evalExpr", 1],["Tactic.NormCast.addMove", 1],["bne", 1],["Array.find?", 1],["Eq.refl", 1],["MonadExceptOf.mk", 1],["Mathlib.Tactic.Sat.buildClauses", 1],["Decidable.isTrue", 1],["Array.extract", 1],["List.mmap'", 1],["Tactic.Cache.get", 1],["Tactic.NormCast.countInternalCoes", 1],["List.splitAt", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Tactic.Ring.Cache.cs", 1],["Mathlib.Tactic.Sat.buildProof", 1],["Mathlib.Tactic.Sat.buildConj", 1],["Tactic.NormCast.Label.elim", 1],["Mathlib.WhatsNew.diffExtension", 1],["evalIntrov.introsDep", 1],["Tactic.NormCast.numeralToCoe", 1],["Mathlib.Prelude.Rename.getRenameMap", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Tactic.NormCast.getCoeFnInfo?", 1],["EStateM.Result.ok", 1],["Tactic.NormCast.Label.move", 1],["Mathlib.Tactic.Lint.isAutoDecl", 1],["Tactic.Cache.mk", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.groupedByFilename", 1],["Except", 1],["List.filter", 1],["Tactic.Ring.State.numAtoms", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Task", 1],["Inhabited", 1],["List.any", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["List.foldl", 1],["List.anyM", 1],["Array.forRevM", 1],["Tactic.Find.findDeclsPerHead", 1],["Tactic.NormCast.addElim", 1],["readThe", 1],["Mathlib.Tactic.Sat.fromLRATAux", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["List.length", 1],["Mathlib.Prelude.Rename.renameExtension", 1],["Subsingleton.intro", 1],["EStateM.dummySave", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["Tactic.DeclCache.get", 1],["Mathlib.Tactic.Lint.getLinters", 1],["Sum", 1],["MonadExcept.orElse", 1],["Option.get!", 1],["or", 1],["Tactic.Ring.State.atoms", 1],["Tactic.NormCast.isCoeOf?", 1],["Tactic.NormCast.addSquash", 1],["Tactic.TryThis.replaceMVarsByUnderscores", 1],["Mathlib.Tactic.Lint.withSimpTheoremInfos", 1],["Tactic.Cache", 1],["And", 1],["reprArg", 1],["OptionT.fail", 1],["Tactic.Ring.Cache.univ", 1],["DoResultPR", 1],["GE.ge", 1],["StateRefT'.run", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["MonadExceptOf", 1],["andM", 1],["Tactic.NormCast.classifyType", 1],["Array.filterMap", 1],["Task.get", 1],["Inhabited.mk", 1],["id", 1],["Tactic.instNonemptyCache.proof_1", 1],["EStateM.dummyRestore", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["Id.run", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["Tactic.NormCast.mkCoe", 1],["Sum.inr", 1],["Array.get?", 1],["Array.forM", 1],["ToStream.toStream", 1],["Mathlib.Tactic.Lint.trieElements", 1],["MonadStateOf.set", 1],["Tactic.NormCast.CoeFnInfo.type", 1],["Not", 1],["Mathlib.Tactic.Lint.Linter.noErrorsFound", 1],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.prove", 1],["Task.Priority.default", 1],["MonadStateOf.modifyGet", 1],["Mathlib.Tactic.Lint.isConditionalHyps", 1],["Array.foldlM", 1],["EStateM.Backtrackable.mk", 1],["Option.all", 1],["Mathlib.Tactic.Sat.buildReify", 1],["Mathlib.Prelude.Rename.addNameAlignment", 1],["Option.mapM", 1],["Tactic.NormCast.Label", 1],["OrElse.mk", 1],["Functor.mapConst", 1]]],
["EStateM.Result", 164, [["Bind.bind", 89],["Pure.pure", 74],["Bool.true", 55],["ite", 52],["Eq", 51],["List.nil", 45],["OfNat.ofNat", 39],["List.toArray", 37],["PUnit.unit", 35],["List.cons", 32],["Unit.unit", 30],["HAppend.hAppend", 28],["liftM", 25],["Option.none", 23],["Bool.false", 17],["Prod.mk", 16],["MonadExcept.throw", 15],["ForIn.forIn", 14],["Option.some", 14],["ForInStep.yield", 14],["inferInstanceAs", 12],["EStateM.Result.ok", 12],["EStateM.Result", 11],["ForInStep", 10],["Bool", 9],["EStateM.Result.error", 9],["Prod", 9],["Array.size", 8],["cond", 8],["Array.append", 8],["HSub.hSub", 8],["Prod.snd", 8],["Array.toList", 8],["BEq.beq", 7],["Array.push", 7],["EStateM", 7],["Prod.fst", 7],["Tactic.NormCast.CoeFnType.coe", 6],["Unit", 6],["Functor.map", 5],["Array.isEmpty", 5],["Tactic.NormCast.normCastExt", 5],["Array.map", 5],["ForInStep.done", 5],["Option", 5],["Tactic.NormCast.CoeFnInfo.mk", 5],["Function.comp", 4],["MonadExcept.tryCatch", 4],["Tactic.Ring.HornerExpr.e", 4],["MProd.mk", 4],["Monad", 4],["MProd.snd", 4],["Array.mapM", 4],["Inhabited.default", 4],["MProd.fst", 4],["Nat", 4],["Tactic.Ring.mkAppCS", 4],["HAdd.hAdd", 4],["EmptyCollection.emptyCollection", 4],["Tactic.NormCast.coeDelaborator", 4],["ToString.toString", 4],["Option.getD", 4],["Array", 4],["GT.gt", 4],["Tactic.NormCast.NormCastExtension.down", 3],["not", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 3],["EStateM.Backtrackable.restore", 3],["Alternative.failure", 3],["Tactic.NormCast.pushCastExt", 3],["PProd.fst", 3],["Tactic.Ring.HornerExpr.const", 3],["MProd", 3],["List", 3],["Empty", 3],["EStateM.Backtrackable.save", 3],["Tactic.NormCast.NormCastExtension.up", 3],["Tactic.Ring.RingM", 3],["Tactic.NormCast.derive", 3],["LT.lt", 3],["MonadState.get", 2],["DoResultPR.return", 2],["Array.getOp", 2],["Classical.ofNonempty", 2],["MonadLift.mk", 2],["Tactic.Ring.Cache.α", 2],["Inhabited", 2],["Inhabited.mk", 2],["Tactic.NormCast.coeExt", 2],["Mathlib.Tactic.Lint.NamedLinter.name", 2],["MonadReader.read", 2],["StateRefT'.run'", 2],["Tactic.TryThis.delabToRefinableSyntax", 2],["List.mapM", 2],["Mathlib.Tactic.Lint.getDeclsInCurrModule", 2],["modify", 2],["Array.qsort", 2],["Mathlib.Tactic.Lint.printWarnings", 2],["Option.map", 2],["Sum.inl", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Nonempty", 2],["MonadFinally", 2],["Array.foldl", 2],["System.FilePath.metadata", 2],["DoResultPR.pure", 2],["Array.filterM", 2],["Tactic.NormCast.NormCastExtension.squash", 2],["Tactic.Ring.HornerExpr", 2],["Tactic.instNonemptyDeclCache", 2],["Tactic.Ring.State.mk", 2],["Mathlib.Tactic.Sat.buildClause", 2],["MonadExceptOf", 2],["Decidable.decide", 2],["Tactic.TryThis.addSuggestion", 2],["Tactic.NormCast.isNumeral?", 2],["Tactic.NormCast.countHeadCoes", 2],["Tactic.NormCast.countCoes", 2],["PProd.snd", 2],["and", 2],["Tactic.NormCast.CoeFnInfo.coercee", 2],["Tactic.NormCast.CoeFnInfo.numArgs", 2],["Tactic.NormCast.proveEqUsingDown", 2],["OrElse.mk", 2],["EStateM.orElse", 1],["Tactic.Ring.Cache.mk", 1],["EStateM.set", 1],["Tactic.NormCast.proveEqUsing", 1],["Tactic.NormCast.splittingProcedure", 1],["Mathlib.Tactic.Lint.getLinter", 1],["HMul.hMul", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["EStateM.modifyGet", 1],["Stream.next?", 1],["Mathlib.Tactic.Lint.sortResults", 1],["Subarray", 1],["Mathlib.Eval.evalExpr", 1],["Tactic.Ring.addAtom", 1],["Array.extract", 1],["bne", 1],["MonadExceptOf.mk", 1],["Eq.refl", 1],["Tactic.NormCast.numeralToCoe", 1],["Tactic.NormCast.addMove", 1],["Mathlib.Tactic.Lint.printWarning", 1],["evalIntrov.introsDep", 1],["Tactic.NormCast.countInternalCoes", 1],["EStateM.tryCatch", 1],["MonadFinally.mk", 1],["Mathlib.Tactic.Sat.buildClauses", 1],["Tactic.Ring.Cache.cs", 1],["Mathlib.Tactic.Sat.buildProof", 1],["Tactic.Cache.get", 1],["Tactic.NormCast.Label.elim", 1],["List.splitAt", 1],["Mathlib.WhatsNew.diffExtension", 1],["MonadStateOf.mk", 1],["Task", 1],["Mathlib.Tactic.Sat.buildConj", 1],["Mathlib.Tactic.Lint.isAutoDecl", 1],["Tactic.NormCast.Label.move", 1],["Tactic.Ring.State.numAtoms", 1],["List.filter", 1],["List.anyM", 1],["Mathlib.Prelude.Rename.getRenameMap", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Tactic.NormCast.getCoeFnInfo?", 1],["Tactic.NormCast.Label.squash", 1],["Tactic.Ring.State.atoms", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["Tactic.Cache.mk", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.groupedByFilename", 1],["Except", 1],["Tactic.NormCast.addElim", 1],["Option.get!", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Mathlib.Tactic.Lint.getLinters", 1],["Sum", 1],["List.any", 1],["EStateM.throw", 1],["And", 1],["Tactic.Find.findDeclsPerHead", 1],["Monad.mk", 1],["readThe", 1],["Mathlib.Tactic.Sat.fromLRATAux", 1],["EStateM.get", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["List.length", 1],["Mathlib.Prelude.Rename.renameExtension", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["Tactic.DeclCache.get", 1],["Tactic.TryThis.replaceMVarsByUnderscores", 1],["Mathlib.Tactic.Lint.withSimpTheoremInfos", 1],["MonadExcept.orElse", 1],["reprArg", 1],["or", 1],["Mathlib.Tactic.Sat.Clause", 1],["Tactic.NormCast.isCoeOf?", 1],["Tactic.NormCast.addSquash", 1],["Tactic.instNonemptyCache.proof_1", 1],["Tactic.Cache", 1],["DoResultPR", 1],["PUnit", 1],["GE.ge", 1],["Tactic.Ring.Cache.univ", 1],["Sum.inr", 1],["STWorld.mk", 1],["StateRefT'.run", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["EST", 1],["Option.mapM", 1],["andM", 1],["Array.filterMap", 1],["Tactic.NormCast.classifyType", 1],["Task.get", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["id", 1],["Id.run", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["Tactic.NormCast.mkCoe", 1],["Mathlib.Tactic.Sat.buildProofStep", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["ToStream.toStream", 1],["Array.get?", 1],["Mathlib.Tactic.Lint.Linter.noErrorsFound", 1],["Mathlib.Tactic.Lint.isConditionalHyps", 1],["MonadStateOf.set", 1],["Tactic.NormCast.CoeFnInfo.type", 1],["Not", 1],["Mathlib.Tactic.Sat.buildReify", 1],["Mathlib.Prelude.Rename.addNameAlignment", 1],["Tactic.NormCast.prove", 1],["Task.Priority.default", 1],["Array.find?", 1],["Tactic.NormCast.Label", 1],["Array.filterMapM", 1],["Option.all", 1],["Except.toBool", 1],["Mathlib.Tactic.Lint.Linter.errorsFound", 1],["Tactic.NormCast.upwardAndElim", 1],["Tactic.NormCast.addCoeDelaborator", 1],["ToString.mk", 1]]],
["Prod", 164, [["Prod.mk", 80],["List.nil", 43],["Prod", 39],["Eq", 34],["OfNat.ofNat", 33],["List.cons", 30],["PProd.fst", 23],["Bool.true", 21],["Eq.trans", 20],["Pure.pure", 20],["congrArg", 20],["Bind.bind", 19],["HAdd.hAdd", 19],["Unit.unit", 18],["congrFun", 18],["of_eq_true", 17],["congr", 16],["ite", 16],["eq_self", 15],["List", 15],["Eq.refl", 15],["cond", 14],["HAppend.hAppend", 13],["Prod.snd", 12],["Eq.symm", 12],["HMul.hMul", 12],["HSub.hSub", 11],["Prod.fst", 11],["funext", 10],["Nat.Linear.Poly", 10],["PUnit.unit", 10],["Nat.Linear.Poly.denote", 9],["Option.none", 9],["Option.some", 9],["List.toArray", 9],["Eq.mpr", 9],["Nat.add", 9],["cond_true", 8],["cond_false", 8],["ForIn.forIn", 8],["Classical.em", 8],["Bool.of_not_eq_true", 8],["Nat.add_comm", 8],["ForInStep.yield", 8],["Nat.zero_add", 7],["List.reverse", 7],["Nat.add_eq", 7],["Nat.blt", 7],["Nat", 7],["Nat.Linear.Var.denote", 7],["rfl", 7],["Nat.mul_eq", 7],["Array.size", 6],["Option", 6],["LE.le", 6],["BEq.beq", 6],["LT.lt", 6],["Array.push", 6],["Nat.Linear.Poly.denote_eq", 5],["Nat.Linear.Poly.denote_le", 5],["Prod.map", 5],["Array", 5],["Nat.add_left_comm", 5],["Nat.Linear.hugeFuel", 5],["liftM", 5],["Decidable.decide", 5],["ForInStep", 5],["prod_map", 5],["MonadState.get", 4],["Nat.Linear.Expr.toPoly", 4],["Nat.Linear.Poly.denote_append", 4],["dite", 4],["Id", 4],["MProd.mk", 3],["Tactic.Ring.mkAppCS", 3],["ULift.down", 3],["BinaryHeap.max", 3],["Nat.Linear.Poly.cancelAux", 3],["ULift.up", 3],["absurd", 3],["Eq.mp", 3],["Nat.Linear.Poly.insertSorted", 3],["Bool", 3],["WellFoundedRelation.rel", 3],["Nat.mul", 3],["eq_true_of_decide", 3],["MProd.snd", 3],["Tactic.Ring.HornerExpr.e", 3],["Tactic.Ring.HornerExpr.const", 3],["Fin.val", 3],["Fin.mk", 3],["Iff.intro", 3],["MonadStateOf.set", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["and", 3],["Array.set", 3],["And", 3],["MProd.fst", 3],["Nat.Linear.Expr.denote", 3],["beq_self_eq_true", 2],["BinaryHeap.heapifyDown", 2],["Nat.sub_eq", 2],["Nat.succ", 2],["Subtype.val", 2],["Nat.add_assoc", 2],["Function.comp_apply", 2],["StdGen", 2],["Array.swap!", 2],["HMod.hMod", 2],["Id.run", 2],["Bool.false", 2],["Function.comp", 2],["Nat.Linear.fixedVar", 2],["ReprTuple.reprTuple", 2],["randNat", 2],["Inhabited.default", 2],["StdGen.mk", 2],["Nat.Linear.Expr.denote_toPoly", 2],["EmptyCollection.emptyCollection", 2],["Nonempty", 2],["Fin", 2],["Tactic.Ring.RingM", 2],["Tactic.instNonemptyDeclCache", 2],["Array.get!", 2],["Nat.Linear.Poly.combineAux", 2],["List.append_nil", 2],["List.map", 2],["List.splitAt", 2],["List.map₂Left'", 2],["PProd.snd", 2],["propext", 2],["BinaryHeap.arr", 2],["BinaryHeap.size_pos_of_max", 2],["eq_true", 2],["Bool.and_self", 2],["BinaryHeap", 2],["HDiv.hDiv", 2],["Nat.Linear.Poly.denote_reverse", 2],["List.reverse_cons", 2],["WellFoundedRelation.mk", 2],["RandG", 2],["GT.gt", 2],["Array.foldl", 2],["List.nil_append", 2],["repr", 2],["Nonempty.intro", 2],["id", 2],["BinaryHeap.mk", 2],["Tactic.Ring.HornerExpr", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["RandomGen.range", 2],["MonadReader.read", 1],["Array.zipWith", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["decEq", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Tactic.Ring.addAtom", 1],["Exists", 1],["Array.mapM", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Sum.inl", 1],["Int.toNat", 1],["Nat.mul_comm", 1],["BEq.mk", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Prod.lex", 1],["ToString.toString", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["List.map₂Right'", 1],["Sum.inr", 1],["instDecidableEqProd.proof_3", 1],["Nat.add_le_add_left", 1],["sizeOf_nat", 1],["Random.random", 1],["Prod.map_snd", 1],["Mathlib.Tactic.Sat.buildClause", 1],["UInt64", 1],["Decidable.isTrue", 1],["BoundedRandom.randomR", 1],["MonadExcept.tryCatch", 1],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 1],["SeqLeft.seqLeft", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["List.partitionAux", 1],["StdGen.s1", 1],["List.zipWith", 1],["Mathlib.Tactic.Sat.buildConj", 1],["Nat.sub", 1],["Tactic.Ring.Cache.α", 1],["Stream.mk", 1],["RandomGen.next", 1],["forall_congr", 1],["Mathlib.Tactic.Lint.trieElements", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Nat.sub_succ_lt_self", 1],["List.spanAux", 1],["List.zip", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Tactic.Cache.mk", 1],["Nat.one_mul", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Nat.mul_one", 1],["Decidable", 1],["Mathlib.Tactic.Lint.NamedLinter.name", 1],["Nat.Linear.Poly.norm", 1],["ULift", 1],["Nat.Linear.Poly.denote_mul", 1],["BinaryHeap.replaceMax.proof_2", 1],["ForInStep.done", 1],["Prod.Lex", 1],["Array.isEmpty", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Prod.map_fst", 1],["Prod.lex.proof_1", 1],["instLawfulBEqProdInstBEqProd.proof_1", 1],["Inhabited.mk", 1],["instNonemptyProd.proof_1", 1],["Nat.Linear.Poly.mul", 1],["instSubsingletonStateM.proof_1", 1],["flip", 1],["BinaryHeap.insertExtractMax.proof_2", 1],["Nat.mul_assoc", 1],["Prod.ext'", 1],["MProd", 1],["inferInstanceAs", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["List.length", 1],["LawfulBEq.mk", 1],["Prod.rprod.proof_1", 1],["Or", 1],["Nat.Linear.Poly.denote_combine", 1],["Tactic.Ring.HornerExpr.xadd", 1],["Function.HasUncurry.mk", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["Subsingleton.intro", 1],["And.intro", 1],["List.enumFrom", 1],["Fin.ofNat", 1],["Array.qsort", 1],["Mathlib.Tactic.Sat.Parser.parseNat", 1],["Array.mkEmpty", 1],["Nat.Linear.Poly.denote_combineAux", 1],["StdGen.s2", 1],["stdNext", 1],["Nat.add_zero", 1],["Decidable.isFalse", 1],["Subsingleton.elim", 1],["Function.HasUncurry.uncurry", 1],["Nat.left_distrib", 1],["Nat.Linear.Poly.fuse", 1],["Functor.map", 1],["StateCpsT.runK", 1],["BinaryHeap.replaceMax.proof_1", 1],["Nat.add_le_add", 1],["Mathlib.Tactic.Sat.Parser.parseInts", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Tactic.Cache", 1],["List.foldrIdx", 1],["LT.mk", 1],["PUnit", 1],["instDecidableEqProd.proof_2", 1],["Nat.Linear.Poly.sort", 1],["instDecidableEqProd.proof_1", 1],["List.bind", 1],["ToString.mk", 1],["Random.rand", 1],["BinaryHeap.insertExtractMax.proof_1", 1],["DoResultPR.pure", 1],["Hashable.hash", 1],["BinaryHeap.popMax", 1],["Hashable.mk", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Task.get", 1],["RandomGen.split", 1],["List.map₂Right", 1],["Array.get", 1],["Stream.next?", 1],["implies_true", 1],["WellFounded.fix", 1],["Prod.RProd", 1],["Nat.Linear.Poly.combine", 1],["panicWithPosWithDecl", 1],["Nat.Linear.Poly.denote_fuse", 1],["Int.ofNat", 1],["DoResultPR.return", 1],["Nat.right_distrib", 1],["Nat.Linear.Expr.toNormPoly", 1],["ReprTuple.mk", 1],["Nat.zero", 1],["SeqRight.seqRight", 1],["Mathlib.Tactic.Sat.buildProof", 1],["Nat.lt_eq", 1],["Not", 1],["Array.filterM", 1],["mixHash", 1],["Nonempty.elim", 1],["Task.Priority.default", 1],["Mathlib.Tactic.Sat.buildReify.v", 1],["MonadStateOf.mk", 1],["PSigma.mk", 1],["Nat.add_le_add_right", 1],["Option.get!", 1],["Array.swapAt", 1],["List.map₂Left", 1],["Exists.intro", 1],["eq_of_beq", 1]]],
["EStateM", 158, [["Bind.bind", 89],["Pure.pure", 74],["Bool.true", 55],["ite", 52],["Eq", 51],["List.nil", 45],["OfNat.ofNat", 39],["List.toArray", 37],["PUnit.unit", 35],["List.cons", 32],["Unit.unit", 30],["HAppend.hAppend", 26],["liftM", 25],["Option.none", 23],["Bool.false", 17],["Prod.mk", 16],["MonadExcept.throw", 15],["ForIn.forIn", 14],["Option.some", 14],["ForInStep.yield", 14],["inferInstanceAs", 12],["EStateM.Result.ok", 12],["EStateM.Result", 11],["ForInStep", 10],["Bool", 9],["Prod", 9],["Array.size", 8],["Array.append", 8],["EStateM.Result.error", 8],["cond", 8],["HSub.hSub", 8],["Prod.snd", 8],["Array.toList", 8],["BEq.beq", 7],["Array.push", 7],["EStateM", 7],["Prod.fst", 7],["Tactic.NormCast.CoeFnType.coe", 6],["Unit", 6],["Functor.map", 5],["Array.isEmpty", 5],["Tactic.NormCast.normCastExt", 5],["Array.map", 5],["ForInStep.done", 5],["Option", 5],["Tactic.NormCast.CoeFnInfo.mk", 5],["Option.getD", 4],["MProd.snd", 4],["Monad", 4],["Array.mapM", 4],["MonadExcept.tryCatch", 4],["Array", 4],["EmptyCollection.emptyCollection", 4],["Nat", 4],["MProd.fst", 4],["HAdd.hAdd", 4],["Tactic.Ring.mkAppCS", 4],["Tactic.NormCast.coeDelaborator", 4],["GT.gt", 4],["Function.comp", 4],["MProd.mk", 4],["Tactic.Ring.HornerExpr.e", 4],["Tactic.Ring.HornerExpr.xadd'", 3],["Tactic.NormCast.pushCastExt", 3],["Inhabited.default", 3],["Tactic.NormCast.derive", 3],["Tactic.Ring.RingM", 3],["not", 3],["Tactic.Ring.HornerExpr.const", 3],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 3],["Tactic.NormCast.NormCastExtension.up", 3],["ToString.toString", 3],["Alternative.failure", 3],["List", 3],["EStateM.Backtrackable.restore", 3],["PProd.fst", 3],["MProd", 3],["Tactic.NormCast.NormCastExtension.down", 3],["Empty", 3],["EStateM.Backtrackable.save", 3],["LT.lt", 3],["Mathlib.Tactic.Lint.getDeclsInCurrModule", 2],["Sum.inl", 2],["Tactic.TryThis.delabToRefinableSyntax", 2],["List.mapM", 2],["Tactic.Ring.Cache.α", 2],["Classical.ofNonempty", 2],["Nonempty", 2],["Array.getOp", 2],["MonadFinally", 2],["MonadLift.mk", 2],["MonadExceptOf", 2],["Inhabited", 2],["Tactic.NormCast.countCoes", 2],["Mathlib.Tactic.Lint.NamedLinter.name", 2],["modify", 2],["Array.qsort", 2],["Mathlib.Tactic.Lint.printWarnings", 2],["Option.map", 2],["Tactic.NormCast.coeExt", 2],["Tactic.instNonemptyDeclCache", 2],["Mathlib.Tactic.Sat.buildClause", 2],["StateRefT'.run'", 2],["Array.foldl", 2],["System.FilePath.metadata", 2],["DoResultPR.pure", 2],["DoResultPR.return", 2],["Tactic.NormCast.NormCastExtension.squash", 2],["Tactic.Ring.HornerExpr", 2],["Tactic.TryThis.addSuggestion", 2],["Tactic.Ring.State.mk", 2],["MonadReader.read", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Decidable.decide", 2],["Tactic.NormCast.CoeFnInfo.numArgs", 2],["Array.filterM", 2],["Tactic.NormCast.countHeadCoes", 2],["MonadState.get", 2],["Tactic.NormCast.proveEqUsingDown", 2],["and", 2],["Tactic.NormCast.isNumeral?", 2],["PProd.snd", 2],["Tactic.NormCast.CoeFnInfo.coercee", 2],["OrElse.mk", 2],["EStateM.orElse", 1],["EStateM.set", 1],["Tactic.NormCast.proveEqUsing", 1],["Tactic.NormCast.splittingProcedure", 1],["Tactic.NormCast.upwardAndElim", 1],["HMul.hMul", 1],["Mathlib.Tactic.Lint.Linter.errorsFound", 1],["Array.find?", 1],["EStateM.modifyGet", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["Mathlib.Tactic.Lint.sortResults", 1],["Mathlib.Tactic.Lint.getLinter", 1],["Stream.next?", 1],["Tactic.Ring.addAtom", 1],["Subarray", 1],["Mathlib.Eval.evalExpr", 1],["bne", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Eq.refl", 1],["Tactic.NormCast.addMove", 1],["MonadExceptOf.mk", 1],["Array.extract", 1],["Tactic.NormCast.numeralToCoe", 1],["EStateM.tryCatch", 1],["Tactic.NormCast.countInternalCoes", 1],["Mathlib.Tactic.Sat.buildClauses", 1],["evalIntrov.introsDep", 1],["Tactic.Ring.Cache.cs", 1],["Tactic.Cache.get", 1],["Mathlib.Tactic.Sat.buildProof", 1],["List.splitAt", 1],["Tactic.NormCast.Label.elim", 1],["Mathlib.WhatsNew.diffExtension", 1],["MonadStateOf.mk", 1],["Mathlib.Tactic.Sat.buildConj", 1],["MonadFinally.mk", 1],["Mathlib.Tactic.Lint.printWarning", 1],["Tactic.NormCast.Label.move", 1],["Mathlib.Tactic.Lint.isAutoDecl", 1],["List.filter", 1],["Mathlib.Prelude.Rename.getRenameMap", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Tactic.NormCast.getCoeFnInfo?", 1],["Tactic.Ring.State.numAtoms", 1],["Task", 1],["List.anyM", 1],["Tactic.Cache.mk", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.groupedByFilename", 1],["Except", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["Tactic.NormCast.Label.squash", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Tactic.NormCast.addElim", 1],["Mathlib.Tactic.Lint.getLinters", 1],["List.any", 1],["Sum", 1],["Option.get!", 1],["Tactic.Find.findDeclsPerHead", 1],["Tactic.Ring.State.atoms", 1],["readThe", 1],["Mathlib.Tactic.Sat.fromLRATAux", 1],["EStateM.get", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["List.length", 1],["Mathlib.Prelude.Rename.renameExtension", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["Tactic.DeclCache.get", 1],["Monad.mk", 1],["Tactic.TryThis.replaceMVarsByUnderscores", 1],["MonadExcept.orElse", 1],["Mathlib.Tactic.Lint.withSimpTheoremInfos", 1],["or", 1],["EStateM.throw", 1],["Tactic.NormCast.isCoeOf?", 1],["Tactic.NormCast.addSquash", 1],["And", 1],["Tactic.Cache", 1],["DoResultPR", 1],["PUnit", 1],["GE.ge", 1],["Tactic.Ring.Cache.univ", 1],["Tactic.instNonemptyCache.proof_1", 1],["Sum.inr", 1],["StateRefT'.run", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["EST", 1],["Inhabited.mk", 1],["andM", 1],["Array.filterMap", 1],["Tactic.NormCast.classifyType", 1],["Task.get", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["id", 1],["Id.run", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["Tactic.NormCast.mkCoe", 1],["STWorld.mk", 1],["Option.mapM", 1],["ToStream.toStream", 1],["Array.get?", 1],["Mathlib.Tactic.Lint.Linter.noErrorsFound", 1],["Mathlib.Tactic.Lint.isConditionalHyps", 1],["MonadStateOf.set", 1],["Tactic.NormCast.CoeFnInfo.type", 1],["Not", 1],["Mathlib.Tactic.Sat.buildReify", 1],["Mathlib.Prelude.Rename.addNameAlignment", 1],["Tactic.NormCast.prove", 1],["Task.Priority.default", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Tactic.NormCast.Label", 1],["Array.filterMapM", 1],["Option.all", 1],["Except.toBool", 1],["Mathlib.Tactic.Sat.buildProofStep", 1],["Mathlib.Tactic.Sat.Clause", 1],["Tactic.NormCast.addCoeDelaborator", 1],["Tactic.Ring.Cache.mk", 1]]],
["absurd", 150, [["Eq", 55],["Eq.refl", 51],["Eq.mpr", 39],["rfl", 38],["Nat.gcd", 35],["OfNat.ofNat", 33],["congrArg", 28],["Eq.trans", 26],["HMul.hMul", 25],["congrFun", 24],["of_eq_true", 22],["HMod.hMod", 19],["Eq.symm", 19],["eq_self", 18],["Fin.mk", 18],["Fin.val", 16],["Nat.gcd_dvd_right", 16],["congr", 12],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["HAdd.hAdd", 10],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["HDiv.hDiv", 8],["Fin.size_positive", 8],["And.intro", 8],["Bool.true", 8],["Dvd.dvd", 7],["Nat.succ", 7],["Iff", 7],["Nat.gcd_zero_left", 7],["LT.lt", 7],["List.cons", 6],["And.left", 6],["eq_true_of_decide", 6],["Nat.dvd_trans", 5],["List.length", 5],["Nat.gcd_rec", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Fin.val_eq_of_lt", 5],["Iff.intro", 5],["Nat.dvd_mul_left", 5],["iff_self", 5],["Exists.intro", 5],["Nat.coprime.symm", 5],["Eq.mp", 4],["Nat.gcd_succ", 4],["Nat.gcd_dvd", 4],["And.right", 4],["List.nil", 4],["Nat.dvd_mul_right", 4],["Subtype.property", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["eq_false", 4],["ite_congr", 4],["Nat.lcm", 4],["Decidable.em", 4],["List.getLast", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["propext", 3],["Nat.coprime.coprime_dvd_right", 3],["True", 3],["Nat.pos_of_dvd_of_pos", 3],["HSub.hSub", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["Fin.size_positive'", 3],["Nat.lcm_comm", 3],["Nat.gcd.induction", 3],["Nat.gcd_one_left", 3],["Nat.toDigitsCore", 3],["eq_true", 3],["Nat.digitChar", 3],["Nat.coprime.gcd_left", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["List.get", 2],["UnionFind.rankMaxAux", 2],["Array.size_set", 2],["Fin.isLt", 2],["Nat.le_of_dvd", 2],["dite_congr", 2],["BinaryHeap.arr", 2],["Nat.dvd_lcm_left", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["of_decide_eq_true", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Nat.zero_mod", 2],["UFModel.parent", 2],["BinaryHeap.size_pos_of_max", 2],["Array.size", 2],["Nat.div_mul_cancel", 2],["Fin.eq_of_val_eq", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Fin.add_def", 2],["dif_pos", 2],["Nat.mod_eq_of_lt", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.lcm_zero_left", 2],["dif_neg", 2],["Iff.mpr", 2],["UnionFind.size", 2],["Nat.coprime.mul", 2],["Nat.coprime.coprime_mul_left", 2],["absurd", 2],["if_true", 2],["List.cons_ne_nil", 2],["id", 2],["Fin.ofNat'", 2],["Nat.gcd_mul_right", 2],["And", 2],["Classical.em", 2],["Nat.mul_zero", 2],["if_false", 2],["Decidable.decide", 2],["Iff.rfl", 2],["Iff.mp", 2],["dite_true", 2],["dite", 2],["Nat.lt_succ_self", 1],["UFModel.push", 1],["sizeOf_nat", 1],["Nat.coprime.coprime_mul_right", 1],["eq_of_heq", 1],["Unit.unit", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["UFModel.Agrees.push", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["List.getLast_append", 1],["Ne.symm", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Classical.epsilon_spec_aux", 1],["LE.le", 1],["Nat.lt_irrefl", 1],["Fin.nsmuls_eq", 1],["UnionFind.rank_lt", 1],["trivial", 1],["Array.isEqvAux.proof_3", 1],["UFModel.Agrees.set", 1],["Nat.mul_mod", 1],["Nat.le_add_right", 1],["Decidable.isTrue", 1],["ite_true", 1],["ite_false", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["List.getLast_singleton", 1],["HAppend.hAppend", 1],["Nat.add_mod_mod", 1],["nonempty_of_exists", 1],["Fin.one_val", 1],["Nat.mod_eq_zero_of_dvd", 1],["Subsingleton.allEq", 1],["List.length_cons", 1],["dite_false", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mul_div_cancel_left", 1],["Nat.sub_succ_lt_self", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Array.isEqv", 1],["Array.isEqvAux_self", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.mod_one", 1],["lt_irrefl", 1],["UFModel.rank", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Fin.elim0", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.one_pos", 1],["Subtype.val", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_self", 1],["Nat.coprime.coprime_div_left", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["zero_lt_of_lt", 1],["Bool.and_true", 1],["UInt32.ofNat", 1],["List.concat", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["UInt32.val", 1],["Bool.false", 1],["Fin.ofNat'_succ", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.succ_mul", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.to_digits_core_length", 1],["Nat.gcd_self", 1],["List.concat_eq_append", 1],["PProd.fst", 1],["Nat.find_x", 1],["UnionFind.rankMax", 1],["Classical.epsilon_spec", 1],["Nat.gcd_gcd_self_right_left", 1],["UFNode.mk", 1],["List.getLast_cons", 1],["Nat.succ_pos", 1],["funext", 1],["Nat.coprime_one_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.lt_succ_iff", 1],["implies_congr", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_trans", 1],["And.imp", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Nat.div_zero", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.zero_lt_succ", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["not_lt", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["UFModel.Agrees.empty", 1],["WellFounded.fix_eq", 1],["Classical.strongIndefiniteDescription", 1],["Array.isEqvAux.proof_2", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.lcm_dvd", 1],["Array.isEqvAux.proof_1", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime.gcd_right", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["UInt32.val_eq_of_lt", 1],["Nat.sub_lt_sub_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.add_comm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["HEq.refl", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.lt_eq", 1],["Array.get", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Exists", 1],["List.get_singleton", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_div", 1],["False.elim", 1],["Nat.gcd_pos_of_pos_left", 1]]],
["Unit", 149, [["Bind.bind", 93],["Pure.pure", 80],["Bool.true", 54],["ite", 52],["Eq", 50],["List.nil", 45],["OfNat.ofNat", 40],["List.toArray", 37],["PUnit.unit", 36],["Unit.unit", 33],["List.cons", 32],["HAppend.hAppend", 28],["liftM", 25],["Option.none", 22],["Bool.false", 17],["MonadExcept.throw", 15],["ForIn.forIn", 15],["Prod.mk", 15],["ForInStep.yield", 15],["Option.some", 13],["ForInStep", 11],["Unit", 10],["Bool", 9],["HSub.hSub", 9],["Prod.snd", 8],["Array.append", 8],["inferInstanceAs", 8],["cond", 8],["Prod", 8],["Array.toList", 8],["Array.size", 8],["Prod.fst", 7],["BEq.beq", 7],["Array.push", 7],["PProd.fst", 7],["Tactic.NormCast.CoeFnType.coe", 6],["Tactic.NormCast.CoeFnInfo.mk", 5],["Array", 5],["Tactic.NormCast.normCastExt", 5],["Functor.map", 5],["Array.map", 5],["Option", 5],["ForInStep.done", 5],["Array.isEmpty", 5],["Array.mapM", 4],["EmptyCollection.emptyCollection", 4],["MonadExcept.tryCatch", 4],["MProd.snd", 4],["Option.getD", 4],["Function.comp", 4],["GT.gt", 4],["MProd.mk", 4],["EStateM", 4],["Tactic.Ring.HornerExpr.e", 4],["Tactic.Ring.mkAppCS", 4],["MProd.fst", 4],["Tactic.NormCast.coeDelaborator", 4],["Alternative.failure", 4],["Nat", 4],["HAdd.hAdd", 4],["Tactic.NormCast.NormCastExtension.up", 3],["not", 3],["MProd", 3],["Tactic.Ring.RingM", 3],["ToString.toString", 3],["Tactic.Ring.HornerExpr.const", 3],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["List", 3],["Tactic.NormCast.pushCastExt", 3],["Tactic.NormCast.derive", 3],["LT.lt", 3],["Tactic.NormCast.NormCastExtension.down", 3],["Empty", 2],["Tactic.NormCast.CoeFnInfo.numArgs", 2],["Tactic.NormCast.proveEqUsingDown", 2],["Nonempty", 2],["MonadState.get", 2],["Tactic.NormCast.countCoes", 2],["Tactic.Ring.Cache.α", 2],["Monad", 2],["Tactic.NormCast.coeExt", 2],["DoResultPR.return", 2],["Classical.ofNonempty", 2],["PProd.snd", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Tactic.instNonemptyDeclCache", 2],["Mathlib.Tactic.Lint.getDeclsInCurrModule", 2],["modify", 2],["Array.qsort", 2],["Mathlib.Tactic.Lint.printWarnings", 2],["Option.map", 2],["Tactic.Ring.State.mk", 2],["Mathlib.Tactic.Sat.buildClause", 2],["Inhabited.default", 2],["PUnit", 2],["MonadFinally", 2],["Array.foldl", 2],["System.FilePath.metadata", 2],["DoResultPR.pure", 2],["Mathlib.Tactic.Lint.NamedLinter.name", 2],["Tactic.NormCast.NormCastExtension.squash", 2],["Tactic.Ring.HornerExpr", 2],["Tactic.TryThis.addSuggestion", 2],["Tactic.TryThis.delabToRefinableSyntax", 2],["MonadReader.read", 2],["Sum.inl", 2],["Decidable.decide", 2],["Array.filterM", 2],["Tactic.NormCast.countHeadCoes", 2],["List.mapM", 2],["and", 2],["Tactic.NormCast.isNumeral?", 2],["Array.getOp", 2],["Tactic.NormCast.CoeFnInfo.coercee", 2],["StateRefT'.run'", 2],["Id", 1],["Mathlib.Tactic.Sat.buildProofStep", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Tactic.NormCast.addCoeDelaborator", 1],["ToString.mk", 1],["Tactic.Ring.Cache.mk", 1],["Tactic.NormCast.proveEqUsing", 1],["Tactic.NormCast.Label.squash", 1],["HMul.hMul", 1],["Tactic.NormCast.splittingProcedure", 1],["MonadLift.mk", 1],["Tactic.NormCast.upwardAndElim", 1],["Mathlib.Tactic.Lint.Linter.errorsFound", 1],["Mathlib.Tactic.Lint.sortResults", 1],["Mathlib.Tactic.Sat.Clause", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["Tactic.Ring.addAtom", 1],["Mathlib.Tactic.Lint.printWarning", 1],["Stream.next?", 1],["Subarray", 1],["Mathlib.Eval.evalExpr", 1],["OptionT.tryCatch", 1],["bne", 1],["Tactic.NormCast.addMove", 1],["Mathlib.Tactic.Lint.getLinter", 1],["Eq.refl", 1],["Array.find?", 1],["MonadExceptOf.mk", 1],["Mathlib.Tactic.Sat.buildClauses", 1],["Array.extract", 1],["Tactic.NormCast.countInternalCoes", 1],["Tactic.Cache.get", 1],["evalIntrov.introsDep", 1],["List.splitAt", 1],["Tactic.Ring.Cache.cs", 1],["Mathlib.Tactic.Sat.buildProof", 1],["Tactic.NormCast.Label.elim", 1],["Mathlib.Tactic.Sat.buildConj", 1],["Mathlib.WhatsNew.diffExtension", 1],["List.mmap'", 1],["Mathlib.Tactic.Lint.isAutoDecl", 1],["Tactic.NormCast.Label.move", 1],["Mathlib.Prelude.Rename.getRenameMap", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Tactic.NormCast.getCoeFnInfo?", 1],["Tactic.Ring.State.numAtoms", 1],["List.filter", 1],["Tactic.Cache.mk", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.groupedByFilename", 1],["Except", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Tactic.NormCast.numeralToCoe", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Task", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["List.any", 1],["Tactic.NormCast.addElim", 1],["Option.get!", 1],["List.foldl", 1],["Tactic.Find.findDeclsPerHead", 1],["Mathlib.Tactic.Lint.getLinters", 1],["readThe", 1],["Mathlib.Tactic.Sat.fromLRATAux", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["List.length", 1],["Mathlib.Prelude.Rename.renameExtension", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["Tactic.DeclCache.get", 1],["Sum", 1],["Inhabited", 1],["MonadExcept.orElse", 1],["List.anyM", 1],["or", 1],["Mathlib.Tactic.Lint.withSimpTheoremInfos", 1],["Tactic.NormCast.isCoeOf?", 1],["Tactic.NormCast.addSquash", 1],["Tactic.TryThis.replaceMVarsByUnderscores", 1],["Tactic.Cache", 1],["OptionT.fail", 1],["reprArg", 1],["Tactic.Ring.State.atoms", 1],["Tactic.Ring.Cache.univ", 1],["DoResultPR", 1],["GE.ge", 1],["StateRefT'.run", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["MonadExceptOf", 1],["andM", 1],["Tactic.NormCast.classifyType", 1],["Array.filterMap", 1],["Task.get", 1],["Tactic.instNonemptyCache.proof_1", 1],["id", 1],["Sum.inr", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["Id.run", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["Tactic.NormCast.mkCoe", 1],["And", 1],["Array.get?", 1],["ToStream.toStream", 1],["SeqRight.seqRight", 1],["MonadStateOf.set", 1],["Tactic.NormCast.CoeFnInfo.type", 1],["Not", 1],["Mathlib.Tactic.Lint.trieElements", 1],["Mathlib.Tactic.Lint.Linter.noErrorsFound", 1],["Task.Priority.default", 1],["Tactic.NormCast.prove", 1],["Mathlib.Tactic.Lint.isConditionalHyps", 1],["Mathlib.Tactic.Sat.buildReify", 1],["Option.all", 1],["Mathlib.Prelude.Rename.addNameAlignment", 1],["Option.mapM", 1],["Tactic.NormCast.Label", 1],["Array.filterMapM", 1],["OrElse.mk", 1],["Except.toBool", 1]]],
["congrArg", 144, [["Eq", 55],["Eq.refl", 50],["rfl", 41],["Eq.mpr", 39],["Nat.gcd", 35],["OfNat.ofNat", 31],["congrArg", 27],["HMul.hMul", 25],["Fin.mk", 24],["Eq.trans", 24],["congrFun", 22],["of_eq_true", 20],["Eq.symm", 20],["Fin.val", 17],["HMod.hMod", 16],["eq_self", 16],["Nat.gcd_dvd_right", 16],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.gcd_dvd_left", 11],["Nat.mod_lt", 10],["congr", 9],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["HAdd.hAdd", 8],["LT.lt", 8],["Nat.gcd_zero_left", 7],["Bool.true", 7],["Dvd.dvd", 7],["Iff", 7],["And.intro", 7],["List.get", 6],["Nat.succ", 6],["Nat.mul_comm", 5],["iff_self", 5],["eq_true_of_decide", 5],["Nat.coprime", 5],["Fin.val_eq_of_lt", 5],["Nat.gcd_rec", 5],["And.left", 5],["Nat.dvd_mul_left", 5],["Iff.intro", 5],["HDiv.hDiv", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["Array.size", 4],["Nat.lcm", 4],["propext", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Exists.intro", 4],["And.right", 4],["List.length", 4],["Nat.gcd_succ", 4],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 4],["id", 4],["HSub.hSub", 4],["Nat.gcd_dvd", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.coprime_dvd_right", 3],["True", 3],["Fin.isLt", 3],["Fin.size_positive'", 3],["Nat.pos_of_dvd_of_pos", 3],["BinaryHeap.arr", 3],["List.get?", 3],["Nat.gcd_one_left", 3],["Option.some", 3],["Nat.gcd.induction", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["List.get?_eq_get", 3],["Nat.coprime.gcd_left", 2],["List.cons_ne_nil", 2],["Nat.gcd_mul_right", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["And", 2],["UnionFind.rankMaxAux", 2],["Classical.em", 2],["Array.size_set", 2],["Nat.le_of_dvd", 2],["dite_congr", 2],["Subtype.property", 2],["Nat.mul_zero", 2],["PProd.fst", 2],["Nat.dvd_lcm_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["List.nil", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.dvd_mod_iff", 2],["BinaryHeap.size_pos_of_max", 2],["Nat.div_mul_cancel", 2],["Nat.zero_mod", 2],["Fin.eq_of_val_eq", 2],["eq_true", 2],["Option.some.inj", 2],["Fin.add_def", 2],["eq_false", 2],["List.cons", 2],["Nat.mod_eq_of_lt", 2],["Nat.lcm_zero_left", 2],["HEq.refl", 2],["dif_neg", 2],["UnionFind.size", 2],["Iff.mpr", 2],["List.getLast", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.lt_trans", 2],["dif_pos", 2],["UFModel.parent", 2],["Fin.ofNat'", 2],["Decidable.decide", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.mul", 2],["Iff.rfl", 2],["HAppend.hAppend", 2],["dite_true", 2],["dite", 2],["Nat.lt_succ_self", 2],["List.set", 1],["UFModel.push", 1],["eq_of_heq", 1],["of_decide_eq_true", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["Nat.coprime.coprime_mul_right", 1],["List.getLast_eq_get", 1],["Nat.coprime_mul_iff_left", 1],["Unit.unit", 1],["List.get?_set_ne", 1],["Array.isEqvAux_self", 1],["Nat.gcd_gcd_self_right_left", 1],["Fin.nsmuls_eq", 1],["Option.some_inj", 1],["Nat.le_of_succ_le_succ", 1],["UnionFind.rank_lt", 1],["Ne.symm", 1],["Array.isEqvAux.proof_3", 1],["UFModel.Agrees.set", 1],["Nat.mul_mod", 1],["Nat.lt_add_right", 1],["Decidable.isTrue", 1],["ite_true", 1],["ite_false", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["List.getLast_singleton", 1],["List.get_append_right_aux", 1],["Nat.add_mod_mod", 1],["Fin.one_val", 1],["List.length_set", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_gcd_self_right_right", 1],["Subsingleton.allEq", 1],["List.length_cons", 1],["dite_false", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mul_div_cancel_left", 1],["Nat.sub_succ_lt_self", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Array.isEqv", 1],["Array.isEqvAux.proof_1", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_one", 1],["Nat.le_add_right", 1],["UFModel.Agrees.push", 1],["UFModel.rank", 1],["Array.size_swap", 1],["Array.swap", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Nat.one_pos", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["UnionFind.lt_rankMax'", 1],["Nat.mod_self", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.coprime.coprime_div_left", 1],["zero_lt_of_lt", 1],["Nat.eq_of_mul_eq_mul_right", 1],["decide_eq_true_eq", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Bool.and_true", 1],["UInt32.ofNat", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UInt32.val", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Array.push", 1],["Bool.false", 1],["Nat.mul_div_assoc", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.gcd_self", 1],["Nat.mod_one", 1],["Nat.succ_mul", 1],["BinaryHeap.insert.proof_1", 1],["ite_congr", 1],["lt_irrefl", 1],["UnionFind.rankMax", 1],["Subtype.val", 1],["List.getLast_cons", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["Nat.mul_mod_mul_left", 1],["Array.size_push", 1],["funext", 1],["Nat.add", 1],["Nat.coprime_one_left", 1],["Iff.mp", 1],["Nat.lt_succ_iff", 1],["Nat.zero_lt_succ", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.lcm_dvd", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Nat.div_zero", 1],["absurd", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["List.map", 1],["WellFounded.fix_eq", 1],["Array.isEqvAux.proof_2", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.sub_lt_sub_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.add_mul_mod_self_right", 1],["List.get?_map", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime.gcd_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["UInt32.val_eq_of_lt", 1],["Array.get", 1],["List.length_append", 1],["Nat.add_comm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["List.get?_append_right", 1],["List.length_map", 1],["Nat.lt_eq", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["List.get_singleton", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_pos_of_pos_left", 1],["Exists", 1],["Nat.gcd_div", 1]]],
["PSigma.mk", 138, [["Eq", 44],["Eq.refl", 41],["Nat.gcd", 35],["rfl", 31],["Eq.mpr", 29],["HMul.hMul", 25],["OfNat.ofNat", 25],["Eq.trans", 19],["congrArg", 18],["congrFun", 17],["Nat.gcd_dvd_right", 16],["HMod.hMod", 16],["Eq.symm", 16],["of_eq_true", 15],["Fin.mk", 12],["eq_self", 12],["Fin.val", 12],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["HAdd.hAdd", 8],["Dvd.dvd", 7],["Iff", 7],["Nat.gcd_zero_left", 7],["Nat.succ", 6],["congr", 6],["And.intro", 6],["Fin.val_eq_of_lt", 5],["Iff.intro", 5],["Bool.true", 5],["iff_self", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Nat.dvd_mul_left", 5],["HDiv.hDiv", 5],["Nat.gcd_rec", 5],["Nat.coprime.symm", 5],["Exists.intro", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["Nat.eq_zero_or_pos", 4],["Nat.lcm", 4],["eq_true_of_decide", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["And.left", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.dvd_mul_right", 4],["propext", 3],["Subtype.property", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["Fin.size_positive'", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.dvd_refl", 3],["Eq.mp", 3],["Nat.gcd.induction", 3],["And.right", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.gcd_one_left", 3],["Acc.intro", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Fin.eq_of_val_eq", 2],["eq_of_heq", 2],["Nat.le_of_dvd", 2],["Nat.coprime.mul", 2],["BinaryHeap.heapifyDown", 2],["HEq.refl", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["True", 2],["Nat.coprime.gcd_left", 2],["Nat.dvd_mod_iff", 2],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["Nat.gcd_mul_left_left", 2],["Fin.add_def", 2],["Nat.gcd_mul_right", 2],["Nat.lcm_zero_left", 2],["And", 2],["Nat.coprime.pow_left", 2],["Nat.coprime.coprime_mul_left", 2],["Iff.rfl", 2],["Fin.ofNat'", 2],["Nat.zero_mod", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.div_mul_cancel", 2],["PSigma.mk", 2],["Exists", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime_mul_iff_left", 1],["Iff.mpr", 1],["of_decide_eq_true", 1],["Fin.nsmuls_eq", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Quot.sound", 1],["Nat.mul_mod", 1],["PSigma.mkSkipLeft.proof_1", 1],["Decidable.isTrue", 1],["Nat.coprime.gcd_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_self", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["UInt32.ofNat", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["le_of_lt", 1],["Nat.coprime.coprime_div_left", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["WellFounded.apply", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.mul_div_assoc", 1],["Nat.mul_one", 1],["UInt32.val", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["BinaryHeap.arr", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.gcd_div", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["zero_lt_of_lt", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Unit.unit", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["PSigma.lexAccessible.proof_1", 1],["Nat.mul_mod_mul_left", 1],["Or.inl", 1],["Nat.coprime_comm", 1],["Array.push", 1],["Nat.zero_lt_succ", 1],["Iff.mp", 1],["Fin.ofNat'_succ", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.lcm_dvd", 1],["Nat.succ_mul", 1],["Nat.mod_one", 1],["Nat.gcd_self", 1],["BinaryHeap.insert.proof_1", 1],["Nat.mul_dvd_mul_right", 1],["Array.size_push", 1],["SizeOf.sizeOf", 1],["Nat.coprime_one_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["PSigma.eta", 1],["PSigma.revLexAccessible.proof_1", 1],["HSub.hSub", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_trans", 1],["PSigma.RevLex.right", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["Quot.ind", 1],["Array.size", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Fin.isLt", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.coprime.pow_right", 1],["Nat.mul_dvd_mul", 1],["Nat.exists_coprime", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Subsingleton.allEq", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["id", 1],["Nat.add_comm", 1],["BinaryHeap.heapifyUp", 1],["Nat.lcm_one_left", 1],["Nat.lt_of_succ_le", 1],["Nat.isValidChar", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.coprime.gcd_both", 1],["Nat.mul_div_cancel_left", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["LT.lt", 1],["dite", 1]]],
["Array", 137, [["OfNat.ofNat", 36],["Array.size", 29],["Array.push", 24],["Bind.bind", 23],["Pure.pure", 23],["Eq", 22],["List.toArray", 20],["List.nil", 19],["ite", 19],["Array", 18],["Bool.true", 18],["LT.lt", 17],["dite", 15],["Fin.mk", 13],["HAdd.hAdd", 12],["Array.get", 10],["HAppend.hAppend", 10],["HSub.hSub", 10],["ForIn.forIn", 10],["Id.run", 10],["PUnit.unit", 10],["Prod.mk", 10],["ForInStep.yield", 10],["Unit.unit", 9],["WellFounded.fix", 8],["congrFun", 7],["Eq.trans", 7],["ForInStep", 7],["congrArg", 7],["PSigma.mk", 7],["funext", 6],["sizeOf_nat", 6],["Eq.mpr", 6],["Array.set", 6],["congr", 6],["WellFoundedRelation.rel", 6],["Array.foldl", 6],["Array.mk", 6],["Prod", 6],["Nat.lt_eq", 6],["PProd.fst", 6],["Array.mkEmpty", 6],["Option.none", 5],["Array.empty", 5],["Nat.sub_succ_lt_self", 5],["Array.data", 5],["Bool.false", 4],["Array.toList", 4],["Array.swap!", 4],["Array.foldlM", 4],["MProd.mk", 3],["Array.ofSubarray", 3],["MProd.snd", 3],["EmptyCollection.emptyCollection", 3],["MProd.fst", 3],["Array.map", 3],["Array.mapM", 3],["Bool", 3],["unsafeCast", 3],["Array.pop", 3],["Array.get!", 3],["Id", 3],["Mathlib.Tactic.Sat.Parser.parseInts", 2],["Array.swap", 2],["ForInStep.done", 2],["Prod.fst", 2],["sorryAx", 2],["Array.eraseIdxAux", 2],["Mathlib.Tactic.Lint.getDeclsInCurrModule", 2],["panicWithPosWithDecl", 2],["Fin.val", 2],["HDiv.hDiv", 2],["Prod.snd", 2],["Mathlib.Tactic.Sat.Parser.parseNat", 2],["List.redLength", 2],["GT.gt", 2],["MProd", 2],["Option.some", 2],["List.toArrayAux", 2],["Array.toSubarray", 2],["Decidable.decide", 2],["BEq.beq", 2],["Option", 2],["Array.modifyM", 2],["Eq.refl", 2],["SeqLeft.seqLeft", 2],["Array.isEqv", 2],["Functor.map", 2],["List.set", 1],["EmptyCollection.mk", 1],["Nat.pred_lt'", 1],["Array.getEvenElems", 1],["Array.swap.proof_1", 1],["Nat.fold", 1],["Mathlib.Tactic.Lint.trieElements", 1],["ToStream.toStream", 1],["Subarray.start", 1],["Mathlib.Tactic.Lint.isConditionalHyps", 1],["Array.instDecidableEqArray.proof_3", 1],["Array.popWhile.proof_2", 1],["Array.filterMapM", 1],["Array.feraseIdx", 1],["eq_self", 1],["Array.modifyMUnsafe.proof_1", 1],["Mathlib.Tactic.Sat.Parser.parseNats", 1],["Inhabited.mk", 1],["ToString.mk", 1],["USize.toNat", 1],["Append.mk", 1],["Nat.lt_of_le_of_lt", 1],["MonadState.get", 1],["Array.popWhile.proof_3", 1],["Array.zipWith", 1],["Array.getOp", 1],["Inhabited.default", 1],["List.cons", 1],["List.concat", 1],["Array.filterSepElemsM", 1],["Array.size_swap", 1],["liftM", 1],["Array.appendList", 1],["Array.modify", 1],["ForIn.mk", 1],["Array.mapMUnsafe.map", 1],["Tactic.instNonemptyDeclCache", 1],["of_eq_true", 1],["Mathlib.Tactic.Lint.heuristicallyExtractSimpTheoremsCore", 1],["Array.indexOf?", 1],["Decidable.isTrue", 1],["Array.forIn", 1],["Array.mapIdxM", 1],["List.concat_eq_append", 1],["repr", 1],["List.singleton_append", 1],["Array.swapAt", 1],["Array.contains", 1],["List.replicate", 1],["And.intro", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Subarray", 1],["Mathlib.Tactic.Sat.LRATStep.add", 1],["Array.popWhile.proof_1", 1],["rfl", 1],["Stream.next?", 1],["Membership.mk", 1],["Exists.intro", 1],["HAppend.mk", 1],["Array.isEmpty", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Array.toArrayLit.proof_1", 1],["Nat", 1],["Array.toListLitAux", 1],["Mathlib.Tactic.Lint.constToSimpDeclMap", 1],["flip", 1],["Subarray.stop", 1],["Array.setD", 1],["Array.append", 1],["List.foldl", 1],["Array.binInsertM", 1],["BEq.mk", 1],["Array.mapSepElemsM", 1],["Array.instDecidableEqArray.proof_2", 1],["Array.uget", 1],["Nat.pred_le", 1],["SizeOf.sizeOf", 1],["UFModel.Models.empty", 1],["not", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["BinaryHeap.max", 1],["List.dropLast", 1],["Array.qsort", 1],["Array.zipWithAux", 1],["Mathlib.Tactic.Sat.LRATStep.del", 1],["Decidable.isFalse", 1],["DoResultPR.return", 1],["Coe.mk", 1],["Array.back", 1],["UFModel.Agrees.empty", 1],["Mathlib.Tactic.Lint.NamedLinter.name", 1],["PUnit", 1],["Mathlib.Tactic.Lint.isEqnLemma?", 1],["List.append_nil", 1],["Eq.symm", 1],["Array.insertAtAux", 1],["DoResultPR.pure", 1],["Array.insertionSort.swapLoop", 1],["Array.filterMap", 1],["Array.instDecidableEqArray.proof_1", 1],["Task.get", 1],["id", 1],["Array.ext'", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["UFModel.empty", 1],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 1],["MonadExcept.tryCatch", 1],["UFModel.Agrees.mk'", 1],["List", 1],["Sum.inl", 1],["SeqRight.seqRight", 1],["MonadStateOf.set", 1],["List.toArray_data", 1],["Array.filterM", 1],["USize.ofNat", 1],["Task.Priority.default", 1],["ToStream.mk", 1],["Array.mkArray", 1],["Array.insertAt", 1],["Array.toArrayLit", 1],["List.toArrayAux_data", 1],["Array.uset", 1],["lcProof", 1],["ToString.toString", 1],["List.append_assoc", 1],["Decidable", 1],["Sum.inr", 1]]],
["WellFounded.fixF", 132, [["Eq", 47],["Eq.refl", 41],["Nat.gcd", 35],["rfl", 31],["Eq.mpr", 30],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 21],["congrArg", 20],["congrFun", 19],["of_eq_true", 17],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["eq_self", 14],["Eq.symm", 14],["Fin.mk", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["HAdd.hAdd", 8],["Fin.size_positive", 8],["Iff", 7],["Bool.true", 7],["Nat.gcd_zero_left", 7],["congr", 7],["Dvd.dvd", 7],["Nat.succ", 6],["And.intro", 6],["Nat.gcd_rec", 5],["And.left", 5],["eq_true_of_decide", 5],["Iff.intro", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["HDiv.hDiv", 5],["iff_self", 5],["Nat.coprime.symm", 5],["Nat.dvd_mul_right", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["Subtype.property", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["propext", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Array.size", 3],["Nat.gcd.induction", 3],["Nat.gcd_one_left", 3],["Nat.dvd_refl", 3],["dite", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["HSub.hSub", 2],["Nat.mul_zero", 2],["Iff.mp", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.dvd_lcm_left", 2],["And", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Fin.add_def", 2],["Nat.le_of_dvd", 2],["BinaryHeap.heapifyDown", 2],["Nat.coprime.gcd_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Fin.eq_of_val_eq", 2],["Nat.zero_mod", 2],["Nat.lcm_zero_left", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["Decidable.decide", 2],["Nat.coprime.mul", 2],["LT.lt", 2],["Nat.mod_self", 1],["Nat.mul_div_assoc", 1],["BinaryHeap.insert.proof_1", 1],["Bool.false", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Fin.nsmuls_eq", 1],["sizeOf_nat", 1],["Array.isEqvAux.proof_3", 1],["Bool.and_true", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["WellFounded.fixFEq", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["UInt32.ofNat", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["le_of_lt", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.sub_succ_lt_self", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Classical.em", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Nat.mul_mod_mul_left", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["BinaryHeap.arr", 1],["Nat.zero_lt_succ", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Nat.lcm_dvd", 1],["Array.isEqvAux_self", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Array.push", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["UInt32.val", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_mul", 1],["Exists", 1],["Subsingleton.allEq", 1],["Nat.mul_dvd_mul_right", 1],["Nat.find_x", 1],["of_decide_eq_true", 1],["Array.size_push", 1],["funext", 1],["Nat.coprime_one_left", 1],["Nat.gcd_gcd_self_right_right", 1],["WellFounded.fixFEq.proof_1", 1],["WellFounded.apply", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["not_lt", 1],["Nat.dvd_zero", 1],["Nat.mul_div_cancel_left", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Array.get", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["id", 1],["Nat.add_comm", 1],["BinaryHeap.heapifyUp", 1],["WellFounded.fix", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.gcd_self", 1],["Nat.lt_of_succ_le", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_pos_of_pos_left", 1],["dite_true", 1]]],
["WellFounded.apply.proof_1", 130, [["Eq", 47],["Eq.refl", 41],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 21],["congrArg", 20],["congrFun", 19],["of_eq_true", 17],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["eq_self", 14],["Eq.symm", 14],["Fin.mk", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["HAdd.hAdd", 8],["Fin.size_positive", 8],["Iff", 7],["Bool.true", 7],["Nat.gcd_zero_left", 7],["congr", 7],["Dvd.dvd", 7],["Nat.succ", 6],["And.intro", 6],["Nat.gcd_rec", 5],["And.left", 5],["eq_true_of_decide", 5],["Iff.intro", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["HDiv.hDiv", 5],["iff_self", 5],["Nat.coprime.symm", 5],["Nat.dvd_mul_right", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["Subtype.property", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["propext", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Array.size", 3],["Nat.gcd.induction", 3],["Nat.gcd_one_left", 3],["Nat.dvd_refl", 3],["dite", 2],["Fin.mul_def", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["HSub.hSub", 2],["Nat.coprime.gcd_left", 2],["Nat.mul_zero", 2],["Iff.mp", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.dvd_lcm_left", 2],["And", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.add_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.le_of_dvd", 2],["BinaryHeap.heapifyDown", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Fin.eq_of_val_eq", 2],["Nat.zero_mod", 2],["Nat.lcm_zero_left", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["Decidable.decide", 2],["Nat.coprime.mul", 2],["LT.lt", 2],["Nat.mod_self", 1],["Bool.false", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Bool.and_true", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Fin.nsmuls_eq", 1],["sizeOf_nat", 1],["Array.isEqvAux.proof_3", 1],["WellFounded.fixFEq", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["UInt32.ofNat", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["le_of_lt", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.sub_succ_lt_self", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Classical.em", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Nat.zero_lt_succ", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["BinaryHeap.arr", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["UInt32.val", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Nat.lcm_dvd", 1],["Array.isEqvAux_self", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Array.push", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_mul", 1],["Exists", 1],["Subsingleton.allEq", 1],["Nat.mul_dvd_mul_right", 1],["Nat.find_x", 1],["of_decide_eq_true", 1],["Array.size_push", 1],["funext", 1],["Nat.coprime_one_left", 1],["Nat.gcd_gcd_self_right_right", 1],["WellFounded.apply", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["not_lt", 1],["Nat.dvd_zero", 1],["Nat.mul_div_cancel_left", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Array.get", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["id", 1],["Nat.add_comm", 1],["BinaryHeap.heapifyUp", 1],["WellFounded.fix", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.gcd_self", 1],["Nat.lt_of_succ_le", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_pos_of_pos_left", 1],["dite_true", 1]]],
["WellFounded.apply", 130, [["Eq", 47],["Eq.refl", 41],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 21],["congrArg", 20],["congrFun", 19],["of_eq_true", 17],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["eq_self", 14],["Eq.symm", 14],["Fin.mk", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["HAdd.hAdd", 8],["Fin.size_positive", 8],["Iff", 7],["Bool.true", 7],["Nat.gcd_zero_left", 7],["congr", 7],["Dvd.dvd", 7],["Nat.succ", 6],["And.intro", 6],["Nat.gcd_rec", 5],["And.left", 5],["eq_true_of_decide", 5],["Iff.intro", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["HDiv.hDiv", 5],["iff_self", 5],["Nat.coprime.symm", 5],["Nat.dvd_mul_right", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["Subtype.property", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["propext", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Array.size", 3],["Nat.gcd.induction", 3],["Nat.gcd_one_left", 3],["Nat.dvd_refl", 3],["dite", 2],["Fin.mul_def", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["HSub.hSub", 2],["Nat.coprime.gcd_left", 2],["Nat.mul_zero", 2],["Iff.mp", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.dvd_lcm_left", 2],["And", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.add_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.le_of_dvd", 2],["BinaryHeap.heapifyDown", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Fin.eq_of_val_eq", 2],["Nat.zero_mod", 2],["Nat.lcm_zero_left", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["Decidable.decide", 2],["Nat.coprime.mul", 2],["LT.lt", 2],["Nat.mod_self", 1],["Bool.false", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Bool.and_true", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Fin.nsmuls_eq", 1],["sizeOf_nat", 1],["Array.isEqvAux.proof_3", 1],["WellFounded.fixFEq", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["UInt32.ofNat", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["le_of_lt", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.sub_succ_lt_self", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Classical.em", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Nat.zero_lt_succ", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["BinaryHeap.arr", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["UInt32.val", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Nat.lcm_dvd", 1],["Array.isEqvAux_self", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Array.push", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_mul", 1],["Exists", 1],["Subsingleton.allEq", 1],["Nat.mul_dvd_mul_right", 1],["Nat.find_x", 1],["of_decide_eq_true", 1],["Array.size_push", 1],["funext", 1],["Nat.coprime_one_left", 1],["Nat.gcd_gcd_self_right_right", 1],["WellFounded.apply", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["not_lt", 1],["Nat.dvd_zero", 1],["Nat.mul_div_cancel_left", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Array.get", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["id", 1],["Nat.add_comm", 1],["BinaryHeap.heapifyUp", 1],["WellFounded.fix", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.gcd_self", 1],["Nat.lt_of_succ_le", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_pos_of_pos_left", 1],["dite_true", 1]]],
["WellFounded.fix", 130, [["Eq", 47],["Eq.refl", 41],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 21],["congrArg", 20],["congrFun", 19],["of_eq_true", 17],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["eq_self", 14],["Eq.symm", 14],["Fin.mk", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["HAdd.hAdd", 8],["Fin.size_positive", 8],["Iff", 7],["Bool.true", 7],["Nat.gcd_zero_left", 7],["congr", 7],["Dvd.dvd", 7],["Nat.succ", 6],["And.intro", 6],["Nat.gcd_rec", 5],["And.left", 5],["eq_true_of_decide", 5],["Iff.intro", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Fin.val_eq_of_lt", 5],["Nat.dvd_mul_left", 5],["HDiv.hDiv", 5],["iff_self", 5],["Nat.coprime.symm", 5],["Nat.dvd_mul_right", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["Subtype.property", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["propext", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Array.size", 3],["Nat.gcd.induction", 3],["Nat.gcd_one_left", 3],["Nat.dvd_refl", 3],["dite", 2],["Fin.mul_def", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["HSub.hSub", 2],["Nat.coprime.gcd_left", 2],["Nat.mul_zero", 2],["Iff.mp", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.dvd_lcm_left", 2],["And", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.add_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.le_of_dvd", 2],["BinaryHeap.heapifyDown", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Fin.eq_of_val_eq", 2],["Nat.zero_mod", 2],["Nat.lcm_zero_left", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["Decidable.decide", 2],["Nat.coprime.mul", 2],["LT.lt", 2],["Nat.mod_self", 1],["Bool.false", 1],["BinaryHeap.insert.proof_1", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Bool.and_true", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Fin.nsmuls_eq", 1],["sizeOf_nat", 1],["Array.isEqvAux.proof_3", 1],["WellFounded.fixFEq", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["UInt32.ofNat", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["le_of_lt", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.sub_succ_lt_self", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.mod_add_mod", 1],["Classical.em", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Nat.zero_lt_succ", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["BinaryHeap.arr", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["UInt32.val", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Nat.lcm_dvd", 1],["Array.isEqvAux_self", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Array.push", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.coprime.coprime_div_left", 1],["Nat.succ_mul", 1],["Exists", 1],["Subsingleton.allEq", 1],["Nat.mul_dvd_mul_right", 1],["Nat.find_x", 1],["of_decide_eq_true", 1],["Array.size_push", 1],["funext", 1],["Nat.coprime_one_left", 1],["Nat.gcd_gcd_self_right_right", 1],["WellFounded.apply", 1],["Nat.gcd_mul_right_left", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["not_lt", 1],["Nat.dvd_zero", 1],["Nat.mul_div_cancel_left", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Array.get", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["id", 1],["Nat.add_comm", 1],["BinaryHeap.heapifyUp", 1],["WellFounded.fix", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.gcd_self", 1],["Nat.lt_of_succ_le", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Nat.find_min", 1],["Nat.coprime.gcd_both", 1],["and", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.gcd_pos_of_pos_left", 1],["dite_true", 1]]],
["Nat.not_succ_le_zero", 128, [["Eq", 47],["Eq.refl", 42],["Nat.gcd", 35],["Eq.mpr", 31],["rfl", 31],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 20],["congrArg", 19],["congrFun", 18],["Nat.gcd_dvd_right", 16],["of_eq_true", 16],["HMod.hMod", 16],["eq_self", 13],["Eq.symm", 13],["Fin.val", 12],["Fin.mk", 12],["Nat.gcd_dvd_left", 11],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["And.intro", 7],["HAdd.hAdd", 7],["Bool.true", 7],["congr", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["Nat.succ", 6],["eq_true_of_decide", 5],["iff_self", 5],["And.left", 5],["Nat.mul_comm", 5],["Iff.intro", 5],["Fin.val_eq_of_lt", 5],["HDiv.hDiv", 5],["Nat.dvd_mul_left", 5],["Nat.dvd_trans", 5],["Nat.gcd_rec", 5],["Nat.coprime", 5],["Nat.coprime.symm", 5],["Nat.dvd_mul_right", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.eq_zero_or_pos", 4],["Nat.lcm", 4],["Nat.gcd_dvd", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Eq.mp", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.gcd_zero_right", 3],["propext", 3],["And.right", 3],["Nat.pos_of_dvd_of_pos", 3],["Fin.size_positive'", 3],["Nat.gcd.induction", 3],["HSub.hSub", 3],["True", 3],["Nat.gcd_one_left", 3],["Nat.coprime.coprime_dvd_right", 3],["dite", 2],["Nat.gcd_one_right", 2],["Nat.coprime.mul", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.mul_zero", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Iff.mp", 2],["Array.size", 2],["Nat.div_mul_cancel", 2],["Nat.dvd_lcm_left", 2],["Nat.mod_eq_of_lt", 2],["Nat.coprime.gcd_left", 2],["And", 2],["Iff.rfl", 2],["Fin.add_def", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.le_of_dvd", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Fin.eq_of_val_eq", 2],["id", 2],["Nat.lcm_zero_left", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.ofNat'", 2],["Nat.zero_mod", 2],["Decidable.decide", 2],["LT.lt", 2],["Fin.elim0", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["PProd.fst", 1],["UInt32.ofNat", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UInt32.val", 1],["List.cons", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["List.cons_ne_nil", 1],["Fin.nsmuls_eq", 1],["List.getLast", 1],["Nat.mul_div_assoc", 1],["Array.isEqvAux.proof_3", 1],["List.nil", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Bool.false", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["List.getLast_singleton", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.mod_self", 1],["Array.isEqvAux.proof_1", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.sub_succ_lt_self", 1],["Nat.mod_add_mod", 1],["Classical.em", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.one_pos", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mul_one", 1],["dite_congr", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.gcd_div", 1],["Nat.gcd_gcd_self_left_right", 1],["Subtype.property", 1],["Nat.div_self", 1],["Nat.mod_one", 1],["sizeOf_nat", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Unit.unit", 1],["Fin.isLt", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["WellFounded.fix_eq", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Array.isEqvAux_self", 1],["Fin.ofNat'_succ", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["List.getLast_cons", 1],["Nat.succ_mul", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Exists", 1],["Nat.zero_lt_succ", 1],["Nat.find_x", 1],["List.length", 1],["List.get", 1],["funext", 1],["Nat.coprime_one_left", 1],["Subsingleton.allEq", 1],["Bool.and_true", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["absurd", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["not_lt", 1],["Nat.dvd_zero", 1],["UFModel.Agrees.empty", 1],["of_decide_eq_true", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.lcm_dvd", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.mul_div_cancel_left", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.coprime.coprime_div_left", 1],["Nat.add_comm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["zero_lt_of_lt", 1],["Nat.mul_dvd_mul_right", 1],["Nat.lt_eq", 1],["Nat.find_min", 1],["and", 1],["Nat.coprime.gcd_both", 1],["Array.get", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.get_singleton", 1],["dite_true", 1]]],
["Array.data", 127, [["Eq.refl", 39],["Array.size", 35],["Eq", 32],["OfNat.ofNat", 30],["congrArg", 29],["Eq.mpr", 26],["Eq.trans", 25],["Fin.mk", 25],["LT.lt", 23],["congrFun", 22],["Eq.symm", 21],["Fin.val", 20],["of_eq_true", 17],["rfl", 17],["Nat.lt_of_lt_of_le", 16],["eq_self", 16],["Array.get", 14],["Nat.lt_succ_self", 14],["Bool.true", 11],["Nat.le_refl", 11],["Array.data", 11],["HAdd.hAdd", 11],["Option.some", 10],["Fin.isLt", 10],["BinaryHeap.arr", 10],["congr", 8],["Array.size_set", 8],["UnionFind.arr", 7],["dite_congr", 7],["HSub.hSub", 7],["Subtype.property", 7],["Classical.em", 6],["WellFounded.fix", 6],["UnionFind.size", 6],["Array.mk", 5],["Option.none", 5],["Subtype.mk", 5],["Nat.le_of_lt", 5],["eq_false", 5],["Array.push", 5],["eq_true", 5],["dite_true", 5],["Eq.mpr_prop", 5],["List.cons", 4],["BinaryHeap.heapifyDown", 4],["eq_of_heq", 4],["UFModel.Agrees.get_eq", 4],["dif_neg", 4],["HEq.refl", 4],["Nat.lt_of_le_of_lt", 4],["Array.get?_eq_get?", 4],["of_decide_eq_true", 4],["Nat.sub_lt", 4],["UFModel.parent", 4],["UFNode.rank", 4],["dif_pos", 4],["dite", 4],["PSigma.mk", 4],["List.nil", 4],["Nat.sub_le", 3],["And.left", 3],["sorryAx", 3],["sizeOf_nat", 3],["And.intro", 3],["Array.set", 3],["Nat.zero_lt_of_lt", 3],["Nat.add_comm", 3],["HAppend.hAppend", 3],["Array.size_push", 3],["UFNode.mk", 3],["funext", 3],["Nat.le_add_right", 3],["UFNode.parent", 3],["eq_true_of_decide", 3],["UnionFind.model'", 3],["FloatArray.size", 3],["Nat.lt_eq", 3],["Subtype", 3],["Array.get?", 3],["Exists.intro", 3],["ByteArray.size", 3],["PProd.fst", 3],["dite_false", 3],["List.concat_eq_append", 3],["WellFoundedRelation.rel", 3],["Nat.add_assoc", 3],["List.set", 2],["And.right", 2],["Nat.le_of_succ_le", 2],["UFModel.Models.parent_eq", 2],["ne_eq", 2],["Eq.mp", 2],["And", 2],["LE.le", 2],["UFModel.Models.rank_eq", 2],["List.get?_eq_get", 2],["Nat.sub_succ_lt_self", 2],["UnionFind.rankMaxAux", 2],["Unit.unit", 2],["UFModel.rank", 2],["Array.swap", 2],["Subtype.val", 2],["UFModel.Models.parent_eq'", 2],["BinaryHeap.size_pos_of_max", 2],["List.get", 2],["Array.pop", 2],["UFModel.Models.size_eq", 2],["Nat.succ_pos", 2],["Exists", 2],["BinaryHeap.max", 2],["List.get?", 2],["UFModel.Models", 2],["Nat.lt_trans", 2],["Array.size_pop", 2],["UFModel.push", 2],["UFModel.Agrees.mk'", 2],["Array.size_swap", 2],["BinaryHeap.size", 2],["le_of_not_lt", 2],["List.toArray", 2],["Decidable.decide", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["Nat.lt_of_succ_le", 2],["Bool.false", 2],["if_neg", 1],["ite_true", 1],["BEq.beq", 1],["ite_false", 1],["BinaryHeap.insert.proof_1", 1],["List.drop", 1],["le_antisymm", 1],["UFModel.Agrees.push", 1],["lt_irrefl", 1],["UFNode.value", 1],["List.singleton_append", 1],["le_of_lt", 1],["Array.mk.sizeOf_spec", 1],["Ne.symm", 1],["not_lt_of_ge", 1],["UnionFind.rankMax", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqv", 1],["Ne", 1],["Nat.le_of_lt_succ", 1],["UFModel.Agrees.size_eq", 1],["Sigma", 1],["Nat.sub_lt_sub_left", 1],["Array.get?_set_ne", 1],["Array.mkEmpty", 1],["BinaryHeap.popMaxAux.proof_2", 1],["List.toArrayAux_data", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["decide_eq_true_eq", 1],["List.toArray_data", 1],["Array.toListLitAux", 1],["if_pos", 1],["WellFounded.fix_eq", 1],["List.get?_set_ne", 1],["List.length_concat", 1],["UFModel.rank_lt", 1],["Option.some.inj", 1],["Array.indexOfAux.proof_2", 1],["Nat.pred_le", 1],["HMul.hMul", 1],["Array.get?_push_lt", 1],["List.length_replicate", 1],["ite_congr", 1],["BinaryHeap.mkHeap", 1],["Nat.succ", 1],["List.get?_set_of_lt", 1],["UFModel.Models.empty", 1],["SizeOf.sizeOf", 1],["List.length_dropLast", 1],["List.get?_append", 1],["Array.isEqvAux_self", 1],["True.intro", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Array.toArrayLit", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["UnionFind.lt_rankMax'", 1],["eq_false'", 1],["Array.indexOfAux", 1],["UnionFind.lt_rankMax", 1],["List.length_set", 1],["Nat.add_zero", 1],["And.imp", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["List.get?_concat_length", 1],["Array.eraseIdx'.proof_1", 1],["max", 1],["BinaryHeap.popMaxAux.proof_1", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["List.redLength", 1],["Nat.div_le_self", 1],["List.get?_len_le", 1],["UFModel.Agrees.empty", 1],["unsafeCast", 1],["Iff.mpr", 1],["UnionFind.rankMaxAux.proof_1", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Bool.and_true", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["UnionFind.rank_lt", 1],["Array.indexOfAux.proof_1", 1],["List.append_nil", 1],["Array.eraseIdxSzAux", 1],["Array.ext'", 1],["BinaryHeap.heapifyUp", 1],["Nat.add_eq", 1],["UFModel.empty", 1],["List.toArrayAux", 1],["Array.isEqvAux.proof_1", 1],["ite", 1],["Array.get?_push_eq", 1],["Decidable.of_not_not", 1],["UnionFind.findAux", 1],["UFModel.Models.push", 1],["Array.isEqvAux.proof_3", 1],["UFModel.Agrees.set", 1],["UnionFind.rankMaxAux.proof_2", 1],["Not", 1],["Nat.pred_lt'", 1],["and", 1],["Nat.lt_of_lt_of_eq", 1],["False.elim", 1],["Array.getLit", 1],["Array.get_eq_get", 1],["True", 1],["List.append_assoc", 1],["PSigma", 1]]],
["Membership.mem", 127, [["Membership.mem", 55],["Eq.refl", 46],["congrArg", 38],["Eq", 38],["Eq.trans", 37],["of_eq_true", 35],["propext", 30],["congrFun", 27],["Iff", 26],["Eq.mpr", 25],["Eq.symm", 24],["List.cons", 23],["Or", 23],["And.intro", 23],["iff_self", 19],["And", 19],["congr", 19],["Iff.intro", 18],["Exists.intro", 18],["List.mem_cons", 18],["eq_false", 16],["List.not_mem_nil", 15],["HEq.refl", 15],["Exists", 15],["List.nil", 14],["False", 12],["eq_self", 11],["Iff.mpr", 11],["List.Mem.tail", 11],["Iff.mp", 11],["rfl", 11],["Or.inr", 11],["Or.inl", 10],["OfNat.ofNat", 10],["List.card", 10],["implies_congr", 9],["Bool.true", 9],["PProd.fst", 9],["Not", 9],["eq_of_heq", 8],["Unit.unit", 8],["Iff.rfl", 8],["HAdd.hAdd", 8],["Decidable.em", 7],["List.mem_cons_self", 7],["funext", 7],["List.Mem.head", 7],["Or.elim", 6],["List.mem_append", 6],["false_and", 6],["List.insert", 6],["eq_true", 5],["And.left", 5],["List.mem_insert_iff", 5],["List.length", 5],["List", 5],["Option.mem_def", 5],["List.map", 5],["or_false", 4],["eq_true_of_decide", 4],["false_or", 4],["List.mem_cons_of_mem", 4],["Eq.mp", 4],["if_pos", 4],["forall_congr", 4],["Subsingleton.elim", 4],["And.right", 4],["List.eq_or_mem_of_mem_cons", 4],["List.card_nil", 4],["HAppend.hAppend", 3],["List.mem_join", 3],["List.mem_bind", 3],["List.insert_of_not_mem", 3],["Bool.false", 3],["List.insert_of_mem", 3],["if_neg", 3],["or_assoc", 3],["absurd", 3],["LE.le", 3],["List.nil_append", 3],["ite", 3],["List.remove", 3],["dite", 3],["Decidable", 2],["Fin.mk", 2],["List.get_mem", 2],["eq_false'", 2],["ne_eq", 2],["Or.resolve_left", 2],["not_or", 2],["le_refl", 2],["eq_false_of_decide", 2],["List.disjoint_comm", 2],["List.card_cons_of_mem", 2],["List.erase_eq_erasep", 2],["List.disjoint", 2],["List.exists_of_mem_map", 2],["exists_false", 2],["Decidable.isTrue", 2],["Function.inv_fun_eq", 2],["Function.inv_fun_on_pos", 2],["List.mem_map", 2],["List.erase", 2],["List.singleton_disjoint", 2],["Nat.add", 2],["decide_eq_true_eq", 2],["forall_eq", 2],["List.exists_mem_of_length_pos", 2],["Ne.symm", 2],["sorryAx", 2],["List.get", 2],["mt", 2],["List.instDecidableMemListInstMembershipList", 2],["Ne", 2],["id", 2],["imp_self", 2],["Decidable.isFalse", 2],["and_imp", 2],["List.get?_eq_some", 2],["List.card_cons_of_not_mem", 2],["implies_true", 2],["true_or", 2],["Function.LeftInverse_inv_fun", 2],["or_iff_left_iff_imp", 1],["Subtype.property", 1],["List.inj_on", 1],["List.Mem", 1],["Function.inv_fun", 1],["Function.inv_fun_on_eq", 1],["List.erasep_subset", 1],["List.subset_def", 1],["List.card_append_disjoint", 1],["List.repeat'", 1],["BEq.beq", 1],["Option.some", 1],["exists_eq_right_right'", 1],["Function.comp", 1],["Option.join_eq_some", 1],["List.card_eq_of_equiv", 1],["List.mem_remove_iff", 1],["List.mem_map_of_mem", 1],["List.card_le_card_cons", 1],["List.mem_iff_get", 1],["eq_comm", 1],["List.foldr", 1],["or_comm", 1],["List.nil_union", 1],["Option.eq_none_iff_forall_not_mem", 1],["decidableBEx.proof_4", 1],["Nat.succ_ne_zero", 1],["List.disjoint_append_left", 1],["List.cons_union", 1],["Option.decidable_exists_mem.proof_3", 1],["iff_false", 1],["List.mem_of_mem_erasep", 1],["trivial", 1],["List.ne_of_not_mem_cons", 1],["Nat.le_trans", 1],["List.reverseAux", 1],["List.mem_filterAux", 1],["List.map_cons", 1],["forall_and_distrib", 1],["List.mem_reverseAux", 1],["List.Fin.exists_iff", 1],["List.mem_filter", 1],["decidableBEx.proof_2", 1],["List.mem_union_iff", 1],["Option.map_some'", 1],["List.card_subset_le", 1],["Nat.le_antisymm", 1],["Nat.le_succ", 1],["List.join", 1],["not_exists", 1],["List.union", 1],["Iff.trans", 1],["not_and", 1],["List.not_mem_of_not_mem_cons", 1],["List.exists_mem_cons_of_exists", 1],["Option.get", 1],["Option.decidable_exists_mem.proof_2", 1],["List.length_pos_of_mem", 1],["List.length_pos_of_ne_nil", 1],["true_and", 1],["Option.some.injEq", 1],["List.exists_or_eq_self_of_erasep", 1],["Nat.add_zero", 1],["List.instDecidableMemListInstMembershipList.proof_1", 1],["decidableBEx.proof_3", 1],["List.or_exists_of_exists_mem_cons", 1],["decidable_of_decidable_of_iff", 1],["or_true", 1],["Nat.zero_add", 1],["List.exists_of_erasep", 1],["List.eq_of_mem_singleton", 1],["List.mem_singleton", 1],["List.elem_eq_true_of_mem", 1],["List.append", 1],["Nat.add_eq", 1],["List.mem_erasep_of_neg", 1],["decidableBEx.proof_1", 1],["Function.LeftInverse.surjective", 1],["List.erase_subset", 1],["Nat.zero_le", 1],["Function.inv_fun_on_neg", 1],["false_implies", 1],["Prod.mk.injEq", 1],["Nat.le_of_succ_le_succ", 1],["List.filterAux", 1],["Option.ext", 1],["List.exists_mem_cons_of", 1],["List.cons_append", 1],["Option.bind_eq_some", 1],["List.get_of_mem", 1],["Option.decidable_exists_mem.proof_1", 1],["Decidable.decide", 1],["or_imp_distrib", 1],["List.union_equiv_append", 1],["List.equiv_iff_subset_and_subset", 1],["List.erasep", 1],["List.mem_reverse", 1],["LT.lt", 1],["False.elim", 1],["Set.univ", 1],["List.mem_of_elem_eq_true", 1],["List.set", 1]]],
["Nat.succ_sub_succ_eq_sub", 124, [["Eq", 47],["Eq.refl", 42],["Nat.gcd", 35],["rfl", 31],["Eq.mpr", 31],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 20],["congrArg", 19],["congrFun", 18],["HMod.hMod", 16],["of_eq_true", 16],["Nat.gcd_dvd_right", 16],["eq_self", 13],["Eq.symm", 13],["Fin.mk", 12],["Fin.val", 12],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.gcd_dvd_left", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["HAdd.hAdd", 7],["congr", 7],["Bool.true", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["And.intro", 6],["Nat.succ", 6],["Nat.gcd_rec", 5],["HDiv.hDiv", 5],["eq_true_of_decide", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Iff.intro", 5],["iff_self", 5],["Nat.dvd_mul_left", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["And.left", 4],["Nat.gcd_succ", 4],["Nat.lcm", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.coprime.coprime_dvd_left", 4],["Exists.intro", 4],["Nat.gcd_dvd", 4],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.coprime.coprime_dvd_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.gcd_zero_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Nat.gcd.induction", 3],["HSub.hSub", 3],["propext", 3],["dite", 2],["Nat.le_of_dvd", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.mul_zero", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Array.size", 2],["Nat.div_mul_cancel", 2],["Nat.dvd_lcm_left", 2],["Nat.mod_eq_of_lt", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["And", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Nat.coprime.gcd_left", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["id", 2],["Fin.ofNat'", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Decidable.decide", 2],["LT.lt", 2],["Array.isEqvAux_self", 1],["Nat.gcd_self", 1],["PProd.fst", 1],["UInt32.ofNat", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UInt32.val", 1],["List.cons", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["sizeOf_nat", 1],["Fin.nsmuls_eq", 1],["List.getLast", 1],["List.nil", 1],["Array.isEqvAux.proof_3", 1],["List.cons_ne_nil", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["List.getLast_singleton", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Bool.false", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mod_self", 1],["Nat.sub_succ_lt_self", 1],["Nat.mod_add_mod", 1],["Array.isEqvAux.proof_1", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Classical.em", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["Nat.one_pos", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Bool.and_true", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["List.getLast_cons", 1],["Nat.succ_mul", 1],["Exists", 1],["List.get", 1],["Nat.zero_lt_succ", 1],["List.length", 1],["Subsingleton.allEq", 1],["funext", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Iff.mp", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["absurd", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["Nat.gcd_gcd_self_right_right", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.lcm_dvd", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.mul_div_cancel_left", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.coprime.coprime_div_left", 1],["zero_lt_of_lt", 1],["Nat.add_comm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.mul_dvd_mul_right", 1],["Array.get", 1],["Nat.lt_eq", 1],["and", 1],["Nat.coprime.gcd_both", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.get_singleton", 1],["dite_true", 1]]],
["Nat.succ_le_succ", 123, [["Eq", 47],["Eq.refl", 42],["Nat.gcd", 35],["Eq.mpr", 31],["rfl", 29],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 20],["congrArg", 19],["congrFun", 18],["HMod.hMod", 16],["of_eq_true", 16],["Nat.gcd_dvd_right", 16],["eq_self", 13],["Eq.symm", 13],["Fin.mk", 12],["Fin.val", 12],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.gcd_dvd_left", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["HAdd.hAdd", 7],["congr", 7],["Bool.true", 7],["And.intro", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["Nat.succ", 6],["Nat.gcd_rec", 5],["HDiv.hDiv", 5],["eq_true_of_decide", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Iff.intro", 5],["iff_self", 5],["Nat.dvd_mul_left", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["And.left", 4],["Nat.gcd_succ", 4],["Nat.lcm", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.coprime.coprime_dvd_left", 4],["Exists.intro", 4],["Nat.gcd_dvd", 4],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.coprime.coprime_dvd_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.gcd_zero_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Nat.gcd.induction", 3],["HSub.hSub", 3],["propext", 3],["dite", 2],["Nat.le_of_dvd", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.mul_zero", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Array.size", 2],["Nat.div_mul_cancel", 2],["Nat.dvd_lcm_left", 2],["Nat.mod_eq_of_lt", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["And", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Nat.coprime.gcd_left", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["id", 2],["Fin.ofNat'", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Decidable.decide", 2],["LT.lt", 2],["Array.isEqvAux_self", 1],["Nat.gcd_self", 1],["PProd.fst", 1],["UInt32.ofNat", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UInt32.val", 1],["List.cons", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["sizeOf_nat", 1],["Fin.nsmuls_eq", 1],["List.getLast", 1],["List.nil", 1],["Array.isEqvAux.proof_3", 1],["List.cons_ne_nil", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["List.getLast_singleton", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Bool.false", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mod_self", 1],["Nat.sub_succ_lt_self", 1],["Nat.mod_add_mod", 1],["Array.isEqvAux.proof_1", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Classical.em", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["Nat.one_pos", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Bool.and_true", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["List.getLast_cons", 1],["Nat.succ_mul", 1],["Exists", 1],["List.get", 1],["Nat.zero_lt_succ", 1],["List.length", 1],["Subsingleton.allEq", 1],["funext", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Iff.mp", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["absurd", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["Nat.gcd_gcd_self_right_right", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.lcm_dvd", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.mul_div_cancel_left", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.coprime.coprime_div_left", 1],["zero_lt_of_lt", 1],["Nat.add_comm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.mul_dvd_mul_right", 1],["Array.get", 1],["Nat.lt_eq", 1],["and", 1],["Nat.coprime.gcd_both", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.get_singleton", 1],["dite_true", 1]]],
["Nat.lt_of_lt_of_le", 123, [["Eq", 45],["Eq.refl", 39],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["HMul.hMul", 25],["OfNat.ofNat", 24],["Eq.trans", 19],["congrArg", 18],["congrFun", 17],["HMod.hMod", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_self", 11],["Nat.mod_lt", 10],["Fin.mk", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["HAdd.hAdd", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["congr", 6],["Nat.succ", 6],["And.intro", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["HDiv.hDiv", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Nat.gcd_dvd", 4],["eq_true_of_decide", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.gcd_zero_right", 3],["propext", 3],["And.right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Fin.size_positive'", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.lcm_comm", 3],["Nat.dvd_refl", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.lcm_zero_left", 2],["Nat.gcd_mul_right", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.dvd_lcm_left", 2],["Nat.coprime.mul", 2],["Fin.ofNat'", 2],["Nat.dvd_mod_iff", 2],["True", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.gcd_left", 2],["Nat.gcd_one_right", 2],["Nat.le_of_dvd", 2],["Fin.eq_of_val_eq", 2],["Iff.rfl", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.mul_zero", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.mul_def", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Fin.add_def", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.zero_mod", 2],["Iff.mpr", 1],["MonoidWithZero.zero_mul", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.lt_of_lt_of_le", 1],["Fin.one_val", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.add", 1],["of_decide_eq_true", 1],["Nat.coprime_one_left", 1],["Nat.add_eq", 1],["Nat.gcd_div", 1],["Fin.nsmuls_eq", 1],["Unit.unit", 1],["List.drop", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.zero_div", 1],["Nat.gcd_mul_right_left", 1],["Nat.gcd_mul_lcm", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Subsingleton.allEq", 1],["Nat.add_zero", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Nat.mul_mod", 1],["Nat.mul_dvd_mul_left", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.mod_one", 1],["Array.toArrayLit", 1],["Nat.dvd_zero", 1],["Fin.ext", 1],["Nat.mod_self", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["UInt32.ofNat", 1],["Array.toListLitAux", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["UInt32.val", 1],["Bool.false", 1],["Array.getLit", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["HSub.hSub", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["sorryAx", 1],["Fin.isLt", 1],["Nat.mul_one", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.add_mod_mod", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.le_of_succ_le", 1],["Nat.gcd_gcd_self_right_left", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Nat.coprime.coprime_div_left", 1],["Nat.gcd_mul_left", 1],["id", 1],["Nat.add_comm", 1],["Decidable.isTrue", 1],["Fin.ofNat'_succ", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["UInt8.val", 1],["zero_lt_of_lt", 1],["Array.data", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.gcd_self", 1],["Nat.succ_mul", 1],["List.cons", 1],["Fin.mk.injEq", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["Exists", 1],["Nat.coprime_mul_iff_left", 1],["Nat.lt_succ_self", 1]]],
["Nat.zero_le", 123, [["Eq", 47],["Eq.refl", 42],["Nat.gcd", 35],["Eq.mpr", 31],["rfl", 30],["OfNat.ofNat", 26],["HMul.hMul", 25],["Eq.trans", 20],["congrArg", 19],["congrFun", 18],["HMod.hMod", 16],["of_eq_true", 16],["Nat.gcd_dvd_right", 16],["eq_self", 13],["Eq.symm", 13],["Fin.mk", 12],["Fin.val", 12],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.gcd_dvd_left", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["HAdd.hAdd", 7],["congr", 7],["Bool.true", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["And.intro", 6],["Nat.succ", 6],["Nat.gcd_rec", 5],["HDiv.hDiv", 5],["eq_true_of_decide", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Nat.coprime", 5],["Iff.intro", 5],["iff_self", 5],["Nat.dvd_mul_left", 5],["Fin.val_eq_of_lt", 5],["Nat.coprime.symm", 5],["And.left", 4],["Nat.gcd_succ", 4],["Nat.lcm", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.coprime.coprime_dvd_left", 4],["Exists.intro", 4],["Nat.gcd_dvd", 4],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Eq.mp", 3],["Nat.dvd_refl", 3],["Nat.lcm_comm", 3],["Nat.coprime.coprime_dvd_right", 3],["True", 3],["And.right", 3],["Fin.size_positive'", 3],["Nat.gcd_zero_right", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Nat.gcd.induction", 3],["HSub.hSub", 3],["propext", 3],["dite", 2],["Nat.le_of_dvd", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.mul_zero", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Array.size", 2],["Nat.div_mul_cancel", 2],["Nat.dvd_lcm_left", 2],["Nat.mod_eq_of_lt", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Fin.mul_def", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["And", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.dvd_mod_iff", 2],["Nat.coprime.gcd_left", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Nat.lcm_zero_left", 2],["id", 2],["Fin.ofNat'", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Decidable.decide", 2],["LT.lt", 2],["Array.isEqvAux_self", 1],["Nat.gcd_self", 1],["PProd.fst", 1],["UInt32.ofNat", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["UInt32.val", 1],["List.cons", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime_mul_iff_left", 1],["dif_neg", 1],["Iff.mpr", 1],["sizeOf_nat", 1],["Fin.nsmuls_eq", 1],["List.getLast", 1],["List.nil", 1],["Array.isEqvAux.proof_3", 1],["List.cons_ne_nil", 1],["Nat.mul_mod", 1],["Decidable.isTrue", 1],["WellFoundedRelation.rel", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_mul_lcm", 1],["Fin.ext", 1],["Nat.mul_dvd_mul_left", 1],["Nat.add_mod_mod", 1],["List.getLast_singleton", 1],["Nat.mod_eq_zero_of_dvd", 1],["Fin.one_val", 1],["Nat.mul_div_assoc", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Bool.false", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.mod_self", 1],["Nat.sub_succ_lt_self", 1],["Nat.mod_add_mod", 1],["Array.isEqvAux.proof_1", 1],["Array.isEqv", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_div", 1],["Nat.mul_one", 1],["dite_congr", 1],["Fin.mk.injEq", 1],["MonoidWithZero.zero_mul", 1],["Classical.em", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.mod_one", 1],["Nat.div_self", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Unit.unit", 1],["Nat.one_pos", 1],["decide_eq_true_eq", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.zero_div", 1],["Nat.dvd_lcm_right", 1],["Fin.isLt", 1],["WellFounded.fix_eq", 1],["Bool.and_true", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime_comm", 1],["Or.inl", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Fin.ofNat'_succ", 1],["Nat.mul_mod_mul_left", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["List.getLast_cons", 1],["Nat.succ_mul", 1],["Exists", 1],["List.get", 1],["Nat.zero_lt_succ", 1],["List.length", 1],["Subsingleton.allEq", 1],["funext", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Iff.mp", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["Nat.lt_trans", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["absurd", 1],["Nat.div_zero", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.dvd_zero", 1],["Nat.gcd_gcd_self_right_right", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.lcm_dvd", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.mul_div_cancel_left", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.eq_one_of_dvd_one", 1],["UInt8.toChar_aux", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.coprime.coprime_div_left", 1],["zero_lt_of_lt", 1],["Nat.add_comm", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.isValidChar", 1],["Nat.mul_dvd_mul_right", 1],["Array.get", 1],["Nat.lt_eq", 1],["and", 1],["Nat.coprime.gcd_both", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["List.get_singleton", 1],["dite_true", 1]]],
["Decidable", 123, [["Decidable", 50],["Decidable.isTrue", 50],["Decidable.isFalse", 49],["Eq", 34],["dite", 28],["inferInstanceAs", 15],["Unit.unit", 9],["LT.lt", 9],["decidable_of_decidable_of_iff", 8],["LE.le", 7],["decEq", 5],["And", 5],["Bool.true", 4],["List.cons", 4],["rfl", 4],["PProd.fst", 4],["Fin.val", 3],["Eq.refl", 3],["Int.negSucc", 3],["Membership.mem", 3],["Not", 3],["Exists", 3],["HEq.refl", 2],["DecidableRel", 2],["Quotient.mk", 2],["Or", 2],["Int.NonNeg", 2],["OfNat.ofNat", 2],["Nat.decLe", 2],["Int.NonNeg.mk", 2],["decidable_of_iff", 2],["False", 2],["Ord.compare", 2],["HSub.hSub", 2],["absurd", 2],["inferInstance", 2],["trivial", 2],["not_false", 2],["USize.decLt", 1],["Nat.decEq", 1],["List.hasDecEq.proof_2", 1],["instDecidableEqBool.proof_1", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_2", 1],["Int.decEq.proof_1", 1],["Ordering.lt", 1],["Float.decLt", 1],["instDecidableEqQuotient.proof_2", 1],["decidable_of_bool.proof_2", 1],["And.intro", 1],["instDecidableEqSum.proof_4", 1],["decidable_of_bool.proof_1", 1],["Nat.gcd", 1],["List.Pairwise.nil", 1],["Inhabited.mk", 1],["PUnit.subsingleton", 1],["forall_prop_decidable.proof_1", 1],["UInt8.decEq", 1],["Int.ofNat", 1],["withPtrEqDecEq.proof_2", 1],["USize.decEq.proof_1", 1],["Nat.succ", 1],["decidableLt_of_decidableLe.proof_1", 1],["Prod.snd", 1],["DecidablePred", 1],["instSubsingletonDecidable", 1],["List.hasDecidableLt.proof_3", 1],["instDecidableAnd.proof_1", 1],["UInt16.decLt", 1],["instDecidableEqSum.proof_1", 1],["Prod.fst", 1],["instSubsingletonDecidable.proof_1", 1],["Option.isNone_iff_eq_none", 1],["List.instDecidableMemListInstMembershipList.proof_1", 1],["Nat.ne_of_beq_eq_false", 1],["LinearOrder.decidable_le", 1],["instDecidableXor.proof_3", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_1", 1],["UInt16.decLe", 1],["List.hasDecEq.proof_1", 1],["instDecidableOr.proof_1", 1],["USize.decEq", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_1", 1],["decidableLt_of_decidableLe.proof_2", 1],["UInt32.decLt", 1],["decidableBEx.proof_3", 1],["List.hasDecEq.proof_4", 1],["Iff.mp", 1],["Array.instDecidableEqArray.proof_3", 1],["List.lt.nil", 1],["Classical.em", 1],["Int.decEq.proof_5", 1],["ToString.mk", 1],["Nat.eq_of_beq_eq_true", 1],["Option.decidable_exists_mem.proof_3", 1],["withPtrEqDecEq.proof_1", 1],["Nat.decidable_dvd.proof_1", 1],["Ordering.isLE", 1],["Subtype.mk", 1],["instDecidableIff.proof_3", 1],["instDecidableAnd.proof_2", 1],["List.decidablePairwise.proof_3", 1],["decidableBAll.proof_2", 1],["Option.decidable_forall_mem.proof_2", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["List.lt.head", 1],["UInt8.decLe", 1],["UInt64.decEq", 1],["Nonempty", 1],["UInt64.decLt", 1],["decidableBAll", 1],["Classical.choice", 1],["instDecidableEqProd.proof_3", 1],["UInt64.decEq.proof_2", 1],["List.hasDecidableLt.proof_4", 1],["instDecidableEqSum.proof_2", 1],["BEq.beq", 1],["le_antisymm", 1],["Nat.beq", 1],["toBoolUsing", 1],["List.lt.tail", 1],["instDecidableEqSum.proof_5", 1],["decidable_of_decidable_of_iff.proof_1", 1],["propext", 1],["decidableEq_of_decidableLe.proof_2", 1],["instDecidableXor.proof_4", 1],["Function.decidable_eq_pfun.proof_1", 1],["Array.isEqv", 1],["List.hasDecEq.proof_5", 1],["List.hasDecidableLt.proof_2", 1],["List.hasDecEq", 1],["decidableBEx.proof_4", 1],["Tactic.NormCast.instDecidableEqLabel.proof_1", 1],["Classical.propDecidable.proof_1", 1],["LinearOrder.decidable_lt", 1],["Prod.mk", 1],["Subtype.instDecidableEqSubtype.proof_2", 1],["exists_prop_decidable.proof_2", 1],["Fin.ne_of_val_ne", 1],["Or.inl", 1],["Nat.le_of_ble_eq_true", 1],["instDecidableXor.proof_2", 1],["decidableBAll.proof_1", 1],["instDecidableForAll.proof_3", 1],["Option.decidable_forall_mem.proof_1", 1],["LinearOrder.decidable_eq", 1],["Or.inr", 1],["Int.decEq", 1],["Fin.eq_of_val_eq", 1],["instDecidableEqProp.proof_1", 1],["instDecidableEqProd.proof_1", 1],["UInt16.decEq", 1],["Int.decEq.proof_3", 1],["Nat.decEq.proof_1", 1],["decidableBEx.proof_2", 1],["Array.instDecidableEqArray.proof_2", 1],["UInt8.decLt", 1],["instDecidableIff.proof_4", 1],["UInt64.decEq.proof_1", 1],["decidable_eq_of_bool_pred.proof_1", 1],["List.decidablePairwise.proof_4", 1],["Subsingleton.intro", 1],["Nat.not_le_of_not_ble_eq_true", 1],["List.decidablePairwise", 1],["Option.decidable_exists_mem.proof_2", 1],["UInt16.decEq.proof_1", 1],["UInt32.decEq.proof_2", 1],["UInt32.decEq", 1],["withPtrEq", 1],["UInt8.decEq.proof_2", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["Int.decEq.proof_6", 1],["Prod.Lex.decidable.proof_1", 1],["USize.decLe", 1],["decidableEq_of_decidableLe.proof_1", 1],["instDecidableIff.proof_2", 1],["List.decidablePairwise.proof_2", 1],["Quotient.recOnSubsingleton₂", 1],["Nat.decLt", 1],["List.hasDecidableLt.proof_1", 1],["UInt32.decLe", 1],["lt_of_le_not_le", 1],["Tactic.NormCast.instDecidableEqLabel.proof_2", 1],["instDecidableEqSum.proof_3", 1],["Nat.ble", 1],["HAdd.hAdd", 1],["Subtype.instDecidableEqSubtype.proof_1", 1],["exists_prop_decidable.proof_1", 1],["Iff.symm", 1],["instDecidableEqProd.proof_2", 1],["instDecidableXor.proof_1", 1],["List.hasDecEq.proof_3", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["decidableBEx.proof_1", 1],["forall_prop_decidable.proof_2", 1],["Array.instDecidableEqArray.proof_1", 1],["USize.decEq.proof_2", 1],["Nonempty.intro", 1],["instDecidableEqSum.proof_6", 1],["UInt64.decLe", 1],["ite", 1],["Int.decEq.proof_4", 1],["Option.decidable_exists_mem.proof_1", 1],["UInt32.decEq.proof_1", 1],["Decidable.decide", 1],["withPtrEqDecEq.proof_3", 1],["List.hasDecEq.proof_6", 1],["instDecidableForAll.proof_1", 1],["UInt8.decEq.proof_1", 1],["UInt16.decEq.proof_2", 1],["Quotient.sound", 1],["instDecidableIff.proof_1", 1],["Option.lt", 1],["List.decidablePairwise.proof_1", 1],["Float.decLe", 1],["instDecidableForAll.proof_2", 1],["Function.injective.eq_iff", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_2", 1],["Option.decidable_forall_mem.proof_3", 1],["instDecidableEqBool.proof_2", 1],["List.Pairwise", 1],["Int.decEq.proof_2", 1]]],
["Nat.lt_irrefl", 121, [["Eq", 44],["Eq.refl", 39],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["HMul.hMul", 25],["OfNat.ofNat", 24],["Eq.trans", 18],["congrArg", 17],["HMod.hMod", 16],["congrFun", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Fin.mk", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["eq_self", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["HAdd.hAdd", 6],["And.intro", 6],["congr", 6],["Nat.succ", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["HDiv.hDiv", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Nat.gcd_dvd", 4],["eq_true_of_decide", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.gcd_zero_right", 3],["propext", 3],["And.right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Fin.size_positive'", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.lcm_comm", 3],["Nat.dvd_refl", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.lcm_zero_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_mod", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.dvd_lcm_left", 2],["Fin.ofNat'", 2],["Nat.coprime.mul", 2],["True", 2],["Nat.dvd_mod_iff", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.gcd_left", 2],["Nat.gcd_one_right", 2],["Nat.le_of_dvd", 2],["Nat.mul_zero", 2],["id", 2],["HSub.hSub", 2],["Iff.rfl", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.eq_of_val_eq", 2],["Fin.mul_def", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Fin.add_def", 2],["Iff.mpr", 1],["List.nil", 1],["Nat.div_self", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.add_mod_mod", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Fin.nsmuls_eq", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Nat.gcd_div", 1],["Nat.mul_mod", 1],["Unit.unit", 1],["Fin.one_val", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["List.cons_ne_nil", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_gcd_self_right_left", 1],["Subsingleton.allEq", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Decidable.isTrue", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.gcd_mul_lcm", 1],["Nat.dvd_zero", 1],["Nat.one_pos", 1],["Nat.mod_one", 1],["Nat.mod_self", 1],["List.getLast", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime_comm", 1],["UInt32.ofNat", 1],["Or.inl", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Fin.isLt", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.mul_one", 1],["Nat.mul_dvd_mul_left", 1],["Nat.coprime.coprime_div_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.gcd_mul_left", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Fin.ext", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["zero_lt_of_lt", 1],["Nat.add_comm", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["Nat.succ_mul", 1],["List.getLast_singleton", 1],["PProd.fst", 1],["Fin.mk.injEq", 1],["Nat.gcd_pos_of_pos_left", 1],["Exists", 1],["MonoidWithZero.zero_mul", 1],["List.cons", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["List.get_singleton", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["List.length", 1],["Nat.coprime_mul_iff_left", 1]]],
["Nat.sub_lt", 121, [["Eq", 44],["Eq.refl", 39],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["HMul.hMul", 25],["OfNat.ofNat", 24],["Eq.trans", 18],["congrArg", 17],["HMod.hMod", 16],["congrFun", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Fin.mk", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["eq_self", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["HAdd.hAdd", 6],["And.intro", 6],["congr", 6],["Nat.succ", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["HDiv.hDiv", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Nat.gcd_dvd", 4],["eq_true_of_decide", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.gcd_zero_right", 3],["propext", 3],["And.right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Fin.size_positive'", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.lcm_comm", 3],["Nat.dvd_refl", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.lcm_zero_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_mod", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.dvd_lcm_left", 2],["Fin.ofNat'", 2],["Nat.coprime.mul", 2],["True", 2],["Nat.dvd_mod_iff", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.gcd_left", 2],["Nat.gcd_one_right", 2],["Nat.le_of_dvd", 2],["Nat.mul_zero", 2],["id", 2],["HSub.hSub", 2],["Iff.rfl", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.eq_of_val_eq", 2],["Fin.mul_def", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Fin.add_def", 2],["Iff.mpr", 1],["List.nil", 1],["Nat.div_self", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.add_mod_mod", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Fin.nsmuls_eq", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Nat.gcd_div", 1],["Nat.mul_mod", 1],["Unit.unit", 1],["Fin.one_val", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["List.cons_ne_nil", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_gcd_self_right_left", 1],["Subsingleton.allEq", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Decidable.isTrue", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.gcd_mul_lcm", 1],["Nat.dvd_zero", 1],["Nat.one_pos", 1],["Nat.mod_one", 1],["Nat.mod_self", 1],["List.getLast", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime_comm", 1],["UInt32.ofNat", 1],["Or.inl", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Fin.isLt", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.mul_one", 1],["Nat.mul_dvd_mul_left", 1],["Nat.coprime.coprime_div_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.gcd_mul_left", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Fin.ext", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["zero_lt_of_lt", 1],["Nat.add_comm", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["Nat.succ_mul", 1],["List.getLast_singleton", 1],["PProd.fst", 1],["Fin.mk.injEq", 1],["Nat.gcd_pos_of_pos_left", 1],["Exists", 1],["MonoidWithZero.zero_mul", 1],["List.cons", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["List.get_singleton", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["List.length", 1],["Nat.coprime_mul_iff_left", 1]]],
["Nat.not_succ_le_self", 121, [["Eq", 44],["Eq.refl", 39],["Nat.gcd", 35],["rfl", 30],["Eq.mpr", 30],["HMul.hMul", 25],["OfNat.ofNat", 24],["Eq.trans", 18],["congrArg", 17],["HMod.hMod", 16],["congrFun", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.gcd_dvd_left", 11],["Fin.mk", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["eq_self", 11],["Nat.mod_lt", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["HAdd.hAdd", 6],["And.intro", 6],["congr", 6],["Nat.succ", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["HDiv.hDiv", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime", 5],["Nat.dvd_trans", 5],["Nat.coprime.symm", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["Nat.eq_zero_or_pos", 4],["Nat.gcd_dvd", 4],["eq_true_of_decide", 4],["Nat.lcm", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.gcd_zero_right", 3],["propext", 3],["And.right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Fin.size_positive'", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.lcm_comm", 3],["Nat.dvd_refl", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.lcm_zero_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_mod", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.gcd_mul_right", 2],["Nat.dvd_lcm_left", 2],["Fin.ofNat'", 2],["Nat.coprime.mul", 2],["True", 2],["Nat.dvd_mod_iff", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.coprime.gcd_left", 2],["Nat.gcd_one_right", 2],["Nat.le_of_dvd", 2],["Nat.mul_zero", 2],["id", 2],["HSub.hSub", 2],["Iff.rfl", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.coprime.coprime_mul_left", 2],["Fin.eq_of_val_eq", 2],["Fin.mul_def", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Fin.add_def", 2],["Iff.mpr", 1],["List.nil", 1],["Nat.div_self", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.add_mod_mod", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Fin.nsmuls_eq", 1],["Nat.coprime_one_left", 1],["of_decide_eq_true", 1],["Nat.gcd_div", 1],["Nat.mul_mod", 1],["Unit.unit", 1],["Fin.one_val", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["List.cons_ne_nil", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.gcd_gcd_self_right_left", 1],["Subsingleton.allEq", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Decidable.isTrue", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.gcd_mul_lcm", 1],["Nat.dvd_zero", 1],["Nat.one_pos", 1],["Nat.mod_one", 1],["Nat.mod_self", 1],["List.getLast", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime_comm", 1],["UInt32.ofNat", 1],["Or.inl", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.mod_add_mod", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Fin.isLt", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.mul_one", 1],["Nat.mul_dvd_mul_left", 1],["Nat.coprime.coprime_div_left", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.gcd_mul_left", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Fin.ext", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["zero_lt_of_lt", 1],["Nat.add_comm", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["Nat.succ_mul", 1],["List.getLast_singleton", 1],["PProd.fst", 1],["Fin.mk.injEq", 1],["Nat.gcd_pos_of_pos_left", 1],["Exists", 1],["MonoidWithZero.zero_mul", 1],["List.cons", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["List.get_singleton", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["List.length", 1],["Nat.coprime_mul_iff_left", 1]]],
["Nat.mod.inductionOn", 120, [["Eq", 43],["Eq.refl", 38],["Nat.gcd", 35],["rfl", 29],["Eq.mpr", 29],["HMul.hMul", 25],["OfNat.ofNat", 23],["Eq.trans", 18],["congrArg", 17],["HMod.hMod", 16],["congrFun", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_self", 11],["Nat.mod_lt", 10],["Fin.mk", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["HAdd.hAdd", 6],["And.intro", 6],["Nat.succ", 6],["congr", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["Nat.dvd_trans", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime.symm", 5],["HDiv.hDiv", 5],["Nat.coprime", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["And.left", 4],["eq_true_of_decide", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.lcm", 4],["Fin.size_positive'", 3],["Nat.lcm_comm", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["And.right", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["propext", 3],["Nat.coprime.gcd_left", 2],["Fin.ofNat'", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Fin.mul_def", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.le_of_dvd", 2],["Nat.coprime.coprime_mul_left", 2],["And", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.dvd_mod_iff", 2],["Nat.mul_zero", 2],["True", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_mul_right", 2],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Iff.mpr", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Decidable.isTrue", 1],["Nat.coprime_one_left", 1],["Fin.nsmuls_eq", 1],["Nat.gcd_div", 1],["Nat.mod_add_mod", 1],["Unit.unit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.isLt", 1],["Nat.mul_one", 1],["Nat.mul_mod", 1],["Nat.coprime.coprime_div_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.gcd_mul_left", 1],["Nat.gcd_mul_right_left", 1],["Nat.coprime_comm", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Fin.mk.injEq", 1],["Subsingleton.allEq", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Exists", 1],["MonoidWithZero.zero_mul", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.dvd_zero", 1],["Nat.div_self", 1],["Nat.mod_self", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["Nat.gcd_mul_lcm", 1],["UInt32.ofNat", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.gcd_self", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["of_decide_eq_true", 1],["Nat.mul_dvd_mul_left", 1],["Nat.succ_mul", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime.coprime_mul_right", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["id", 1],["Nat.add_comm", 1],["Or.inl", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["HSub.hSub", 1],["Fin.ext", 1],["Nat.add_mod_mod", 1],["Fin.one_val", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["Nat.mod_one", 1],["Nat.coprime_mul_iff_left", 1]]],
["Nat.mod_lt", 120, [["Eq", 43],["Eq.refl", 38],["Nat.gcd", 35],["rfl", 29],["Eq.mpr", 29],["HMul.hMul", 25],["OfNat.ofNat", 23],["Eq.trans", 18],["congrArg", 17],["HMod.hMod", 16],["congrFun", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_self", 11],["Nat.mod_lt", 10],["Fin.mk", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["HAdd.hAdd", 6],["And.intro", 6],["Nat.succ", 6],["congr", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["Nat.dvd_trans", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime.symm", 5],["HDiv.hDiv", 5],["Nat.coprime", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["And.left", 4],["eq_true_of_decide", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.lcm", 4],["Fin.size_positive'", 3],["Nat.lcm_comm", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["And.right", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["propext", 3],["Nat.coprime.gcd_left", 2],["Fin.ofNat'", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Fin.mul_def", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.le_of_dvd", 2],["Nat.coprime.coprime_mul_left", 2],["And", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.dvd_mod_iff", 2],["Nat.mul_zero", 2],["True", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_mul_right", 2],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Iff.mpr", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Decidable.isTrue", 1],["Nat.coprime_one_left", 1],["Fin.nsmuls_eq", 1],["Nat.gcd_div", 1],["Nat.mod_add_mod", 1],["Unit.unit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.isLt", 1],["Nat.mul_one", 1],["Nat.mul_mod", 1],["Nat.coprime.coprime_div_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.gcd_mul_left", 1],["Nat.gcd_mul_right_left", 1],["Nat.coprime_comm", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Fin.mk.injEq", 1],["Subsingleton.allEq", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Exists", 1],["MonoidWithZero.zero_mul", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.dvd_zero", 1],["Nat.div_self", 1],["Nat.mod_self", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["Nat.gcd_mul_lcm", 1],["UInt32.ofNat", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.gcd_self", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["of_decide_eq_true", 1],["Nat.mul_dvd_mul_left", 1],["Nat.succ_mul", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime.coprime_mul_right", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["id", 1],["Nat.add_comm", 1],["Or.inl", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["HSub.hSub", 1],["Fin.ext", 1],["Nat.add_mod_mod", 1],["Fin.one_val", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["Nat.mod_one", 1],["Nat.coprime_mul_iff_left", 1]]],
["Nat.div.inductionOn", 120, [["Eq", 43],["Eq.refl", 38],["Nat.gcd", 35],["rfl", 29],["Eq.mpr", 29],["HMul.hMul", 25],["OfNat.ofNat", 23],["Eq.trans", 18],["congrArg", 17],["HMod.hMod", 16],["congrFun", 16],["Nat.gcd_dvd_right", 16],["of_eq_true", 14],["Eq.symm", 13],["Fin.val", 12],["Nat.dvd_gcd", 11],["Nat.gcd_comm", 11],["Nat.gcd_dvd_left", 11],["eq_self", 11],["Nat.mod_lt", 10],["Fin.mk", 10],["Nat.dvd_antisymm", 9],["Fin.size_positive", 8],["Iff", 7],["Dvd.dvd", 7],["Nat.gcd_zero_left", 7],["HAdd.hAdd", 6],["And.intro", 6],["Nat.succ", 6],["congr", 6],["Nat.dvd_mul_left", 5],["iff_self", 5],["Nat.dvd_trans", 5],["Nat.gcd_rec", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Iff.intro", 5],["Nat.coprime.symm", 5],["HDiv.hDiv", 5],["Nat.coprime", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["And.left", 4],["eq_true_of_decide", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Nat.gcd_dvd", 4],["Nat.gcd_succ", 4],["Exists.intro", 4],["Nat.lcm", 4],["Fin.size_positive'", 3],["Nat.lcm_comm", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["And.right", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.gcd_zero_right", 3],["Nat.dvd_refl", 3],["propext", 3],["Nat.coprime.gcd_left", 2],["Fin.ofNat'", 2],["Fin.eq_of_val_eq", 2],["Fin.add_def", 2],["Fin.mul_def", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.le_of_dvd", 2],["Nat.coprime.coprime_mul_left", 2],["And", 2],["Nat.coprime.pow_left", 2],["Nat.gcd_mul_left_left", 2],["Nat.dvd_mod_iff", 2],["Nat.mul_zero", 2],["True", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.zero_mod", 2],["Nat.coprime.mul", 2],["Iff.rfl", 2],["Nat.gcd_one_right", 2],["Nat.div_mul_cancel", 2],["Nat.mod_eq_of_lt", 2],["Nat.gcd_mul_right", 2],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Iff.mpr", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Decidable.isTrue", 1],["Nat.coprime_one_left", 1],["Fin.nsmuls_eq", 1],["Nat.gcd_div", 1],["Nat.mod_add_mod", 1],["Unit.unit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.isLt", 1],["Nat.mul_one", 1],["Nat.mul_mod", 1],["Nat.coprime.coprime_div_left", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.gcd_mul_left", 1],["Nat.gcd_mul_right_left", 1],["Nat.coprime_comm", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Fin.mk.injEq", 1],["Subsingleton.allEq", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.mul_div_cancel_left", 1],["Fin.zero_def", 1],["Exists", 1],["MonoidWithZero.zero_mul", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.dvd_zero", 1],["Nat.div_self", 1],["Nat.mod_self", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["Nat.gcd_mul_lcm", 1],["UInt32.ofNat", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["zero_lt_of_lt", 1],["Nat.eq_zero_of_zero_dvd", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.gcd_self", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["of_decide_eq_true", 1],["Nat.mul_dvd_mul_left", 1],["Nat.succ_mul", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.mul_mod_mul_left", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.coprime.coprime_mul_right", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["id", 1],["Nat.add_comm", 1],["Or.inl", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["HSub.hSub", 1],["Fin.ext", 1],["Nat.add_mod_mod", 1],["Fin.one_val", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["Nat.mod_one", 1],["Nat.coprime_mul_iff_left", 1]]],
["ite", 118, [["Eq.refl", 57],["Eq", 55],["congrArg", 48],["Eq.trans", 45],["of_eq_true", 43],["Eq.mpr", 40],["congrFun", 33],["eq_self", 32],["Eq.symm", 31],["rfl", 30],["congr", 24],["Decidable.em", 22],["List.cons", 21],["eq_false", 20],["OfNat.ofNat", 19],["if_pos", 17],["eq_true", 17],["HAdd.hAdd", 17],["if_neg", 15],["Membership.mem", 14],["ite", 14],["LE.le", 14],["Not", 14],["ite_congr", 13],["LT.lt", 11],["List.card", 10],["le_refl", 10],["eq_true_of_decide", 10],["Bool.true", 10],["dite", 10],["List.length", 9],["min", 9],["And", 8],["List.erasep", 8],["propext", 8],["Subsingleton.elim", 7],["Iff.mpr", 7],["List.nil", 7],["max", 7],["Iff", 7],["ite_true", 6],["HSub.hSub", 6],["Fin.val", 6],["List.insert", 6],["List.erasep_cons_of_neg", 6],["le_of_lt", 5],["Or", 5],["Or.inr", 5],["Iff.mp", 5],["PProd.fst", 5],["ite_false", 5],["ne_eq", 5],["iff_self", 5],["List", 5],["min_eq_left", 5],["HAppend.hAppend", 5],["Ne.symm", 4],["List.mem_insert_iff", 4],["absurd", 4],["Nat.succ", 4],["And.right", 4],["Or.inl", 4],["And.left", 4],["Nat.zero_le", 4],["min_le_left", 4],["List.mem_cons", 4],["implies_congr", 4],["List.card_nil", 4],["List.erasep_cons_of_pos", 4],["Classical.em", 4],["List.not_mem_nil", 3],["And.intro", 3],["instDecidableLtToLTToPreorderToPartialOrder", 3],["UFModel.parent", 3],["Nat.toDigitsCore", 3],["HMod.hMod", 3],["List.map", 3],["HDiv.hDiv", 3],["List.insert_of_not_mem", 3],["le_max_left", 3],["max_eq_left", 3],["max_le", 3],["eq_min", 3],["min_le_right", 3],["Option.some", 3],["instDecidableLeToLEToPreorderToPartialOrder", 3],["Or.elim", 3],["max_eq_right", 3],["Nat.digitChar", 3],["min_eq_right", 3],["eq_max", 3],["le_max_right", 3],["Eq.mp", 3],["le_min", 3],["List.cons_append", 3],["List.length_cons", 3],["Iff.intro", 3],["if_false", 3],["False.elim", 3],["List.remove", 3],["List.insert_of_mem", 3],["true_and", 2],["Nat.sub_add_cancel", 2],["left_comm", 2],["false_and", 2],["min_comm", 2],["List.length_append", 2],["eq_of_heq", 2],["max_comm", 2],["not_iff_not_of_iff", 2],["List.erasep_cons", 2],["Nat.zero_min", 2],["le_antisymm", 2],["ite_self", 2],["List.card_cons_of_mem", 2],["HEq.refl", 2],["List.erase", 2],["List.nil_append", 2],["UnionFind.rankMaxAux", 2],["Nat.min_zero", 2],["Fin.mk", 2],["UFModel.rank", 2],["Unit.unit", 2],["List.mem_append", 2],["and_true", 2],["mt", 2],["List.length_nil", 2],["if_true", 2],["trivial", 2],["WellFounded.fix_eq", 2],["Nat.le_antisymm", 2],["Nat.lt_of_lt_of_le", 2],["le_or_gt", 2],["UnionFind.size", 2],["Nat.min_succ_succ", 2],["le_trans", 2],["List.instDecidableMemListInstMembershipList", 2],["List.exists_or_eq_self_of_erasep", 2],["Exists", 2],["WellFounded.fix", 2],["Nat.zero_add", 2],["List.exists_of_erasep", 2],["False", 2],["List.forall_mem_cons", 2],["if_ctx_congr_prop", 2],["Option.none", 2],["List.card_cons_of_not_mem", 2],["True", 2],["Nat.sub_lt", 2],["PSigma.mk", 2],["min_eq_right_of_lt", 1],["Function.comp", 1],["Nat.sub_lt_sub_left", 1],["Array.get?_set_ne", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.sub_add_eq_max", 1],["Functor.map", 1],["List.card_le_card_cons", 1],["Iff.rfl", 1],["List.inj_on", 1],["Exists.intro", 1],["List.foldr", 1],["UnionFind.lt_rankMax'", 1],["Nat.min_comm", 1],["max_eq_left_of_lt", 1],["Decidable", 1],["le_of_not_le", 1],["apply_ite", 1],["Nat.le_trans", 1],["not_exists", 1],["List.mem_of_ne_of_mem", 1],["Ne", 1],["Subtype.val", 1],["List.erasep_of_forall_not", 1],["ite_not", 1],["Function.comp_apply", 1],["Fin.isLt", 1],["lt_of_le_of_ne", 1],["and_false", 1],["List.take", 1],["Nat.le_or_le", 1],["Nat.zero", 1],["List.card_subset_le", 1],["List.forall_mem_nil", 1],["UFModel.rank_lt", 1],["NeqIffBeqFalse", 1],["List.repeat'", 1],["List.cons_union", 1],["Nat.lt_irrefl", 1],["Array.set", 1],["UnionFind.lt_rankMax", 1],["Nat.lt_succ_self", 1],["Nat.le_succ", 1],["UFModel.Agrees.get_eq", 1],["List.equiv_iff_subset_and_subset", 1],["dite_not", 1],["List.union", 1],["List.Mem.head", 1],["List.mem_union_iff", 1],["Nat.succ_pos", 1],["dif_neg", 1],["funext", 1],["if_ctx_congr", 1],["Nat.sub_eq_zero_iff_le", 1],["not_and", 1],["Nat.lt_succ_iff", 1],["List.erase_cons_tail", 1],["List.subset.refl", 1],["List.get?", 1],["forall_congr", 1],["Nat.le_of_not_le", 1],["Option.some.injEq", 1],["max_assoc", 1],["Nat.succ.inj", 1],["not_false_iff", 1],["List.map₂", 1],["UnionFind.rank_lt", 1],["List.nil_union", 1],["EqIffBeqTrue", 1],["Or.resolve_left", 1],["apply_dite", 1],["of_decide_eq_true", 1],["not_or_intro", 1],["Nat.sub_self", 1],["List.exists_of_mem_map", 1],["UFModel.Agrees.set", 1],["le_of_not_ge", 1],["dif_pos", 1],["GE.ge", 1],["le_total", 1],["Array.get?_set_eq", 1],["List.mem_cons_of_mem", 1],["le_of_not_lt", 1],["List.modifyNth", 1],["Nat.min", 1],["min_assoc", 1],["Nat.min_eq_left", 1],["min_self", 1],["Nat.sub_eq_sub_min", 1],["implies_true", 1],["List.card_append_disjoint", 1],["and_self", 1],["List.cons.injEq", 1],["Nat.to_digits_core_length", 1],["Array.get?", 1],["List.forall_mem_of_forall_mem_cons", 1],["false_or", 1],["List.union_equiv_append", 1],["or_assoc", 1],["List.mem_of_mem_erasep", 1],["List.erase_cons_head", 1],["Subtype.property", 1],["not_false", 1],["if_ctx_simp_congr_prop", 1],["UnionFind.rankMax", 1],["List.card_eq_of_equiv", 1],["List.length_repeat'", 1],["eq_false'", 1],["Nat.pred", 1]]],
["SizeOf.sizeOf", 114, [["Eq.refl", 109],["OfNat.ofNat", 106],["HAdd.hAdd", 85],["SizeOf.sizeOf", 80],["congrArg", 11],["Eq.symm", 11],["Eq.trans", 10],["of_eq_true", 9],["Bool.true", 9],["Eq", 8],["Nat.Linear.ExprCnstr.mk", 8],["List.nil", 8],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 8],["Nat.Linear.Expr.var", 8],["Nat.Linear.Expr.add", 8],["congrFun", 8],["Nat.Linear.Expr.num", 8],["List.cons", 8],["rfl", 6],["Fin.sizeOf", 5],["Fin.val", 5],["LT.lt", 4],["Bool.false", 3],["congr", 3],["Nat.add_zero", 3],["List.get", 2],["Fin.mk", 2],["List.cons.sizeOf_spec", 2],["Eq.mpr", 2],["sizeOf_default", 2],["Nat.lt_trans", 1],["absurd", 1],["Array.sizeOf_get_lt", 1],["Nat.add_eq", 1],["eq_false'", 1],["sizeOf_nat", 1],["Pure.pure", 1],["Eq.mp", 1],["Array.anyM.loop.proof_3", 1],["Array.anyM.loop.proof_1", 1],["USize.mk.sizeOf_spec", 1],["eq_self", 1],["Classical.em", 1],["WellFounded.fix", 1],["ite", 1],["Nat.le_of_succ_le_succ", 1],["Decidable.decide", 1],["Array.get", 1],["Array.size", 1],["Nat.zero_add", 1],["Fin.elim0", 1],["Subtype.mk.sizeOf_spec", 1],["Nat.lt_of_lt_of_le", 1],["False", 1],["UInt8.mk.sizeOf_spec", 1],["UInt16.mk.sizeOf_spec", 1],["PSigma.mk", 1],["Array.anyM.loop.proof_2", 1],["eq_true_of_decide", 1],["Array.mk.sizeOf_spec", 1],["Nat.le_refl", 1],["Nat.add", 1],["of_decide_eq_false", 1],["dite", 1],["Fin.mk.sizeOf_spec", 1],["dif_neg", 1],["UInt32.mk.sizeOf_spec", 1],["UInt64.mk.sizeOf_spec", 1],["WellFounded.fix_eq", 1],["Bind.bind", 1]]],
["StateRefT'", 114, [["Bind.bind", 71],["Pure.pure", 56],["Bool.true", 40],["ite", 37],["Eq", 36],["PUnit.unit", 34],["List.nil", 28],["HAppend.hAppend", 26],["liftM", 25],["OfNat.ofNat", 25],["Option.none", 22],["List.toArray", 20],["Bool.false", 16],["List.cons", 16],["Prod.mk", 15],["Unit.unit", 14],["ForInStep.yield", 14],["ForIn.forIn", 14],["Option.some", 13],["ForInStep", 10],["Bool", 8],["Array.size", 8],["HSub.hSub", 8],["Prod", 8],["Array.toList", 8],["inferInstanceAs", 7],["Array.push", 7],["Prod.snd", 7],["Prod.fst", 7],["Tactic.NormCast.CoeFnType.coe", 6],["BEq.beq", 6],["Unit", 6],["Option", 5],["ForInStep.done", 5],["Tactic.NormCast.normCastExt", 5],["Function.comp", 5],["Tactic.NormCast.CoeFnInfo.mk", 5],["Array.isEmpty", 5],["Array.map", 5],["Array.mapM", 4],["Nat", 4],["Tactic.NormCast.coeDelaborator", 4],["EmptyCollection.emptyCollection", 4],["Tactic.Ring.HornerExpr.e", 4],["Option.getD", 4],["MProd.fst", 4],["Tactic.Ring.mkAppCS", 4],["MProd.snd", 4],["MProd.mk", 4],["Functor.map", 4],["HAdd.hAdd", 4],["GT.gt", 4],["Array", 4],["MonadExcept.tryCatch", 4],["Tactic.NormCast.NormCastExtension.down", 3],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 3],["Tactic.NormCast.NormCastExtension.up", 3],["Tactic.NormCast.derive", 3],["PProd.fst", 3],["Tactic.Ring.RingM", 3],["MProd", 3],["Array.append", 3],["Alternative.failure", 3],["Tactic.NormCast.pushCastExt", 3],["not", 3],["cond", 3],["List", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["ToString.toString", 3],["Tactic.Ring.HornerExpr.const", 3],["LT.lt", 3],["MonadState.get", 2],["StateRefT'.run'", 2],["Tactic.NormCast.CoeFnInfo.numArgs", 2],["Tactic.NormCast.proveEqUsingDown", 2],["Tactic.NormCast.countCoes", 2],["Sum.inl", 2],["Mathlib.Tactic.Lint.NamedLinter.name", 2],["Tactic.Ring.Cache.α", 2],["DoResultPR.return", 2],["MonadReader.read", 2],["Inhabited.default", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Tactic.TryThis.delabToRefinableSyntax", 2],["List.mapM", 2],["Mathlib.Tactic.Lint.getDeclsInCurrModule", 2],["modify", 2],["Array.qsort", 2],["Mathlib.Tactic.Lint.printWarnings", 2],["Option.map", 2],["Tactic.NormCast.coeExt", 2],["Tactic.TryThis.addSuggestion", 2],["Nonempty", 2],["Array.foldl", 2],["DoResultPR.pure", 2],["Array.filterM", 2],["Tactic.NormCast.NormCastExtension.squash", 2],["Tactic.Ring.HornerExpr", 2],["PProd.snd", 2],["Tactic.Ring.State.mk", 2],["Tactic.instNonemptyDeclCache", 2],["Mathlib.Tactic.Sat.buildClause", 2],["Decidable.decide", 2],["Tactic.NormCast.isNumeral?", 2],["Tactic.NormCast.countHeadCoes", 2],["StateRefT'.lift", 2],["and", 2],["Tactic.NormCast.CoeFnInfo.coercee", 2],["Array.getOp", 2],["Classical.ofNonempty", 2],["Mathlib.Tactic.Lint.printWarning", 1],["Tactic.NormCast.Label", 1],["Array.filterMapM", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["MonadLift.mk", 1],["Tactic.NormCast.addCoeDelaborator", 1],["Tactic.Ring.Cache.mk", 1],["Tactic.NormCast.proveEqUsing", 1],["Mathlib.Tactic.Lint.Linter.errorsFound", 1],["HMul.hMul", 1],["Tactic.NormCast.splittingProcedure", 1],["Tactic.NormCast.upwardAndElim", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["Mathlib.Tactic.Lint.sortResults", 1],["Mathlib.Tactic.Lint.getLinter", 1],["Stream.next?", 1],["Tactic.Ring.addAtom", 1],["Subarray", 1],["Mathlib.Eval.evalExpr", 1],["Alternative", 1],["bne", 1],["Tactic.NormCast.numeralToCoe", 1],["Eq.refl", 1],["Tactic.NormCast.addMove", 1],["MonadExceptOf.mk", 1],["Array.extract", 1],["evalIntrov.introsDep", 1],["Tactic.NormCast.countInternalCoes", 1],["Mathlib.Tactic.Sat.buildClauses", 1],["MonadControl", 1],["Tactic.Ring.Cache.cs", 1],["Tactic.Cache.get", 1],["Mathlib.Tactic.Sat.buildProof", 1],["List.splitAt", 1],["StateRefT'.get", 1],["Tactic.NormCast.Label.elim", 1],["Mathlib.WhatsNew.diffExtension", 1],["MonadStateOf.mk", 1],["Mathlib.Tactic.Sat.buildConj", 1],["Mathlib.Tactic.Lint.isAutoDecl", 1],["Tactic.Ring.State.numAtoms", 1],["Tactic.NormCast.Label.move", 1],["Tactic.NormCast.addElim", 1],["Mathlib.Prelude.Rename.getRenameMap", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Tactic.NormCast.getCoeFnInfo?", 1],["Monad", 1],["List.filter", 1],["Tactic.Cache.mk", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.groupedByFilename", 1],["Except", 1],["Task", 1],["StateRefT'.set", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Array.find?", 1],["List.anyM", 1],["List.any", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["StateRefT'.modifyGet", 1],["Tactic.Find.findDeclsPerHead", 1],["Option.get!", 1],["instLawfulMonadStateRefT'InstMonadStateRefT'.proof_1", 1],["readThe", 1],["Mathlib.Tactic.Sat.fromLRATAux", 1],["Mathlib.Tactic.Sat.Parser.parseLRAT", 1],["List.length", 1],["MonadFunctor", 1],["Mathlib.Prelude.Rename.renameExtension", 1],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["tryCatchThe", 1],["Tactic.DeclCache.get", 1],["Tactic.NormCast.Label.squash", 1],["Mathlib.Tactic.Lint.getLinters", 1],["throwThe", 1],["Sum", 1],["or", 1],["Tactic.Ring.State.atoms", 1],["Tactic.NormCast.isCoeOf?", 1],["Tactic.NormCast.addSquash", 1],["And", 1],["Tactic.Cache", 1],["Mathlib.Tactic.Lint.withSimpTheoremInfos", 1],["PUnit", 1],["MonadExcept.throw", 1],["Tactic.Ring.Cache.univ", 1],["Tactic.TryThis.replaceMVarsByUnderscores", 1],["StateRefT'.run", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["MonadFinally", 1],["andM", 1],["Tactic.NormCast.classifyType", 1],["Array.filterMap", 1],["Task.get", 1],["Tactic.instNonemptyCache.proof_1", 1],["id", 1],["DoResultPR", 1],["GE.ge", 1],["Sum.inr", 1],["Option.mapM", 1],["Mathlib.Tactic.Sat.Parser.parseDimacs", 1],["Id.run", 1],["Array.get?", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["MonadStateOf.set", 1],["Tactic.NormCast.CoeFnInfo.type", 1],["Not", 1],["Tactic.NormCast.mkCoe", 1],["Task.Priority.default", 1],["Tactic.NormCast.prove", 1],["Mathlib.Tactic.Sat.buildProofStep", 1],["ToStream.toStream", 1],["Mathlib.Tactic.Lint.Linter.noErrorsFound", 1],["Option.all", 1],["Mathlib.Tactic.Lint.isConditionalHyps", 1],["Mathlib.Tactic.Sat.buildReify", 1],["Mathlib.Prelude.Rename.addNameAlignment", 1],["Mathlib.Tactic.Sat.Clause", 1]]],
["Bool.true", 110, [["Eq.refl", 63],["Eq", 47],["Bool.true", 47],["Eq.symm", 43],["rfl", 36],["congrArg", 34],["Eq.trans", 33],["congrFun", 33],["of_eq_true", 31],["eq_self", 26],["congr", 24],["Iff.intro", 17],["OfNat.ofNat", 16],["Eq.mpr", 14],["Bool.false", 13],["propext", 13],["HAdd.hAdd", 13],["of_decide_eq_true", 12],["iff_self", 11],["Prod.mk", 11],["eq_true_of_decide", 11],["Iff", 11],["True", 11],["List.cons", 10],["Unit.unit", 10],["List.nil", 10],["Decidable.decide", 10],["False", 9],["eq_false", 9],["Eq.mp", 9],["eq_false_of_decide", 8],["Classical.em", 8],["absurd", 8],["Nat.Linear.Poly.denote", 7],["Option.some", 7],["Decidable.em", 7],["eq_true", 7],["PProd.fst", 7],["LT.lt", 7],["HMul.hMul", 6],["Option.none", 6],["LE.le", 6],["Bool.of_not_eq_true", 6],["cond_false", 6],["funext", 6],["Nat.zero_add", 6],["Nat.add_comm", 6],["Fin.val", 6],["cond", 6],["cond_true", 6],["False.elim", 6],["HEq.refl", 5],["HMod.hMod", 5],["Option.isSome_some", 5],["Nat.add", 5],["decide_eq_true", 5],["Nat.add_eq", 5],["HSub.hSub", 5],["Nat.add_left_comm", 5],["Option.get", 5],["Nat.Linear.Var.denote", 5],["Nat.mul_eq", 5],["Bool", 4],["And", 4],["eq_false'", 4],["Fin.mk", 4],["HAppend.hAppend", 4],["Nat.blt", 4],["List.length", 4],["Nat.Linear.Poly.denote_le", 4],["decide_eq_false", 4],["Not", 4],["Nat.Linear.Poly.denote_eq", 4],["Membership.mem", 4],["List.not_mem_nil", 3],["Or", 3],["Option.isSome_none", 3],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Poly.denote_append", 3],["Option", 3],["decide_eq_true_eq", 3],["Nat.ble", 3],["Nat.Linear.Poly", 3],["ite_congr", 3],["Subsingleton.elim", 3],["Nat.toDigitsCore", 3],["HDiv.hDiv", 3],["Nat.digitChar", 3],["dif_pos", 3],["Fin", 3],["Iff.mpr", 3],["LawfulBEq.rfl", 3],["BEq.beq", 2],["Nat.ble_eq_true_of_le", 2],["Bool.and_true", 2],["UnionFind.rankMaxAux", 2],["List.reverse", 2],["dite_congr", 2],["Nat.mod_lt", 2],["UnionFind.size", 2],["Nat.sub_eq", 2],["Nat.Linear.Poly.denote_reverse", 2],["Prod", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse_cons", 2],["Option.some.injEq", 2],["false_iff", 2],["Exists", 2],["if_true", 2],["false_and", 2],["Nat.Linear.Poly.insertSorted", 2],["Subtype.property", 2],["List.mem_cons", 2],["decide_eq_true_iff", 2],["dif_neg", 2],["Array.size", 2],["eq_of_heq", 2],["id", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["List.nil_append", 2],["Nat.succ", 2],["if_false", 2],["and", 2],["Nat.le_of_ble_eq_true", 2],["List.append_nil", 2],["dite_true", 2],["dite", 2],["Nat.add_assoc", 2],["List.mem_of_elem_eq_true", 1],["UnionFind.lt_rankMax", 1],["true_and", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.le_of_not_lt", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Nat.lt_irrefl", 1],["Tactic.NormCast.Label.elim", 1],["trivial", 1],["Nonempty", 1],["not", 1],["List.getLast", 1],["Bool.not_true", 1],["UnionFind.rank_lt", 1],["Classical.choice", 1],["Nat.ble_self_eq_true", 1],["Nat.Linear.Expr.toPoly", 1],["Array.isEqvAux.proof_3", 1],["Tactic.NormCast.Label.move", 1],["exists_false", 1],["Nat.Linear.Poly.combineAux", 1],["List.elem", 1],["UFModel.Agrees.push", 1],["List.get", 1],["eq_of_beq", 1],["WellFoundedRelation.rel", 1],["Nat.beq", 1],["not_exists", 1],["Option.get_some", 1],["dite_false", 1],["List.getLast_singleton", 1],["Nat.gcd_one_right", 1],["Nat.le_add_right", 1],["Nat.Linear.Expr.denote", 1],["Nat.sub_succ_lt_self", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["beq_self_eq_true'", 1],["Array.isEqv", 1],["True.intro", 1],["UFModel.rank", 1],["Array.isEqvAux_self", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["And.left", 1],["Nat.not_lt_of_le", 1],["UFModel.parent", 1],["Tactic.NormCast.Label.squash", 1],["Option.isNone_some", 1],["Nat.one_pos", 1],["false_or", 1],["or_false", 1],["Or.inl", 1],["exists_prop", 1],["Bool.and_false", 1],["sorryAx", 1],["Or.inr", 1],["UnionFind.lt_rankMax'", 1],["List.mem_filterAux", 1],["lt_irrefl", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["List.mem_filter", 1],["And.right", 1],["Option.isNone_none", 1],["Nat.Linear.Poly.denote_fuse", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["List.filterAux", 1],["Nat.ble_succ_eq_true", 1],["Nat.Linear.Poly.denote_combine", 1],["UFNode.mk", 1],["Option.eq_none_of_isNone", 1],["Nat.succ_pos", 1],["not_le", 1],["Nat.to_digits_core_length", 1],["Subtype.val", 1],["of_decide_eq_false", 1],["Nat.lt_succ_iff", 1],["implies_congr", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.lt_of_not_le", 1],["List.length_pos_of_ne_nil", 1],["UnionFind.rankMax", 1],["Bool.and_self", 1],["And.imp", 1],["List.getLast_cons", 1],["BinaryHeap.popMaxAux", 1],["Nat.beq_refl", 1],["ne_eq", 1],["Bool.not_false", 1],["List.elem_eq_true_of_mem", 1],["UFModel.push.proof_1", 1],["Fin.isLt", 1],["not_lt", 1],["Nat.add_le_add", 1],["And.intro", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["WellFounded.fix_eq", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.not_le_of_lt", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_lt_sub_left", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["toBoolUsing_eq_true", 1],["Nat.zero_le", 1],["Nonempty.intro", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.eq_of_beq_eq_true", 1],["Nat.gcd_one_left", 1],["Array.isEqvAux.proof_1", 1],["UFModel.push", 1],["WellFounded.fix", 1],["List", 1],["Array.get", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.right_distrib", 1],["Nat.sub_lt", 1],["Nat.Linear.Poly.combine", 1],["Nat.lt_eq", 1],["Option.isSome", 1],["List.mem_reverse", 1],["Nat.add_le_add_right", 1],["sizeOf_nat", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["List.get_singleton", 1],["List.cons_ne_nil", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["exists_eq'", 1]]],
["Nat.zero_lt_succ", 108, [["Nat.gcd", 35],["Eq.refl", 35],["Eq", 35],["Eq.mpr", 28],["OfNat.ofNat", 22],["rfl", 21],["HMul.hMul", 21],["Nat.gcd_dvd_right", 16],["Eq.trans", 15],["congrFun", 13],["congrArg", 13],["Eq.symm", 12],["of_eq_true", 12],["Nat.dvd_gcd", 11],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_antisymm", 9],["eq_self", 9],["Iff", 7],["Nat.gcd_zero_left", 7],["HMod.hMod", 7],["Dvd.dvd", 7],["And.intro", 6],["Nat.gcd_rec", 5],["Iff.intro", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["Nat.dvd_mul_left", 5],["Nat.dvd_trans", 5],["iff_self", 5],["Fin.val_eq_of_lt", 5],["Bool.true", 5],["Nat.coprime.symm", 5],["Nat.mul_comm", 5],["Nat.dvd_mul_right", 4],["And.left", 4],["Nat.lcm", 4],["eq_true_of_decide", 4],["Exists.intro", 4],["Nat.eq_zero_or_pos", 4],["Nat.gcd_dvd", 4],["Nat.succ", 4],["Nat.gcd_succ", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["congr", 4],["And.right", 3],["Nat.lcm_comm", 3],["Nat.coprime.coprime_dvd_right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Nat.dvd_refl", 3],["propext", 3],["Nat.gcd.induction", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.gcd_zero_right", 3],["Fin.val", 3],["Nat.coprime.gcd_left", 2],["Nat.gcd_mul_left_left", 2],["HAdd.hAdd", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["True", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.le_of_dvd", 2],["Nat.gcd_mul_right", 2],["Fin.mk", 2],["Nat.gcd_one_right", 2],["Iff.rfl", 2],["Nat.coprime_iff_gcd_eq_one", 2],["id", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.coprime.mul", 2],["Nat.dvd_mod_iff", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["Nat.div_mul_cancel", 2],["Nat.coprime.pow_left", 2],["Iff.mpr", 1],["Nat.coprime.gcd_right", 1],["UInt32.val_eq_of_lt", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["Nat.coprime_one_left", 1],["Nat.mod_lt", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.gcd_div", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.zero_mod", 1],["Unit.unit", 1],["Nat.dvd_lcm_right", 1],["Nat.zero_div", 1],["Nat.gcd_gcd_self_right_left", 1],["Decidable.isTrue", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_mul_right_left", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["Nat.gcd_mul_lcm", 1],["Nat.lt_trans", 1],["Nat.gcd_gcd_self_right_right", 1],["Nat.mod_one", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["absurd", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Fin.isLt", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.dvd_zero", 1],["Nat.one_pos", 1],["Nat.coprime_comm", 1],["Nat.mod_self", 1],["Or.inl", 1],["HSub.hSub", 1],["Nat.mul_one", 1],["UInt32.ofNat", 1],["Nat.mul_dvd_mul_left", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["List.getLast_singleton", 1],["UInt32.val", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["List.cons_ne_nil", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime.coprime_div_left", 1],["Nat.gcd_mul_left", 1],["UInt8.val", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["zero_lt_of_lt", 1],["List.getLast_cons", 1],["Nat.mul_mod_mul_left", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["UInt8.toChar_aux", 1],["Nat.lcm_dvd", 1],["Nat.gcd_self", 1],["PProd.fst", 1],["Exists", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.isValidChar", 1],["List.getLast", 1],["List.length", 1],["List.nil", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["of_decide_eq_true", 1],["List.cons", 1],["Nat.coprime.gcd_both", 1],["Nat.mod_eq_of_lt", 1],["LT.lt", 1],["List.get_singleton", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["dite", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.coprime_mul_iff_left", 1]]],
["Array.size", 104, [["Array.size", 32],["Eq.refl", 30],["Eq", 25],["OfNat.ofNat", 25],["Eq.mpr", 22],["congrArg", 22],["Fin.mk", 20],["Eq.trans", 19],["LT.lt", 19],["Fin.val", 18],["congrFun", 17],["Nat.lt_of_lt_of_le", 15],["Eq.symm", 14],["of_eq_true", 13],["Nat.lt_succ_self", 13],["eq_self", 12],["rfl", 12],["Array.get", 11],["Nat.le_refl", 11],["BinaryHeap.arr", 10],["Option.some", 10],["HAdd.hAdd", 10],["Bool.true", 9],["Fin.isLt", 9],["Array.data", 8],["Subtype.property", 7],["HSub.hSub", 7],["Array.size_set", 7],["UnionFind.size", 6],["congr", 6],["dite_congr", 6],["Classical.em", 5],["Nat.le_of_lt", 5],["UnionFind.arr", 5],["Eq.mpr_prop", 5],["WellFounded.fix", 5],["Option.none", 5],["Array.get?_eq_get?", 4],["Subtype.mk", 4],["dif_pos", 4],["of_decide_eq_true", 4],["BinaryHeap.heapifyDown", 4],["Array.push", 4],["eq_true", 4],["Nat.lt_of_le_of_lt", 4],["Nat.sub_lt", 4],["Array.mk", 4],["dif_neg", 4],["dite_true", 4],["dite", 4],["eq_true_of_decide", 3],["UnionFind.model'", 3],["FloatArray.size", 3],["ByteArray.size", 3],["UFNode.parent", 3],["Nat.add_comm", 3],["Nat.zero_lt_of_lt", 3],["Array.get?", 3],["Nat.add_assoc", 3],["Nat.sub_le", 3],["PSigma.mk", 3],["Array.size_push", 3],["eq_false", 3],["Array.set", 3],["List.set", 2],["UnionFind.rankMaxAux", 2],["BinaryHeap.size_pos_of_max", 2],["Bool.false", 2],["ne_eq", 2],["Exists", 2],["UFNode.rank", 2],["Eq.mp", 2],["UFModel.Models.parent_eq'", 2],["Array.size_swap", 2],["Exists.intro", 2],["List.cons", 2],["sizeOf_nat", 2],["And", 2],["UFModel.Models.rank_eq", 2],["WellFoundedRelation.rel", 2],["Subtype", 2],["HAppend.hAppend", 2],["List.get?_eq_get", 2],["Nat.sub_succ_lt_self", 2],["List.concat_eq_append", 2],["UFModel.Models", 2],["List.nil", 2],["Array.swap", 2],["Nat.le_add_right", 2],["Nat.succ_pos", 2],["UFNode.mk", 2],["funext", 2],["BinaryHeap.max", 2],["List.get?", 2],["Nat.lt_trans", 2],["BinaryHeap.mkHeap.loop.proof_2", 2],["dite_false", 2],["BinaryHeap.size", 2],["Subtype.val", 2],["UFModel.parent", 2],["Nat.lt_of_succ_le", 2],["Decidable.decide", 2],["Nat.lt_eq", 2],["le_of_not_lt", 2],["Array.get?_push_eq", 1],["BEq.beq", 1],["Decidable.of_not_not", 1],["True", 1],["le_antisymm", 1],["PProd.fst", 1],["UFNode.value", 1],["PSigma", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["le_of_lt", 1],["UFModel.Agrees.size_eq", 1],["Array.get?_set_ne", 1],["not_lt_of_ge", 1],["Nat.sub_lt_sub_left", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqv", 1],["BinaryHeap.insert.proof_1", 1],["Nat.le_of_lt_succ", 1],["UFModel.push", 1],["if_neg", 1],["UFModel.rank", 1],["And.intro", 1],["HEq.refl", 1],["BinaryHeap.popMaxAux.proof_2", 1],["And.left", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["decide_eq_true_eq", 1],["UnionFind.findAux", 1],["if_pos", 1],["sorryAx", 1],["unsafeCast", 1],["HMul.hMul", 1],["Option.some.inj", 1],["UFModel.rank_lt", 1],["Array.indexOfAux.proof_2", 1],["Unit.unit", 1],["Array.get?_push_lt", 1],["Array.pop", 1],["BinaryHeap.mkHeap", 1],["Array.isEqvAux_self", 1],["List.get?_set_of_lt", 1],["Sigma", 1],["UnionFind.rankMax", 1],["List.get?_set_ne", 1],["Ne", 1],["Array.get_eq_get", 1],["Nat.pred_le", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["eq_of_heq", 1],["eq_false'", 1],["Array.indexOfAux", 1],["List.length_replicate", 1],["UnionFind.lt_rankMax", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["Array.size_pop", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Array.eraseIdx'.proof_1", 1],["Nat.zero_sub", 1],["Nat.div_le_self", 1],["List.get?_len_le", 1],["List.length_concat", 1],["List.get", 1],["Nat.succ", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.get?_concat_length", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Nat.le_of_succ_le", 1],["Array.indexOfAux.proof_1", 1],["Iff.mpr", 1],["Array.eraseIdxSzAux", 1],["True.intro", 1],["BinaryHeap.heapifyUp", 1],["ite", 1],["Array.isEqvAux.proof_1", 1],["UnionFind.rank_lt", 1],["UFModel.Models.size_eq", 1],["UFModel.Models.push", 1],["List.get?_append", 1],["UnionFind.lt_rankMax'", 1],["Array.isEqvAux.proof_3", 1],["UFModel.Models.parent_eq", 1],["Not", 1],["and", 1],["Array.toArrayLit", 1],["WellFounded.fix_eq", 1],["Bool.and_true", 1],["False.elim", 1],["List.length_dropLast", 1],["List.length_set", 1]]],
["Neg.neg", 104, [["rfl", 44],["Eq", 34],["Neg.neg", 34],["HAdd.hAdd", 25],["Eq.refl", 24],["OfNat.ofNat", 24],["Eq.mpr", 19],["Eq.symm", 17],["congrArg", 9],["of_eq_true", 9],["eq_self", 9],["add_left_neg", 9],["Eq.trans", 9],["HMul.hMul", 8],["congrFun", 7],["congr", 6],["Nat.succ", 5],["Int.ofNat", 5],["Int.add_assoc", 5],["Int.add_comm", 5],["Unit.unit", 5],["Int.negSucc", 5],["Int.natAbs", 5],["Int.add_right_neg", 4],["Int.add_left_neg", 4],["Int.sign", 4],["Iff.intro", 3],["Int.add_zero", 3],["Int.zero_add", 3],["neg_neg", 3],["Nat.cast", 3],["LE.le", 2],["Int.sub_eq_add_neg", 2],["Int.neg_eq_of_add_eq_zero", 2],["Or", 2],["add_assoc", 2],["Or.inl", 2],["HSub.hSub", 2],["Or.inr", 2],["Int.neg_mul_eq_neg_mul_symm", 2],["HEq.refl", 2],["Exists.intro", 2],["Eq.mp", 2],["neg_add_self", 2],["add_right_neg", 2],["Int.mul_neg_eq_neg_mul_symm", 2],["Int.neg_nonneg_of_nonpos", 2],["AddGroupWithOne.intCast_negSucc", 2],["eq_of_heq", 2],["LT.lt", 2],["Int.sub_right_lt_of_lt_add", 1],["UInt8.add_def", 1],["Int.negOfNat", 1],["Int.ofNat_add_negSucc_ofNat", 1],["Int.zero_mul", 1],["Int.sign_eq_one_of_pos", 1],["Int.eq_neg_succ_of_lt_zero", 1],["SubNegMonoid.sub_eq_add_neg", 1],["Int.ofNat_mul_ofNat", 1],["UInt8.val", 1],["Int.neg_neg_ofNat_succ", 1],["left_neg_eq_right_neg", 1],["USize.neg_def", 1],["Int.sub_nat_self", 1],["forall_congr", 1],["Int.neg_add_lt_left_of_lt_add", 1],["eq_of_sub_eq_zero'", 1],["Int.neg_add_le_left_of_le_add", 1],["UInt32.mk", 1],["UInt16.eq_of_val_eq", 1],["nsmul_rec", 1],["Int.neg_eq_neg_one_mul", 1],["UInt64.eq_of_val_eq", 1],["Int.NonNeg", 1],["Int.neg_neg", 1],["Int.eq_zero_of_sign_eq_zero", 1],["UInt8.neg_def", 1],["UInt16.add_def", 1],["Int.neg_mul_eq_mul_neg", 1],["UInt8.zero_def", 1],["USize.zero_def", 1],["Int.distrib_right", 1],["Int.sign_zero", 1],["UInt8.mk", 1],["UInt16.mk", 1],["UInt64.add_def", 1],["Int.natAbs_of_nonneg", 1],["Int.NonNeg.mk", 1],["Int.sub_left_le_of_le_add", 1],["Int.sub_right_le_of_le_add", 1],["UInt16.val", 1],["UInt32.eq_of_val_eq", 1],["Int.negSucc_ofNat_add_ofNat", 1],["Int.eq_neg_of_eq_neg", 1],["AddGroupWithOne.sub_eq_add_neg", 1],["UInt32.add_def", 1],["Int.mul_zero", 1],["propext", 1],["AddGroupWithOne.add_left_neg", 1],["Nat", 1],["Int.mul_negSucc_ofNat_negSucc_ofNat", 1],["USize.mk", 1],["Int.neg_add", 1],["Int.neg_of_sign_eq_neg_one", 1],["UInt16.neg_def", 1],["UInt16.zero_def", 1],["Int.ofNat_mul_negSucc_ofNat", 1],["UInt64.val", 1],["zero_add", 1],["UInt32.val", 1],["Int.lt_sub_left_of_add_lt", 1],["AddGroupWithOne.gsmul_neg'", 1],["Int.eq_succ_of_zero_lt", 1],["add_mul", 1],["neg_eq_of_add_eq_zero", 1],["Int.neg_ofNat_of_succ", 1],["Int.natAbs_eq", 1],["Int.pos_of_sign_eq_one", 1],["USize.eq_of_val_eq", 1],["Int.negSucc_ofNat_ofNat", 1],["UInt64.neg_def", 1],["Int.sign_eq_neg_one_of_neg", 1],["UInt32.neg_def", 1],["Int.one_mul", 1],["UInt8.eq_of_val_eq", 1],["MonoidWithZero.zero_mul", 1],["Fin", 1],["UInt32.zero_def", 1],["USize.add_def", 1],["Int.le_sub_left_of_add_le", 1],["Int.eq_ofNat_of_zero_le", 1],["Exists", 1],["Int.distrib_left", 1],["Int.sub_left_lt_of_lt_add", 1],["Int.natAbs_neg", 1],["UInt64.mk", 1],["add_zero", 1],["forall_const", 1],["UInt64.zero_def", 1],["USize.val", 1],["AddGroup.add_left_neg", 1],["Int.neg_mul_eq_neg_mul", 1]]],
["Fin.mk", 103, [["Eq.refl", 51],["Eq", 48],["Fin.mk", 45],["congrArg", 39],["Eq.trans", 32],["Eq.mpr", 30],["rfl", 30],["Fin.val", 29],["Eq.symm", 29],["congrFun", 27],["OfNat.ofNat", 27],["of_eq_true", 26],["eq_self", 22],["LT.lt", 21],["congr", 15],["List.get", 15],["List.length", 15],["Option.some", 15],["HAdd.hAdd", 15],["List.cons", 14],["List.nil", 14],["HMod.hMod", 13],["Array.get", 12],["Array.size", 11],["eq_true", 11],["HEq.refl", 11],["Bool.true", 11],["Nat.mod_lt", 10],["Fin.isLt", 10],["Fin.size_positive", 8],["List.get?", 8],["Nat.le_of_succ_le_succ", 8],["Classical.em", 7],["dite_congr", 7],["PProd.fst", 7],["List.get?_eq_get", 7],["UnionFind.arr", 7],["Array.data", 6],["eq_false", 6],["Nat.add", 6],["Eq.mp", 6],["dite_true", 6],["Array.size_set", 5],["UFModel.parent", 5],["eq_of_heq", 5],["Fin.val_eq_of_lt", 5],["Bool.false", 5],["eq_true_of_decide", 5],["dif_neg", 5],["dif_pos", 5],["Nat.succ", 5],["HSub.hSub", 5],["List.set", 4],["Decidable.em", 4],["Eq.mpr_prop", 4],["UFNode.rank", 4],["HMul.hMul", 4],["UFNode.parent", 4],["Array.mk", 4],["UFModel.Agrees.get_eq", 4],["ite_congr", 4],["Array.get?_eq_get?", 4],["HAppend.hAppend", 4],["Not", 4],["UnionFind.size", 4],["False.elim", 4],["Fin.size_positive'", 3],["Nat.Linear.Expr.var", 3],["And.intro", 3],["List.append", 3],["LE.le", 3],["Exists", 3],["ne_eq", 3],["Nat.toDigitsCore", 3],["Option.none", 3],["SizeOf.sizeOf", 3],["UFModel.rank", 3],["BinaryHeap.arr", 3],["Nat.Linear.Expr.add", 3],["Iff.intro", 3],["sorryAx", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.Linear.Expr.num", 3],["HDiv.hDiv", 3],["Array.get?", 3],["Nat.digitChar", 3],["implies_congr", 3],["id", 3],["WellFounded.fix", 3],["List.length_cons", 3],["Nat.Linear.ExprCnstr.mk", 3],["Exists.intro", 3],["dite", 3],["Nat.lt_succ_self", 3],["propext", 2],["UFModel.Models.rank_eq", 2],["Nat.add_eq", 2],["Membership.mem", 2],["Nat.mod_eq_of_lt", 2],["List.get_mem", 2],["Fin.mul_def", 2],["UnionFind.rankMaxAux", 2],["UFModel.Models.parent_eq", 2],["eq_false_of_decide", 2],["List.get?_set_ne", 2],["And.left", 2],["List.cons_ne_nil", 2],["Subtype.property", 2],["BinaryHeap.size_pos_of_max", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Array.push", 2],["Fin.eq_of_val_eq", 2],["UFModel.rank_lt", 2],["And", 2],["Nat.not_lt_eq", 2],["Fin.add_def", 2],["And.right", 2],["dite_false", 2],["Nat.zero_eq", 2],["UFNode.mk", 2],["Fin.ofNat'", 2],["Array.size_push", 2],["Nat.succ_pos", 2],["UFModel.Models.parent_eq'", 2],["List.length_set", 2],["List.drop", 2],["BinaryHeap.max", 2],["Nat.lt_trans", 2],["Nat.add_zero", 2],["if_true", 2],["UnionFind.model'", 2],["le_of_not_lt", 2],["UFModel.Models.size_eq", 2],["List.concat_eq_append", 2],["List.getLast", 2],["Option.some_inj", 2],["Decidable.decide", 2],["Unit.unit", 2],["if_false", 2],["PSigma.mk", 2],["Nat.not_le_eq", 2],["of_decide_eq_true", 2],["Subtype", 1],["List.get?_concat_length", 1],["List.map", 1],["Eq.propIntro", 1],["Iff.mpr", 1],["Array.toArrayLit", 1],["Nat.succ_lt_succ", 1],["Fin.nsmuls_eq", 1],["Option.map_some'", 1],["UnionFind.rank_lt", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["List.eq_of_mem_repeat'", 1],["UFModel.push", 1],["Array.isEqvAux.proof_3", 1],["List.get?_append_right", 1],["UFModel.Agrees.set", 1],["Nat.mul_mod", 1],["Bool.and_true", 1],["UInt32.ofNat", 1],["ite_true", 1],["List.get_cons_zero", 1],["ite_false", 1],["Array.size_swap", 1],["WellFoundedRelation.rel", 1],["le_antisymm", 1],["lt_of_lt_of_le", 1],["Nat.lt_of_lt_of_eq", 1],["Fin.ext", 1],["UFNode.value", 1],["List.getLast_singleton", 1],["Nat.add_mod_mod", 1],["Array.get?_push_lt", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Fin.one_val", 1],["le_of_lt", 1],["UInt32.val", 1],["Nat.sub_succ_lt_self", 1],["not_lt_of_ge", 1],["BinaryHeap.size_heapifyUp", 1],["Array.getLit", 1],["Array.isEqv", 1],["sizeOf_nat", 1],["Nat.mod_add_mod", 1],["Nat.zero_mod", 1],["Nat.le_of_lt_succ", 1],["Array.swap", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["PSigma", 1],["BinaryHeap.heapifyDown", 1],["Fin.mk.injEq", 1],["True", 1],["MonoidWithZero.zero_mul", 1],["Nat.to_digits_core_length", 1],["UnionFind.rankMaxAux.proof_2", 1],["Ne.symm", 1],["decide_eq_true_eq", 1],["UInt32.val_eq_of_lt", 1],["if_neg", 1],["Array.toListLitAux", 1],["Or.inl", 1],["if_pos", 1],["UnionFind.rankMax", 1],["List.get?_set_eq", 1],["Array.get_eq_get", 1],["UnionFind.findAux.proof_1", 1],["List.getLast_cons", 1],["Fin.ofNat'_succ", 1],["UInt8.val", 1],["Nat.le_of_succ_le", 1],["Nat.lt_add_right", 1],["Nat.succ_mul", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.zero", 1],["List.length_nil", 1],["Option.map_eq_map", 1],["Ne", 1],["Fin", 1],["List.cons.sizeOf_spec", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Array.set", 1],["Nat.succ_sub_succ", 1],["Nat.lt_irrefl", 1],["trivial", 1],["Nat.le_add_right", 1],["List.get_append_right_aux", 1],["List.nil_append", 1],["funext", 1],["lt_irrefl", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["Nat.sub_lt_sub_left", 1],["Array.get?_set_ne", 1],["List.get?_append", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["Functor.map", 1],["List.mem_cons_self", 1],["Sigma", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["absurd", 1],["List.length_append", 1],["max", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["Nat.zero_sub", 1],["List.get?_len_le", 1],["Array.isEqvAux.proof_1", 1],["UnionFind.lt_rankMax'", 1],["unsafeCast", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.length_map", 1],["List.mem_cons_of_mem", 1],["List.get?_map", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["Subsingleton.allEq", 1],["Nat.add_comm", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["Nat.sub_lt", 1],["List.get_of_mem", 1],["Subtype.mk", 1],["Nat.isValidChar", 1],["Nat.lt_of_succ_le", 1],["Array.mk.sizeOf_spec", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["UnionFind.findAux.proof_2", 1],["WellFounded.fix_eq", 1],["and", 1],["BinaryHeap.insert.proof_1", 1],["List.get_singleton", 1],["UnionFind.lt_rankMax", 1],["List.repeat'", 1],["zero_lt_of_lt", 1],["True.intro", 1],["List.getLast_eq_get", 1]]],
["Nat.gcd.proof_1", 98, [["Nat.gcd", 35],["Eq", 33],["Eq.refl", 32],["Eq.mpr", 26],["OfNat.ofNat", 21],["HMul.hMul", 21],["rfl", 19],["Nat.gcd_dvd_right", 16],["Eq.trans", 14],["congrArg", 12],["congrFun", 12],["Eq.symm", 12],["of_eq_true", 11],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.dvd_antisymm", 9],["eq_self", 8],["Iff", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["And.intro", 6],["HMod.hMod", 6],["Nat.gcd_rec", 5],["iff_self", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["Nat.dvd_mul_left", 5],["Iff.intro", 5],["Nat.coprime.symm", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Exists.intro", 4],["Nat.gcd_succ", 4],["Nat.succ", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.dvd_mul_right", 4],["congr", 4],["eq_true_of_decide", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Bool.true", 4],["Nat.dvd_refl", 3],["Nat.gcd_zero_right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Nat.lcm_comm", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["And.right", 3],["propext", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.coprime.gcd_left", 2],["HAdd.hAdd", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["True", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["Nat.gcd_one_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.coprime.mul", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.dvd_mod_iff", 2],["Iff.rfl", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["Nat.coprime.pow_left", 2],["Nat.div_mul_cancel", 2],["Nat.gcd_mul_left_left", 2],["Iff.mpr", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Decidable.isTrue", 1],["Nat.gcd_mul_right_left", 1],["Nat.coprime_comm", 1],["Nat.gcd_gcd_self_right_right", 1],["Exists", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.dvd_zero", 1],["Nat.coprime.coprime_div_left", 1],["Nat.mod_self", 1],["Nat.gcd_mul_left", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_mul_lcm", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.zero_mod", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.dvd_lcm_right", 1],["Nat.mul_mod_mul_left", 1],["Nat.zero_div", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["Nat.lcm_dvd", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["id", 1],["Nat.coprime_one_left", 1],["Nat.mul_dvd_mul_left", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_div", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mod_one", 1],["Nat.gcd_pos_of_pos_left", 1],["Unit.unit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.mul_one", 1],["dite", 1],["Nat.coprime_mul_iff_left", 1]]],
["Nat.gcd", 98, [["Nat.gcd", 35],["Eq", 33],["Eq.refl", 32],["Eq.mpr", 26],["OfNat.ofNat", 21],["HMul.hMul", 21],["rfl", 19],["Nat.gcd_dvd_right", 16],["Eq.trans", 14],["congrArg", 12],["congrFun", 12],["Eq.symm", 12],["of_eq_true", 11],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.dvd_antisymm", 9],["eq_self", 8],["Iff", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["And.intro", 6],["HMod.hMod", 6],["Nat.gcd_rec", 5],["iff_self", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["Nat.dvd_mul_left", 5],["Iff.intro", 5],["Nat.coprime.symm", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Exists.intro", 4],["Nat.gcd_succ", 4],["Nat.succ", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.dvd_mul_right", 4],["congr", 4],["eq_true_of_decide", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Bool.true", 4],["Nat.dvd_refl", 3],["Nat.gcd_zero_right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Nat.lcm_comm", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["And.right", 3],["propext", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.coprime.gcd_left", 2],["HAdd.hAdd", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["True", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["Nat.gcd_one_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.coprime.mul", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.dvd_mod_iff", 2],["Iff.rfl", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["Nat.coprime.pow_left", 2],["Nat.div_mul_cancel", 2],["Nat.gcd_mul_left_left", 2],["Iff.mpr", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Decidable.isTrue", 1],["Nat.gcd_mul_right_left", 1],["Nat.coprime_comm", 1],["Nat.gcd_gcd_self_right_right", 1],["Exists", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.dvd_zero", 1],["Nat.coprime.coprime_div_left", 1],["Nat.mod_self", 1],["Nat.gcd_mul_left", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_mul_lcm", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.zero_mod", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.dvd_lcm_right", 1],["Nat.mul_mod_mul_left", 1],["Nat.zero_div", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["Nat.lcm_dvd", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["id", 1],["Nat.coprime_one_left", 1],["Nat.mul_dvd_mul_left", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_div", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mod_one", 1],["Nat.gcd_pos_of_pos_left", 1],["Unit.unit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.mul_one", 1],["dite", 1],["Nat.coprime_mul_iff_left", 1]]],
["WellFoundedRelation.wf", 98, [["Nat.gcd", 35],["Eq", 33],["Eq.refl", 32],["Eq.mpr", 26],["OfNat.ofNat", 21],["HMul.hMul", 21],["rfl", 19],["Nat.gcd_dvd_right", 16],["Eq.trans", 14],["congrArg", 12],["congrFun", 12],["Eq.symm", 12],["of_eq_true", 11],["Nat.gcd_dvd_left", 11],["Nat.gcd_comm", 11],["Nat.dvd_gcd", 11],["Nat.dvd_antisymm", 9],["eq_self", 8],["Iff", 7],["Nat.gcd_zero_left", 7],["Dvd.dvd", 7],["And.intro", 6],["HMod.hMod", 6],["Nat.gcd_rec", 5],["iff_self", 5],["Nat.coprime", 5],["HDiv.hDiv", 5],["Nat.dvd_mul_left", 5],["Iff.intro", 5],["Nat.coprime.symm", 5],["Nat.dvd_trans", 5],["Nat.mul_comm", 5],["Exists.intro", 4],["Nat.gcd_succ", 4],["Nat.succ", 4],["Nat.gcd_dvd", 4],["Nat.lcm", 4],["Nat.dvd_mul_right", 4],["congr", 4],["eq_true_of_decide", 4],["Nat.eq_zero_or_pos", 4],["Nat.coprime.coprime_dvd_left", 4],["And.left", 4],["Nat.coprime.gcd_mul_left_cancel", 4],["Bool.true", 4],["Nat.dvd_refl", 3],["Nat.gcd_zero_right", 3],["Nat.gcd_one_left", 3],["Eq.mp", 3],["Nat.lcm_comm", 3],["Nat.gcd.induction", 3],["Nat.coprime.coprime_dvd_right", 3],["And.right", 3],["propext", 3],["Nat.pos_of_dvd_of_pos", 3],["Nat.coprime.gcd_left", 2],["HAdd.hAdd", 2],["And", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["True", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["Nat.gcd_mul_right", 2],["Nat.le_of_dvd", 2],["Nat.gcd_one_right", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Nat.coprime.mul", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.dvd_mod_iff", 2],["Iff.rfl", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.mul_zero", 2],["Nat.coprime.pow_left", 2],["Nat.div_mul_cancel", 2],["Nat.gcd_mul_left_left", 2],["Iff.mpr", 1],["Nat.coprime.mul_dvd_of_dvd_of_dvd", 1],["Nat.coprime.gcd_mul_left_cancel_right", 1],["Decidable.isTrue", 1],["Nat.gcd_mul_right_left", 1],["Nat.coprime_comm", 1],["Nat.gcd_gcd_self_right_right", 1],["Exists", 1],["Decidable.isFalse", 1],["Nat.div_zero", 1],["Nat.mul_div_cancel_left", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["Nat.div_self", 1],["Nat.eq_zero_of_gcd_eq_zero_left", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.dvd_zero", 1],["Nat.coprime.coprime_div_left", 1],["Nat.mod_self", 1],["Nat.gcd_mul_left", 1],["Nat.eq_zero_of_zero_dvd", 1],["Nat.gcd_self", 1],["Nat.gcd_gcd_self_left_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_mul_lcm", 1],["Nat.mul_div_assoc", 1],["Nat.add_mul_mod_self_right", 1],["Nat.gcd_eq_left", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.gcd_dvd_gcd_mul_right_right", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.zero_mod", 1],["Nat.gcd_dvd_gcd_mul_left_right", 1],["Nat.mul_dvd_mul", 1],["Nat.coprime.pow_right", 1],["Nat.exists_coprime", 1],["Nat.dvd_lcm_right", 1],["Nat.mul_mod_mul_left", 1],["Nat.zero_div", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Iff.mp", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.zero_lt_succ", 1],["Nat.lcm_dvd", 1],["Nat.coprime.gcd_right", 1],["Nat.gcd_dvd_gcd_mul_left", 1],["id", 1],["Nat.coprime_one_left", 1],["Nat.mul_dvd_mul_left", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.eq_zero_of_gcd_eq_zero_right", 1],["Nat.gcd_div", 1],["Nat.gcd_gcd_self_right_left", 1],["Nat.mod_one", 1],["Nat.gcd_pos_of_pos_left", 1],["Unit.unit", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.coprime.gcd_both", 1],["LT.lt", 1],["Nat.gcd_mul_dvd_mul_gcd", 1],["Nat.mul_one", 1],["dite", 1],["Nat.coprime_mul_iff_left", 1]]],
["Option.some", 97, [["Eq", 51],["Eq.refl", 44],["Option.some", 40],["congrArg", 40],["Eq.trans", 39],["of_eq_true", 36],["rfl", 34],["congrFun", 31],["Eq.symm", 30],["eq_self", 27],["Option.none", 24],["congr", 19],["List.get?", 16],["Iff", 15],["Eq.mpr", 15],["funext", 15],["iff_self", 13],["Exists", 13],["propext", 11],["Iff.intro", 10],["eq_false", 10],["Bool.true", 10],["Option.map_some'", 9],["Option.some.injEq", 9],["Fin.mk", 9],["eq_false'", 8],["False", 8],["Option.map_none'", 8],["Option.map", 7],["PProd.fst", 7],["HEq.refl", 7],["Functor.map", 6],["And", 6],["id_eq", 6],["List.nil", 6],["List.cons", 6],["Fin.val", 6],["Unit.unit", 6],["exists_false", 5],["eq_false_of_decide", 5],["Decidable.em", 5],["Iff.mpr", 5],["Iff.mp", 5],["eq_true", 5],["Bool.false", 5],["OfNat.ofNat", 5],["List.get?_eq_get", 5],["True", 5],["id", 5],["Option.mem_def", 5],["Array.data", 5],["Not", 5],["LT.lt", 5],["Option.none_bind", 4],["HAppend.hAppend", 4],["Option.some_bind", 4],["List.length", 4],["eq_true_of_decide", 4],["Option.bind", 4],["Exists.intro", 4],["Array.get?_eq_get?", 4],["Option.get", 4],["List.get", 4],["HAdd.hAdd", 4],["Array.mk", 4],["List.set", 4],["ne_eq", 3],["ite_congr", 3],["exists_prop", 3],["Eq.mp", 3],["exists_eq_right", 3],["if_pos", 3],["exists_eq_left'", 3],["Bool", 3],["decide_eq_false", 3],["Array.get?", 3],["dif_pos", 3],["Option", 3],["false_and", 3],["Nat.zero", 3],["Fin", 3],["Prod.mk", 3],["Array.size", 2],["Option.some_ne_none", 2],["Array.size_set", 2],["dite_congr", 2],["BinaryHeap.arr", 2],["Nat.succ", 2],["List.length_cons", 2],["HSub.hSub", 2],["BinaryHeap.size_pos_of_max", 2],["decide_eq_true_iff", 2],["Or.inl", 2],["LE.le", 2],["Array.get", 2],["Or.inr", 2],["Option.bind_eq_none", 2],["Or", 2],["forall_congr", 2],["Option.getD", 2],["Eq.mpr_prop", 2],["Nonempty", 2],["Nat.le_of_succ_le_succ", 2],["implies_congr", 2],["BinaryHeap.max", 2],["List.set_eq_modifyNth", 2],["Classical.choice", 2],["Subsingleton.elim", 2],["List.concat_eq_append", 2],["List.get?_len_le", 2],["Classical.em", 2],["List.cons_append", 2],["Membership.mem", 2],["if_neg", 2],["List.modifyNth", 2],["Nonempty.intro", 2],["And.intro", 2],["Option.map_map", 2],["not_forall", 2],["Iff.rfl", 2],["not_not", 2],["false_iff", 2],["List.get?_modifyNth", 2],["dite", 2],["False.elim", 2],["Option.isSome_some", 2],["congr_arg", 1],["Eq.propIntro", 1],["Option.lift_or_get", 1],["Option.map_eq_map", 1],["List.mem_iff_get", 1],["List.get?_modifyNth_ne", 1],["Function.is_partial_inv_left", 1],["not_exists", 1],["not_lt_of_ge", 1],["Or.elim", 1],["exists_eq", 1],["dite_false", 1],["And.left", 1],["Nat.not_lt_of_le", 1],["Function.comp", 1],["Option.getD_some", 1],["Array.get?_set_ne", 1],["Option.join_eq_some", 1],["Function.comp_apply", 1],["True.intro", 1],["Option.some_get", 1],["Array.set", 1],["HMul.hMul", 1],["and_false", 1],["and_true", 1],["Option.ne_none_iff_isSome", 1],["Option.isSome", 1],["sorryAx", 1],["List.get?_set_eq", 1],["Function.partial_inv_of_injective", 1],["Fin.isLt", 1],["mt", 1],["List.Fin.exists_iff", 1],["Option.some.inj", 1],["And.right", 1],["List.get?_append", 1],["eq_of_heq", 1],["exists_eq'", 1],["Option.map_id", 1],["true_and", 1],["List.get?_set_of_lt", 1],["SizeOf.sizeOf", 1],["Nat.le_of_not_lt", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Classical.byContradiction", 1],["List.get?_concat_length", 1],["exists_congr", 1],["dif_neg", 1],["Nat.lt_of_not_le", 1],["Option.ne_none_iff_exists", 1],["Function.partial_inv", 1],["Nat.add_zero", 1],["le_of_not_lt", 1],["List.map", 1],["not_false_iff", 1],["Decidable.isFalse", 1],["absurd", 1],["not_lt", 1],["id_map'", 1],["Option.some_inj", 1],["List.get?_set_ne", 1],["Nat.succ.inj", 1],["Nat.add_eq", 1],["Nat.not_le_of_lt", 1],["Array.get?_set_eq", 1],["Decidable", 1],["List.get?_eq_some", 1],["not_le", 1],["Nat.add_sub_add_right", 1],["eq_comm", 1],["List.get?_modifyNth_eq", 1],["Decidable.isTrue", 1],["ite", 1],["ite_true", 1],["List.get_cons_zero", 1],["List.get_of_mem", 1],["Option.bind_eq_some", 1],["Decidable.decide", 1],["ite_false", 1],["decide_eq_true", 1],["trivial", 1],["if_false", 1],["Option.lt", 1],["instDecidableEqNat", 1],["dite_true", 1],["Array.get_eq_get", 1],["Option.get_some", 1],["Iff.trans", 1],["not_false", 1]]],
["HAppend.hAppend", 97, [["Eq", 50],["congrArg", 49],["Eq.trans", 46],["of_eq_true", 42],["Eq.refl", 41],["HAppend.hAppend", 40],["List.nil", 36],["rfl", 36],["congr", 35],["congrFun", 34],["List.cons", 32],["eq_self", 31],["Eq.mpr", 30],["Eq.symm", 26],["Bool.true", 19],["List.nil_append", 16],["And", 16],["propext", 16],["List.cons_append", 16],["HAdd.hAdd", 15],["PProd.fst", 13],["Prod.mk", 12],["Exists.intro", 11],["Eq.mp", 10],["List.length", 10],["And.intro", 10],["Membership.mem", 10],["Not", 10],["Iff", 9],["Classical.em", 9],["eq_false", 9],["HSub.hSub", 9],["funext", 9],["List.mem_append", 9],["HEq.refl", 9],["cond", 9],["OfNat.ofNat", 9],["Nat.Linear.Poly.denote", 8],["eq_true_of_decide", 8],["Nat.zero_add", 8],["Exists", 8],["List.append_nil", 8],["Bool.of_not_eq_true", 7],["Nat.add", 7],["cond_false", 7],["eq_true", 7],["Nat.add_comm", 7],["cond_true", 7],["Iff.intro", 7],["Nat.add_eq", 7],["HMul.hMul", 6],["List.reverse", 6],["Nat.Linear.Poly.denote_eq", 6],["Nat.Linear.Var.denote", 6],["eq_of_heq", 6],["Iff.mpr", 6],["iff_self", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.mul_eq", 6],["false_and", 5],["absurd", 5],["List.length_cons", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.Linear.Poly", 5],["Iff.mp", 5],["Nat.blt", 5],["Or", 5],["id", 5],["List.append_assoc", 5],["Prod", 4],["implies_congr", 4],["Nat.le_of_succ_le_succ", 4],["Nat.sub_eq", 4],["Or.inl", 4],["Or.inr", 4],["Nat.add_left_comm", 4],["List.append", 4],["List.map", 4],["LE.le", 4],["Nat.Linear.Poly.cancelAux", 4],["List.reverse_cons", 4],["Nat.succ", 4],["Unit.unit", 4],["List.append_eq_nil", 4],["List.erasep", 4],["Nat.Linear.hugeFuel", 3],["ne_eq", 3],["Subsingleton.elim", 3],["List.get", 3],["Nat.Linear.Expr.toPoly", 3],["False", 3],["List.reverse_nil", 3],["List.erasep_cons_of_neg", 3],["List.erase_eq_erasep", 3],["Bool.false", 3],["Nat.Linear.Expr.denote", 3],["Nat.add_assoc", 3],["List.Mem.tail", 3],["List.List.append_eq", 3],["List.get?", 3],["true_and", 3],["Fin.mk", 3],["False.elim", 3],["Decidable.em", 3],["List.not_mem_nil", 2],["eq_false'", 2],["eq_false_of_decide", 2],["Nat.zero", 2],["List.reverseAux", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.not_lt_eq", 2],["Nat.Linear.Poly.denote_reverse", 2],["false_or", 2],["mt", 2],["List.length_nil", 2],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 2],["Nat.Linear.Expr.var", 2],["List.mem_append_right", 2],["List.length_append", 2],["List.mem_join", 2],["Nat.zero_eq", 2],["List.join", 2],["List.cons.injEq", 2],["List.mem_bind", 2],["List.erasep_cons_of_pos", 2],["List.mem_map", 2],["List.Mem.head", 2],["Nat.add_zero", 2],["List.subset.trans", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.Linear.Expr.num", 2],["List.forall_mem_cons", 2],["List.exists_of_erasep", 2],["List.repeat'", 2],["implies_congr_ctx", 2],["List.mem_append_left", 2],["forall_congr", 2],["List.bind", 2],["Nat.not_le_eq", 2],["List.cons_bind", 2],["exists_false", 2],["and_self", 2],["implies_true", 2],["Option.some", 2],["Function.injective.eq_iff", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.ExprCnstr.mk", 2],["True", 2],["Nat.Linear.Expr.add", 2],["LT.lt", 2],["eq_comm", 2],["Iff.rfl", 2],["List.erase", 2],["beq_self_eq_true", 1],["List.map_append", 1],["List.subset_def", 1],["List.erasep_append_left", 1],["List.append_eq_cons_iff", 1],["List.append_right_injective", 1],["Nat.Linear.Poly.combineAux", 1],["BEq.beq", 1],["Sat.Fmla.reify.prop", 1],["Nat.sub_add_eq_max", 1],["Nat.Linear.Poly.denote_sort_go", 1],["List.card_nil", 1],["List.subset_append_right", 1],["by_contra", 1],["and_imp", 1],["List.get?_eq_get", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.one_mul", 1],["Nat.mul_one", 1],["or_assoc", 1],["Nat.Linear.Poly.denote_mul", 1],["And.left", 1],["List.Perm.refl", 1],["List.mem_of_ne_of_mem", 1],["exists_eq_right_right'", 1],["Sat.Fmla.reify.mk", 1],["List.erasep_of_forall_not", 1],["List.drop", 1],["List.erasep_append_right", 1],["List.mapTRAux", 1],["and_false", 1],["Or.elim", 1],["Array.data", 1],["Array.push", 1],["List.Perm.trans", 1],["List.concat", 1],["List.forall_mem_nil", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Option.some.inj", 1],["Nat.succ_sub_succ", 1],["Nat.lt_add_right", 1],["And.right", 1],["List.append_subset_of_subset_of_subset", 1],["Sat.Valuation.satisfies_fmla.mk", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.denote_combine", 1],["not_or", 1],["List.singleton_append", 1],["not_and", 1],["Nat.Linear.fixedVar", 1],["Nat.lt_succ_iff", 1],["eq_of_beq", 1],["List.mem_cons", 1],["List.subset_append_left", 1],["List.reverseAux_eq_append", 1],["forall_and_distrib", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.Linear.Poly.combine", 1],["List.get_append_right_aux", 1],["List.concat_eq_append", 1],["Nat.add_le_add_right", 1],["List.card", 1],["List.take", 1],["max", 1],["Nat.zero_sub", 1],["List.Perm", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["List.mem_union_iff", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["List.Perm.swap", 1],["Nat.add_le_add_left", 1],["Nat.mul", 1],["List.append_right_cancel", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["List.Perm.cons", 1],["List.append_left_cancel", 1],["Nat.add_sub_add_right", 1],["Array.mk", 1],["Bool.and_self", 1],["Nat.mul_comm", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["Nat.succ_add", 1],["or_false", 1],["not_exists", 1],["Nat.right_distrib", 1],["List.get?_append_right", 1],["or_imp_distrib", 1],["List.getLast", 1],["Prod.mk.injEq", 1],["and", 1],["Nat.Linear.Poly.denote_fuse", 1],["List.append_left_injective", 1],["Bool.and_false", 1],["List.length_repeat'", 1],["List.toArrayAux", 1],["Bool.and_true", 1],["Sat.Valuation.satisfies_fmla.prop", 1],["congr_arg", 1]]],
["Option.none", 95, [["Eq", 50],["Eq.refl", 45],["congrArg", 40],["Eq.trans", 39],["Option.some", 36],["rfl", 36],["of_eq_true", 34],["Eq.symm", 31],["congrFun", 30],["eq_self", 27],["Option.none", 25],["congr", 20],["List.get?", 16],["Iff", 15],["Eq.mpr", 14],["funext", 12],["propext", 11],["iff_self", 11],["Iff.intro", 10],["Bool.true", 10],["Fin.mk", 9],["Exists", 9],["eq_false'", 8],["Option.map_some'", 8],["eq_false", 8],["Not", 8],["HEq.refl", 7],["PProd.fst", 7],["Option.map", 7],["False", 7],["Option.map_none'", 7],["id_eq", 6],["eq_false_of_decide", 6],["Functor.map", 6],["Unit.unit", 6],["Bool.false", 6],["True", 6],["Fin.val", 6],["List.cons", 6],["Option.mem_def", 6],["eq_true_of_decide", 6],["List.nil", 6],["OfNat.ofNat", 5],["Option.some.injEq", 5],["Decidable.em", 5],["List.get?_eq_get", 5],["Array.data", 5],["id", 5],["LT.lt", 5],["Array.mk", 4],["List.length", 4],["Option.none_bind", 4],["HAppend.hAppend", 4],["Eq.mp", 4],["forall_congr", 4],["Option.bind", 4],["eq_true", 4],["ne_eq", 4],["Option.some_bind", 4],["Array.get?_eq_get?", 4],["List.get", 4],["And", 4],["List.set", 4],["Fin", 3],["ite_congr", 3],["Prod.mk", 3],["Option", 3],["dif_pos", 3],["implies_congr", 3],["exists_eq_right", 3],["if_pos", 3],["Option.isSome_some", 3],["Iff.mpr", 3],["HAdd.hAdd", 3],["Array.get?", 3],["Membership.mem", 3],["Bool", 3],["exists_false", 3],["decide_eq_false", 3],["Nat.zero", 3],["Classical.em", 2],["BinaryHeap.arr", 2],["not_forall", 2],["false_and", 2],["Array.get", 2],["BinaryHeap.size_pos_of_max", 2],["decide_eq_true_iff", 2],["Or.inl", 2],["Array.size", 2],["exists_prop", 2],["Or.inr", 2],["Eq.mpr_prop", 2],["Iff.mp", 2],["List.set_eq_modifyNth", 2],["HSub.hSub", 2],["LE.le", 2],["Nonempty", 2],["Nat.le_of_succ_le_succ", 2],["Nat.succ", 2],["BinaryHeap.max", 2],["Option.bind_eq_none", 2],["Classical.choice", 2],["Subsingleton.elim", 2],["List.length_cons", 2],["List.get?_len_le", 2],["if_neg", 2],["exists_eq_left'", 2],["Option.bind_eq_some", 2],["Option.isSome_none", 2],["List.modifyNth", 2],["Nonempty.intro", 2],["Exists.intro", 2],["Option.map_map", 2],["Array.size_set", 2],["List.cons_append", 2],["Or", 2],["not_not", 2],["List.concat_eq_append", 2],["List.get?_modifyNth", 2],["dite", 2],["False.elim", 2],["dite_congr", 2],["congr_arg", 1],["le_of_not_lt", 1],["Option.ext", 1],["decidable_of_decidable_of_iff", 1],["Option.get", 1],["Iff.rfl", 1],["List.mem_iff_get", 1],["not_false", 1],["Function.is_partial_inv_left", 1],["not_lt_of_ge", 1],["not_le", 1],["Or.elim", 1],["Option.eq_none_iff_forall_not_mem", 1],["not_exists", 1],["And.left", 1],["Nat.not_lt_of_le", 1],["List.map", 1],["List.get?_set_ne", 1],["Array.get_eq_get", 1],["exists_congr", 1],["Array.set", 1],["List.get?_modifyNth_ne", 1],["Decidable", 1],["iff_false", 1],["and_false", 1],["and_true", 1],["List.get?_modifyNth_eq", 1],["List.get?_set_eq", 1],["Function.partial_inv_of_injective", 1],["trivial", 1],["mt", 1],["List.Fin.exists_iff", 1],["Option.some.inj", 1],["And.right", 1],["Array.get?_set_ne", 1],["Function.comp", 1],["Option.map_eq_none'", 1],["List.get?_append", 1],["eq_comm", 1],["List.get?_set_of_lt", 1],["HMul.hMul", 1],["not_and", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Classical.byContradiction", 1],["Option.map_id", 1],["Option.isSome", 1],["Option.getD", 1],["Nat.lt_of_not_le", 1],["Option.ne_none_iff_exists", 1],["exists_eq", 1],["Nat.add_zero", 1],["Nat.le_of_not_lt", 1],["List.get?_concat_length", 1],["not_false_iff", 1],["Decidable.isFalse", 1],["not_lt", 1],["id_map'", 1],["dite_false", 1],["dif_neg", 1],["Option.eq_none_of_isNone", 1],["Function.comp_apply", 1],["Nat.not_le_of_lt", 1],["Array.get?_set_eq", 1],["True.intro", 1],["List.get?_eq_some", 1],["Fin.isLt", 1],["Nat.add_sub_add_right", 1],["Nat.succ.inj", 1],["false_iff", 1],["Option.isNone_iff_eq_none", 1],["ite", 1],["Option.lift_or_get", 1],["And.intro", 1],["List.get_of_mem", 1],["Nat.add_eq", 1],["Decidable.decide", 1],["Decidable.isTrue", 1],["ite_true", 1],["List.get_cons_zero", 1],["if_false", 1],["Option.lt", 1],["ite_false", 1],["dite_true", 1],["decide_eq_true", 1],["Function.partial_inv", 1],["Iff.trans", 1],["instDecidableEqNat", 1]]],
["Bool.false", 95, [["Eq.refl", 52],["Eq", 38],["Eq.symm", 37],["Bool.true", 34],["rfl", 32],["congrArg", 27],["Eq.trans", 26],["congrFun", 26],["of_eq_true", 24],["eq_self", 21],["congr", 20],["Bool.false", 15],["Iff.intro", 15],["OfNat.ofNat", 13],["HAdd.hAdd", 13],["Eq.mpr", 12],["Prod.mk", 11],["List.cons", 9],["propext", 9],["of_decide_eq_true", 9],["eq_true_of_decide", 9],["List.nil", 9],["Unit.unit", 9],["Decidable.decide", 9],["True", 8],["Eq.mp", 8],["absurd", 8],["False", 8],["Classical.em", 8],["eq_false_of_decide", 8],["Nat.Linear.Poly.denote", 7],["LT.lt", 7],["Decidable.em", 7],["Option.none", 6],["cond_false", 6],["Iff", 6],["iff_self", 6],["PProd.fst", 6],["eq_false", 6],["cond_true", 6],["HMul.hMul", 6],["Bool.of_not_eq_true", 6],["cond", 6],["LE.le", 6],["eq_true", 6],["Nat.zero_add", 6],["Nat.add_comm", 6],["False.elim", 6],["Nat.Linear.Var.denote", 5],["Nat.add_eq", 5],["HSub.hSub", 5],["funext", 5],["Nat.add", 5],["Fin.val", 5],["HMod.hMod", 5],["Nat.add_left_comm", 5],["decide_eq_false", 5],["Option.some", 5],["Nat.mul_eq", 5],["Bool", 4],["Option.isSome_some", 4],["Nat.Linear.Poly.denote_eq", 4],["List.length", 4],["Nat.Linear.Poly.denote_le", 4],["decide_eq_true", 4],["HAppend.hAppend", 4],["Nat.blt", 4],["Not", 4],["Option.isSome_none", 3],["Nat.ble", 3],["eq_false'", 3],["Nat.digitChar", 3],["Nat.Linear.Poly.denote_append", 3],["Nat.Linear.hugeFuel", 3],["dif_pos", 3],["Nat.Linear.Poly", 3],["HDiv.hDiv", 3],["ite_congr", 3],["Fin.mk", 3],["Iff.mpr", 3],["Nat.toDigitsCore", 3],["Option", 3],["Fin", 3],["Array.size", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.reverse", 2],["Nat.succ", 2],["BEq.beq", 2],["UnionFind.size", 2],["Nat.add_assoc", 2],["List.append_nil", 2],["HEq.refl", 2],["of_decide_eq_false", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse_cons", 2],["Subsingleton.elim", 2],["Nat.Linear.Poly.denote_reverse", 2],["if_true", 2],["Subtype.property", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.ble_eq_true_of_le", 2],["UnionFind.rankMaxAux", 2],["Nat.sub_eq", 2],["Nat.mod_lt", 2],["decide_eq_true_eq", 2],["Bool.and_true", 2],["id", 2],["if_false", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["decide_eq_true_iff", 2],["Nat.le_of_ble_eq_true", 2],["dif_neg", 2],["and", 2],["List.nil_append", 2],["dite", 2],["Prod", 2],["List.mem_of_elem_eq_true", 1],["exists_eq'", 1],["UnionFind.lt_rankMax", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.le_of_not_lt", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Option.get", 1],["Or", 1],["Nat.lt_irrefl", 1],["Nonempty", 1],["Tactic.NormCast.Label.elim", 1],["List.getLast", 1],["Bool.not_true", 1],["UnionFind.rank_lt", 1],["Classical.choice", 1],["trivial", 1],["Nat.ble_self_eq_true", 1],["Array.isEqvAux.proof_3", 1],["not", 1],["exists_false", 1],["Nat.Linear.Poly.combineAux", 1],["List.elem", 1],["Nat.Linear.Expr.toNormPoly", 1],["Tactic.NormCast.Label.move", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["WellFoundedRelation.rel", 1],["Nat.beq", 1],["List.get", 1],["sizeOf_nat", 1],["List.getLast_singleton", 1],["List.cons_ne_nil", 1],["And", 1],["Nat.sub_succ_lt_self", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.Linear.Expr.toPoly", 1],["Array.isEqv", 1],["True.intro", 1],["dite_congr", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.not_lt_of_le", 1],["Array.isEqvAux.proof_1", 1],["Nat.Linear.Expr.denote", 1],["Option.isNone_some", 1],["Nat.one_pos", 1],["UnionFind.lt_rankMax'", 1],["beq_self_eq_true'", 1],["Bool.and_false", 1],["Array.isEqvAux_self", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["List.mem_filter", 1],["Option.isNone_none", 1],["Option.eq_none_of_isNone", 1],["Nat.Linear.Poly.denote_fuse", 1],["Subtype.val", 1],["Nat.ble_succ_eq_true", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.and_self", 1],["Nat.succ_pos", 1],["not_le", 1],["Nat.to_digits_core_length", 1],["Membership.mem", 1],["UnionFind.rankMax", 1],["Nat.lt_succ_iff", 1],["implies_congr", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Tactic.NormCast.Label.squash", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.lt_of_not_le", 1],["List.length_pos_of_ne_nil", 1],["List.getLast_cons", 1],["Option.some.injEq", 1],["ne_eq", 1],["BinaryHeap.popMaxAux", 1],["Nat.beq_refl", 1],["List.elem_eq_true_of_mem", 1],["Bool.not_false", 1],["Fin.isLt", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["not_lt", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_sort_go", 1],["WellFounded.fix_eq", 1],["false_iff", 1],["Nat.sub_lt_sub_left", 1],["Nat.not_le_of_lt", 1],["Array.isEqvAux.proof_2", 1],["false_and", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["toBoolUsing_eq_true", 1],["Nat.zero_le", 1],["Nonempty.intro", 1],["Nat.eq_of_beq_eq_true", 1],["Exists", 1],["List.mem_cons", 1],["Array.get", 1],["WellFounded.fix", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Poly.combine", 1],["Nat.right_distrib", 1],["Nat.sub_lt", 1],["Option.isSome", 1],["Nat.lt_eq", 1],["Nat.add_le_add_right", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["List.not_mem_nil", 1],["List.get_singleton", 1],["dite_true", 1],["LawfulBEq.rfl", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["eq_of_heq", 1]]],
["Fin", 94, [["Fin", 28],["Fin.mk", 21],["Fin.val", 19],["OfNat.ofNat", 16],["HMod.hMod", 15],["instNonempty", 11],["Eq", 10],["HAdd.hAdd", 9],["Fin.ofNat'", 8],["Option.none", 7],["Eq.refl", 7],["Option.some", 7],["LT.lt", 7],["inferInstanceAs", 6],["congrArg", 6],["Prod.mk", 6],["LE.le", 6],["Inhabited.mk", 6],["Bool.true", 6],["Option", 6],["congrFun", 6],["Eq.symm", 6],["Eq.trans", 6],["eq_self", 5],["of_eq_true", 5],["HSub.hSub", 5],["Decidable.decide", 4],["Bool.false", 3],["Nat.succ", 3],["congr", 3],["rfl", 3],["decide_eq_false", 3],["Fin.size_positive'", 3],["Bool", 3],["Decidable.em", 3],["eq_true", 3],["Unit.unit", 3],["eq_false_of_decide", 3],["Eq.mp", 3],["HMul.hMul", 3],["Neg.neg", 3],["False.elim", 3],["Iff.mpr", 2],["UFModel.rank", 2],["Nat.mod_lt", 2],["AddCommMonoid", 2],["Iff.intro", 2],["UFModel.parent", 2],["decide_eq_true_iff", 2],["sorryAx", 2],["Fin.eq_of_val_eq", 2],["Eq.mpr", 2],["Fin.isLt", 2],["eq_false", 2],["Subsingleton.intro", 2],["instNegFin.proof_1", 2],["Fin.ofNat", 2],["propext", 2],["CommSemigroup", 2],["OfNat.mk", 2],["dite_true", 2],["dite", 2],["dite_congr", 2],["AddMonoidWithOne", 2],["Id", 1],["Fin.lor", 1],["Fin.lor.proof_1", 1],["instAddCommSemigroupFin.proof_2", 1],["Classical.em", 1],["eq_true_of_decide", 1],["AddMonoidWithOne.mk", 1],["lt_irrefl", 1],["Nat.mod_self", 1],["repr", 1],["Fin.mul", 1],["ToString.toString", 1],["AndOp.mk", 1],["Fin.ne_of_val_ne", 1],["Prod.map", 1],["USize.size_positive", 1],["Mul.mk", 1],["Div.mk", 1],["instMonoidWithZeroFin.proof_4", 1],["Fin.gt_wf", 1],["Fin.overflowingMul", 1],["True", 1],["not_le", 1],["iff_self", 1],["ULift", 1],["AddCommSemigroup.mk", 1],["Random.instBoundedRandomFinToPreorderToPartialOrderInstLinearOrderFin.proof_2", 1],["Nat.add_sub_cancel'", 1],["Fin.shiftRight", 1],["LT.mk", 1],["ne_eq", 1],["false_iff", 1],["UFModel.push", 1],["Sub.mk", 1],["Fin.land", 1],["Fin.shiftLeft.proof_1", 1],["ToString.mk", 1],["Array.get", 1],["randNat", 1],["Fin.mod.proof_1", 1],["Array.size", 1],["Add.mk", 1],["Fin.underflowingSub", 1],["HShiftLeft.hShiftLeft", 1],["instCommSemigroupFin.proof_2", 1],["Subtype.mk", 1],["Fin.le_total", 1],["eq_of_heq", 1],["UInt64.size_positive", 1],["Nat.le_of_not_lt", 1],["MonoidWithZero", 1],["dif_neg", 1],["Fin.overflowingAdd", 1],["decEq", 1],["CommSemiring", 1],["Random.randBound", 1],["instAddGroupWithOneFin.proof_3", 1],["Fin.modn", 1],["Fin.xor.proof_1", 1],["Fin.ofNat.proof_1", 1],["HMod.mk", 1],["Pure.pure", 1],["instCommSemiringFin.proof_12", 1],["Decidable.isTrue", 1],["ShiftRight.mk", 1],["BEq.beq", 1],["decide_eq_true", 1],["Prod", 1],["lt_of_lt_of_le", 1],["UFModel.Agrees.push", 1],["Random.instBoundedRandomFinToPreorderToPartialOrderInstLinearOrderFin.proof_1", 1],["Fin.add.proof_1", 1],["HShiftRight.hShiftRight", 1],["CommRing.mk", 1],["Nat.add_mod_mod", 1],["CommSemiring.mk", 1],["Fin.sub", 1],["Fin.shiftLeft", 1],["instAddGroupWithOneFin.proof_6", 1],["MonoidWithZero.mk", 1],["Iff", 1],["instSubsingletonFinOfNatNatInstOfNatNat.proof_1", 1],["AddCommMonoid.mk", 1],["instAddGroupWithOneFin.proof_7", 1],["forall_congr", 1],["instMonoidWithZeroFin.proof_5", 1],["instAddMonoidWithOneFin.proof_2", 1],["Fin.size_positive", 1],["Nat.not_lt_of_le", 1],["inferInstance", 1],["Subtype", 1],["Fin.shiftRight.proof_1", 1],["Fin.add", 1],["CommSemigroup.mk", 1],["Random.randFin", 1],["Nat", 1],["Nat.land", 1],["Fin.modn.proof_1", 1],["UInt16.size_positive", 1],["Fin.mul.proof_1", 1],["Nat.succ_lt_succ", 1],["AddGroupWithOne", 1],["instCommRingFin.proof_8", 1],["Nat.cast", 1],["ShiftLeft.mk", 1],["UFModel.rank_lt", 1],["Array.indexOfAux.proof_2", 1],["Fin.add_def", 1],["HEq.refl", 1],["instAddCommMonoidFin.proof_5", 1],["instSubsingletonFinOfNatNatInstOfNatNat_1.proof_1", 1],["HDiv.hDiv", 1],["Fin.xor", 1],["UFNode.mk", 1],["UInt32.size_positive", 1],["Fin.sub.proof_1", 1],["Nat.le_of_lt", 1],["LE.mk", 1],["instAddGroupWithOneFin.proof_4", 1],["implies_congr", 1],["Ord.compare", 1],["Fin.ofInt'", 1],["add_comm", 1],["Fin.div.proof_1", 1],["Array.indexOfAux", 1],["Nat.lt_of_not_le", 1],["OrOp.mk", 1],["And.imp", 1],["Decidable.isFalse", 1],["Subsingleton.elim", 1],["ULift.up", 1],["Fin.sub_def", 1],["instAddMonoidWithOneFin.proof_1", 1],["Fin.zero_def", 1],["WellFoundedRelation.mk", 1],["Mod.mk", 1],["Fin.land.proof_1", 1],["UFModel.push.proof_1", 1],["Fin.div", 1],["not_lt", 1],["Coe.mk", 1],["Nat.lor", 1],["RandG", 1],["False", 1],["dif_pos", 1],["Fin.mod", 1],["Nat.not_le_of_lt", 1],["Nat.xor", 1],["UInt8.size_positive", 1],["Neg.mk", 1],["LinearOrder.mk", 1],["Array.indexOfAux.proof_1", 1],["Hashable.mk", 1],["AddCommSemigroup", 1],["WellFounded.fix", 1],["ite", 1],["AddGroupWithOne.mk", 1],["Random.mk", 1],["Nat.toUInt64", 1],["BoundedRandom.mk", 1],["And", 1],["Ord.mk", 1],["Nat.le_add_right", 1],["Not", 1],["forall_const", 1],["instAddGroupWithOneFin.proof_5", 1],["Xor.mk", 1],["Bind.bind", 1],["Decidable", 1],["dite_false", 1]]],
["Int.ofNat", 88, [["rfl", 45],["Eq", 20],["Int.ofNat", 19],["Eq.refl", 14],["Eq.mpr", 11],["congrArg", 11],["HAdd.hAdd", 10],["OfNat.ofNat", 9],["HMul.hMul", 9],["Int.negSucc", 9],["Int.subNatNat", 8],["Eq.symm", 8],["Nat.succ", 8],["Int.negOfNat", 6],["HSub.hSub", 5],["Eq.trans", 5],["congrFun", 5],["Unit.unit", 5],["SubNegMonoid.gsmul_succ'", 5],["Int.natAbs", 5],["of_eq_true", 4],["Neg.neg", 4],["eq_self", 4],["congr", 4],["Int.ofNat_zero", 3],["AddGroupWithOne.intCast_ofNat", 2],["Nat.add_assoc", 2],["Int.one_mul", 2],["Int.subNatNat_of_sub_eq_zero", 2],["Int.add_comm", 2],["Nat.add_comm", 2],["Nat.sub_self", 2],["Int.subNatNat_elim", 2],["Int.sub_eq_add_neg", 2],["Int.neg_add", 2],["Nat.mul_comm", 2],["Int.mul_comm", 2],["Int.add_right_neg", 1],["AddGroupWithOne.gsmul_succ'", 1],["Int.ofNat_mul_ofNat", 1],["UInt8.val", 1],["Nat.add_succ", 1],["Int.sub_nat_self", 1],["Int.sign", 1],["Int.mul_negSucc_ofNat_negSucc_ofNat", 1],["Eq.propIntro", 1],["UInt32.mk", 1],["Nat.succ_add", 1],["Int.negSucc_ofNat_coe", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Int.neg_eq_neg_one_mul", 1],["Nat.succ_pred_eq_of_pos", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.le_refl", 1],["Int.ofNat_mul_negSucc_ofNat", 1],["Int.distrib_right", 1],["Int.ofNat.inj", 1],["Exists.intro", 1],["UInt64.val", 1],["Nat.sub_add_cancel", 1],["UInt8.mk", 1],["UInt16.val", 1],["Int.add_zero", 1],["not_lt_of_ge", 1],["Int.add_assoc", 1],["absurd", 1],["Int.subNatNat_add_right", 1],["Int.negSucc_ofNat_add_ofNat", 1],["Int.subNatNat_of_sub_eq_succ", 1],["Int.zero_add", 1],["Int.NonNeg.mk", 1],["USize.mk", 1],["Int.ofNat_add_ofNat", 1],["Or", 1],["Int.ofNat_add_negSucc_ofNat", 1],["Int.negSucc_ofNat_add_negSucc_ofNat", 1],["UInt32.val", 1],["AddGroupWithOne.gsmul_neg'", 1],["Int.subNatNat_add_negSucc_ofNat", 1],["Int.subNatNat_add", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["Int.natAbs_eq", 1],["Iff.intro", 1],["Int.neg_succ_lt_zero", 1],["Int.negSucc_ofNat_ofNat", 1],["UInt16.mk", 1],["Nat.sub_pos_of_lt", 1],["Or.inl", 1],["Nat.zero_mul", 1],["Int.ofNat_add", 1],["Int.subNatNat_add_left", 1],["Int.add_left_comm", 1],["Int.subNatNat_add_add", 1],["Int.ofNat_succ", 1],["UInt64.mk", 1],["Nat.zero_eq", 1],["Int.zero_mul", 1],["USize.val", 1],["eq_of_heq", 1],["Or.inr", 1],["Nat.pred", 1],["Int.ofNat_sub", 1],["Int.ofNat_mul_negOfNat", 1]]],
["Fin.val", 81, [["Fin.val", 43],["Eq.refl", 33],["Eq", 33],["congrArg", 27],["Eq.symm", 24],["Eq.trans", 21],["Eq.mpr", 20],["Fin.mk", 20],["congrFun", 20],["LT.lt", 18],["of_eq_true", 17],["OfNat.ofNat", 17],["rfl", 15],["Fin.isLt", 14],["HAdd.hAdd", 14],["eq_self", 12],["Bool.true", 12],["Array.size", 10],["HMod.hMod", 10],["Nat.mod_lt", 9],["Array.size_set", 8],["List.cons", 7],["congr", 7],["List.nil", 7],["Option.some", 7],["Array.get", 7],["Nat.Linear.Expr.var", 6],["Nat.Linear.Expr.num", 6],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 6],["Nat.Linear.Expr.add", 6],["UFModel.parent", 6],["Nat.Linear.ExprCnstr.mk", 6],["UnionFind.arr", 6],["Eq.mp", 5],["eq_false", 5],["Exists.intro", 5],["ne_eq", 5],["Fin.size_positive", 5],["Classical.em", 5],["BinaryHeap.arr", 5],["Fin.sizeOf", 5],["Fin.val_eq_of_lt", 5],["UFModel.rank", 4],["UFNode.parent", 4],["Unit.unit", 4],["Fin", 4],["UnionFind.size", 4],["implies_congr", 4],["And.intro", 4],["HEq.refl", 4],["Nat.mod_eq_of_lt", 4],["Not", 4],["eq_true", 4],["UFModel.Agrees.get_eq", 3],["Array.set", 3],["Bool.false", 3],["dite_congr", 3],["if_neg", 3],["HSub.hSub", 3],["Subtype.property", 3],["And", 3],["Iff.intro", 3],["Prod.mk", 3],["if_pos", 3],["Array.push", 3],["Array.data", 3],["UFModel.rank_lt", 3],["eq_false_of_decide", 3],["HMul.hMul", 3],["Option.none", 3],["Decidable.em", 3],["UFNode.mk", 3],["eq_of_heq", 3],["Bool", 3],["Nat.le_add_right", 3],["dite_true", 3],["decide_eq_false", 3],["UFModel.Models.size_eq", 3],["Option", 3],["False.elim", 3],["List.set", 2],["eq_true_of_decide", 2],["UFNode.rank", 2],["Fin.eq_of_val_eq", 2],["Option.some.inj", 2],["List.get", 2],["Exists", 2],["UFModel.Models.parent_eq", 2],["Array.mk", 2],["And.right", 2],["ite_congr", 2],["UFModel.Models.empty", 2],["And.left", 2],["Array.size_push", 2],["BinaryHeap.heapifyDown", 2],["dif_neg", 2],["List.get?", 2],["UFModel.Models", 2],["Nat.lt_trans", 2],["UnionFind.model'", 2],["dif_pos", 2],["UFModel.push", 2],["Nat.le_of_succ_le_succ", 2],["UFModel.empty", 2],["ite", 2],["Iff.mpr", 2],["LE.le", 2],["Array.get?_eq_get?", 2],["BinaryHeap.size_pos_of_max", 2],["decide_eq_true_iff", 2],["dite", 2],["Nat.lt_succ_self", 2],["Nat.mod_le", 1],["UInt32.mk.sizeOf_spec", 1],["UInt64.mk.sizeOf_spec", 1],["sizeOf_default", 1],["UFModel.Agrees.set", 1],["List.drop", 1],["UInt8.mk.sizeOf_spec", 1],["Nat.mul_mod", 1],["UFModel.Models.rank_eq", 1],["ite_true", 1],["ite_false", 1],["decide_eq_true", 1],["List.length_set", 1],["le_antisymm", 1],["lt_of_lt_of_le", 1],["Fin.modn_lt", 1],["Fin.ext", 1],["UFNode.value", 1],["propext", 1],["List.get?_eq_get", 1],["le_of_lt", 1],["Fin.mul_def", 1],["Iff", 1],["BinaryHeap.size_heapifyUp", 1],["Fin.size_positive'", 1],["Fin.elim0", 1],["Nat.le_of_lt_succ", 1],["lt_irrefl", 1],["Eq.mpr_prop", 1],["Array.swap", 1],["UInt32.ofNat", 1],["le_of_not_lt", 1],["zero_lt_of_lt", 1],["Array.get?_push_eq", 1],["Nat.not_lt_of_le", 1],["UnionFind.findAux", 1],["UInt32.val", 1],["USize.toNat", 1],["True", 1],["PSigma", 1],["Or.inl", 1],["iff_self", 1],["lt_of_le_of_ne", 1],["USize.mk.sizeOf_spec", 1],["and_true", 1],["sorryAx", 1],["not_le", 1],["Sigma", 1],["Nat.add_le_of_le_sub_left", 1],["UInt8.val", 1],["UFModel.Agrees.push", 1],["Nat.zero_lt_succ", 1],["PProd.fst", 1],["BinaryHeap.insert.proof_1", 1],["UnionFind.model", 1],["UFModel.Models.parent_eq'", 1],["Nat.succ_lt_succ", 1],["List.get?_set_of_lt", 1],["List.length", 1],["UInt16.mk.sizeOf_spec", 1],["Array.get?_set_ne", 1],["Nat.sub_lt_sub_left", 1],["false_and", 1],["false_iff", 1],["Nat.add", 1],["Array.get?_eq_get", 1],["List.length_map", 1],["UInt32.val_eq_of_lt", 1],["Nat.lt_of_not_le", 1],["Array.size_swap", 1],["Array.get?_push_lt", 1],["Nat.add_zero", 1],["And.imp", 1],["Subsingleton.elim", 1],["Option.map", 1],["absurd", 1],["UFModel.push.proof_1", 1],["not_lt", 1],["UFModel.Agrees.empty", 1],["False", 1],["sizeOf_nat", 1],["of_decide_eq_true", 1],["List.map", 1],["Nat.not_le_of_lt", 1],["Array.get?_set_eq", 1],["Fin.mk.sizeOf_spec", 1],["Fin.ofNat'", 1],["Nat.lt_of_le_of_lt", 1],["lt_of_le_of_lt", 1],["List.get?_map", 1],["Nat.zero_le", 1],["UInt8.toChar_aux", 1],["BinaryHeap.heapifyUp", 1],["unsafeCast", 1],["WellFounded.fix", 1],["UFModel.Agrees.mk'", 1],["true_and", 1],["Array.get?", 1],["UnionFind.lt_rankMax", 1],["UFModel.Models.push", 1],["Nat.isValidChar", 1],["Decidable.decide", 1],["Nat.lt_of_succ_le", 1],["Nat.le_of_not_lt", 1],["UnionFind.findAux.proof_1", 1],["UnionFind.findAux.proof_2", 1],["PSigma.mk", 1],["List.get?_set_ne", 1],["Ne.symm", 1],["dite_false", 1],["Ne", 1],["UnionFind.rank_lt", 1]]],
["Nonempty", 80, [["Nonempty.intro", 29],["Nonempty", 21],["Iff.intro", 16],["instNonempty", 11],["Eq", 8],["Exists", 7],["Exists.intro", 7],["Eq.mpr", 6],["Eq.refl", 6],["dif_pos", 4],["funext", 3],["And", 3],["Classical.choice", 3],["Classical.choose_spec", 3],["Option.some", 3],["And.intro", 3],["Subtype.mk", 3],["dite", 3],["And.right", 2],["Or.inl", 2],["Or.inr", 2],["Classical.choose", 2],["Function.inv_fun_eq", 2],["Tactic.instNonemptyDeclCache", 2],["Subtype.property", 2],["Subtype", 2],["And.left", 2],["Bool.true", 2],["Classical.ofNonempty", 2],["trivial", 2],["Or", 2],["Subsingleton.elim", 2],["Sum", 2],["inferInstanceAs", 2],["False", 2],["Option.none", 2],["Classical.indefiniteDescription", 2],["True", 2],["Prod.mk", 2],["Function.inv_fun_on_pos", 2],["Function.LeftInverse_inv_fun", 2],["Function.RightInverse_surj_inv", 2],["Prod", 2],["PSum", 1],["instNonemptyProd.proof_1", 1],["Sum.inl", 1],["Eq.trans", 1],["instNonemptyForAll_1.proof_1", 1],["Tactic.instNonemptyCache.proof_1", 1],["Sum.inr", 1],["PSum.inl", 1],["sorryAx", 1],["congrFun", 1],["Function.partial_inv_of_injective", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Classical.arbitrary", 1],["Function.inv_fun_on_neg", 1],["inferInstance", 1],["Decidable", 1],["Function.inv_fun_on_eq", 1],["congrArg", 1],["Inhabited.mk", 1],["PSum.inr", 1],["Function.surj_inv_eq", 1],["rfl", 1],["Iff", 1],["Function.is_partial_inv_left", 1],["Function.extend_apply", 1],["of_eq_true", 1],["instNonempty.proof_1", 1],["Nonempty.map", 1],["Sigma", 1],["Option.isSome_some", 1],["Sigma.mk", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Option.some.injEq", 1],["instNonemptyForAll_2.proof_1", 1],["Exists.elim", 1],["Decidable.isFalse", 1],["ULift.up", 1],["Function.extend", 1],["dite_congr", 1],["Set.univ", 1],["instNonemptyForAll.proof_1", 1],["Tactic.Cache", 1],["Classical.propDecidable", 1],["Eq.mpr_prop", 1],["PUnit.unit", 1],["PUnit", 1],["Function.partial_inv", 1],["Except", 1],["PProd", 1],["PSigma", 1],["PProd.mk", 1],["ULift", 1],["Membership.mem", 1],["Function.LeftInverse.surjective", 1],["Decidable.isTrue", 1],["Task", 1],["Function.RightInverse.injective", 1],["PLift", 1],["Function.extend_def", 1],["Function.sometimes_eq", 1],["Option.isSome", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Nonempty.elim", 1],["Inhabited.default", 1],["Classical.em", 1],["PSigma.mk", 1],["Function.sometimes", 1],["Option.get", 1],["PLift.up", 1],["exists_apply_eq_apply", 1],["congr_arg", 1]]],
["Int", 79, [["Int.ofNat", 24],["rfl", 21],["OfNat.ofNat", 18],["Eq", 17],["Nat.succ", 16],["Int", 13],["Eq.refl", 12],["Int.negSucc", 11],["Unit.unit", 10],["Neg.neg", 10],["Eq.mpr", 9],["HMul.hMul", 9],["HAdd.hAdd", 9],["Int.negOfNat", 8],["Int.subNatNat", 8],["Eq.symm", 7],["HSub.hSub", 6],["Eq.trans", 4],["congrFun", 4],["congrArg", 4],["Int.sign", 4],["Bind.bind", 3],["Pure.pure", 3],["of_eq_true", 3],["congr", 3],["Iff.intro", 3],["HMod.hMod", 3],["Int.ofNat_zero", 3],["HDiv.hDiv", 3],["Int.mul_comm", 3],["eq_self", 2],["Mathlib.Tactic.Sat.Parser.parseNat", 2],["Nat.sub_self", 2],["Nat.zero_eq", 2],["HEq.refl", 2],["OfNat.mk", 2],["Int.subNatNat_elim", 2],["Int.natAbs", 2],["Int.subNatNat_of_sub_eq_zero", 2],["eq_of_heq", 2],["Nat.mul_comm", 2],["Nat.cast", 2],["Int.le_total", 1],["Int.add_left_comm", 1],["Int.neg", 1],["Int.decEq", 1],["Array.push", 1],["Int.sign_eq_one_of_pos", 1],["Int.sign_zero", 1],["Int.eq_neg_succ_of_lt_zero", 1],["Int.cast", 1],["Int.pow", 1],["Int.sub_nat_self", 1],["Int.sub_eq_add_neg", 1],["Subtype", 1],["inferInstance", 1],["PProd.fst", 1],["And", 1],["Nat.succ_add", 1],["List.nil", 1],["Int.subNatNat_of_sub_eq_succ", 1],["Int.neg_eq_neg_one_mul", 1],["Int.negSucc_ofNat_coe", 1],["Inhabited.mk", 1],["Nat.succ_pred_eq_of_pos", 1],["Nat.sub_eq_zero_of_le", 1],["Int.eq_zero_of_sign_eq_zero", 1],["Int.add", 1],["LE.mk", 1],["CommRing.mk", 1],["HAppend.hAppend", 1],["Int.sub", 1],["LE.le", 1],["Bool.true", 1],["UInt64.ofNat", 1],["Nat.sub_add_cancel", 1],["Int.repr", 1],["eq_true_of_decide", 1],["ForIn.forIn", 1],["compareOfLessAndEq", 1],["Int.mod", 1],["Int.ofNat_sub", 1],["Nat.add_zero", 1],["Int.add_zero", 1],["Nat.add_assoc", 1],["Int.add_assoc", 1],["Mod.mk", 1],["Int.subNatNat_add_right", 1],["Nat.le_refl", 1],["Nat.sub_pos_of_lt", 1],["Nat.zero_add", 1],["Coe.mk", 1],["Int.zero_add", 1],["RandG", 1],["CoeTail.mk", 1],["Random.randBound", 1],["Random.instBoundedRandomIntToPreorderToPartialOrderInstLinearOrderInt.proof_1", 1],["ToString.toString", 1],["Int.neg_of_sign_eq_neg_one", 1],["Int.div", 1],["Int.one_mul", 1],["SeqLeft.seqLeft", 1],["Mul.mk", 1],["LT.mk", 1],["Int.lt", 1],["Int.mul", 1],["Div.mk", 1],["Int.eq_succ_of_zero_lt", 1],["Neg.mk", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["LinearOrder.mk", 1],["Int.le", 1],["Hashable.mk", 1],["Int.pos_of_sign_eq_one", 1],["Nat.add_comm", 1],["Int.sign_eq_neg_one_of_neg", 1],["Sub.mk", 1],["PUnit.unit", 1],["ite", 1],["List.toArray", 1],["Int.ofNat_add", 1],["Mathlib.Tactic.Sat.Parser.parseInts", 1],["ToString.mk", 1],["BoundedRandom.mk", 1],["Int.subNatNat_add_left", 1],["Ord.mk", 1],["Int.subNatNat_add_add", 1],["UInt64", 1],["Prod.mk", 1],["SeqRight.seqRight", 1],["Add.mk", 1],["Nat", 1],["Random.instBoundedRandomIntToPreorderToPartialOrderInstLinearOrderInt.proof_2", 1],["ReprAtom.mk", 1],["Subtype.mk", 1],["Int.neg_add", 1],["HPow.mk", 1],["Nat.zero_mul", 1],["ForInStep.yield", 1],["Array.mkEmpty", 1],["Nat.pred", 1],["Int.zero_mul", 1],["Int.ofNat_mul_negOfNat", 1],["Int.add_right_neg", 1]]],
["Prod.mk", 79, [["Eq", 32],["congrArg", 29],["Prod.mk", 29],["Eq.trans", 27],["Eq.refl", 26],["congrFun", 25],["of_eq_true", 24],["rfl", 22],["eq_self", 22],["congr", 20],["Eq.symm", 20],["Bool.true", 18],["funext", 14],["HAdd.hAdd", 13],["Eq.mpr", 13],["Classical.em", 12],["Nat.Linear.Poly.denote", 12],["cond", 12],["cond_false", 10],["cond_true", 10],["Bool.of_not_eq_true", 10],["OfNat.ofNat", 9],["Prod.fst", 9],["Nat.add_comm", 9],["List.nil", 9],["Prod.snd", 9],["HMul.hMul", 9],["Unit.unit", 8],["Nat.zero_add", 8],["Nat.add", 8],["Nat.add_eq", 8],["Iff.intro", 8],["Nat.Linear.Var.denote", 8],["Eq.mp", 8],["Nat.mul_eq", 8],["LE.le", 8],["List.cons", 7],["Nat.Linear.Poly.denote_le", 6],["Nat.blt", 6],["eq_true_of_decide", 6],["Nat.add_left_comm", 6],["HAppend.hAppend", 6],["Nat.Linear.Poly.denote_eq", 6],["Nat.Linear.Poly", 5],["prod_map", 5],["implies_congr", 5],["absurd", 5],["Prod", 5],["HSub.hSub", 5],["Nat.Linear.Poly.cancelAux", 4],["List.append_nil", 4],["Nat.Linear.Poly.denote_append", 4],["List.reverse", 4],["propext", 4],["Nat.sub_eq", 4],["Bool.false", 4],["Prod.swap_swap", 3],["Bool", 3],["eq_true", 3],["PProd.fst", 3],["Nat.Linear.hugeFuel", 3],["Prod.mk.injEq", 3],["decide_eq_false", 3],["Option", 3],["Option.some", 3],["Prod.map", 3],["And", 3],["eq_false_of_decide", 3],["Nat.Linear.Expr.toPoly", 3],["iff_self", 3],["Fin", 3],["And.intro", 3],["id", 3],["Option.none", 3],["Nat.Linear.Expr.denote", 3],["Prod.mk.inj", 3],["Exists", 3],["Iff", 3],["and", 3],["Fin.val", 3],["Decidable.em", 3],["Nat.Linear.Poly.denote_reverse", 2],["False", 2],["Prod.swap_LeftInverse", 2],["Nat.mul", 2],["Bool.and_eq_true", 2],["HEq.refl", 2],["Prod.swap_injective", 2],["True", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.reverse_cons", 2],["Exists.intro", 2],["Nat.add_assoc", 2],["List.nil_append", 2],["Function.comp", 2],["List.reverse_nil", 2],["And.left", 2],["Nat.Linear.Poly.insertSorted", 2],["And.right", 2],["decide_eq_true_iff", 2],["eq_of_heq", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Expr.denote_toPoly", 2],["False.elim", 2],["LT.lt", 2],["Iff.mpr", 2],["Function.comp_apply", 2],["Prod.ext'", 1],["Or", 1],["Subsingleton.elim", 1],["or", 1],["Function.RightInverse.surjective", 1],["Function.uncurry", 1],["Prod.Lex.right'.proof_1", 1],["List.mem_bind", 1],["Prod.lexAccessible.proof_1", 1],["Prod.map_snd", 1],["BEq.beq", 1],["not_lt", 1],["eq_false", 1],["Nat.add_le_add", 1],["Bool.or_eq_true", 1],["Nat.Linear.Expr.toNormPoly", 1],["Bool.and_self", 1],["Eq.propIntro", 1],["false_iff", 1],["Nat.Linear.Poly.denote_combine", 1],["exists_eq_right_right'", 1],["Nat.not_le_of_lt", 1],["Bool.and_true", 1],["Bool.and_false", 1],["decide_eq_true", 1],["Acc.intro", 1],["SizeOf.sizeOf", 1],["Nat.lt", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.left_distrib", 1],["and_true", 1],["Function.curry", 1],["and_imp", 1],["Nat.Linear.Poly.denote_mul", 1],["not_le", 1],["Nat.eq_or_lt_of_le", 1],["Membership.mem", 1],["Nat.one_mul", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.mul_assoc", 1],["Nat.not_lt_of_le", 1],["List.mem_map", 1],["implies_true", 1],["Prod.Lex.left", 1],["Prod.swap_surjective", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Prod.Lex", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.fixedVar", 1],["Nat.mul_one", 1],["Nat.right_distrib", 1],["Function.LeftInverse.injective", 1],["Decidable.decide", 1],["Nat.Linear.Poly.combine", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["forall_congr", 1],["Nat.lt_of_not_le", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Function.injective.eq_iff", 1],["true_and", 1],["eq_of_beq", 1],["Prod.map_fst", 1],["Nat.mul_comm", 1],["Nat.le_of_not_lt", 1],["Prod.swap", 1],["Nat.add_zero", 1],["Prod.Lex.right", 1],["Nat.Linear.Poly.isNonZero", 1],["beq_self_eq_true", 1]]],
["Subtype.val", 75, [["Subtype.property", 14],["rfl", 10],["Eq", 10],["Eq.refl", 7],["OfNat.ofNat", 6],["Subtype.val", 6],["Eq.symm", 6],["funext", 5],["congrArg", 5],["Exists.intro", 5],["congrFun", 4],["Subtype.ext", 4],["Eq.mpr", 4],["Eq.trans", 3],["of_eq_true", 3],["Fin.mk", 3],["Exists", 3],["Unit.unit", 3],["And.left", 3],["Iff.intro", 3],["Classical.choose_spec", 3],["Subtype.coe_injective", 3],["LT.lt", 3],["UnionFind.size", 2],["HAdd.hAdd", 2],["of_decide_eq_true", 2],["Subtype.ext_iff", 2],["Function.inv_fun_eq", 2],["Function.inv_fun_on_pos", 2],["Fin.val", 2],["BinaryHeap.heapifyDown", 2],["UnionFind.rankMaxAux", 2],["Bool.true", 2],["usize_size_eq", 2],["USize.size", 2],["instNonempty", 2],["Function.LeftInverse_inv_fun", 2],["dif_pos", 2],["Classical.indefiniteDescription", 2],["Classical.choose", 2],["eq_self", 2],["eq_of_heq", 2],["And.right", 2],["Function.injective.comp", 2],["HEq.refl", 2],["Function.RightInverse_surj_inv", 2],["Iff.mpr", 1],["And", 1],["Array.push", 1],["UnionFind.lt_rankMax'", 1],["Function.partial_inv_of_injective", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Subtype.map.proof_1", 1],["Subtype.prop", 1],["Inhabited.mk", 1],["Function.inv_fun_on_eq", 1],["propext", 1],["Iff.rfl", 1],["le_of_lt", 1],["BinaryHeap.mkHeap", 1],["BinaryHeap.insert.proof_1", 1],["Nat.find_x", 1],["Classical.epsilon_spec", 1],["And.intro", 1],["Array.size_push", 1],["Function.extend_apply", 1],["Nat.succ_pos", 1],["Nat.gcd", 1],["Subtype.coind_injective", 1],["Iff", 1],["Function.is_partial_inv_left", 1],["Function.surj_inv_eq", 1],["Nat.lt_succ_iff", 1],["Function.extend_def", 1],["BinaryHeap.size_heapifyUp", 1],["sizeOf_default", 1],["Subtype.coe_eta", 1],["Classical.em", 1],["Fin.isLt", 1],["Classical.epsilon_spec_aux", 1],["trivial", 1],["Subtype.mk.sizeOf_spec", 1],["UnionFind.rank_lt", 1],["Nat.lt_trans", 1],["Nat.add_zero", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["Nat.pos_pow_of_pos", 1],["Function.extend", 1],["dite_congr", 1],["Nat.zero_add", 1],["not_lt", 1],["Classical.strongIndefiniteDescription", 1],["congr", 1],["System.Platform.getNumBits", 1],["Iff.symm", 1],["Eq.mpr_prop", 1],["Fin.val_eq_of_lt", 1],["usize_size_gt_zero", 1],["Function.partial_inv", 1],["Set.univ", 1],["Fin.ofNat'", 1],["Subtype.forall", 1],["USize.size_positive", 1],["BinaryHeap.arr", 1],["True", 1],["Membership.mem", 1],["UnionFind.rankMax", 1],["Function.LeftInverse.surjective", 1],["Nat.zero_lt_succ", 1],["Iff.mp", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4", 1],["Function.RightInverse.injective", 1],["id", 1],["nonempty_of_exists", 1],["BinaryHeap.heapifyUp", 1],["Nat.sub_lt_sub_left", 1],["heq_iff_eq", 1],["System.Platform.numBits", 1],["Function.inv_fun_on_neg", 1],["Nat.lt_of_succ_le", 1],["Array.size", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Option.some", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2", 1],["Nat.find_min", 1],["Classical.propDecidable", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1", 1],["Subtype.map", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["exists_apply_eq_apply", 1],["congr_arg", 1],["Iff.trans", 1],["dif_neg", 1]]],
["BEq.beq", 71, [["Eq.refl", 41],["Eq", 39],["congrArg", 36],["congrFun", 35],["Eq.trans", 32],["of_eq_true", 30],["Bool.true", 29],["eq_self", 28],["congr", 28],["Eq.symm", 27],["Eq.mpr", 23],["Nat.Linear.Poly.denote", 22],["HAdd.hAdd", 17],["Nat.add_comm", 17],["List.cons", 16],["cond", 16],["OfNat.ofNat", 16],["Classical.em", 16],["HMul.hMul", 16],["Nat.Linear.Var.denote", 16],["Nat.mul_eq", 16],["Nat.add_eq", 15],["Nat.add", 15],["List.nil", 14],["Prod.mk", 14],["cond_true", 14],["rfl", 13],["cond_false", 13],["Bool.of_not_eq_true", 13],["Nat.zero_add", 12],["Unit.unit", 10],["List.erase", 10],["HAppend.hAppend", 9],["eq_true_of_decide", 9],["Eq.mp", 9],["Nat.add_left_comm", 8],["BEq.beq", 7],["absurd", 7],["Iff.intro", 7],["List.erase_eq_erasep", 6],["Nat.Linear.Poly.denote_eq", 6],["eq_of_beq", 6],["Nat.blt", 6],["Nat.Linear.Poly.denote_le", 6],["implies_congr", 6],["LE.le", 6],["funext", 5],["Nat.Linear.Poly.denote_append", 5],["PProd.fst", 5],["Nat.Linear.Poly", 5],["Nat.Linear.Expr.denote", 5],["propext", 5],["List.append_nil", 5],["beq_self_eq_true", 4],["Membership.mem", 4],["Ne.symm", 4],["Prod", 4],["HSub.hSub", 4],["Nat.mul_one", 4],["Nat.add_assoc", 4],["Nat.sub_eq", 4],["List.reverse", 4],["Nat.Linear.Poly.cancelAux", 4],["List.nil_append", 4],["Nat.Linear.fixedVar", 4],["Not", 4],["if_neg", 3],["Nat.Linear.Var.denote.go", 3],["Nat.one_mul", 3],["of_decide_eq_true", 3],["Nat.mul", 3],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Expr.toPoly", 3],["LawfulBEq.rfl", 3],["and", 3],["List.erase_cons", 3],["Nat.Linear.Expr.denote_toPoly", 2],["Decidable.em", 2],["Nat.Linear.denote_monomialToExpr", 2],["Bool", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["Subsingleton.elim", 2],["Nat.Linear.Poly.denote_sort_go", 2],["decide_eq_true_eq", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["Or", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.mul_assoc", 2],["Nat.left_distrib", 2],["id", 2],["eq_true", 2],["Nat.Linear.monomialToExpr", 2],["List", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Decidable.decide", 2],["Bool.and_eq_true", 2],["List.erasep", 2],["Bool.false", 2],["List.List.append_eq", 2],["True", 2],["Nat.mul_zero", 1],["Option.none", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Expr.add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.Expr.mulL", 1],["Nat.Linear.Poly.combineAux", 1],["ite_true", 1],["List.elem", 1],["Nat.add_le_add_left", 1],["decide_eq_true", 1],["Option.some", 1],["Bool.or_eq_true", 1],["List.erase_cons_tail", 1],["not", 1],["Nat.zero_mul", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Iff", 1],["Nat.Linear.Expr.inc", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.Linear.Expr.var", 1],["Exists.intro", 1],["And.left", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.mod_lt", 1],["Nat.Linear.Poly.denote_fuse", 1],["GT.gt", 1],["decide_eq_false", 1],["Nat", 1],["if_pos", 1],["EqIffBeqTrue", 1],["Subset.subset", 1],["Option", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["NeqIffBeqFalse", 1],["eq_false", 1],["Bool.and_true", 1],["ite_congr", 1],["And.right", 1],["List.length", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.and_false", 1],["List.erasep_append_left", 1],["HMod.hMod", 1],["of_decide_eq_false", 1],["Nat.Linear.Expr.toNormPoly", 1],["Exists", 1],["List.erasep_cons_of_pos", 1],["List.length_erasep_of_mem", 1],["Nat.Linear.Poly.denote_combineAux", 1],["List.erase_cons_head", 1],["Option.some.injEq", 1],["Bool.and_self", 1],["Nat.add_zero", 1],["List.erasep_subset", 1],["or", 1],["List.erasep_append_right", 1],["eq_false'", 1],["Nat.add_le_add", 1],["Iff.mp", 1],["List.exists_of_erasep", 1],["ne_eq", 1],["False", 1],["List.elem_eq_true_of_mem", 1],["List.erasep_cons_of_neg", 1],["false_implies", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["List.mem_erasep_of_neg", 1],["And.intro", 1],["beq_self_eq_true'", 1],["not_or", 1],["HEq.refl", 1],["And", 1],["List.mem_cons", 1],["Nat.le_trans", 1],["Nat.Linear.Poly.combine", 1],["ite", 1],["Nat.le_add_right", 1],["Nat.right_distrib", 1],["Nat.add_le_add_right", 1],["Nat.lt_of_succ_le", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.Expr.num", 1],["LT.lt", 1],["False.elim", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.pred", 1],["eq_of_heq", 1],["List.mem_of_elem_eq_true", 1],["Nat.mul_comm", 1]]],
["Function.comp", 71, [["rfl", 23],["funext", 18],["Eq", 17],["congrArg", 12],["Eq.trans", 12],["of_eq_true", 12],["Eq.symm", 12],["congr", 11],["eq_self", 11],["Eq.refl", 10],["Option.map_some'", 8],["Option.map_none'", 7],["Option.map", 7],["Option.none", 7],["congrFun", 7],["Iff.intro", 6],["Option.some", 6],["Function.comp", 6],["Function.comp_apply", 5],["id", 4],["List.map", 3],["id_eq", 3],["Option.none_bind", 3],["Option.bind", 3],["Option.some_bind", 3],["Function.surjective.comp", 3],["Function.injective.comp", 3],["Function.bijective.injective", 3],["Function.bijective.surjective", 3],["eq_false", 2],["Bool.true", 2],["Option.mem_def", 2],["Prod.snd", 2],["Exists", 2],["Prod.mk", 2],["Prod.fst", 2],["Exists.intro", 2],["Prod.map", 2],["eq_true_of_decide", 2],["eq_false'", 2],["congr_fun", 2],["Function.LeftInverse.comp", 2],["and_congr", 2],["Unit.unit", 2],["Option.map_map", 2],["PProd.fst", 2],["Iff", 2],["prod_map", 2],["propext", 2],["List.cons", 2],["Iff.mpr", 1],["Function.update_comp_eq_of_forall_ne'", 1],["exists_false", 1],["Option.map_id", 1],["Function.injective.of_comp_iff'", 1],["Eq.mpr", 1],["List.get?", 1],["List.erasep_cons_of_pos", 1],["Option.some.injEq", 1],["Function.bijective", 1],["Function.extend_apply", 1],["DecidablePred", 1],["exists_eq_left'", 1],["Prod.map_snd", 1],["Function.update_comp_eq_of_injective'", 1],["Function.injective.of_comp", 1],["eq_true", 1],["Equiv.symm_apply_apply", 1],["Function.surjective.of_comp_iff", 1],["Option.some.inj", 1],["False", 1],["Equiv.left_inv", 1],["Prod.map_fst", 1],["List.erasep_cons_of_neg", 1],["Equiv.right_inv", 1],["iff_self", 1],["Function.surjective.of_comp_iff'", 1],["Iff.mp", 1],["inferInstanceAs", 1],["Exists.elim", 1],["Function.apply_update", 1],["Function.RightInverse.comp_eq_id", 1],["Function.surjective.of_comp", 1],["List.nil", 1],["Function.RightInverse.comp", 1],["And.intro", 1],["HEq.refl", 1],["And", 1],["false_and", 1],["Function.LeftInverse_inv_fun", 1],["Equiv.apply_symm_apply", 1],["Not", 1],["Function.injective.of_comp_iff", 1],["List.erasep", 1],["Prod.swap_swap", 1],["LawfulFunctor.comp_map", 1],["Function.LeftInverse.comp_eq_id", 1],["Decidable.em", 1]]],
["List.get.proof_1", 65, [["Eq.refl", 36],["Eq", 30],["Fin.mk", 27],["congrArg", 27],["Eq.mpr", 23],["Eq.trans", 21],["Eq.symm", 20],["rfl", 19],["LT.lt", 19],["OfNat.ofNat", 17],["of_eq_true", 17],["congrFun", 16],["List.get", 15],["Option.some", 15],["List.nil", 13],["eq_self", 13],["List.length", 12],["Fin.val", 12],["List.cons", 11],["Array.get", 11],["Array.size", 10],["HEq.refl", 10],["congr", 8],["Bool.true", 8],["Nat.le_of_succ_le_succ", 8],["eq_true", 8],["List.get?", 8],["List.get?_eq_get", 7],["Fin.isLt", 7],["PProd.fst", 7],["Classical.em", 6],["Array.data", 6],["UnionFind.arr", 6],["HAdd.hAdd", 6],["Nat.add", 6],["Bool.false", 5],["Eq.mp", 5],["dite_congr", 5],["List.set", 4],["Array.mk", 4],["HAppend.hAppend", 4],["Eq.mpr_prop", 4],["UFNode.rank", 4],["Array.size_set", 4],["eq_true_of_decide", 4],["eq_of_heq", 4],["UnionFind.size", 4],["dif_neg", 4],["Array.get?_eq_get?", 4],["dif_pos", 4],["HSub.hSub", 4],["dite_true", 4],["Nat.Linear.Expr.num", 3],["UFNode.parent", 3],["List.append", 3],["Option.none", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.Expr.var", 3],["UFModel.Agrees.get_eq", 3],["Not", 3],["id", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["False.elim", 3],["List.length_cons", 3],["Nat.lt_succ_self", 3],["Option.some_inj", 2],["List.get?_set_ne", 2],["List.cons_ne_nil", 2],["Nat.succ", 2],["List.concat_eq_append", 2],["LE.le", 2],["List.getLast", 2],["Membership.mem", 2],["List.length_set", 2],["And", 2],["UFModel.Models.rank_eq", 2],["Exists", 2],["UFModel.parent", 2],["propext", 2],["Nat.add_eq", 2],["UnionFind.rankMaxAux", 2],["UFModel.Models.size_eq", 2],["BinaryHeap.arr", 2],["Iff.intro", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["eq_false_of_decide", 2],["le_of_not_lt", 2],["eq_false", 2],["Nat.not_lt_eq", 2],["List.get_mem", 2],["Nat.succ_pos", 2],["SizeOf.sizeOf", 2],["BinaryHeap.max", 2],["UFModel.Models.parent_eq", 2],["Nat.add_zero", 2],["UnionFind.model'", 2],["ne_eq", 2],["Decidable.decide", 2],["WellFounded.fix", 2],["Nat.not_le_eq", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["List.drop", 2],["UFModel.Models.parent_eq'", 2],["Exists.intro", 2],["Nat.zero_eq", 2],["List.mem_cons_of_mem", 1],["dite_false", 1],["Subtype.mk", 1],["Sigma", 1],["True.intro", 1],["Array.isEqvAux_self", 1],["UnionFind.lt_rankMax", 1],["Array.toArrayLit", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Array.size_swap", 1],["Iff.mpr", 1],["Unit.unit", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["List.get?_append_right", 1],["List.eq_of_mem_repeat'", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_3", 1],["List.repeat'", 1],["Array.get?_push_lt", 1],["Array.isEqvAux.proof_1", 1],["List.get_cons_zero", 1],["WellFounded.fix_eq", 1],["WellFoundedRelation.rel", 1],["le_antisymm", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["Option.map_some'", 1],["Array.getLit", 1],["Nat.sub_succ_lt_self", 1],["not_lt_of_ge", 1],["True", 1],["Array.isEqv", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_lt_succ", 1],["UFModel.rank", 1],["PSigma", 1],["Array.swap", 1],["sizeOf_nat", 1],["And.left", 1],["decide_eq_true_eq", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Array.toListLitAux", 1],["if_pos", 1],["Nat.succ_lt_succ", 1],["List.get?_set_eq", 1],["Array.push", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["UFModel.rank_lt", 1],["Array.get_eq_get", 1],["Nat.le_of_succ_le", 1],["List.length_nil", 1],["List.getLast_cons", 1],["Nat.lt_add_right", 1],["And.right", 1],["Ne", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_set_of_lt", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.zero", 1],["Option.map_eq_map", 1],["Array.size_push", 1],["UFNode.mk", 1],["funext", 1],["Array.set", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["Nat.succ_sub_succ", 1],["List.cons.sizeOf_spec", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["List.mem_cons_self", 1],["Nat.lt_trans", 1],["And.intro", 1],["Option.map", 1],["Subsingleton.elim", 1],["absurd", 1],["max", 1],["Nat.zero_sub", 1],["List.get?_len_le", 1],["List.get_append_right_aux", 1],["Subtype", 1],["List.get?_append", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.map", 1],["List.get?_map", 1],["Array.mk.sizeOf_spec", 1],["Nat.sub_lt_sub_left", 1],["Array.get?_set_ne", 1],["List.get_of_mem", 1],["Nat.sub_lt", 1],["Functor.map", 1],["UnionFind.rankMaxAux.proof_2", 1],["List.length_append", 1],["Nat.lt_eq", 1],["and", 1],["PSigma.mk", 1],["List.length_map", 1],["Subtype.property", 1],["UnionFind.lt_rankMax'", 1],["List.get_singleton", 1],["dite", 1],["List.nil_append", 1]]],
["List.get", 65, [["Eq.refl", 36],["Eq", 30],["Fin.mk", 27],["congrArg", 27],["Eq.mpr", 23],["Eq.trans", 21],["Eq.symm", 20],["rfl", 19],["LT.lt", 19],["OfNat.ofNat", 17],["of_eq_true", 17],["congrFun", 16],["List.get", 15],["Option.some", 15],["List.nil", 13],["eq_self", 13],["List.length", 12],["Fin.val", 12],["List.cons", 11],["Array.get", 11],["Array.size", 10],["HEq.refl", 10],["congr", 8],["Bool.true", 8],["Nat.le_of_succ_le_succ", 8],["eq_true", 8],["List.get?", 8],["List.get?_eq_get", 7],["Fin.isLt", 7],["PProd.fst", 7],["Classical.em", 6],["Array.data", 6],["UnionFind.arr", 6],["HAdd.hAdd", 6],["Nat.add", 6],["Bool.false", 5],["Eq.mp", 5],["dite_congr", 5],["List.set", 4],["Array.mk", 4],["HAppend.hAppend", 4],["Eq.mpr_prop", 4],["UFNode.rank", 4],["Array.size_set", 4],["eq_true_of_decide", 4],["eq_of_heq", 4],["UnionFind.size", 4],["dif_neg", 4],["Array.get?_eq_get?", 4],["dif_pos", 4],["HSub.hSub", 4],["dite_true", 4],["Nat.Linear.Expr.num", 3],["UFNode.parent", 3],["List.append", 3],["Option.none", 3],["Option.some.inj", 3],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 3],["Nat.Linear.Expr.add", 3],["Nat.Linear.Expr.var", 3],["UFModel.Agrees.get_eq", 3],["Not", 3],["id", 3],["Array.get?", 3],["Nat.Linear.ExprCnstr.mk", 3],["False.elim", 3],["List.length_cons", 3],["Nat.lt_succ_self", 3],["Option.some_inj", 2],["List.get?_set_ne", 2],["List.cons_ne_nil", 2],["Nat.succ", 2],["List.concat_eq_append", 2],["LE.le", 2],["List.getLast", 2],["Membership.mem", 2],["List.length_set", 2],["And", 2],["UFModel.Models.rank_eq", 2],["Exists", 2],["UFModel.parent", 2],["propext", 2],["Nat.add_eq", 2],["UnionFind.rankMaxAux", 2],["UFModel.Models.size_eq", 2],["BinaryHeap.arr", 2],["Iff.intro", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["eq_false_of_decide", 2],["le_of_not_lt", 2],["eq_false", 2],["Nat.not_lt_eq", 2],["List.get_mem", 2],["Nat.succ_pos", 2],["SizeOf.sizeOf", 2],["BinaryHeap.max", 2],["UFModel.Models.parent_eq", 2],["Nat.add_zero", 2],["UnionFind.model'", 2],["ne_eq", 2],["Decidable.decide", 2],["WellFounded.fix", 2],["Nat.not_le_eq", 2],["Nat.Linear.ExprCnstr.eq_of_toNormPoly_eq", 2],["List.drop", 2],["UFModel.Models.parent_eq'", 2],["Exists.intro", 2],["Nat.zero_eq", 2],["List.mem_cons_of_mem", 1],["dite_false", 1],["Subtype.mk", 1],["Sigma", 1],["True.intro", 1],["Array.isEqvAux_self", 1],["UnionFind.lt_rankMax", 1],["Array.toArrayLit", 1],["List.getLast_eq_get", 1],["List.get?_concat_length", 1],["Array.size_swap", 1],["Iff.mpr", 1],["Unit.unit", 1],["Fin.elim0", 1],["Nat.one_pos", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["List.get?_append_right", 1],["List.eq_of_mem_repeat'", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_3", 1],["List.repeat'", 1],["Array.get?_push_lt", 1],["Array.isEqvAux.proof_1", 1],["List.get_cons_zero", 1],["WellFounded.fix_eq", 1],["WellFoundedRelation.rel", 1],["le_antisymm", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["List.getLast_singleton", 1],["UFNode.value", 1],["Option.map_some'", 1],["Array.getLit", 1],["Nat.sub_succ_lt_self", 1],["not_lt_of_ge", 1],["True", 1],["Array.isEqv", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_lt_succ", 1],["UFModel.rank", 1],["PSigma", 1],["Array.swap", 1],["sizeOf_nat", 1],["And.left", 1],["decide_eq_true_eq", 1],["if_neg", 1],["UnionFind.rankMax", 1],["Array.toListLitAux", 1],["if_pos", 1],["Nat.succ_lt_succ", 1],["List.get?_set_eq", 1],["Array.push", 1],["Nat.Linear.ExprCnstr.eq_false_of_isUnsat", 1],["UFModel.rank_lt", 1],["Array.get_eq_get", 1],["Nat.le_of_succ_le", 1],["List.length_nil", 1],["List.getLast_cons", 1],["Nat.lt_add_right", 1],["And.right", 1],["Ne", 1],["Nat.lt_of_lt_of_le", 1],["List.get?_set_of_lt", 1],["UnionFind.rankMaxAux.proof_1", 1],["Nat.zero", 1],["Option.map_eq_map", 1],["Array.size_push", 1],["UFNode.mk", 1],["funext", 1],["Array.set", 1],["Nat.lt_succ_iff", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["Nat.succ_sub_succ", 1],["List.cons.sizeOf_spec", 1],["List.length_pos_of_ne_nil", 1],["UFModel.Models", 1],["List.mem_cons_self", 1],["Nat.lt_trans", 1],["And.intro", 1],["Option.map", 1],["Subsingleton.elim", 1],["absurd", 1],["max", 1],["Nat.zero_sub", 1],["List.get?_len_le", 1],["List.get_append_right_aux", 1],["Subtype", 1],["List.get?_append", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["List.map", 1],["List.get?_map", 1],["Array.mk.sizeOf_spec", 1],["Nat.sub_lt_sub_left", 1],["Array.get?_set_ne", 1],["List.get_of_mem", 1],["Nat.sub_lt", 1],["Functor.map", 1],["UnionFind.rankMaxAux.proof_2", 1],["List.length_append", 1],["Nat.lt_eq", 1],["and", 1],["PSigma.mk", 1],["List.length_map", 1],["Subtype.property", 1],["UnionFind.lt_rankMax'", 1],["List.get_singleton", 1],["dite", 1],["List.nil_append", 1]]],
["Subtype", 65, [["Subtype.mk", 14],["Eq", 11],["OfNat.ofNat", 8],["Subtype.val", 7],["dite", 6],["Exists", 5],["Subtype", 5],["Eq.mpr", 5],["Fin.val", 5],["Fin.mk", 4],["funext", 4],["Exists.intro", 4],["HAdd.hAdd", 4],["Array.size", 4],["Subtype.property", 4],["congrArg", 3],["PUnit.unit", 3],["Classical.choose_spec", 3],["congrFun", 3],["Nonempty.intro", 3],["WellFounded.fix", 3],["PSigma.mk", 3],["rfl", 3],["Eq.refl", 3],["Nonempty", 2],["Classical.choose", 2],["PProd.fst", 2],["dif_pos", 2],["And.right", 2],["UnionFind.size", 2],["Classical.choice", 2],["HasEquiv.Equiv", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Option.some", 2],["And", 2],["ForIn.forIn", 2],["Bind.bind", 2],["And.left", 2],["ForInStep", 2],["HSub.hSub", 2],["Function.inv_fun_eq", 2],["Classical.indefiniteDescription", 2],["Option.none", 2],["Iff.intro", 2],["Function.LeftInverse_inv_fun", 2],["Pure.pure", 2],["Function.RightInverse_surj_inv", 2],["Function.inv_fun_on_pos", 2],["ForInStep.yield", 2],["Inhabited.mk", 2],["LT.lt", 2],["EmptyCollection.emptyCollection", 2],["Iff.mpr", 1],["Array.size_swap", 1],["BoundedRandom.randomR", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["Decidable.isTrue", 1],["Prod.mk", 1],["Classical.em", 1],["Prod", 1],["Subtype.instDecidableEqSubtype.proof_2", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1", 1],["Nat.find_x.proof_3", 1],["Nat.find_x.proof_1", 1],["Classical.strongIndefiniteDescription.proof_2", 1],["Function.partial_inv_of_injective", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["mt", 1],["Classical.indefiniteDescription.proof_1", 1],["Function.inv_fun", 1],["Subtype.map.proof_1", 1],["Mathlib.Prelude.Rename.RenameMap", 1],["LE.le", 1],["WellFoundedRelation.rel", 1],["Mathlib.Tactic.Lint.NamedLinter.toLinter", 1],["UnionFind.rankMaxAux.proof_2", 1],["sizeOf_nat", 1],["Nat.lt_of_le_of_lt", 1],["Array.pop", 1],["Subtype.equivalence", 1],["List.nil", 1],["And.intro", 1],["Mathlib.Prelude.Rename.renameExtension", 1],["Classical.propDecidable", 1],["Nat.succ_pos", 1],["Function.inv_fun_on_eq", 1],["Function.surj_inv_eq", 1],["Nat.lt_succ_iff", 1],["HasEquiv.mk", 1],["Unit.unit", 1],["Decidable", 1],["HAppend.hAppend", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Function.extend_apply", 1],["trivial", 1],["Nat.pred_le", 1],["Function.is_partial_inv_left", 1],["Iff", 1],["Nat.sub_succ_lt_self", 1],["Mathlib.Tactic.Lint.NamedLinter.name", 1],["Prod.snd", 1],["Subsingleton.elim", 1],["Decidable.isFalse", 1],["BinaryHeap.popMaxAux", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["Function.extend", 1],["Array.size_pop", 1],["Array.eraseIdx'.proof_1", 1],["BinaryHeap.popMaxAux.proof_1", 1],["max", 1],["Nat.gcd", 1],["congr", 1],["Option", 1],["WellFounded.fix'", 1],["Eq.mpr_prop", 1],["PUnit", 1],["Function.inv_fun_on_neg", 1],["Subtype.instDecidableEqSubtype.proof_1", 1],["Function.extend_def", 1],["Fin.isLt", 1],["Function.partial_inv", 1],["ToString.toString", 1],["Id.run", 1],["Acc", 1],["True", 1],["BinaryHeap.mkHeap.loop.proof_4", 1],["Membership.mem", 1],["UnionFind.rankMax", 1],["Function.LeftInverse.surjective", 1],["Mathlib.Tactic.Lint.elements", 1],["BinaryHeap.size", 1],["UnionFind.rankMaxAux.proof_1", 1],["Tactic.instNonemptyDeclCache", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4", 1],["Task.get", 1],["Function.RightInverse.injective", 1],["UFNode.rank", 1],["Array.eraseIdxSzAux", 1],["Nat.sub_lt_sub_left", 1],["dite_congr", 1],["List.toArray", 1],["Functor.map", 1],["Array.swap", 1],["ToString.mk", 1],["BinaryHeap.mkHeap.loop.proof_2", 1],["Array.get", 1],["HMul.hMul", 1],["Setoid.mk", 1],["Set.univ", 1],["Not", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Array.filterM", 1],["Nat.lt_eq", 1],["UnionFind.arr", 1],["Task.Priority.default", 1],["CoeHead.mk", 1],["Array.mapM", 1],["BinaryHeap.heapifyDown", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2", 1],["List.cons", 1],["BinaryHeap.popMaxAux.proof_2", 1],["WellFounded.intro", 1],["BinaryHeap.arr", 1],["UnionFind.lt_rankMax", 1],["of_eq_true", 1],["BinaryHeap.mkHeap.loop.proof_3", 1],["BinaryHeap.mkHeap.loop.proof_1", 1],["exists_apply_eq_apply", 1],["liftM", 1],["UnionFind.rank_lt", 1],["congr_arg", 1],["Id", 1],["dif_neg", 1]]],
["Inhabited", 64, [["Inhabited.mk", 60],["Inhabited.default", 20],["OfNat.ofNat", 15],["Fin.ofNat'", 5],["Inhabited", 2],["PUnit.unit", 2],["EStateM.Result.error", 2],["PUnit", 2],["Pure.pure", 2],["EStateM", 2],["inferInstanceAs", 2],["Subtype.mk", 2],["List.nil", 2],["Classical.choice", 2],["floatSpec", 1],["Classical.inhabited_of_nonempty", 1],["True.intro", 1],["UInt8.size_positive", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["FloatSpec.val", 1],["Tactic.NormCast.NormCastExtension.mk", 1],["Except.error", 1],["Tactic.Ring.HornerExpr.const", 1],["instInhabitedUInt16.proof_1", 1],["Substring.mk", 1],["Tactic.NormCast.Label.elim", 1],["Classical.inhabited_of_exists.proof_1", 1],["MonadExcept.throw", 1],["UInt64.ofNatCore", 1],["Int.ofNat", 1],["USize.size_positive", 1],["NonScalar.mk", 1],["instInhabitedUSize.proof_1", 1],["UInt32.ofNatCore", 1],["Bool.false", 1],["Tactic.NormCast.CoeFnInfo.mk", 1],["True", 1],["System.FilePath.mk", 1],["ForInStep.done", 1],["Option.none", 1],["Equiv.refl", 1],["Nat.zero", 1],["UInt16.ofNatCore", 1],["Prod.mk", 1],["Nonempty.intro", 1],["BinaryHeap.empty", 1],["Sum.inl", 1],["StdGen.mk", 1],["UInt16.size_positive", 1],["Sum.inr", 1],["UInt8.ofNatCore", 1],["instInhabitedUInt32.proof_1", 1],["FloatArray.empty", 1],["Task.pure", 1],["ByteArray.empty", 1],["instInhabitedUInt64.proof_1", 1],["Ordering.lt", 1],["inferInstance", 1],["Array.empty", 1],["Float.mk", 1],["USize.ofNatCore", 1],["instInhabitedUInt8.proof_1", 1],["PNonScalar.mk", 1],["UInt64.size_positive", 1],["UInt32.size_positive", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.Linear.Expr.num", 1]]],
["Int.negSucc", 63, [["rfl", 30],["Eq", 17],["Eq.refl", 15],["congrArg", 11],["Int.ofNat", 11],["Int.negSucc", 11],["Eq.mpr", 11],["OfNat.ofNat", 9],["Int.subNatNat", 7],["HAdd.hAdd", 7],["Nat.succ", 7],["Int.negOfNat", 7],["Eq.symm", 7],["Eq.trans", 6],["congrFun", 6],["HSub.hSub", 6],["HMul.hMul", 6],["Unit.unit", 5],["of_eq_true", 5],["SubNegMonoid.gsmul_neg'", 5],["congr", 4],["eq_self", 4],["Int.ofNat_zero", 3],["Neg.neg", 3],["HEq.refl", 2],["Nat.sub_self", 2],["Int.sub_eq_add_neg", 2],["Int.subNatNat_of_sub_eq_zero", 2],["Int.subNatNat_elim", 2],["AddGroupWithOne.intCast_negSucc", 2],["Nat.add_comm", 2],["Int.neg_add", 2],["Nat.zero_eq", 2],["Nat.succ_add", 2],["Nat.mul_comm", 2],["Int.mul_comm", 2],["Int.add_right_neg", 1],["Nat.add_succ", 1],["Int.mul_negSucc_ofNat_negSucc_ofNat", 1],["Eq.propIntro", 1],["UInt32.mk", 1],["Exists.intro", 1],["Nat.le_refl", 1],["Int.negSucc_ofNat_coe", 1],["SizeOf.sizeOf", 1],["Nat.succ_pred_eq_of_pos", 1],["Nat.sub_eq_zero_of_le", 1],["Int.ofNat_mul_negSucc_ofNat", 1],["Int.ofNat_zero_le", 1],["Int.subNatNat_of_sub_eq_succ", 1],["UInt8.mk", 1],["Bool.true", 1],["lt_of_not_ge", 1],["UInt64.val", 1],["Nat.sub_add_cancel", 1],["Nat.sub_pos_of_lt", 1],["UInt16.val", 1],["Nat.add_zero", 1],["Int.add_zero", 1],["Nat.add_assoc", 1],["Int.add_assoc", 1],["Int.negSucc.inj", 1],["absurd", 1],["Int.subNatNat_add_right", 1],["not_lt_of_ge", 1],["Exists", 1],["Nat.zero_add", 1],["Int.zero_add", 1],["Int.negSucc_ofNat_add_ofNat", 1],["USize.mk", 1],["Iff.intro", 1],["UInt16.mk", 1],["Int.negSucc_ofNat_add_negSucc_ofNat", 1],["UInt32.val", 1],["AddGroupWithOne.gsmul_neg'", 1],["Int.subNatNat_add_negSucc_ofNat", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["Int.negSucc_ofNat_ofNat", 1],["Int.add_left_comm", 1],["Nat.zero_mul", 1],["eq_true_of_decide", 1],["Int.zero_mul", 1],["Int.add_comm", 1],["Int.ofNat_add", 1],["Int.subNatNat_add_left", 1],["Int.eq_ofNat_of_zero_le", 1],["Int.ofNat_sub", 1],["Int.subNatNat_add_add", 1],["UInt64.mk", 1],["Int.ofNat_mul_ofNat", 1],["eq_of_heq", 1],["USize.val", 1],["False.elim", 1],["UInt8.val", 1],["Nat.pred", 1],["Int.sub_nat_self", 1],["Int.ofNat_mul_negOfNat", 1]]],
["UInt8", 60, [["UInt8.mk", 15],["UInt8.val", 13],["HAdd.hAdd", 5],["OfNat.ofNat", 4],["UInt8", 4],["ByteArray.get!", 3],["UInt8.modn", 3],["Nat.toUInt8", 3],["UInt8.ofNat", 2],["HMod.hMod", 2],["UInt8.toNat", 2],["HSub.hSub", 2],["ForIn.mk", 2],["UInt8.mod", 1],["UInt32.toNat", 1],["Complement.mk", 1],["HShiftRight.hShiftRight", 1],["CommRing.mk", 1],["UInt8.instRingUInt8.proof_3", 1],["UInt8.instRingUInt8.proof_1", 1],["ByteSlice.forIn.loop", 1],["UInt8.decEq", 1],["UInt8.instSemiringUInt8.proof_16", 1],["repr", 1],["ByteSliceT.arr", 1],["LT.mk", 1],["Fin.mk", 1],["Fin.land", 1],["ByteArray.forIn", 1],["Ring.gsmul", 1],["Semigroup.mk", 1],["UInt8.add", 1],["UInt8.instRingUInt8.proof_6", 1],["UInt8.xor", 1],["UInt8.shiftLeft", 1],["Array.get!", 1],["UInt8.ofNatCore", 1],["Int.cast", 1],["UInt8.instSemiringUInt8.proof_13", 1],["ShiftLeft.mk", 1],["UInt8.instAddSemigroupUInt8.proof_1", 1],["UInt8.instCommRingUInt8.proof_1", 1],["Array.uget", 1],["Fin.xor", 1],["HDiv.hDiv", 1],["Fin.ofNat", 1],["UInt8.lor", 1],["UInt8.instRingUInt8.proof_7", 1],["LE.mk", 1],["UInt8.div", 1],["UInt8.mul", 1],["UInt8.instAddCommSemigroupUInt8.proof_1", 1],["Xor.mk", 1],["compareOfLessAndEq", 1],["OrOp.mk", 1],["instInhabitedUInt8.proof_1", 1],["Fin.lor", 1],["UInt8.le", 1],["UInt64.toNat", 1],["Mod.mk", 1],["Semigroup", 1],["UInt8.instRingUInt8.proof_4", 1],["UInt8.instRingUInt8.proof_5", 1],["UInt8.shiftRight", 1],["ShiftRight.mk", 1],["AndOp.mk", 1],["ToString.toString", 1],["HMod.mk", 1],["ByteSlice.off", 1],["UInt8.land", 1],["UInt8.toUInt64", 1],["Mul.mk", 1],["Div.mk", 1],["UInt8.complement", 1],["AddCommSemigroup.mk", 1],["UInt8.instSemigroupUInt8.proof_1", 1],["Neg.mk", 1],["ByteSlice.arr", 1],["inferInstanceAs", 1],["Inhabited.mk", 1],["Hashable.mk", 1],["AddCommSemigroup", 1],["Sub.mk", 1],["Neg.neg", 1],["UInt8.instSemiringUInt8.proof_14", 1],["UInt8.lt", 1],["UInt8.instRingUInt8.proof_8", 1],["ToString.mk", 1],["Ring.mk", 1],["Ord.mk", 1],["Array.get", 1],["OfNat.mk", 1],["UInt8.instSemiringUInt8.proof_15", 1],["HMul.hMul", 1],["ByteSliceT.off", 1],["HShiftLeft.hShiftLeft", 1],["Add.mk", 1],["ReprAtom.mk", 1],["AddSemigroup.mk", 1],["UInt8.sub", 1],["Semiring.mk", 1],["UInt16.toNat", 1]]],
["Ne", 58, [["Eq.refl", 14],["Eq", 12],["Eq.symm", 10],["congrArg", 9],["ne_eq", 9],["Eq.trans", 9],["of_eq_true", 9],["Not", 9],["Bool.true", 8],["Iff.intro", 8],["absurd", 8],["eq_true_of_decide", 7],["congrFun", 7],["False", 7],["propext", 6],["OfNat.ofNat", 6],["eq_false", 6],["iff_self", 5],["List.nil", 5],["And", 5],["Iff", 5],["And.intro", 4],["HEq.refl", 4],["rfl", 4],["Ne", 4],["Membership.mem", 4],["Nat.succ_ne_zero", 4],["mt", 4],["congr", 4],["false_and", 4],["HAppend.hAppend", 3],["Bool.false", 3],["eq_false_of_decide", 3],["Option.some", 3],["eq_false'", 3],["Option.none", 3],["implies_true", 3],["PProd.fst", 3],["List.mem_cons", 3],["List.append_eq_nil", 3],["of_decide_eq_false", 2],["Or", 2],["funext", 2],["implies_congr_ctx", 2],["implies_congr", 2],["True", 2],["Eq.mpr", 2],["List.not_mem_nil", 2],["lt_irrefl", 2],["Or.inl", 2],["Or.resolve_left", 2],["id", 2],["Nat.not_lt_zero", 2],["eq_self", 2],["Nat.lt_irrefl", 2],["Or.inr", 2],["List.cons", 2],["Exists", 2],["LT.lt", 2],["congr_arg", 2],["Iff.mpr", 1],["List.decidablePairwise", 1],["Unit.unit", 1],["Nat.pos_of_ne_zero", 1],["Int.le_of_lt", 1],["Ne.symm", 1],["dec_em", 1],["dec_em'", 1],["if_pos", 1],["Nat.zero", 1],["exists_prop", 1],["Int.lt_irrefl", 1],["exists_eq_right", 1],["trivial", 1],["Nat.succ_ne_self", 1],["not_forall", 1],["Option.isSome_some", 1],["List.length_pos_of_ne_nil", 1],["Option.ne_none_iff_exists", 1],["Option.some.injEq", 1],["Nat.succ", 1],["exists_eq", 1],["Nat.add_zero", 1],["Int.le.dest", 1],["and_false", 1],["HSub.hSub", 1],["Option.isSome_none", 1],["ne_of_gt", 1],["sorryAx", 1],["decide_eq_false", 1],["imp_self", 1],["Nat.le_refl", 1],["Nat.not_le_of_lt", 1],["HAdd.hAdd", 1],["Function.injective.ne_iff", 1],["Nat.lt_of_succ_lt_succ", 1],["eq_true", 1],["List.repeat'", 1],["and_imp", 1],["Nat.sub_zero", 1],["Fin.eq_of_val_eq", 1],["not_iff_false_intro", 1],["em", 1],["Int.ne_of_lt", 1],["forall_congr", 1],["Option.bind_eq_none", 1],["if_neg", 1],["And.right", 1],["Iff.mp", 1],["exists_congr", 1],["id_eq", 1],["em'", 1],["Function.injective.ne", 1],["Nat.succ_sub_succ", 1],["or_iff_left_iff_imp", 1],["exists_false", 1],["Eq.mp", 1],["And.left", 1],["ne_of_lt", 1],["List.length_eq_zero", 1],["List", 1],["ite", 1],["List.length", 1],["List.remove", 1],["Decidable.decide", 1],["List.ne_of_not_mem_cons", 1],["Option.mem_def", 1],["not_not", 1],["Nat.add_eq", 1],["List.not_mem_of_not_mem_cons", 1],["Option.bind", 1],["eq_of_heq", 1],["Eq.to_iff", 1],["List.ne_nil_of_length_pos", 1],["true_and", 1],["Eq.subst", 1],["dite", 1],["lt_or_gt_of_ne", 1],["List.Mem.head", 1],["eq_comm", 1],["Decidable.em", 1],["Iff.trans", 1]]],
["HDiv.hDiv", 57, [["HDiv.hDiv", 35],["Eq.refl", 35],["Eq.mpr", 32],["OfNat.ofNat", 28],["Eq", 28],["HMul.hMul", 22],["rfl", 20],["HAdd.hAdd", 17],["Eq.symm", 15],["LE.le", 12],["congrArg", 12],["congrFun", 11],["Eq.trans", 11],["of_eq_true", 8],["LT.lt", 8],["Nat.eq_zero_or_pos", 8],["Nat.div_zero", 7],["Nat.succ", 7],["HSub.hSub", 7],["Nat.mul_zero", 7],["Nat.mul_comm", 7],["And", 6],["congr", 6],["Nat.zero_le", 6],["HMod.hMod", 6],["ite_congr", 6],["Nat.div_eq", 6],["eq_self", 6],["eq_true", 5],["Eq.mp", 5],["Nat.zero_div", 5],["Nat.lcm", 4],["Nat.le_div_iff_mul_le", 4],["propext", 4],["Nat.gcd", 4],["Nat.add_div_right", 4],["eq_false", 4],["Decidable.em", 4],["Nat.mul_div_cancel_left", 3],["Nat.le_refl", 3],["Iff.mp", 3],["Nat.lcm_comm", 3],["ite", 3],["Nat.toDigitsCore", 3],["Nat.zero_mul", 3],["Nat.digitChar", 3],["Nat.zero_add", 3],["Nat.mul_succ", 3],["ite_false", 3],["List.cons", 3],["And.right", 3],["List.length", 3],["Bool.true", 2],["Nat.sub_zero", 2],["Nat.mod.inductionOn", 2],["Nat.add_sub_cancel", 2],["and_self", 2],["Nat.lcm_zero_left", 2],["Nat.dvd_lcm_left", 2],["Nat.lt_of_lt_of_le", 2],["Nat.coprime", 2],["And.intro", 2],["eq_true_of_decide", 2],["implies_congr", 2],["Iff", 2],["Nat.zero", 2],["Nat.add_zero", 2],["Nat.add_assoc", 2],["if_true", 2],["Nat.add_comm", 2],["True", 2],["not_le", 2],["if_neg", 2],["ite_true", 2],["Nat.dvd_gcd", 2],["Nat.gcd_mul_right", 2],["Nat.zero_eq", 2],["Nat.mul_div_cancel", 2],["Nat.not_le_of_gt", 2],["if_false", 2],["Nat.gcd_dvd_right", 2],["Dvd.dvd", 2],["Iff.mpr", 2],["Nat.eq_zero_of_zero_dvd", 1],["Nat.coprime.coprime_mul_left", 1],["trivial", 1],["WellFounded.fix_eq", 1],["false_iff", 1],["HPow.hPow", 1],["Nat.mod_eq_zero_of_dvd", 1],["Nat.le_add_right", 1],["Nat.not_succ_le_zero", 1],["Nat.mul_pos", 1],["Nat.add_mul_div_left", 1],["Nat.div_self", 1],["Nat.mod_lt", 1],["Nat.mul_dvd_mul_left", 1],["Nat.pos_of_dvd_of_pos", 1],["Nat.gcd_zero_right", 1],["Nat.coprime_iff_gcd_eq_one", 1],["Nat.zero_sub", 1],["Nat.mul_div_right", 1],["Nat.div_le_self", 1],["Nat.dvd_zero", 1],["Nat.div_eq_sub_div", 1],["of_decide_eq_true", 1],["not_congr", 1],["Nat.pow_succ", 1],["Nat.eq_of_mul_eq_mul_right", 1],["Nat.dvd_lcm_right", 1],["Bool.false", 1],["Nat.mul_div_assoc", 1],["List.nil", 1],["Nat.succ_mul", 1],["Nat.to_digits_core_length", 1],["Iff.rfl", 1],["iff_self", 1],["Nat.gcd_dvd_left", 1],["HEq.refl", 1],["Nat.succ_pos", 1],["Nat.gcd_div", 1],["Nat.dvd_of_mul_dvd_mul_left", 1],["Nat.add_mul_div_right", 1],["Unit.unit", 1],["if_pos", 1],["Nat.div_le_of_le_mul", 1],["Nat.lcm_dvd", 1],["Nat.dvd_antisymm", 1],["Nat.div_div_eq_div_mul", 1],["Nat.mul_div_cancel'", 1],["Nat.le_antisymm", 1],["Nat.add_one", 1],["WellFounded.fix", 1],["Nat.gcd_mul_lcm", 1],["eq_false_of_decide", 1],["false_and", 1],["Nat.mod_eq", 1],["Nat.sub_lt", 1],["Nat.lcm_one_left", 1],["Nat.mul_dvd_mul_right", 1],["Nat.dvd_trans", 1],["Nat.coprime.symm", 1],["Nat.mul_assoc", 1],["Array.size", 1],["Exists.intro", 1],["Not", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.div_mul_cancel", 1],["Nat.div_lt_iff_lt_mul", 1],["Nat.sub_le_sub_right_iff", 1],["Nat.add_le_add_iff_le_right", 1],["eq_of_heq", 1],["Nat.lt_irrefl", 1],["PSigma.mk", 1],["False.elim", 1],["Nat.coprime.coprime_div_left", 1],["dite", 1],["Nat.le_add_left", 1],["Nat.mod_add_div", 1],["Nat.sub_add_cancel", 1]]],
["Float", 57, [["Float", 4],["OfNat.ofNat", 3],["Float.ofNat", 3],["Float.neg", 2],["Int.ofNat", 2],["Nat.log2", 2],["HAdd.hAdd", 2],["HSub.hSub", 2],["Float.toString", 2],["Eq", 1],["Pow.mk", 1],["Option.some", 1],["FloatArray.get!", 1],["FloatSpec.val", 1],["Inhabited.mk", 1],["FloatArray.forIn", 1],["HShiftRight.hShiftRight", 1],["Nat.succ", 1],["Float.pow", 1],["Float.mk", 1],["UInt64.toFloat", 1],["Mul.mk", 1],["Bool.false", 1],["Div.mk", 1],["LT.mk", 1],["Fin.mk", 1],["HPow.hPow", 1],["BEq.mk", 1],["Neg.mk", 1],["Float.add", 1],["Option.none", 1],["OfScientific.ofScientific", 1],["Float.mul", 1],["Float.lt", 1],["Array.get!", 1],["Neg.neg", 1],["FloatArray.get", 1],["Sub.mk", 1],["ite", 1],["FloatArray.size", 1],["ToString.mk", 1],["Nat.toUInt64", 1],["Array.get", 1],["Float.le", 1],["OfNat.mk", 1],["HMul.hMul", 1],["ForIn.mk", 1],["Add.mk", 1],["HShiftLeft.hShiftLeft", 1],["Float.beq", 1],["Array.uget", 1],["ReprAtom.mk", 1],["Float.ofBinaryScientific", 1],["HDiv.hDiv", 1],["Float.sub", 1],["OfScientific.mk", 1],["Float.scaleB", 1],["LT.lt", 1],["Float.div", 1],["dite", 1],["floatSpec", 1],["LE.mk", 1],["Bool.true", 1]]],
["Except", 57, [["Except", 18],["Except.ok", 17],["Except.error", 16],["Pure.pure", 13],["ExceptT.mk", 11],["Bind.bind", 9],["rfl", 8],["Eq", 4],["congrArg", 3],["HAppend.hAppend", 3],["MonadExceptOf.mk", 3],["Unit.unit", 3],["Eq.mpr", 3],["Eq.refl", 3],["Eq.symm", 3],["ExceptT.run", 3],["Inhabited.default", 3],["funext", 2],["MonadLift.mk", 2],["Option.some", 2],["congr", 2],["Inhabited.mk", 2],["Tactic.instNonemptyDeclCache", 2],["PUnit.unit", 2],["of_eq_true", 2],["ForIn.forIn", 2],["Option.none", 2],["Nonempty", 2],["ForInStep", 2],["Monad.mk", 2],["Functor.map", 2],["ToString.toString", 2],["Prod", 2],["inferInstanceAs", 2],["eq_self", 2],["Prod.mk", 2],["bind_congr", 2],["ForInStep.yield", 2],["liftM", 2],["Id", 1],["HSub.hSub", 1],["congrFun", 1],["Array.push", 1],["unsafeBaseIO", 1],["Mathlib.Tactic.Sat.LClause.mk", 1],["OfNat.ofNat", 1],["Array", 1],["Eq.trans", 1],["MProd", 1],["List.nil", 1],["Sat.Literal.ofInt", 1],["ExceptT.run_bind", 1],["ExceptT.instLawfulMonadExceptTInstMonadExceptT.proof_1", 1],["MProd.snd", 1],["tryCatchThe", 1],["Bool.true", 1],["Unit", 1],["Tactic.Cache.mk", 1],["not", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Array.foldr", 1],["ExceptT.bind_pure_comp", 1],["LawfulMonad.bind_assoc", 1],["throwThe", 1],["Nat.succ", 1],["Sum", 1],["MProd.fst", 1],["map_eq_pure_bind", 1],["ExceptT.run_pure", 1],["MonadExcept.tryCatch", 1],["MonadFinally.mk", 1],["MonadControl.mk", 1],["reprArg", 1],["Option", 1],["Tactic.Cache", 1],["ExceptT.tryCatch", 1],["HAdd.hAdd", 1],["MonadExcept.throw", 1],["ForInStep.done", 1],["Id.run", 1],["LawfulMonad.pure_bind", 1],["Task", 1],["ExceptT.bindCont", 1],["Mathlib.Tactic.Sat.Clause.proof", 1],["Mathlib.Tactic.Sat.Clause.lits", 1],["Except.map", 1],["unsafeEIO", 1],["id_eq", 1],["MonadFunctor.mk", 1],["MonadFinally.tryFinally'", 1],["LawfulMonad.mk", 1],["Neg.neg", 1],["ExceptT.ext", 1],["Function.comp", 1],["ite", 1],["Mathlib.Tactic.Sat.Clause.expr", 1],["List.toArray", 1],["Mathlib.Tactic.Sat.LClause.lits", 1],["ToString.mk", 1],["MProd.mk", 1],["Array.size", 1],["Option.isSome", 1],["Except.mapError", 1],["ExceptT.lift", 1],["Except.tryCatch", 1],["Mathlib.Tactic.Sat.LClause", 1],["Int.natAbs", 1],["Nat", 1],["Sum.inl", 1],["Int", 1],["LT.lt", 1],["Int.toNat", 1],["Mathlib.Tactic.Sat.LClause.depth", 1],["EmptyCollection.emptyCollection", 1],["Tactic.instNonemptyCache.proof_1", 1]]],
["UInt64", 56, [["UInt64.mk", 15],["UInt64.val", 13],["OfNat.ofNat", 7],["UInt64.modn", 3],["Bool.true", 3],["Nat.toUInt64", 3],["ite", 3],["HShiftLeft.hShiftLeft", 3],["Eq", 3],["UInt64.toNat", 2],["HAppend.hAppend", 2],["UInt64.ofNat", 2],["HAdd.hAdd", 2],["HOr.hOr", 2],["HMod.hMod", 2],["UInt8.toUInt64", 2],["panicWithPosWithDecl", 2],["BEq.beq", 2],["ByteArray.size", 2],["HSub.hSub", 2],["ByteArray.get!", 2],["UInt64.instRingUInt64.proof_4", 1],["Fin.mk", 1],["UInt64.instAddSemigroupUInt64.proof_1", 1],["LT.mk", 1],["UInt64.instSemigroupUInt64.proof_1", 1],["Fin.land", 1],["Ring.gsmul", 1],["Semigroup.mk", 1],["UInt64.lor", 1],["HMod.mk", 1],["UInt64.div", 1],["UInt64.instSemiringUInt64.proof_14", 1],["UInt64.mul", 1],["Int.cast", 1],["ShiftLeft.mk", 1],["UInt64.instSemiringUInt64.proof_15", 1],["UInt64.le", 1],["Fin.xor", 1],["HDiv.hDiv", 1],["Fin.ofNat", 1],["UInt64.shiftRight", 1],["LE.mk", 1],["UInt32.toNat", 1],["Inhabited.mk", 1],["UInt64.instRingUInt64.proof_1", 1],["UInt64.instRingUInt64.proof_3", 1],["UInt64.instAddCommSemigroupUInt64.proof_1", 1],["UInt64.complement", 1],["Xor.mk", 1],["compareOfLessAndEq", 1],["OrOp.mk", 1],["UInt64.instSemiringUInt64.proof_13", 1],["Fin.lor", 1],["Mod.mk", 1],["Complement.mk", 1],["Semigroup", 1],["CommRing.mk", 1],["UInt64.instSemiringUInt64.proof_16", 1],["HShiftRight.hShiftRight", 1],["UInt64.lt", 1],["AndOp.mk", 1],["UInt64.instRingUInt64.proof_6", 1],["ToString.toString", 1],["UInt64.xor", 1],["UInt64", 1],["Mul.mk", 1],["Div.mk", 1],["ShiftRight.mk", 1],["UInt64.instCommRingUInt64.proof_1", 1],["AddCommSemigroup.mk", 1],["Neg.mk", 1],["inferInstanceAs", 1],["UInt8.toNat", 1],["Hashable.mk", 1],["UInt64.sub", 1],["AddCommSemigroup", 1],["UInt64.mod", 1],["Sub.mk", 1],["Neg.neg", 1],["UInt64.ofNatCore", 1],["UInt64.instRingUInt64.proof_7", 1],["UInt64.instRingUInt64.proof_5", 1],["repr", 1],["ToString.mk", 1],["UInt64.shiftLeft", 1],["Ord.mk", 1],["Ring.mk", 1],["HMul.hMul", 1],["OfNat.mk", 1],["instInhabitedUInt64.proof_1", 1],["Add.mk", 1],["UInt64.add", 1],["UInt64.instRingUInt64.proof_8", 1],["ReprAtom.mk", 1],["UInt64.land", 1],["AddSemigroup.mk", 1],["Semiring.mk", 1],["UInt16.toNat", 1],["UInt64.decEq", 1]]],
["AddMonoidWithOne.natCast", 56, [["rfl", 18],["Nat.cast", 14],["Eq", 13],["Eq.refl", 11],["congrArg", 10],["HAdd.hAdd", 9],["OfNat.ofNat", 9],["Eq.symm", 8],["Eq.mpr", 7],["Eq.trans", 6],["Fin.ofNat'_succ", 5],["eq_self", 5],["of_eq_true", 5],["Nat.cast_succ", 4],["Exists.intro", 4],["Exists", 4],["congrFun", 4],["Iff.mpr", 3],["Int.ofNat_le", 3],["AddMonoidWithOne.natCast_zero", 3],["LE.le", 3],["Nat.succ", 3],["Int.le.dest", 3],["congr", 3],["Nat.cast_zero", 3],["Int.eq_ofNat_of_zero_le", 3],["Neg.neg", 3],["Int.add_comm", 3],["Int.natAbs", 3],["Nat.zero_eq", 3],["AddMonoidWithOne.natCast_succ", 3],["AddGroupWithOne.intCast_negSucc", 2],["Iff.mp", 2],["add_zero", 2],["Eq.mp", 2],["Int.add_left_comm", 2],["AddGroupWithOne.intCast_ofNat", 2],["Int.le.intro", 2],["Int.neg_nonneg_of_nonpos", 2],["HEq.refl", 2],["Iff.intro", 2],["Int.nonneg_def", 2],["HMul.hMul", 2],["eq_of_heq", 2],["HSub.hSub", 2],["Int.ofNat_zero_le", 2],["propext", 1],["UInt32.mk", 1],["And.intro", 1],["Int.le.dest_sub", 1],["Exists.imp", 1],["Nat.succ_pos", 1],["Int.add_le_of_le_sub_right", 1],["Nat.cast_mul", 1],["Nat.le.intro", 1],["Int.sub_eq_add_neg", 1],["UInt8.mk", 1],["pow_zero", 1],["Int.natAbs_of_nonneg", 1],["Int.ofNat_natAbs_eq_of_nonneg", 1],["Int.eq_natAbs_of_zero_le", 1],["HPow.hPow", 1],["Nat.add_zero", 1],["le_trans", 1],["Nat.cast_one", 1],["Int.add_assoc", 1],["Nat.le.dest", 1],["Int.le_add_of_nonneg_left", 1],["Iff", 1],["pow_succ'", 1],["Or.elim", 1],["USize.mk", 1],["Int.lt_iff_add_one_le", 1],["le_total", 1],["le_of_eq", 1],["Nat.Nat.pow_succ'", 1],["mul_add", 1],["Int.sub_nonneg_of_le", 1],["add_left_neg", 1],["Int.NonNeg.mk", 1],["Int.ofNat.inj", 1],["Nat.zero_le", 1],["add_assoc", 1],["Int.NonNeg", 1],["Int.eq_neg_of_eq_neg", 1],["Nat.add_comm", 1],["Int.ofNat_eq_ofNat_iff", 1],["UInt16.mk", 1],["zero_add", 1],["Iff.rfl", 1],["Int.ofNat_add", 1],["Nat.mul_zero", 1],["Int.ofNat_lt", 1],["Int.le_trans", 1],["Int.le_refl", 1],["Int.cast_ofNat", 1],["mul_one", 1],["Int.natAbs_neg", 1],["UInt64.mk", 1],["Nat.mul_succ", 1],["Nat.add_succ", 1],["MonoidWithZero.mul_zero", 1],["Int.ofNat_sub", 1],["Nat.pow_zero", 1],["LT.lt", 1],["Nat.cast_add", 1]]],
["True", 55, [["trivial", 27],["Iff.intro", 17],["propext", 13],["Eq", 9],["True.intro", 7],["Eq.refl", 6],["True", 6],["rfl", 6],["iff_true_intro", 5],["Exists.intro", 5],["Eq.trans", 4],["congrArg", 4],["Exists", 4],["of_eq_true", 4],["congrFun", 4],["eq_self", 4],["And.intro", 4],["False.elim", 4],["funext", 3],["Eq.symm", 3],["congr", 3],["iff_false_intro", 3],["Iff.mpr", 2],["Fin.val", 2],["And.right", 2],["Fin.mk", 2],["Eq.mpr", 2],["And.left", 2],["Function.inv_fun_eq", 2],["Or", 2],["not_false", 2],["Or.inl", 2],["Or.inr", 2],["eq_false", 2],["Decidable.isTrue", 2],["UFModel.parent", 2],["Classical.em", 2],["Bool.true", 2],["OfNat.ofNat", 2],["And", 2],["id", 2],["False", 2],["Iff.mp", 2],["Function.LeftInverse_inv_fun", 2],["Decidable.decide", 2],["eq_true_of_decide", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Squash.ind", 1],["UFModel.Agrees.push", 1],["eq_false_of_decide", 1],["ite_congr", 1],["lt_irrefl", 1],["Function.inv_fun_on_neg", 1],["Quot.mk", 1],["Nonempty", 1],["UFNode.mk", 1],["ne_false_of_self", 1],["Bool.and_eq_true", 1],["Subsingleton.intro", 1],["of_decide_eq_false", 1],["UFModel.push", 1],["of_decide_eq_true", 1],["Unit.unit", 1],["not_not_intro", 1],["implies_congr", 1],["ite_true", 1],["UFModel.rank", 1],["ite_false", 1],["dite_false", 1],["Decidable.isFalse", 1],["And.imp", 1],["absurd", 1],["dite_congr", 1],["UFModel.push.proof_1", 1],["UFModel.Agrees.set", 1],["Ne.symm", 1],["Nat.Linear.Poly.isZero", 1],["Set.univ", 1],["Bool.of_not_eq_true", 1],["Nat.le_add_right", 1],["Inhabited.mk", 1],["Bool.false", 1],["cond_false", 1],["Function.inv_fun_on_eq", 1],["Nat.Linear.Poly.of_isZero", 1],["Membership.mem", 1],["Sat.Clause.reify.mk", 1],["Function.LeftInverse.surjective", 1],["if_pos", 1],["Nonempty.intro", 1],["cond", 1],["and_false", 1],["Nat.Linear.Poly.denote", 1],["Decidable", 1],["LE.le", 1],["cond_true", 1],["instSubsingletonSquash.proof_1", 1],["or_false", 1],["Not", 1],["Option.lt", 1],["and", 1],["dite_true", 1],["HEq.rfl", 1],["true_and", 1],["UFModel.Agrees.get_eq", 1],["Quot.sound", 1]]],
["id", 54, [["rfl", 23],["Eq", 17],["funext", 17],["id", 13],["congrArg", 12],["Eq.trans", 9],["id_eq", 9],["of_eq_true", 9],["Eq.refl", 8],["congrFun", 8],["congr", 6],["Option.some", 6],["Eq.symm", 6],["eq_self", 6],["Fin.mk", 5],["Eq.mpr", 5],["Option.none", 4],["Option.bind", 4],["OfNat.ofNat", 4],["List.nil", 3],["Option.map", 3],["Option.map_some'", 3],["forall_congr", 3],["Iff", 3],["PProd.fst", 3],["Option.none_bind", 3],["propext", 3],["List.length", 3],["Exists", 3],["Option.some_bind", 3],["exists_eq_right", 3],["List.get", 3],["Option.map_none'", 3],["iff_self", 3],["Not", 3],["List.cons", 3],["Iff.intro", 2],["HSub.hSub", 2],["HAppend.hAppend", 2],["Option.mem_def", 2],["implies_congr", 2],["And", 2],["Membership.mem", 2],["Option.bind_eq_none", 2],["inferInstanceAs", 2],["BinaryHeap.size_pos_of_max", 2],["Array.size_set", 2],["not_not", 2],["exists_prop", 2],["congr_fun", 2],["BinaryHeap.arr", 2],["not_forall", 2],["LT.lt", 2],["congr_arg", 1],["Nat.add", 1],["Prod.swap_swap", 1],["Except.error", 1],["Unit.unit", 1],["Or", 1],["Function.injective_id", 1],["Except.ok", 1],["Bool.true", 1],["Nat.lt_add_right", 1],["Prod.mk", 1],["List.get?", 1],["List.getLast_singleton", 1],["Function.LeftInverse.comp_eq_id", 1],["LawfulFunctor.id_map", 1],["LawfulApplicative.pure_seq", 1],["List.length_pos_of_ne_nil", 1],["List.get_append_right_aux", 1],["Prod.snd", 1],["and_true", 1],["absurd", 1],["List.get?_eq_get", 1],["Prod.fst", 1],["Equiv.symm_apply_apply", 1],["Nat.one_pos", 1],["Subtype.map", 1],["Iff.symm", 1],["Option.map_id", 1],["Function.funext_iff", 1],["List.modifyNthTail", 1],["false_or", 1],["Option.some.inj", 1],["List.getLast_cons", 1],["eq_true_of_decide", 1],["ne_eq", 1],["Function.RightInverse.comp_eq_id", 1],["Exists.intro", 1],["List.get?_append_right", 1],["Nat.le_of_succ_le_succ", 1],["Function.surjective_id", 1],["List.cons_ne_nil", 1],["implies_true", 1],["ToString", 1],["Function.LeftInverse_inv_fun", 1],["false_and", 1],["Nat.sub_lt", 1],["Option.bind_eq_some", 1],["List.length_append", 1],["List.getLast", 1],["Equiv.apply_symm_apply", 1],["And.intro", 1],["HEq.refl", 1],["Except", 1],["List.get_singleton", 1]]],
["Subtype.mk", 53, [["Eq", 10],["rfl", 9],["Subtype.property", 8],["Exists.intro", 7],["Eq.refl", 6],["Exists", 5],["Subtype.val", 5],["congrArg", 4],["Eq.mpr", 4],["And.left", 4],["funext", 4],["Iff.intro", 4],["congrFun", 3],["Eq.symm", 3],["And.right", 3],["Classical.choose_spec", 3],["Subtype.mk", 3],["Classical.choose", 2],["Fin.mk", 2],["UnionFind.rankMaxAux", 2],["And.intro", 2],["UnionFind.size", 2],["Eq.trans", 2],["Subtype.coind_injective", 2],["OfNat.ofNat", 2],["Fin.val", 2],["Function.inv_fun_eq", 2],["Function.inv_fun_on_pos", 2],["Subtype.coe_injective", 2],["HAdd.hAdd", 2],["dif_pos", 2],["Classical.indefiniteDescription", 2],["Subtype.ext", 2],["Function.LeftInverse_inv_fun", 2],["of_eq_true", 2],["Function.RightInverse_surj_inv", 2],["Iff.mpr", 1],["Array.push", 1],["Function.partial_inv_of_injective", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Subtype.map.proof_1", 1],["Iff", 1],["Function.is_partial_inv_left", 1],["Function.extend_apply", 1],["Classical.em", 1],["BinaryHeap.insert.proof_1", 1],["Eq.propIntro", 1],["Nat.find_x", 1],["Classical.epsilon_spec", 1],["UnionFind.rank_lt", 1],["HEq.refl", 1],["Array.size_push", 1],["BinaryHeap.size_heapifyUp", 1],["Nat.succ_pos", 1],["SizeOf.sizeOf", 1],["Subtype.coe_eta", 1],["Subtype.ext_iff", 1],["Function.extend_def", 1],["Function.surj_inv_eq", 1],["Nat.lt_succ_iff", 1],["nonempty_of_exists", 1],["Fin.isLt", 1],["Classical.strongIndefiniteDescription", 1],["dite_congr", 1],["Classical.epsilon_spec_aux", 1],["trivial", 1],["Set.univ", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["Function.extend", 1],["not_lt", 1],["Subtype.coind_surjective", 1],["BinaryHeap.arr", 1],["Function.inv_fun_on_neg", 1],["Eq.mpr_prop", 1],["Function.partial_inv", 1],["Option.some", 1],["Classical.propDecidable", 1],["True", 1],["Membership.mem", 1],["UnionFind.rankMax", 1],["Function.LeftInverse.surjective", 1],["Iff.mp", 1],["Function.RightInverse.injective", 1],["id", 1],["eq_self", 1],["BinaryHeap.heapifyUp", 1],["Nat.sub_lt_sub_left", 1],["And", 1],["Subtype.map", 1],["Array.size", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Function.injective.comp", 1],["Nat.find_min", 1],["Function.inv_fun_on_eq", 1],["eq_of_heq", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Subtype.coind", 1],["exists_apply_eq_apply", 1],["congr_arg", 1],["dif_neg", 1]]],
["Prod.fst", 52, [["Eq", 20],["congrArg", 17],["congrFun", 16],["Prod.mk", 16],["rfl", 16],["Eq.trans", 15],["Eq.symm", 14],["Eq.refl", 14],["of_eq_true", 13],["congr", 12],["funext", 10],["eq_self", 10],["Eq.mpr", 10],["Bool.true", 9],["Prod.snd", 9],["Classical.em", 9],["Prod.fst", 9],["cond", 9],["Bool.of_not_eq_true", 7],["cond_false", 7],["List.nil", 7],["cond_true", 7],["Nat.Linear.Poly.denote_le", 6],["Nat.Linear.Poly.denote_eq", 6],["LE.le", 6],["HAppend.hAppend", 6],["Prod", 5],["Eq.mp", 5],["And", 5],["Nat.Linear.Poly.denote", 5],["Iff", 4],["HSub.hSub", 4],["List.reverse", 4],["List.append_nil", 4],["HAdd.hAdd", 4],["Nat.sub_eq", 4],["Nat.Linear.Poly", 4],["Nat.blt", 4],["Nat.Linear.Poly.cancelAux", 4],["implies_congr", 4],["OfNat.ofNat", 4],["absurd", 4],["List.cons", 4],["Prod.swap_swap", 3],["Nat.zero_add", 3],["Iff.intro", 3],["Nat.add_comm", 3],["Prod.mk.injEq", 3],["propext", 3],["and", 3],["eq_true", 3],["iff_self", 3],["Prod.swap_LeftInverse", 2],["Bool.and_eq_true", 2],["Nat.add", 2],["Nat.Linear.Poly.isZero", 2],["List.nil_append", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.denote_append", 2],["Prod.swap_injective", 2],["True", 2],["Nat.Linear.Expr.toPoly", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.add_eq", 2],["Or", 2],["id", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Expr.denote", 2],["HMul.hMul", 2],["Nat.add_left_comm", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Var.denote", 2],["Nat.Linear.Poly.denote_reverse", 2],["prod_map", 2],["Nat.Linear.hugeFuel", 2],["Nat.mul_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Prod.Lex.right", 1],["Prod.lex_def", 1],["Prod.swap", 1],["Nat.Linear.Poly.isNonZero", 1],["Bool.or_eq_true", 1],["Subsingleton.elim", 1],["or", 1],["Function.uncurry", 1],["eq_true_of_decide", 1],["Prod.mk.inj_iff", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.gcd", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.add_le_add", 1],["forall_congr", 1],["False", 1],["Prod.map_fst", 1],["Iff.symm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Function.RightInverse.surjective", 1],["Bool.false", 1],["Bool.and_self", 1],["Function.curry", 1],["and_self", 1],["And.intro", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4", 1],["HEq.refl", 1],["Exists.intro", 1],["Prod.Lex", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Prod.swap_surjective", 1],["Prod.mk.eta", 1],["Prod.Lex.left", 1],["implies_true", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_sort_go", 1],["true_or", 1],["Prod.ext'", 1],["Function.LeftInverse.injective", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["or_true", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1", 1],["Nonempty.elim", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2", 1],["eq_of_heq", 1],["and_true", 1],["Prod.forall", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Function.injective.eq_iff", 1],["true_and", 1],["Iff.rfl", 1],["Prod.exists", 1]]],
["Prod.snd", 52, [["Eq", 20],["congrArg", 17],["Prod.mk", 16],["rfl", 16],["congrFun", 16],["Eq.trans", 15],["Eq.symm", 14],["Eq.refl", 14],["of_eq_true", 13],["congr", 12],["funext", 10],["eq_self", 10],["Eq.mpr", 10],["Prod.fst", 9],["Prod.snd", 9],["cond", 9],["Classical.em", 9],["Bool.true", 9],["Bool.of_not_eq_true", 7],["cond_false", 7],["List.nil", 7],["cond_true", 7],["Nat.Linear.Poly.denote_le", 6],["Nat.Linear.Poly.denote_eq", 6],["LE.le", 6],["HAppend.hAppend", 6],["Prod", 5],["Nat.Linear.Poly.denote", 5],["Eq.mp", 5],["And", 5],["OfNat.ofNat", 4],["implies_congr", 4],["HSub.hSub", 4],["Iff", 4],["HAdd.hAdd", 4],["List.reverse", 4],["Nat.sub_eq", 4],["Nat.blt", 4],["Nat.Linear.Poly", 4],["Nat.Linear.Poly.cancelAux", 4],["List.append_nil", 4],["absurd", 4],["List.cons", 4],["Prod.swap_swap", 3],["Nat.zero_add", 3],["propext", 3],["Nat.add_comm", 3],["eq_true", 3],["Prod.mk.injEq", 3],["and", 3],["Iff.intro", 3],["iff_self", 3],["Prod.swap_LeftInverse", 2],["Nat.Linear.Poly.denote_reverse", 2],["Bool.and_eq_true", 2],["Nat.Linear.Poly.isZero", 2],["Nat.add", 2],["List.reverse_cons", 2],["List.nil_append", 2],["Nat.Linear.Poly.denote_append", 2],["True", 2],["Prod.swap_injective", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.Linear.Expr.toPoly", 2],["Nat.add_eq", 2],["id", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Or", 2],["HMul.hMul", 2],["Nat.Linear.Expr.denote", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.add_left_comm", 2],["Nat.Linear.Var.denote", 2],["prod_map", 2],["Nat.Linear.hugeFuel", 2],["Nat.mul_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Prod.Lex.right", 1],["Prod.swap", 1],["Nat.Linear.Poly.isNonZero", 1],["eq_true_of_decide", 1],["Subsingleton.elim", 1],["or", 1],["Function.uncurry", 1],["and_self", 1],["Prod.mk.inj_iff", 1],["Prod.map_snd", 1],["Exists.intro", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.add_le_add", 1],["forall_congr", 1],["False", 1],["Nat.add_le_add_left", 1],["Iff.symm", 1],["Function.RightInverse.surjective", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Bool.and_self", 1],["Bool.false", 1],["Prod.swap_surjective", 1],["Function.curry", 1],["And.intro", 1],["Nat.Linear.Poly.denote_combine", 1],["HEq.refl", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_4", 1],["Prod.Lex", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Prod.forall", 1],["Prod.ext'", 1],["Function.LeftInverse.injective", 1],["Prod.mk.eta", 1],["Prod.Lex.left", 1],["implies_true", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.gcd", 1],["true_or", 1],["Prod.lex_def", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["or_true", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_1", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["and_true", 1],["Nonempty.elim", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod.proof_2", 1],["eq_of_heq", 1],["Iff.rfl", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Function.injective.eq_iff", 1],["true_and", 1],["Prod.exists", 1],["Bool.or_eq_true", 1]]],
["UInt32", 51, [["UInt32.mk", 16],["UInt32.val", 15],["OfNat.ofNat", 4],["Nat.toUInt32", 4],["UInt32.modn", 3],["HAdd.hAdd", 2],["HMod.hMod", 2],["Fin.mk", 2],["UInt32.ofNat", 2],["HSub.hSub", 2],["UInt32.toNat", 2],["LE.mk", 1],["ShiftRight.mk", 1],["UInt32.instRingUInt32.proof_6", 1],["UInt64.toNat", 1],["Mod.mk", 1],["UInt32.decEq", 1],["Semigroup", 1],["Inhabited.mk", 1],["LE.le", 1],["UInt32.instSemigroupUInt32.proof_1", 1],["CommRing.mk", 1],["Complement.mk", 1],["HShiftRight.hShiftRight", 1],["UInt32.add", 1],["UInt32.instRingUInt32.proof_8", 1],["UInt32.instSemiringUInt32.proof_14", 1],["UInt32.xor", 1],["UInt32.instAddSemigroupUInt32.proof_1", 1],["UInt32.toUInt64", 1],["AndOp.mk", 1],["ToString.toString", 1],["HMod.mk", 1],["UInt32.ofNatCore", 1],["repr", 1],["UInt32.instAddCommSemigroupUInt32.proof_1", 1],["Mul.mk", 1],["Div.mk", 1],["compareOfLessAndEq", 1],["LT.mk", 1],["Xor.mk", 1],["OrOp.mk", 1],["AddCommSemigroup.mk", 1],["UInt32.complement", 1],["Fin.land", 1],["Neg.mk", 1],["UInt32.instSemiringUInt32.proof_13", 1],["Ring.gsmul", 1],["UInt32.instRingUInt32.proof_7", 1],["Semigroup.mk", 1],["inferInstanceAs", 1],["UInt8.toNat", 1],["Hashable.mk", 1],["AddCommSemigroup", 1],["UInt32.lor", 1],["UInt32.sub", 1],["UInt32.instSemiringUInt32.proof_15", 1],["Sub.mk", 1],["Neg.neg", 1],["UInt32.mod", 1],["UInt32.instSemiringUInt32.proof_16", 1],["UInt32.div", 1],["instInhabitedUInt32.proof_1", 1],["Int.cast", 1],["ToString.mk", 1],["USize.toNat", 1],["UInt32.mul", 1],["Ring.mk", 1],["Ord.mk", 1],["ShiftLeft.mk", 1],["HMul.hMul", 1],["OfNat.mk", 1],["UInt32.instCommRingUInt32.proof_1", 1],["UInt32.shiftLeft", 1],["HShiftLeft.hShiftLeft", 1],["Add.mk", 1],["UInt32", 1],["ReprAtom.mk", 1],["UInt32.instRingUInt32.proof_4", 1],["Fin.lor", 1],["UInt32.instRingUInt32.proof_5", 1],["HDiv.hDiv", 1],["Fin.xor", 1],["UInt32.instRingUInt32.proof_3", 1],["UInt32.instRingUInt32.proof_1", 1],["Fin.ofNat", 1],["AddSemigroup.mk", 1],["LT.lt", 1],["Semiring.mk", 1],["UInt32.land", 1],["UInt32.shiftRight", 1],["UInt16.toNat", 1]]],
["USize", 50, [["USize.mk", 16],["USize.val", 13],["OfNat.ofNat", 3],["USize.modn", 3],["HMod.hMod", 2],["System.Platform.numBits", 2],["USize.ofNat", 2],["HSub.hSub", 2],["USize.toNat", 2],["Fin.mk", 2],["HAdd.hAdd", 2],["LE.mk", 1],["USize.div", 1],["USize.ofNat32.proof_1", 1],["ShiftRight.mk", 1],["Fin.lor", 1],["USize.mul", 1],["Mod.mk", 1],["Semigroup", 1],["Nat.toUSize", 1],["USize.instSemiringUSize.proof_14", 1],["USize.shiftLeft", 1],["Inhabited.mk", 1],["UInt32.toNat", 1],["Complement.mk", 1],["CommRing.mk", 1],["HShiftRight.hShiftRight", 1],["USize.instRingUSize.proof_4", 1],["USize.lor", 1],["USize.instRingUSize.proof_5", 1],["HMod.mk", 1],["USize.instRingUSize.proof_3", 1],["USize.instRingUSize.proof_1", 1],["ToString.toString", 1],["AndOp.mk", 1],["USize.le", 1],["USize.instSemiringUSize.proof_15", 1],["USize.sub", 1],["Fin.ofNat'", 1],["Mul.mk", 1],["instInhabitedUSize.proof_1", 1],["repr", 1],["Div.mk", 1],["USize.land", 1],["USize.shiftRight", 1],["LT.mk", 1],["USize.instRingUSize.proof_7", 1],["USize.instCommRingUSize.proof_1", 1],["USize.decEq", 1],["AddCommSemigroup.mk", 1],["Neg.mk", 1],["Fin.land", 1],["Ring.gsmul", 1],["USize.toUInt64", 1],["inferInstanceAs", 1],["Semigroup.mk", 1],["USize.complement", 1],["Hashable.mk", 1],["AddCommSemigroup", 1],["USize.instSemigroupUSize.proof_1", 1],["USize", 1],["Xor.mk", 1],["Neg.neg", 1],["Sub.mk", 1],["USize.instRingUSize.proof_6", 1],["Int.cast", 1],["ToString.mk", 1],["compareOfLessAndEq", 1],["USize.instAddSemigroupUSize.proof_1", 1],["USize.instRingUSize.proof_8", 1],["USize.add", 1],["Ring.mk", 1],["USize.instSemiringUSize.proof_13", 1],["ShiftLeft.mk", 1],["Ord.mk", 1],["OfNat.mk", 1],["HMul.hMul", 1],["USize.xor", 1],["Add.mk", 1],["HShiftLeft.hShiftLeft", 1],["OrOp.mk", 1],["USize.lt", 1],["ReprAtom.mk", 1],["USize.ofNatCore", 1],["Fin.xor", 1],["HDiv.hDiv", 1],["USize.mod", 1],["USize.instSemiringUSize.proof_16", 1],["AddSemigroup.mk", 1],["Semiring.mk", 1],["USize.instAddCommSemigroupUSize.proof_1", 1],["usize_size_gt_zero", 1]]],
["cond", 49, [["congrArg", 29],["congrFun", 29],["Eq.refl", 28],["Eq", 27],["Eq.trans", 26],["congr", 25],["of_eq_true", 24],["Bool.true", 23],["eq_self", 22],["Nat.Linear.Poly.denote", 22],["Eq.symm", 19],["Nat.add_comm", 17],["HAdd.hAdd", 17],["Eq.mpr", 16],["OfNat.ofNat", 16],["Nat.Linear.Var.denote", 16],["HMul.hMul", 16],["cond", 16],["Classical.em", 16],["Nat.mul_eq", 16],["Nat.add_eq", 15],["Nat.add", 15],["List.nil", 14],["cond_true", 14],["Prod.mk", 14],["cond_false", 13],["Bool.of_not_eq_true", 13],["Nat.zero_add", 12],["List.cons", 10],["Unit.unit", 8],["Nat.add_left_comm", 8],["eq_true_of_decide", 8],["absurd", 7],["LE.le", 6],["HAppend.hAppend", 6],["Nat.Linear.Poly.denote_eq", 6],["Nat.Linear.Poly.denote_le", 6],["implies_congr", 6],["Nat.blt", 6],["Eq.mp", 6],["rfl", 5],["Nat.Linear.Poly.denote_append", 5],["List.append_nil", 5],["BEq.beq", 5],["Nat.Linear.Expr.denote", 5],["eq_of_beq", 5],["Nat.Linear.Poly", 5],["PProd.fst", 5],["funext", 5],["beq_self_eq_true", 4],["List.reverse", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.mul_one", 4],["Nat.add_assoc", 4],["Prod", 4],["HSub.hSub", 4],["Nat.sub_eq", 4],["Nat.Linear.fixedVar", 4],["List.nil_append", 4],["Nat.one_mul", 3],["Nat.mul", 3],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.Linear.Var.denote.go", 3],["and", 3],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["Nat.mul_assoc", 2],["List.List.append_eq", 2],["Bool.and_eq_true", 2],["Nat.Linear.Poly.isZero", 2],["Iff.intro", 2],["propext", 2],["Nat.left_distrib", 2],["Nat.Linear.Poly.denote_reverse", 2],["Bool.false", 2],["Nat.Linear.Poly.of_isZero", 2],["id", 2],["eq_true", 2],["Nat.Linear.monomialToExpr", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Tactic.NormCast.Label.move", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Or", 1],["Option.some.injEq", 1],["Nat.add_zero", 1],["Option.none", 1],["Nat.Linear.Expr.var", 1],["Nat.Linear.Expr.inc", 1],["or", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Expr.add", 1],["Bool.and_self", 1],["Nat.add_le_add_left", 1],["Nat.le_add_right", 1],["Nat.add_le_add", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Option", 1],["False", 1],["Nat.mul_zero", 1],["Bool", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Expr.mulL", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Bool.or_eq_true", 1],["True", 1],["Option.some", 1],["eq_false'", 1],["false_implies", 1],["decide_eq_true_eq", 1],["Tactic.NormCast.Label.squash", 1],["Nat", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.Linear.Expr.toNormPoly", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Nat.Linear.Poly.combineAux", 1],["Tactic.NormCast.Label.elim", 1],["Nat.right_distrib", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["GT.gt", 1],["Nat.zero_mul", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["False.elim", 1],["Nat.mul_comm", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_combineAux", 1]]],
["UInt16", 49, [["UInt16.mk", 15],["UInt16.val", 13],["OfNat.ofNat", 4],["UInt16.modn", 3],["Nat.toUInt16", 3],["HMod.hMod", 2],["HSub.hSub", 2],["UInt16.ofNat", 2],["HAdd.hAdd", 2],["UInt16.toNat", 2],["UInt16.add", 1],["UInt16.instRingUInt16.proof_7", 1],["Fin.lor", 1],["ShiftRight.mk", 1],["UInt16.instSemiringUInt16.proof_16", 1],["Mod.mk", 1],["UInt64.toNat", 1],["Semigroup", 1],["UInt16.xor", 1],["UInt32.toNat", 1],["Inhabited.mk", 1],["Complement.mk", 1],["CommRing.mk", 1],["HShiftRight.hShiftRight", 1],["instInhabitedUInt16.proof_1", 1],["compareOfLessAndEq", 1],["UInt16.lor", 1],["UInt16.sub", 1],["ToString.toString", 1],["AndOp.mk", 1],["UInt16.instRingUInt16.proof_4", 1],["Xor.mk", 1],["UInt16.mod", 1],["UInt16.instRingUInt16.proof_5", 1],["UInt16.instRingUInt16.proof_3", 1],["UInt16.instRingUInt16.proof_1", 1],["UInt16.instSemiringUInt16.proof_14", 1],["Mul.mk", 1],["UInt16.div", 1],["repr", 1],["UInt16.instAddCommSemigroupUInt16.proof_1", 1],["Div.mk", 1],["Fin.mk", 1],["LT.mk", 1],["UInt16.mul", 1],["AddCommSemigroup.mk", 1],["Neg.mk", 1],["Fin.land", 1],["UInt16.lt", 1],["UInt16.instSemiringUInt16.proof_15", 1],["UInt16.shiftLeft", 1],["Ring.gsmul", 1],["inferInstanceAs", 1],["Semigroup.mk", 1],["UInt8.toNat", 1],["Hashable.mk", 1],["UInt16.instSemigroupUInt16.proof_1", 1],["HMod.mk", 1],["AddCommSemigroup", 1],["UInt16.le", 1],["OrOp.mk", 1],["Neg.neg", 1],["Sub.mk", 1],["UInt16.land", 1],["UInt16.shiftRight", 1],["Int.cast", 1],["UInt16.instRingUInt16.proof_6", 1],["UInt16.instAddSemigroupUInt16.proof_1", 1],["UInt16.decEq", 1],["ToString.mk", 1],["Ord.mk", 1],["Ring.mk", 1],["ShiftLeft.mk", 1],["HMul.hMul", 1],["OfNat.mk", 1],["UInt16.instRingUInt16.proof_8", 1],["UInt16.toUInt64", 1],["Add.mk", 1],["HShiftLeft.hShiftLeft", 1],["UInt16.complement", 1],["ReprAtom.mk", 1],["UInt16.instCommRingUInt16.proof_1", 1],["Fin.xor", 1],["HDiv.hDiv", 1],["Fin.ofNat", 1],["UInt16", 1],["UInt16.instSemiringUInt16.proof_13", 1],["AddSemigroup.mk", 1],["Semiring.mk", 1],["LE.mk", 1],["UInt16.ofNatCore", 1]]],
["HPow.hPow", 49, [["HPow.hPow", 27],["Eq", 25],["HMul.hMul", 23],["congrArg", 20],["Eq.trans", 19],["of_eq_true", 19],["eq_self", 19],["HAdd.hAdd", 16],["OfNat.ofNat", 16],["congr", 16],["Eq.symm", 16],["Eq.refl", 16],["congrFun", 14],["Eq.mpr", 14],["rfl", 13],["Semigroup.mul_assoc", 10],["add_zero", 7],["Nat.succ", 7],["pow_zero", 6],["add_mul", 6],["pow_succ'", 5],["Nat.zero_eq", 5],["Tactic.Ring.horner", 5],["add_assoc", 5],["pow_add", 4],["pow_mul_comm", 3],["mul_one", 3],["add_left_comm", 3],["Nat.pow_succ", 3],["pow_succ", 3],["LT.lt", 3],["Unit.unit", 3],["add_comm", 3],["one_mul", 3],["Bool.true", 2],["LE.le", 2],["usize_size_eq", 2],["mul_add", 2],["of_decide_eq_true", 2],["USize.size", 2],["instNonempty", 2],["Nat.coprime.pow_left", 2],["Nat.le_refl", 2],["eq_of_heq", 2],["HEq.refl", 2],["Nat.mul_comm", 2],["CommSemigroup.mul_comm", 2],["Nat.mul_le_mul", 1],["pow_one", 1],["Nat.zero_le", 1],["mul_pow", 1],["zero_add", 1],["Nat.mul_zero", 1],["Nat.add_zero", 1],["Nat.cast", 1],["mul_left_comm", 1],["Nat.lt_trans", 1],["Nat.coprime.symm", 1],["Inhabited.mk", 1],["Nat.add_succ", 1],["Nat.coprime.pow_right", 1],["Fin.val_eq_of_lt", 1],["pow_mul", 1],["usize_size_gt_zero", 1],["PProd.fst", 1],["Nat.div_lt_iff_lt_mul", 1],["Nat.pow_zero", 1],["Nat.Nat.pow_succ'", 1],["Monoid.npow_succ'", 1],["HDiv.hDiv", 1],["System.Platform.numBits", 1],["Nat.pow_le_pow_of_le_right", 1],["MonoidWithZero.zero_mul", 1],["Monoid.npow_zero'", 1],["Nat.mul_succ", 1],["Nat.coprime_one_left", 1],["Nat.pos_pow_of_pos", 1],["Nat.cast_mul", 1],["Nat.zero_lt_succ", 1],["Int.mul_comm", 1],["Fin.ofNat'", 1],["USize.size_positive", 1],["Iff.mpr", 1],["implies_congr", 1],["Nat.one_eq_succ_zero", 1],["Nat.le_or_eq_or_le_succ", 1],["Nat.cast_one", 1]]],
["Nat.add", 47, [["congrArg", 29],["congrFun", 29],["Eq", 27],["Eq.trans", 26],["Eq.refl", 25],["congr", 25],["of_eq_true", 24],["Bool.true", 23],["eq_self", 22],["Nat.Linear.Poly.denote", 22],["Eq.symm", 19],["Nat.add_comm", 17],["HAdd.hAdd", 17],["Classical.em", 16],["OfNat.ofNat", 16],["cond", 16],["Nat.Linear.Var.denote", 16],["Eq.mpr", 16],["HMul.hMul", 16],["Nat.mul_eq", 16],["Nat.add", 15],["Nat.add_eq", 15],["Prod.mk", 14],["List.nil", 14],["cond_true", 14],["Bool.of_not_eq_true", 13],["cond_false", 13],["Nat.zero_add", 12],["List.cons", 10],["eq_true_of_decide", 8],["Nat.add_left_comm", 8],["Unit.unit", 8],["absurd", 7],["LE.le", 6],["HAppend.hAppend", 6],["rfl", 6],["Nat.blt", 6],["Eq.mp", 6],["Nat.Linear.Poly.denote_le", 6],["implies_congr", 6],["Nat.Linear.Poly.denote_eq", 6],["funext", 5],["List.append_nil", 5],["Nat.Linear.Poly", 5],["Nat.Linear.Expr.denote", 5],["Nat.Linear.Poly.denote_append", 5],["eq_of_beq", 5],["BEq.beq", 5],["PProd.fst", 5],["beq_self_eq_true", 4],["List.reverse", 4],["Nat.sub_eq", 4],["List.nil_append", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.add_assoc", 4],["Nat.Linear.fixedVar", 4],["Nat.mul_one", 4],["Prod", 4],["HSub.hSub", 4],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.mul", 3],["Nat.Linear.Var.denote.go", 3],["and", 3],["Nat.one_mul", 3],["Nat.mul_assoc", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["propext", 2],["id", 2],["Nat.left_distrib", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["eq_true", 2],["Bool.false", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Iff.intro", 2],["Nat.Linear.monomialToExpr", 2],["List.reverse_nil", 2],["List.List.append_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.denote_monomialToExpr", 2],["Bool.and_eq_true", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Option.some", 1],["Nat.Linear.Expr.inc", 1],["or", 1],["Nat.Linear.Expr.mulL", 1],["Nat.Linear.Expr.num", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Option", 1],["False", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.add_le_add_left", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["decide_eq_true_eq", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["True", 1],["GT.gt", 1],["eq_false'", 1],["false_implies", 1],["Option.none", 1],["Or", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Expr.add", 1],["Nat.Linear.Expr.toNormPoly", 1],["Bool", 1],["Nat.mul_zero", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.right_distrib", 1],["Nat.le_add_right", 1],["Option.some.injEq", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["Nat", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.zero_mul", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["False.elim", 1],["Nat.mul_comm", 1],["Bool.or_eq_true", 1],["Nat.Linear.Expr.var", 1]]],
["Nat.cast", 46, [["rfl", 18],["Nat.cast", 14],["Eq", 13],["Eq.refl", 11],["congrArg", 10],["HAdd.hAdd", 9],["OfNat.ofNat", 9],["Eq.symm", 8],["Eq.mpr", 7],["Eq.trans", 6],["Fin.ofNat'_succ", 5],["eq_self", 5],["of_eq_true", 5],["Nat.cast_succ", 4],["Exists.intro", 4],["Exists", 4],["congrFun", 4],["Iff.mpr", 3],["Int.ofNat_le", 3],["LE.le", 3],["Nat.succ", 3],["Int.le.dest", 3],["congr", 3],["Nat.cast_zero", 3],["Int.eq_ofNat_of_zero_le", 3],["Neg.neg", 3],["Int.add_comm", 3],["Nat.zero_eq", 3],["Int.natAbs", 3],["Iff.mp", 2],["Int.ofNat_zero_le", 2],["add_zero", 2],["Eq.mp", 2],["Int.add_left_comm", 2],["Int.le.intro", 2],["Int.neg_nonneg_of_nonpos", 2],["HEq.refl", 2],["Iff.intro", 2],["Int.nonneg_def", 2],["HMul.hMul", 2],["HSub.hSub", 2],["eq_of_heq", 2],["propext", 1],["Nat.mul_succ", 1],["Nat.add_succ", 1],["Int.le_refl", 1],["Nat.pow_zero", 1],["UInt32.mk", 1],["And.intro", 1],["AddMonoidWithOne.natCast_zero", 1],["Int.le.dest_sub", 1],["Nat.succ_pos", 1],["Int.add_le_of_le_sub_right", 1],["Nat.cast_mul", 1],["Nat.le.intro", 1],["Int.sub_eq_add_neg", 1],["UInt8.mk", 1],["pow_zero", 1],["Int.natAbs_of_nonneg", 1],["Int.ofNat_natAbs_eq_of_nonneg", 1],["Int.eq_natAbs_of_zero_le", 1],["Exists.imp", 1],["Nat.add_zero", 1],["le_trans", 1],["HPow.hPow", 1],["Int.add_assoc", 1],["Nat.le.dest", 1],["Int.le_add_of_nonneg_left", 1],["Nat.cast_one", 1],["pow_succ'", 1],["Or.elim", 1],["USize.mk", 1],["Int.lt_iff_add_one_le", 1],["le_total", 1],["le_of_eq", 1],["Nat.Nat.pow_succ'", 1],["mul_add", 1],["Int.sub_nonneg_of_le", 1],["add_left_neg", 1],["Int.ofNat_sub", 1],["Int.NonNeg.mk", 1],["Nat.zero_le", 1],["AddGroupWithOne.intCast_negSucc", 1],["Iff", 1],["add_assoc", 1],["Nat.add_comm", 1],["AddGroupWithOne.intCast_ofNat", 1],["Int.NonNeg", 1],["Int.eq_neg_of_eq_neg", 1],["Int.ofNat_eq_ofNat_iff", 1],["Int.ofNat_add", 1],["UInt16.mk", 1],["zero_add", 1],["Int.le_trans", 1],["Int.ofNat.inj", 1],["Int.cast_ofNat", 1],["mul_one", 1],["Int.natAbs_neg", 1],["UInt64.mk", 1],["Nat.mul_zero", 1],["Int.ofNat_lt", 1],["MonoidWithZero.mul_zero", 1],["Iff.rfl", 1],["AddMonoidWithOne.natCast_succ", 1],["LT.lt", 1],["Nat.cast_add", 1]]],
["Nat.mul", 45, [["congrArg", 29],["congrFun", 29],["Eq", 27],["Eq.trans", 26],["Eq.refl", 25],["congr", 25],["of_eq_true", 24],["Bool.true", 23],["eq_self", 22],["Nat.Linear.Poly.denote", 22],["Eq.symm", 19],["Nat.add_comm", 17],["HAdd.hAdd", 17],["Classical.em", 16],["OfNat.ofNat", 16],["cond", 16],["Nat.Linear.Var.denote", 16],["Eq.mpr", 16],["HMul.hMul", 16],["Nat.mul_eq", 16],["Nat.add", 15],["Nat.add_eq", 15],["Prod.mk", 14],["List.nil", 14],["cond_true", 14],["Bool.of_not_eq_true", 13],["cond_false", 13],["Nat.zero_add", 12],["List.cons", 10],["eq_true_of_decide", 8],["Nat.add_left_comm", 8],["Unit.unit", 8],["absurd", 7],["LE.le", 6],["implies_congr", 6],["Eq.mp", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.blt", 6],["Nat.Linear.Poly.denote_eq", 6],["HAppend.hAppend", 6],["List.append_nil", 5],["Nat.Linear.Expr.denote", 5],["Nat.Linear.Poly", 5],["Nat.Linear.Poly.denote_append", 5],["eq_of_beq", 5],["funext", 5],["PProd.fst", 5],["BEq.beq", 5],["beq_self_eq_true", 4],["Nat.add_assoc", 4],["Nat.Linear.Poly.cancelAux", 4],["HSub.hSub", 4],["Nat.sub_eq", 4],["rfl", 4],["List.nil_append", 4],["Nat.mul_one", 4],["List.reverse", 4],["Nat.Linear.fixedVar", 4],["Prod", 4],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.Linear.Var.denote.go", 3],["Nat.mul", 3],["Nat.one_mul", 3],["and", 3],["Nat.mul_assoc", 2],["propext", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.left_distrib", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["eq_true", 2],["List.List.append_eq", 2],["Bool.false", 2],["Bool.and_eq_true", 2],["id", 2],["Iff.intro", 2],["Nat.Linear.monomialToExpr", 2],["List.reverse_nil", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Option.some", 1],["Nat.Linear.Expr.inc", 1],["or", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Option", 1],["False", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.Linear.Poly.denote_mul", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_combine", 1],["decide_eq_true_eq", 1],["True", 1],["Nat.Linear.Expr.toNormPoly", 1],["eq_false'", 1],["false_implies", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Option.none", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Or", 1],["Nat.Linear.Expr.add", 1],["Nat.le_add_right", 1],["Bool", 1],["Nat.Linear.Poly.denote_combineAux", 1],["GT.gt", 1],["Bool.or_eq_true", 1],["Nat.right_distrib", 1],["Option.some.injEq", 1],["Nat.mul_zero", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat", 1],["Nat.Linear.Expr.mulL", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["False.elim", 1],["Nat.mul_comm", 1],["Nat.zero_mul", 1],["Nat.Linear.Expr.var", 1]]],
["Nat.Linear.fixedVar", 44, [["congrArg", 29],["congrFun", 29],["Eq", 27],["Eq.trans", 26],["Eq.refl", 25],["congr", 25],["of_eq_true", 24],["Bool.true", 23],["eq_self", 22],["Nat.Linear.Poly.denote", 22],["Eq.symm", 19],["Nat.add_comm", 17],["HAdd.hAdd", 17],["Classical.em", 16],["OfNat.ofNat", 16],["cond", 16],["Nat.Linear.Var.denote", 16],["Eq.mpr", 16],["HMul.hMul", 16],["Nat.mul_eq", 16],["Nat.add", 15],["Nat.add_eq", 15],["Prod.mk", 14],["List.nil", 14],["cond_true", 14],["Bool.of_not_eq_true", 13],["cond_false", 13],["Nat.zero_add", 12],["List.cons", 10],["eq_true_of_decide", 8],["Nat.add_left_comm", 8],["Unit.unit", 8],["absurd", 7],["LE.le", 6],["implies_congr", 6],["Eq.mp", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.blt", 6],["Nat.Linear.Poly.denote_eq", 6],["HAppend.hAppend", 6],["List.append_nil", 5],["Nat.Linear.Expr.denote", 5],["Nat.Linear.Poly", 5],["Nat.Linear.Poly.denote_append", 5],["eq_of_beq", 5],["funext", 5],["PProd.fst", 5],["BEq.beq", 5],["beq_self_eq_true", 4],["Nat.add_assoc", 4],["List.reverse", 4],["HSub.hSub", 4],["Nat.sub_eq", 4],["List.nil_append", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.Linear.fixedVar", 4],["Nat.mul_one", 4],["Prod", 4],["Nat.Linear.hugeFuel", 3],["Nat.one_mul", 3],["Nat.Linear.Var.denote.go", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.mul", 3],["rfl", 3],["and", 3],["Nat.mul_assoc", 2],["propext", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["Nat.Linear.Poly.of_isZero", 2],["Nat.left_distrib", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["eq_true", 2],["List.List.append_eq", 2],["Bool.false", 2],["Bool.and_eq_true", 2],["id", 2],["Iff.intro", 2],["Nat.Linear.monomialToExpr", 2],["List.reverse_nil", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Option.some", 1],["Nat.Linear.Expr.inc", 1],["or", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Option", 1],["False", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.Linear.Poly.denote_mul", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_combine", 1],["decide_eq_true_eq", 1],["True", 1],["Nat.Linear.Expr.toNormPoly", 1],["eq_false'", 1],["false_implies", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Option.none", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Or", 1],["Nat.Linear.Expr.add", 1],["Nat.le_add_right", 1],["Bool", 1],["Nat.Linear.Poly.denote_combineAux", 1],["GT.gt", 1],["Bool.or_eq_true", 1],["Nat.right_distrib", 1],["Option.some.injEq", 1],["Nat.mul_zero", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat", 1],["Nat.Linear.Expr.mulL", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["False.elim", 1],["Nat.mul_comm", 1],["Nat.zero_mul", 1],["Nat.Linear.Expr.var", 1]]],
["Nat.Linear.Var.denote", 43, [["congrArg", 29],["congrFun", 29],["Eq", 27],["Eq.trans", 26],["Eq.refl", 25],["congr", 25],["of_eq_true", 24],["Bool.true", 23],["eq_self", 22],["Nat.Linear.Poly.denote", 22],["Eq.symm", 19],["Nat.add_comm", 17],["HAdd.hAdd", 17],["Classical.em", 16],["OfNat.ofNat", 16],["cond", 16],["Nat.Linear.Var.denote", 16],["Eq.mpr", 16],["HMul.hMul", 16],["Nat.mul_eq", 16],["Nat.add", 15],["Nat.add_eq", 15],["Prod.mk", 14],["List.nil", 14],["cond_true", 14],["Bool.of_not_eq_true", 13],["cond_false", 13],["Nat.zero_add", 12],["List.cons", 10],["eq_true_of_decide", 8],["Nat.add_left_comm", 8],["Unit.unit", 8],["absurd", 7],["LE.le", 6],["implies_congr", 6],["Eq.mp", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.blt", 6],["Nat.Linear.Poly.denote_eq", 6],["HAppend.hAppend", 6],["List.append_nil", 5],["Nat.Linear.Expr.denote", 5],["Nat.Linear.Poly", 5],["Nat.Linear.Poly.denote_append", 5],["eq_of_beq", 5],["funext", 5],["PProd.fst", 5],["BEq.beq", 5],["beq_self_eq_true", 4],["Nat.add_assoc", 4],["List.reverse", 4],["HSub.hSub", 4],["Nat.sub_eq", 4],["List.nil_append", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.Linear.fixedVar", 4],["Nat.mul_one", 4],["Prod", 4],["Nat.one_mul", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.Linear.Var.denote.go", 3],["Nat.mul", 3],["Nat.Linear.hugeFuel", 3],["and", 3],["Nat.mul_assoc", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Bool.and_eq_true", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["Nat.Linear.Poly.of_isZero", 2],["propext", 2],["Nat.left_distrib", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.Poly.denote_sort_go", 2],["rfl", 2],["Bool.false", 2],["eq_true", 2],["id", 2],["Iff.intro", 2],["Nat.Linear.monomialToExpr", 2],["List.reverse_nil", 2],["List.List.append_eq", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Option.some", 1],["Nat.Linear.Expr.inc", 1],["or", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Option", 1],["False", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.Linear.Poly.denote_mul", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_combine", 1],["decide_eq_true_eq", 1],["True", 1],["Nat.Linear.Expr.toNormPoly", 1],["eq_false'", 1],["false_implies", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Option.none", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Or", 1],["Nat.Linear.Expr.add", 1],["Nat.le_add_right", 1],["Bool", 1],["Nat.Linear.Poly.denote_combineAux", 1],["GT.gt", 1],["Bool.or_eq_true", 1],["Nat.right_distrib", 1],["Option.some.injEq", 1],["Nat.mul_zero", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat", 1],["Nat.Linear.Expr.mulL", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["False.elim", 1],["Nat.mul_comm", 1],["Nat.zero_mul", 1],["Nat.Linear.Expr.var", 1]]],
["Array.get", 42, [["congrArg", 20],["Eq.refl", 19],["Eq", 17],["Eq.trans", 15],["Eq.mpr", 15],["congrFun", 14],["Fin.mk", 14],["LT.lt", 13],["of_eq_true", 11],["Array.get", 11],["eq_self", 10],["Array.size", 10],["Fin.val", 10],["OfNat.ofNat", 9],["Option.some", 8],["Eq.symm", 8],["Array.data", 6],["UnionFind.arr", 6],["Fin.isLt", 6],["Classical.em", 6],["Bool.true", 5],["dite_congr", 5],["rfl", 5],["UnionFind.size", 4],["congr", 4],["dif_pos", 4],["Eq.mpr_prop", 4],["eq_true", 4],["UFNode.rank", 4],["Array.mk", 4],["Array.size_set", 4],["Array.get?_eq_get?", 4],["dite_true", 4],["dif_neg", 4],["Option.none", 3],["List.cons", 3],["Array.get?", 3],["eq_true_of_decide", 3],["UFModel.Agrees.get_eq", 3],["UFNode.parent", 3],["LE.le", 2],["UFModel.Models.size_eq", 2],["BinaryHeap.arr", 2],["UFModel.Models.parent_eq'", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["List.concat_eq_append", 2],["eq_false", 2],["List.nil", 2],["And", 2],["HAppend.hAppend", 2],["BinaryHeap.max", 2],["List.get?", 2],["List.get", 2],["List.get?_eq_get", 2],["ne_eq", 2],["UFModel.parent", 2],["UnionFind.model'", 2],["HAdd.hAdd", 2],["le_of_not_lt", 2],["Bool.false", 2],["UFModel.Models.parent_eq", 2],["Decidable.decide", 2],["UnionFind.rankMaxAux", 2],["WellFounded.fix", 2],["Nat.lt_succ_self", 2],["UFModel.Models.rank_eq", 2],["List.set", 2],["Array.size_swap", 1],["UnionFind.rankMaxAux.proof_2", 1],["PProd.fst", 1],["List.get?_set_of_lt", 1],["Nat.lt_of_lt_of_le", 1],["Exists", 1],["And.intro", 1],["HEq.refl", 1],["UFNode.mk", 1],["Array.size_push", 1],["SizeOf.sizeOf", 1],["Nat.succ_pos", 1],["Iff.mpr", 1],["Array.mk.sizeOf_spec", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Unit.unit", 1],["sizeOf_nat", 1],["And.left", 1],["Array.get?_eq_get", 1],["implies_congr", 1],["List.get?_set_ne", 1],["Array.isEqvAux_self", 1],["Ne", 1],["UFNode.value", 1],["Array.toListLitAux", 1],["if_pos", 1],["Array.set", 1],["UFModel.Models", 1],["Nat.lt_trans", 1],["Nat.add_zero", 1],["dite_false", 1],["Subsingleton.elim", 1],["max", 1],["True.intro", 1],["HSub.hSub", 1],["Array.toArrayLit", 1],["Nat.add_eq", 1],["List.get?_append", 1],["List.get?_len_le", 1],["List.drop", 1],["Array.isEqvAux.proof_1", 1],["Exists.intro", 1],["UnionFind.lt_rankMax'", 1],["Bool.and_true", 1],["Array.push", 1],["Array.isEqvAux.proof_2", 1],["Array.get?_set_eq", 1],["Array.get?_push_eq", 1],["UnionFind.findAux", 1],["Nat.sub_succ_lt_self", 1],["le_antisymm", 1],["Array.getLit", 1],["PSigma", 1],["True", 1],["UnionFind.rankMax", 1],["if_neg", 1],["Array.get_eq_get", 1],["Nat.le_of_succ_le", 1],["Array.get?_push_lt", 1],["UnionFind.rankMaxAux.proof_1", 1],["UFModel.rank_lt", 1],["Subtype.property", 1],["Sigma", 1],["Eq.mp", 1],["Option.some.inj", 1],["Nat.sub_lt_sub_left", 1],["Array.get?_set_ne", 1],["Subtype", 1],["not_lt_of_ge", 1],["Array.isEqv", 1],["Nat.lt_of_lt_of_eq", 1],["Array.isEqvAux.proof_3", 1],["Not", 1],["Nat.lt_eq", 1],["Subtype.val", 1],["Subtype.mk", 1],["eq_of_heq", 1],["Nat.le_of_lt_succ", 1],["and", 1],["PSigma.mk", 1],["UnionFind.rank_lt", 1],["UnionFind.lt_rankMax", 1],["And.right", 1],["WellFounded.fix_eq", 1],["UFModel.rank", 1],["dite", 1],["List.get?_concat_length", 1],["WellFoundedRelation.rel", 1],["decide_eq_true_eq", 1],["Array.swap", 1]]],
["Function.injective", 41, [["And.intro", 7],["Iff.intro", 6],["rfl", 6],["Function.injective.comp", 5],["Function.LeftInverse.injective", 5],["And.right", 3],["Subtype.coe_injective", 3],["Subsingleton.elim", 3],["And.left", 3],["Function.bijective.surjective", 3],["Function.bijective.injective", 3],["Eq", 3],["Prod.mk.inj", 2],["Option.some.inj", 2],["Function.bijective", 2],["Function.RightInverse.surjective", 2],["Eq.symm", 2],["Exists.intro", 2],["Eq.trans", 2],["and_congr", 2],["Subtype.coind_injective", 2],["Function.RightInverse_surj_inv", 2],["Prod.ext'", 2],["Eq.refl", 1],["Function.involutive.injective", 1],["List.append_right_cancel", 1],["Exists.elim", 1],["unique_of_exists_unique", 1],["Function.surjective.of_comp_iff'", 1],["Subtype.val", 1],["Function.has_LeftInverse.injective", 1],["Option.none", 1],["Prod.snd", 1],["Function.injective_id", 1],["Iff.mp", 1],["Function.cantor_surjective", 1],["Function.involutive.surjective", 1],["Function.RightInverse.injective", 1],["id", 1],["Function.surj_inv", 1],["Function.surjective_id", 1],["ExistsUnique.exists", 1],["Option.map", 1],["Function.comp", 1],["Prod.swap_injective", 1],["Option.some_inj", 1],["Function.injective.has_LeftInverse", 1],["Subtype.ext", 1],["Function.surjective.comp", 1],["Subtype.map.proof_1", 1],["Option.some", 1],["Function.involutive.LeftInverse", 1],["Prod.fst", 1],["Function.injective.of_comp", 1],["congrArg", 1],["List.append_left_cancel", 1],["Function.LeftInverse_surj_inv", 1],["Prod.swap_surjective", 1],["Function.surjective.of_comp_iff", 1],["Function.RightInverse.LeftInverse", 1],["HEq.refl", 1],["ExistsUnique", 1],["Subtype.coind_surjective", 1],["funext", 1],["propext", 1],["Function.injective.of_comp_iff", 1],["Prod.swap_LeftInverse", 1],["Function.injective.of_comp_iff'", 1],["Eq.mpr", 1],["Iff.mpr", 1]]],
["Functor.map", 39, [["rfl", 14],["Eq", 14],["Functor.map", 10],["of_eq_true", 10],["congrArg", 10],["Eq.trans", 10],["congrFun", 9],["eq_self", 9],["Eq.refl", 8],["Eq.symm", 7],["funext", 5],["Bind.bind", 5],["Pure.pure", 4],["Eq.mpr", 4],["List.get?", 4],["LawfulFunctor.id_map", 3],["Except.ok", 3],["True", 2],["Except.error", 2],["map_eq_pure_bind", 2],["List.modifyNth", 2],["Except", 2],["Option.none", 2],["Equiv.toFun", 2],["Functor.map_map", 2],["if_pos", 2],["ExceptT.mk", 2],["Option.some", 2],["List.cons", 2],["eq_false", 2],["congr", 2],["ite_congr", 2],["PProd.fst", 2],["Equiv.symm", 2],["propext", 2],["LawfulMonad.bind_map", 2],["Seq.seq", 2],["Nat.zero", 1],["Equiv.symm_comp_self", 1],["List.get?_modifyNth_eq", 1],["iff_self", 1],["Exists", 1],["exists_eq_left'", 1],["Except.map", 1],["eq_false'", 1],["LawfulMonad.bind_assoc", 1],["LawfulMonad.bind_pure_comp", 1],["Option.getD", 1],["Option.some.injEq", 1],["ExceptT.run", 1],["Option.map_eq_map", 1],["Option.map_none'", 1],["And", 1],["OfNat.ofNat", 1],["Option.map_eq_none'", 1],["Nat.succ.inj", 1],["False", 1],["bind_congr", 1],["ite", 1],["false_and", 1],["mt", 1],["Not", 1],["List.set_eq_modifyNth", 1],["Option.map_some'", 1],["HAdd.hAdd", 1],["Nat.succ", 1],["if_false", 1],["List.get?_modifyNth", 1],["List.nil", 1],["Iff", 1],["Equiv.self_comp_symm", 1],["exists_false", 1],["LawfulFunctor.comp_map", 1],["LawfulMonad.pure_bind", 1],["Decidable.em", 1],["not_false_iff", 1],["List.set", 1],["congr_arg", 1],["LawfulApplicative.map_pure", 1]]],
["Dvd.dvd", 39, [["Dvd.dvd", 15],["Eq.refl", 15],["HMul.hMul", 14],["Exists.intro", 12],["Eq.mpr", 10],["Eq", 10],["Nat.gcd", 8],["Eq.mp", 6],["Eq.symm", 6],["OfNat.ofNat", 6],["HAdd.hAdd", 5],["Nat.dvd_gcd", 5],["Nat.mul_comm", 5],["Nat.gcd_dvd_right", 5],["rfl", 5],["of_eq_true", 4],["congrArg", 4],["eq_self", 4],["Nat.dvd_trans", 4],["Eq.trans", 4],["Iff.intro", 4],["Iff", 3],["Nat.gcd_zero_left", 3],["Nat.gcd_dvd", 3],["HDiv.hDiv", 3],["HMod.hMod", 3],["Nat.dvd_mul_right", 3],["Exists.elim", 3],["Nat.gcd_rec", 3],["Nat.dvd_mul_left", 3],["Nat.mul_one", 3],["HSub.hSub", 2],["Nat.mod_eq_zero_of_dvd", 2],["Nat.mul_dvd_mul_left", 2],["Nat.mul_dvd_mul", 2],["Nat.gcd_dvd_left", 2],["Nat.mul_assoc", 2],["And.left", 2],["Nat.mul_zero", 2],["Nat.gcd.induction", 2],["And.right", 2],["Nat.dvd_add_iff_left", 2],["Nat.gcd_dvd_gcd_of_dvd_right", 2],["And.intro", 2],["Nat.dvd_of_mul_dvd_mul_left", 2],["Nat.gcd_dvd_gcd_of_dvd_left", 2],["Nat.dvd_mod_iff", 2],["Nat.dvd_refl", 2],["Iff.mpr", 2],["Nat.lcm", 2],["Nat.gcd_mul_lcm", 1],["Nat.sub_add_cancel", 1],["Nat.dvd_add", 1],["Nat.add_comm", 1],["Nat.mul_sub_left_distrib", 1],["Nat.coprime.dvd_of_dvd_mul_right", 1],["congrFun", 1],["Nat.pos_of_dvd_of_pos", 1],["Nat.coprime.gcd_eq_one", 1],["Nat.gcd_mul_left", 1],["Nat.mod_add_div", 1],["Nat.dvd_of_mod_eq_zero", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_comm", 1],["Nat.coprime.symm", 1],["Nat.dvd_zero", 1],["Nat.dvd_add_iff_right", 1],["Nat.decidable_dvd.proof_1", 1],["Nat.prod_dvd_and_dvd_of_dvd_prod", 1],["Nat.gcd_eq_left_iff_dvd", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.dvd_lcm_left", 1],["Nat.eq_zero_or_pos", 1],["Nat.add_sub_cancel_left", 1],["Iff.symm", 1],["eq_of_heq", 1],["Nat.mul_div_assoc", 1],["HEq.refl", 1],["Nat.left_distrib", 1],["Iff.mp", 1],["decidable_of_decidable_of_iff", 1],["congr", 1],["Nat.eq_of_mul_eq_mul_left", 1],["Nat.dvd_iff_mod_eq_zero", 1],["Nat.coprime.dvd_of_dvd_mul_left", 1],["Nat.lcm_comm", 1],["Nat.gcd_mul_right", 1]]],
["Array.mk", 38, [["congrArg", 15],["Eq", 14],["Eq.refl", 12],["Eq.trans", 11],["Eq.symm", 11],["Eq.mpr", 11],["Fin.val", 10],["Array.size", 10],["Fin.mk", 10],["of_eq_true", 9],["congrFun", 9],["Array.data", 9],["eq_self", 9],["LT.lt", 9],["OfNat.ofNat", 8],["Array.size_set", 8],["Array.mk", 6],["BinaryHeap.arr", 6],["Option.some", 5],["Array.push", 5],["List.nil", 4],["Array.get?_eq_get?", 4],["Fin.isLt", 4],["Array.get", 4],["congr", 4],["rfl", 4],["Array.size_push", 3],["Exists.intro", 3],["HAdd.hAdd", 3],["HAppend.hAppend", 3],["HEq.refl", 3],["UFNode.mk", 3],["Array.get?", 3],["Array.set", 3],["eq_of_heq", 3],["List.cons", 3],["eq_false", 3],["List.concat_eq_append", 3],["List.set", 2],["UFModel.parent", 2],["UFModel.push", 2],["BinaryHeap.size_pos_of_max", 2],["sorryAx", 2],["And.intro", 2],["UFModel.Models.empty", 2],["Nat.le_add_right", 2],["Bool.true", 2],["UFModel.Agrees.mk'", 2],["UFModel.empty", 2],["List.toArray", 2],["UnionFind.arr", 2],["Classical.em", 2],["Nat.lt_succ_self", 2],["Exists", 1],["List.singleton_append", 1],["Option.some.inj", 1],["Array.pop", 1],["ite_true", 1],["List.length_replicate", 1],["PProd.fst", 1],["ite_false", 1],["ite_congr", 1],["And.right", 1],["BinaryHeap.insert.proof_1", 1],["Eq.propIntro", 1],["List.get?_set_of_lt", 1],["WellFoundedRelation.rel", 1],["And.left", 1],["Ne.symm", 1],["List.toArrayAux", 1],["le_antisymm", 1],["SizeOf.sizeOf", 1],["sizeOf_nat", 1],["funext", 1],["Unit.unit", 1],["Array.get?_push_lt", 1],["List.toArrayAux_data", 1],["Array.get?_eq_get", 1],["unsafeCast", 1],["List.length_set", 1],["List.toArray_data", 1],["List.get?_set_ne", 1],["List.get?", 1],["List.length_concat", 1],["UFModel.Models", 1],["Nat.lt_trans", 1],["dite_false", 1],["And.imp", 1],["Array.size_pop", 1],["UFModel.push.proof_1", 1],["UFNode.value", 1],["Array.toArrayLit", 1],["List.redLength", 1],["if_pos", 1],["UFModel.Agrees.empty", 1],["UnionFind.model'", 1],["List.get?_eq_get", 1],["dif_pos", 1],["le_of_not_lt", 1],["Array.get?_set_eq", 1],["Array.get?_push_eq", 1],["eq_true_of_decide", 1],["Bool.false", 1],["Nat.pred_lt'", 1],["if_neg", 1],["Array.get_eq_get", 1],["BinaryHeap.size", 1],["ne_eq", 1],["lt_irrefl", 1],["UFNode.rank", 1],["Eq.mp", 1],["BinaryHeap.size_heapifyUp", 1],["Array.ext'", 1],["Array.mkEmpty", 1],["Array.get?_set_ne", 1],["List.get?_append", 1],["UFModel.Agrees.push", 1],["UFModel.Agrees.set", 1],["UFModel.Models.push", 1],["Array.size_swap", 1],["Nat.le_of_lt_succ", 1],["Nat.lt_eq", 1],["Not", 1],["List.append_nil", 1],["UFModel.rank", 1],["dite_congr", 1],["List.length_dropLast", 1],["dite_true", 1],["Array.swap", 1],["UFModel.Agrees.get_eq", 1],["List.append_assoc", 1],["List.get?_concat_length", 1],["eq_true", 1],["dif_neg", 1]]],
["ToString", 36, [["ToString.mk", 33],["ToString.toString", 17],["HAppend.hAppend", 8],["List.toString", 3],["ToString", 2],["inferInstanceAs", 2],["addParenHeuristic", 2],["Fin.val", 1],["System.FilePath.toString", 1],["PUnit.unit", 1],["Nat.succ", 1],["USize.toNat", 1],["UInt64.toNat", 1],["Nat.repr", 1],["UInt8.toChar", 1],["FloatArray.toList", 1],["Float.toString", 1],["UInt32.toNat", 1],["UInt8.toNat", 1],["ByteArray.toList", 1],["ULift.down", 1],["ForIn.forIn", 1],["Pure.pure", 1],["Array.toList", 1],["Bind.bind", 1],["cond", 1],["Id.run", 1],["Subtype.val", 1],["ForInStep.yield", 1],["Subarray.toArray", 1],["Substring.toString", 1],["Unit.unit", 1],["UInt16.toNat", 1]]],
["Nat.Linear.Poly.denote", 34, [["congrArg", 28],["congrFun", 28],["Eq", 26],["Eq.trans", 25],["Eq.refl", 24],["congr", 24],["of_eq_true", 23],["Bool.true", 22],["Nat.Linear.Poly.denote", 22],["eq_self", 21],["Eq.symm", 18],["Nat.add_comm", 17],["HAdd.hAdd", 17],["OfNat.ofNat", 15],["Nat.Linear.Var.denote", 15],["Classical.em", 15],["Nat.add", 15],["Eq.mpr", 15],["Nat.add_eq", 15],["cond", 15],["HMul.hMul", 15],["Nat.mul_eq", 15],["Prod.mk", 14],["List.nil", 14],["cond_true", 13],["cond_false", 12],["Bool.of_not_eq_true", 12],["Nat.zero_add", 12],["List.cons", 10],["Nat.add_left_comm", 8],["Unit.unit", 8],["eq_true_of_decide", 8],["absurd", 7],["LE.le", 6],["Eq.mp", 6],["Nat.Linear.Poly.denote_eq", 6],["HAppend.hAppend", 6],["Nat.Linear.Poly.denote_le", 6],["Nat.blt", 6],["implies_congr", 6],["funext", 5],["Nat.Linear.Poly.denote_append", 5],["Nat.Linear.Poly", 5],["List.append_nil", 5],["PProd.fst", 5],["List.reverse", 4],["HSub.hSub", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.Linear.Expr.denote", 4],["BEq.beq", 4],["Nat.sub_eq", 4],["Nat.add_assoc", 4],["eq_of_beq", 4],["List.nil_append", 4],["Prod", 4],["beq_self_eq_true", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.mul", 3],["Nat.mul_one", 3],["Nat.Linear.hugeFuel", 3],["Nat.Linear.fixedVar", 3],["and", 3],["Nat.Linear.Var.denote.go", 2],["Nat.left_distrib", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.isNonZero", 2],["Bool.and_eq_true", 2],["Iff.intro", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.monomialToExpr", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Bool.false", 2],["Nat.Linear.Poly.of_isZero", 2],["id", 2],["Nat.mul_assoc", 2],["propext", 2],["Nat.Linear.Poly.denote_reverse", 2],["eq_true", 2],["List.reverse_nil", 2],["rfl", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["List.List.append_eq", 2],["Nat.one_mul", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.add_le_add_left", 1],["Nat.Linear.Expr.add", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Option.some", 1],["Option", 1],["False", 1],["Bool", 1],["Nat.Linear.Poly.combineAux", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat", 1],["True", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["eq_false'", 1],["false_implies", 1],["Nat.zero_mul", 1],["Nat.le_add_right", 1],["GT.gt", 1],["Nat.mul_zero", 1],["decide_eq_true_eq", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.denote_fuse", 1],["Option.some.injEq", 1],["Nat.add_zero", 1],["Nat.right_distrib", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Bool.or_eq_true", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["or", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Option.none", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["False.elim", 1],["Nat.mul_comm", 1],["Or", 1],["Nat.Linear.Poly.denote_combine", 1]]],
["Nat.coprime", 33, [["Eq", 9],["OfNat.ofNat", 9],["Eq.trans", 7],["Iff", 6],["congrArg", 6],["congrFun", 6],["Eq.refl", 6],["iff_self", 5],["Nat.gcd", 5],["Nat.coprime.symm", 5],["of_eq_true", 5],["Nat.coprime", 5],["Nat.gcd_dvd_right", 4],["Eq.mpr", 4],["HMul.hMul", 4],["Nat.coprime.coprime_dvd_left", 4],["Nat.coprime.coprime_dvd_right", 3],["And.intro", 3],["HDiv.hDiv", 3],["propext", 3],["Nat.gcd_dvd_left", 2],["Nat.coprime_iff_gcd_eq_one", 2],["Iff.intro", 2],["Nat.gcd_one_left", 2],["eq_self", 2],["congr", 2],["Nat.coprime.coprime_mul_left", 2],["Nat.gcd_one_right", 2],["Nat.coprime.gcd_mul_left_cancel", 2],["Nat.coprime.pow_left", 2],["Iff.rfl", 2],["Nat.dvd_mul_right", 2],["eq_true_of_decide", 2],["Exists.intro", 2],["True", 2],["And", 2],["Nat.dvd_mul_left", 2],["Bool.true", 2],["Nat.coprime.gcd_left", 1],["Nat.gcd_zero_left", 1],["Nat.coprime_comm", 1],["Nat.gcd_comm", 1],["Eq.mp", 1],["Eq.symm", 1],["Nat.coprime_div_gcd_div_gcd", 1],["Exists", 1],["Decidable.isFalse", 1],["Nat.div_self", 1],["Nat.coprime.coprime_div_left", 1],["Nat.eq_zero_of_zero_dvd", 1],["Decidable.isTrue", 1],["Nat.coprime.pow_right", 1],["Nat.mul_div_cancel_left", 1],["Nat.gcd_self", 1],["Nat.exists_coprime", 1],["Nat.div_mul_cancel", 1],["Dvd.dvd", 1],["Nat.eq_zero_or_pos", 1],["Nat.coprime.coprime_mul_right", 1],["Nat.zero_div", 1],["Nat.coprime.gcd_right", 1],["LT.lt", 1],["Nat.coprime_one_left", 1],["dite", 1],["Nat.coprime.mul", 1],["Nat.coprime_mul_iff_left", 1],["Nat.gcd_div", 1],["rfl", 1],["Nat.eq_one_of_dvd_one", 1],["Nat.gcd_zero_right", 1]]],
["Bind.bind", 33, [["rfl", 22],["Eq", 10],["Bind.bind", 8],["congrFun", 6],["congrArg", 6],["Eq.trans", 6],["Eq.mpr", 6],["Pure.pure", 6],["of_eq_true", 6],["Eq.refl", 6],["eq_self", 6],["LawfulMonad.pure_bind", 4],["Seq.seq", 4],["funext", 4],["LawfulMonad.bind_assoc", 3],["Functor.map", 3],["bind_pure", 3],["map_eq_pure_bind", 3],["Except", 2],["Except.error", 2],["seq_eq_bind_map", 2],["LawfulMonad.bind_map", 2],["Eq.symm", 2],["id", 1],["SeqRight.seqRight", 1],["id_eq", 1],["LawfulApplicative.seqRight_eq", 1],["SeqLeft.seqLeft", 1],["Except.ok", 1],["LawfulApplicative.seqLeft_eq", 1],["PUnit.unit", 1],["Function.const", 1],["LawfulMonad.bind_pure_comp", 1],["Function.const_apply", 1]]],
["Pure.pure", 33, [["rfl", 23],["Eq", 6],["eq_self", 4],["Pure.pure", 4],["of_eq_true", 4],["congrFun", 4],["congrArg", 4],["Eq.trans", 4],["Eq.refl", 3],["Eq.mpr", 3],["Bind.bind", 3],["bind_pure", 2],["LawfulApplicative.seqLeft_eq", 1],["LawfulMonad.bind_assoc", 1],["PUnit.unit", 1],["Function.const_apply", 1],["LawfulApplicative.pure_seq", 1],["Except.ok", 1],["Functor.map", 1],["ExceptT.mk", 1],["map_eq_pure_bind", 1],["LawfulFunctor.id_map", 1],["seq_eq_bind_map", 1],["Seq.seq", 1],["LawfulMonad.pure_bind", 1],["SeqLeft.seqLeft", 1],["Eq.symm", 1],["funext", 1],["LawfulApplicative.map_pure", 1],["Function.const", 1],["LawfulMonad.bind_pure_comp", 1],["id", 1]]],
["Classical.choice", 32, [["Eq", 8],["Eq.mpr", 6],["Eq.refl", 6],["Exists.intro", 4],["dif_pos", 4],["Subtype.property", 3],["Classical.choose_spec", 3],["funext", 3],["Exists", 3],["Nonempty.intro", 3],["dite", 3],["Option.some", 3],["And.left", 2],["Classical.choice", 2],["Classical.choose", 2],["Function.inv_fun_eq", 2],["Option.none", 2],["Iff.intro", 2],["Function.inv_fun_on_pos", 2],["Function.LeftInverse_inv_fun", 2],["Function.RightInverse_surj_inv", 2],["And.right", 2],["Nonempty", 2],["rfl", 2],["Classical.indefiniteDescription", 2],["Subsingleton.elim", 2],["Function.inv_fun_on_neg", 1],["Eq.trans", 1],["Function.extend_apply", 1],["Iff", 1],["Function.is_partial_inv_left", 1],["trivial", 1],["dite_congr", 1],["Classical.strongIndefiniteDescription", 1],["True", 1],["Set.univ", 1],["Option.some.injEq", 1],["of_eq_true", 1],["Membership.mem", 1],["Function.LeftInverse.surjective", 1],["Classical.propDecidable", 1],["nonempty_of_exists", 1],["Classical.epsilon_spec_aux", 1],["absurd", 1],["Function.RightInverse.injective", 1],["congrFun", 1],["Function.partial_inv_of_injective", 1],["Function.extend", 1],["eq_true", 1],["mt", 1],["Function.sometimes_eq", 1],["Function.inv_fun", 1],["Option.isSome", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Function.extend_def", 1],["congrArg", 1],["Option.get", 1],["Classical.epsilon_spec", 1],["And.intro", 1],["And", 1],["Function.surj_inv_eq", 1],["Function.sometimes", 1],["Function.inv_fun_on_eq", 1],["Eq.mpr_prop", 1],["exists_apply_eq_apply", 1],["congr_arg", 1],["Option.isSome_some", 1],["Bool.true", 1],["Function.partial_inv", 1]]],
["Nat.Linear.Var", 32, [["Prod.mk", 16],["List.nil", 15],["cond", 14],["congrArg", 13],["Eq.trans", 13],["congrFun", 13],["congr", 12],["Eq", 11],["of_eq_true", 11],["List.cons", 11],["Bool.true", 10],["PProd.fst", 10],["Eq.refl", 10],["Nat.Linear.Poly", 10],["HAdd.hAdd", 10],["Unit.unit", 10],["Nat.add", 9],["eq_self", 9],["Nat.Linear.Poly.denote", 9],["OfNat.ofNat", 8],["Bool.of_not_eq_true", 8],["cond_false", 8],["Eq.symm", 8],["Nat.add_comm", 8],["Classical.em", 8],["cond_true", 8],["Nat.Linear.Var.denote", 7],["Nat.zero_add", 7],["Eq.mpr", 7],["Nat.add_eq", 7],["Nat.blt", 7],["HAppend.hAppend", 7],["HMul.hMul", 7],["Nat.mul_eq", 7],["Nat.Linear.Poly.denote_le", 5],["Nat.Linear.Poly.denote_eq", 5],["Nat.Linear.hugeFuel", 5],["Nat.add_left_comm", 5],["LE.le", 4],["BEq.beq", 4],["Nat.Linear.Expr.toPoly", 4],["Nat.Linear.Poly.denote_append", 4],["List.reverse", 3],["funext", 3],["eq_true_of_decide", 3],["rfl", 3],["Nat.Linear.Poly.cancelAux", 3],["Eq.mp", 3],["Nat.Linear.Poly.insertSorted", 3],["Nat.mul", 3],["Nat.Linear.Expr.denote", 3],["Prod", 3],["absurd", 3],["Nat.sub_eq", 2],["Nat.add_assoc", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.append_nil", 2],["propext", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.combineAux", 2],["Iff.intro", 2],["List.nil_append", 2],["HSub.hSub", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.fixedVar", 2],["List.reverse_cons", 2],["eq_true", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.mul_assoc", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.one_mul", 1],["Nat.sub", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.mul_one", 1],["Nat.Linear.Poly.norm", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.sort", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.false", 1],["PProd.snd", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["id", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Bool.and_self", 1],["Nat.Linear.Poly.mul", 1],["Nat.Linear.Poly.fuse", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.right_distrib", 1],["eq_of_beq", 1],["Nat.left_distrib", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.Expr.toNormPoly", 1],["and", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.mul_comm", 1],["beq_self_eq_true", 1],["Nat.Linear.Poly.denote_sort_go", 1]]],
["Nat.Linear.Poly", 32, [["Prod.mk", 16],["List.nil", 15],["cond", 14],["congrArg", 13],["Eq.trans", 13],["congrFun", 13],["congr", 12],["Eq", 11],["of_eq_true", 11],["List.cons", 11],["Bool.true", 10],["PProd.fst", 10],["Eq.refl", 10],["Nat.Linear.Poly", 10],["HAdd.hAdd", 10],["Unit.unit", 10],["Nat.add", 9],["eq_self", 9],["Nat.Linear.Poly.denote", 9],["OfNat.ofNat", 8],["Bool.of_not_eq_true", 8],["cond_false", 8],["Eq.symm", 8],["Nat.add_comm", 8],["Classical.em", 8],["cond_true", 8],["Nat.Linear.Var.denote", 7],["Nat.zero_add", 7],["Eq.mpr", 7],["Nat.add_eq", 7],["Nat.blt", 7],["HAppend.hAppend", 7],["HMul.hMul", 7],["Nat.mul_eq", 7],["Nat.Linear.Poly.denote_le", 5],["Nat.Linear.Poly.denote_eq", 5],["Nat.Linear.hugeFuel", 5],["Nat.add_left_comm", 5],["LE.le", 4],["BEq.beq", 4],["Nat.Linear.Expr.toPoly", 4],["Nat.Linear.Poly.denote_append", 4],["List.reverse", 3],["funext", 3],["eq_true_of_decide", 3],["rfl", 3],["Nat.Linear.Poly.cancelAux", 3],["Eq.mp", 3],["Nat.Linear.Poly.insertSorted", 3],["Nat.mul", 3],["Nat.Linear.Expr.denote", 3],["Prod", 3],["absurd", 3],["Nat.sub_eq", 2],["Nat.add_assoc", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.append_nil", 2],["propext", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.Poly.combineAux", 2],["Iff.intro", 2],["List.nil_append", 2],["HSub.hSub", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.fixedVar", 2],["List.reverse_cons", 2],["eq_true", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.mul_assoc", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.one_mul", 1],["Nat.sub", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.mul_one", 1],["Nat.Linear.Poly.norm", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.sort", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.false", 1],["PProd.snd", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["id", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Bool.and_self", 1],["Nat.Linear.Poly.mul", 1],["Nat.Linear.Poly.fuse", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.right_distrib", 1],["eq_of_beq", 1],["Nat.left_distrib", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.Expr.toNormPoly", 1],["and", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.mul_comm", 1],["beq_self_eq_true", 1],["Nat.Linear.Poly.denote_sort_go", 1]]],
["Decidable.decide", 31, [["Eq", 17],["Eq.refl", 14],["congrArg", 11],["congrFun", 11],["Eq.trans", 10],["Eq.symm", 10],["of_eq_true", 10],["rfl", 10],["Bool.true", 10],["eq_self", 9],["Decidable.decide", 9],["OfNat.ofNat", 7],["congr", 7],["Decidable.em", 7],["Bool.false", 7],["Eq.mpr", 6],["HAdd.hAdd", 5],["Iff.intro", 5],["LT.lt", 5],["eq_false", 5],["List.cons", 5],["False.elim", 5],["Fin.val", 5],["List.length", 4],["eq_false_of_decide", 4],["decide_eq_true", 4],["True", 4],["Eq.mp", 4],["absurd", 4],["decide_eq_false", 4],["eq_true_of_decide", 4],["False", 4],["Unit.unit", 4],["HDiv.hDiv", 3],["Iff.mpr", 3],["eq_true", 3],["ite_congr", 3],["Option", 3],["propext", 3],["LE.le", 3],["HMod.hMod", 3],["Fin.mk", 3],["of_decide_eq_true", 3],["List.nil", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["Bool", 3],["Option.none", 3],["Option.some", 3],["Fin", 3],["Prod.mk", 3],["HSub.hSub", 3],["UnionFind.size", 2],["if_true", 2],["iff_self", 2],["decide_eq_true_iff", 2],["decide_eq_true_eq", 2],["Subtype.property", 2],["UnionFind.rankMaxAux", 2],["dif_pos", 2],["Array.size", 2],["if_false", 2],["Classical.em", 2],["Iff", 2],["Subsingleton.elim", 2],["dif_neg", 2],["List.not_mem_nil", 1],["UnionFind.rank_lt", 1],["List.getLast_singleton", 1],["Nat.lt_irrefl", 1],["trivial", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["Nat.lt_of_not_le", 1],["Nat.succ", 1],["Array.isEqvAux.proof_1", 1],["BinaryHeap.popMaxAux", 1],["Array.isEqvAux.proof_3", 1],["Bool.not_false", 1],["List.getLast", 1],["True.intro", 1],["Nat.sub_succ_lt_self", 1],["not_lt", 1],["Array.isEqvAux_self", 1],["Nat.one_pos", 1],["UnionFind.lt_rankMax'", 1],["Bool.not_true", 1],["List.mem_filter", 1],["PProd.fst", 1],["Bool.and_true", 1],["Nat.not_le_of_lt", 1],["Array.isEqvAux.proof_2", 1],["Array.isEqv", 1],["Subtype.val", 1],["Fin.isLt", 1],["WellFoundedRelation.rel", 1],["Nat.to_digits_core_length", 1],["not_le", 1],["WellFounded.fix_eq", 1],["Membership.mem", 1],["UnionFind.rankMax", 1],["toBoolUsing_eq_true", 1],["List.getLast_cons", 1],["Nat.zero_le", 1],["dite_congr", 1],["id", 1],["false_iff", 1],["Nat.succ_pos", 1],["Nat.not_lt_of_le", 1],["Nat.sub_lt_sub_left", 1],["WellFounded.fix", 1],["false_and", 1],["Nat.sub_lt", 1],["List.mem_cons", 1],["funext", 1],["Array.get", 1],["HMul.hMul", 1],["of_decide_eq_false", 1],["Not", 1],["Nat.lt_eq", 1],["Nat.lt_succ_iff", 1],["List.cons_ne_nil", 1],["and", 1],["UnionFind.lt_rankMax", 1],["dite_true", 1],["List.get_singleton", 1],["sizeOf_nat", 1],["Or", 1],["dite", 1],["Nat.le_of_not_lt", 1],["And", 1],["implies_congr", 1]]],
["UInt32.mk", 30, [["congrArg", 13],["rfl", 12],["UInt32.mk", 11],["UInt32.val", 11],["Eq.refl", 6],["OfNat.ofNat", 5],["Eq.mpr", 4],["Eq.symm", 4],["Decidable.em", 4],["HAdd.hAdd", 4],["Eq", 4],["Nat.digitChar", 3],["List.cons", 3],["congrFun", 3],["Eq.trans", 3],["ite_congr", 3],["List.length", 3],["eq_self", 3],["of_eq_true", 3],["HDiv.hDiv", 3],["HMod.hMod", 3],["congr", 3],["Nat.toDigitsCore", 3],["Bool.true", 2],["if_true", 2],["Fin.val", 2],["if_false", 2],["eq_false", 2],["of_decide_eq_true", 2],["LE.le", 1],["AddCommSemigroup.add_comm", 1],["Or.inl", 1],["Eq.mp", 1],["eq_true_of_decide", 1],["UInt32.ofNat", 1],["SubNegMonoid.gsmul_neg'", 1],["Fin.ofNat'_succ", 1],["Semigroup.mul_assoc", 1],["eq_true", 1],["UInt8.val", 1],["Nat.isValidChar", 1],["AddMonoid.nsmul_zero'", 1],["SubNegMonoid.sub_eq_add_neg", 1],["Nat.lt_irrefl", 1],["Nat.lt_trans", 1],["Fin.isLt", 1],["Fin.val_eq_of_lt", 1],["Nat.to_digits_core_length", 1],["List.nil", 1],["trivial", 1],["SubNegMonoid.gsmul_succ'", 1],["UInt32.val_eq_of_lt", 1],["SizeOf.sizeOf", 1],["SubNegMonoid.gsmul_zero'", 1],["False.elim", 1],["LT.lt", 1],["Nat.zero_le", 1],["AddSemigroup.add_assoc", 1],["UInt8.toChar_aux", 1],["implies_congr", 1],["Nat.succ", 1],["AddMonoid.nsmul_succ'", 1]]],
["List.reverseAux", 29, [["congrArg", 23],["Eq", 22],["Eq.trans", 21],["List.nil", 20],["of_eq_true", 19],["congrFun", 18],["congr", 16],["List.cons", 16],["Eq.refl", 15],["Eq.mpr", 13],["eq_self", 12],["rfl", 11],["HAppend.hAppend", 11],["Eq.symm", 10],["Prod.mk", 9],["Bool.true", 9],["List.reverse", 7],["List.append_nil", 7],["List.reverseAux", 7],["propext", 7],["funext", 6],["Eq.mp", 6],["Classical.em", 6],["cond", 6],["List.nil_append", 6],["HAdd.hAdd", 6],["List.not_mem_nil", 5],["eq_false", 5],["Membership.mem", 5],["List.reverse_cons", 5],["Nat.Linear.Poly.denote_eq", 5],["iff_self", 5],["Nat.Linear.Poly.denote_le", 5],["Or", 5],["Nat.Linear.Poly.denote", 5],["Iff", 5],["Prod", 4],["cond_false", 4],["Nat.Linear.Poly", 4],["HSub.hSub", 4],["absurd", 4],["Nat.blt", 4],["Nat.Linear.Poly.cancelAux", 4],["Nat.add_comm", 4],["Bool.of_not_eq_true", 4],["List.reverse_nil", 4],["Nat.sub_eq", 4],["cond_true", 4],["OfNat.ofNat", 4],["Nat.mul_eq", 3],["Nat.zero_add", 3],["PProd.fst", 3],["LE.le", 3],["Nat.Linear.Var.denote", 3],["Nat.add", 3],["Nat.add_eq", 3],["Iff.intro", 3],["Nat.Linear.Poly.denote_append", 3],["And", 3],["Nat.add_left_comm", 3],["HMul.hMul", 3],["List.mem_cons", 3],["List.append_assoc", 3],["List.map", 2],["Unit.unit", 2],["or_false", 2],["Bool.false", 2],["implies_congr", 2],["false_or", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["eq_true", 2],["false_and", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote_reverse", 2],["Nat.Linear.hugeFuel", 2],["List.length_nil", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.succ", 1],["List.length_cons", 1],["Nat.add_assoc", 1],["Nat.add_le_add_left", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_fuse", 1],["List.length", 1],["Nat.add_le_add", 1],["False", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Or.inl", 1],["Bool.and_false", 1],["Bool.and_true", 1],["List.mapTRAux_eq", 1],["List.mapTRAux", 1],["Nat.Linear.Poly.denote_reverseAux", 1],["Nat.Linear.Expr.denote", 1],["List.filterAux", 1],["Or.inr", 1],["or_assoc", 1],["Iff.rfl", 1],["List.reverseAux_reverseAux", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["id", 1],["List.mem_filterAux", 1],["And.left", 1],["eq_true_of_decide", 1],["And.right", 1],["List", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["decide_eq_true_eq", 1],["List.cons_append", 1],["And.intro", 1],["or_comm", 1],["List.mem_filter", 1],["Decidable.decide", 1],["List.reverseAux_reverseAux_nil", 1],["List.reverseAux_eq_append", 1],["List.length_append", 1],["Nat.Linear.Poly.combine", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.add_le_add_right", 1],["List.mem_reverse", 1],["List.mem_reverseAux", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["List.List.append_eq", 1],["and", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Expr.denote_toPoly", 1]]],
["Option.bind", 29, [["Eq", 15],["Eq.symm", 14],["Eq.refl", 13],["congrArg", 13],["rfl", 13],["Eq.trans", 13],["of_eq_true", 12],["congrFun", 10],["Option.some", 10],["congr", 9],["Option.none", 8],["Option.map_some'", 8],["Option.map", 7],["Option.map_none'", 7],["eq_self", 7],["Iff", 7],["propext", 7],["funext", 7],["id_eq", 6],["iff_self", 5],["Exists", 5],["Option.mem_def", 5],["id", 5],["Option.some_bind", 4],["Option.bind", 4],["Option.none_bind", 4],["eq_false'", 3],["forall_congr", 3],["And", 3],["exists_eq_right", 3],["Not", 3],["implies_congr", 3],["exists_eq_left'", 2],["Eq.mpr", 2],["false_and", 2],["not_not", 2],["False", 2],["Option.some.injEq", 2],["exists_prop", 2],["Option.map_map", 2],["Option.bind_eq_none", 2],["not_forall", 2],["Option.bind_eq_some", 2],["Membership.mem", 2],["exists_false", 2],["eq_false", 2],["ne_eq", 1],["Option.some.inj", 1],["eq_true_of_decide", 1],["Iff.mp", 1],["Function.comp", 1],["PProd.fst", 1],["not_exists", 1],["Iff.rfl", 1],["Option.map_id", 1],["HEq.refl", 1],["List.map", 1],["not_and", 1],["Unit.unit", 1],["Function.comp_apply", 1],["Iff.mpr", 1],["Bool.true", 1],["Option.eq_none_iff_forall_not_mem", 1],["List.get?", 1]]],
["DecidableEq", 29, [["Eq", 17],["Decidable.isTrue", 16],["Decidable.isFalse", 15],["Decidable", 12],["dite", 9],["decEq", 3],["rfl", 3],["decidable_of_iff", 2],["Unit.unit", 2],["Bool.true", 1],["UInt32.decEq", 1],["LE.le", 1],["instDecidableEqQuotient.proof_2", 1],["le_antisymm", 1],["instDecidableEqSum.proof_4", 1],["instDecidableEqSum.proof_5", 1],["Tactic.NormCast.instDecidableEqLabel.proof_2", 1],["Tactic.NormCast.instDecidableEqLabel.proof_1", 1],["instDecidableEqSum.proof_1", 1],["instDecidableEqSum.proof_3", 1],["PUnit.subsingleton", 1],["Subtype.instDecidableEqSubtype.proof_1", 1],["UInt8.decEq", 1],["instDecidableEqProd.proof_2", 1],["decidableEq_of_decidableLe.proof_2", 1],["Function.decidable_eq_pfun.proof_1", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_1", 1],["Array.isEqv", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["List.hasDecEq", 1],["USize.decEq", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_1", 1],["instDecidableEqSum.proof_2", 1],["Prod.mk", 1],["Subtype.instDecidableEqSubtype.proof_2", 1],["Array.instDecidableEqArray.proof_3", 1],["Array.instDecidableEqArray.proof_1", 1],["instDecidableEqSum.proof_6", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["Quotient.recOnSubsingleton₂", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_2", 1],["Nat.decEq", 1],["Int.decEq", 1],["instDecidableEqBool.proof_1", 1],["Fin.eq_of_val_eq", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_2", 1],["UInt16.decEq", 1],["Quotient.mk", 1],["Decidable.decide", 1],["inferInstance", 1],["Array.instDecidableEqArray.proof_2", 1],["Quotient.sound", 1],["decidable_eq_of_bool_pred.proof_1", 1],["Subtype.mk", 1],["Function.injective.eq_iff", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["Fin.ne_of_val_ne", 1],["instDecidableEqBool.proof_2", 1],["Fin.val", 1],["UInt64.decEq", 1],["instDecidableEqProd.proof_3", 1],["instDecidableEqProd.proof_1", 1],["decidableEq_of_decidableLe.proof_1", 1]]],
["WellFounded", 29, [["WellFounded.intro", 9],["WellFoundedRelation.wf", 8],["WellFounded.apply", 7],["Acc", 5],["WellFoundedRelation.rel", 3],["Subrelation.wf", 3],["PSigma.lexAccessible", 2],["Acc.intro", 2],["Eq.refl", 1],["PSigma.lexNdep", 1],["Nat.not_lt_zero", 1],["absurd", 1],["InvImage.wf.proof_1", 1],["Prod.Lex", 1],["InvImage.wf", 1],["TC.wf.proof_1", 1],["OfNat.ofNat", 1],["PSigma.revLexAccessible", 1],["Prod.RProdSubLex", 1],["TC.accessible", 1],["PSigma.RevLex", 1],["PSigma.Lex", 1],["PSigma.lexNdepWf.proof_1", 1],["Subrelation.accessible", 1],["Prod.lexAccessible", 1],["And.intro", 1],["emptyRelation", 1],["Nat.succ", 1],["InvImage.accessible", 1],["PSigma.revLex", 1],["Nat.sub_lt_sub_left", 1],["Fin.isLt", 1],["Subrelation.wf.proof_1", 1],["PSigma.revLex.proof_1", 1]]],
["Function.surjective", 28, [["Exists.intro", 13],["And.intro", 7],["Eq", 6],["Iff.intro", 5],["Exists", 5],["Function.RightInverse.surjective", 4],["rfl", 4],["Prod.mk", 3],["And.right", 3],["Function.surjective.comp", 3],["Function.bijective.injective", 3],["Function.bijective.surjective", 3],["and_congr", 2],["Nonempty.elim", 2],["Function.bijective", 2],["Function.LeftInverse.injective", 1],["Prod.ext'", 1],["Prod.map", 1],["Function.involutive.injective", 1],["Eq.symm", 1],["Function.surjective.of_comp_iff'", 1],["Subtype.val", 1],["Exists.elim", 1],["unique_of_exists_unique", 1],["Function.injective.of_comp_iff'", 1],["And.left", 1],["Function.LeftInverse.surjective", 1],["Prod.snd", 1],["Function.injective_id", 1],["Function.surj_inv", 1],["Function.involutive.surjective", 1],["Function.surjective", 1],["Function.surjective.of_comp", 1],["Prod.fst", 1],["Function.surjective_id", 1],["ExistsUnique.exists", 1],["Prod.swap_surjective", 1],["Function.comp", 1],["Prod.swap_injective", 1],["Function.LeftInverse_inv_fun", 1],["Subtype.coe_injective", 1],["Function.surjective.has_RightInverse", 1],["Not", 1],["Function.has_RightInverse.surjective", 1],["Function.surjective.of_comp_iff", 1],["Subtype.coind_surjective", 1],["Function.LeftInverse_surj_inv", 1],["Function.injective.comp", 1],["Subsingleton.elim", 1],["False", 1],["Subtype.coind_injective", 1],["ExistsUnique", 1],["Function.RightInverse_surj_inv", 1],["Function.injective.of_comp_iff", 1],["Subtype.coind", 1],["Function.LeftInverse.RightInverse", 1],["Eq.trans", 1],["Prod.swap_LeftInverse", 1]]],
["List.map", 27, [["Eq.trans", 15],["List.map", 15],["Eq", 15],["congrArg", 14],["of_eq_true", 14],["eq_self", 12],["rfl", 11],["Eq.refl", 10],["congr", 10],["Eq.mpr", 8],["Eq.symm", 8],["List.nil", 8],["List.cons", 8],["congrFun", 7],["HAppend.hAppend", 6],["Membership.mem", 6],["And.intro", 5],["Iff.intro", 5],["PProd.fst", 4],["Exists.intro", 4],["funext", 4],["propext", 4],["Unit.unit", 3],["HEq.refl", 3],["And", 3],["OfNat.ofNat", 3],["List.mem_map", 3],["implies_congr", 3],["Exists", 3],["eq_of_heq", 3],["Decidable.em", 3],["List.Mem.tail", 2],["List.exists_of_mem_map", 2],["eq_false", 2],["List.get?", 2],["Option.map", 2],["List.mem_bind", 2],["Function.comp", 2],["Iff", 2],["List.bind", 2],["and_imp", 2],["List.nil_append", 2],["Function.comp_apply", 2],["List.cons_bind", 2],["List.cons_append", 2],["List.card_nil", 2],["List.append_assoc", 2],["List.Mem.head", 2],["eq_true", 2],["Iff.mpr", 1],["Fin.isLt", 1],["Prod.mk.injEq", 1],["List.inj_on", 1],["exists_eq_right_right'", 1],["exists_false", 1],["Fin.val", 1],["LE.le", 1],["Bool.true", 1],["Or", 1],["Option.some", 1],["Or.inl", 1],["List.mapTRAux", 1],["List.erasep_cons_of_pos", 1],["List.get", 1],["List.reverse_cons", 1],["Nat.succ", 1],["List.length_cons", 1],["List.get?_eq_get", 1],["List.join", 1],["List.card", 1],["Or.inr", 1],["List.map_cons", 1],["exists_imp_distrib", 1],["False", 1],["List.map_append", 1],["List.erasep_cons_of_neg", 1],["List.mapTRAux_eq", 1],["List.card_le_card_cons", 1],["Option.some.inj", 1],["List.get?_map", 1],["forall_congr", 1],["iff_self", 1],["List.List.append_eq", 1],["id_eq", 1],["id", 1],["List.length_nil", 1],["implies_true", 1],["eq_true_of_decide", 1],["List.reverse_nil", 1],["false_and", 1],["List.not_mem_nil", 1],["List.mem_map_of_mem", 1],["le_refl", 1],["List.mem_cons", 1],["Nat.le_trans", 1],["List.length_map", 1],["List.mem_join", 1],["Not", 1],["List.erasep", 1],["List.append_nil", 1],["List.length", 1],["List.reverse", 1],["Fin.mk", 1],["List.card_cons_of_mem", 1]]],
["List.set", 26, [["congrArg", 14],["Eq", 14],["Eq.refl", 13],["Eq.mpr", 11],["Eq.trans", 11],["eq_self", 10],["of_eq_true", 10],["List.set", 9],["rfl", 9],["Eq.symm", 9],["Array.size_set", 8],["Fin.val", 8],["LT.lt", 8],["Fin.mk", 7],["List.get?", 7],["congrFun", 7],["Option.some", 5],["Array.size", 4],["Fin.isLt", 4],["Functor.map", 4],["BinaryHeap.arr", 4],["congr", 4],["Array.set", 3],["Array.data", 3],["OfNat.ofNat", 3],["PProd.fst", 3],["List.length_set", 3],["List.cons", 3],["List.get?_eq_get", 3],["List.set_eq_modifyNth", 2],["List.get?_set_eq", 2],["Array.get", 2],["Eq.mp", 2],["Option.some_inj", 2],["eq_false", 2],["List.modifyNth", 2],["propext", 2],["Array.mk", 2],["BinaryHeap.size_pos_of_max", 2],["congr_arg", 2],["List.get", 2],["List.get?_set_ne", 2],["Array.get?_eq_get?", 2],["Nat.succ", 2],["Nat.zero", 1],["ne_eq", 1],["absurd", 1],["Option.map_eq_map", 1],["List.get?_modifyNth_ne", 1],["UFNode.rank", 1],["UFModel.Agrees.set", 1],["if_pos", 1],["Nat.lt_trans", 1],["Nat.succ_inj'", 1],["Option.getD", 1],["unsafeCast", 1],["Array.get?_set_ne", 1],["UFModel.parent", 1],["UFModel.Agrees.mk'", 1],["UFNode.value", 1],["List.get?_modifyNth_eq", 1],["Array.get?", 1],["eq_true", 1],["Classical.em", 1],["Option.map_some'", 1],["eq_true_of_decide", 1],["Not", 1],["And.right", 1],["ite_congr", 1],["UnionFind.arr", 1],["Array.get?_set_eq", 1],["Nat.add_zero", 1],["List.set_nil", 1],["List.get?_set_of_lt", 1],["List.length", 1],["List.nil", 1],["And.intro", 1],["List.length_cons", 1],["eq_of_heq", 1],["UFNode.mk", 1],["HEq.refl", 1],["Array.size_swap", 1],["UFModel.Agrees.get_eq", 1],["Nat.add", 1],["Array.swap", 1],["Nat.lt_succ_self", 1],["Unit.unit", 1],["ite_true", 1],["ite_false", 1],["And.left", 1],["Nat.add_eq", 1],["if_neg", 1],["Iff.mpr", 1],["Bool.true", 1],["Ne.symm", 1]]],
["HEq", 26, [["HEq.refl", 8],["eq_of_heq", 7],["Eq.refl", 6],["heq_of_eq", 6],["HEq", 5],["Eq.symm", 5],["HEq.rfl", 4],["And.intro", 2],["Iff.intro", 2],["HEq.trans", 2],["propext", 2],["Unit.unit", 2],["cast", 1],["DecidableRel", 1],["FloatSpec.mk", 1],["Subsingleton.helim.proof_1", 1],["HEq.ndrecOn", 1],["Eq.propIntro", 1],["iff_true_intro", 1],["eqRec_heq", 1],["Eq.subst", 1],["HEq.subst", 1],["Eq.mpr", 1],["HEq.rfl.proof_1", 1],["funext", 1],["Subtype.ext_iff", 1],["Subsingleton.elim", 1],["heq_iff_eq", 1],["Iff.trans", 1]]],
["Nonempty.intro", 26, [["Eq", 6],["Exists.intro", 4],["Exists", 4],["Eq.refl", 3],["Iff.intro", 3],["Classical.choose_spec", 3],["Eq.mpr", 3],["funext", 3],["Function.inv_fun_on_pos", 2],["Subtype.property", 2],["And.left", 2],["Function.inv_fun_eq", 2],["And.right", 2],["Nonempty.intro", 2],["Function.LeftInverse_inv_fun", 2],["Classical.indefiniteDescription", 2],["Classical.choose", 2],["Function.RightInverse_surj_inv", 2],["Eq.trans", 1],["Function.partial_inv", 1],["Function.is_partial_inv_left", 1],["Iff", 1],["Function.extend_apply", 1],["of_eq_true", 1],["dite_congr", 1],["Set.univ", 1],["True", 1],["Function.inv_fun_on_neg", 1],["Subsingleton.elim", 1],["Membership.mem", 1],["Function.LeftInverse.surjective", 1],["Function.extend_def", 1],["Function.extend", 1],["Option.some", 1],["Function.RightInverse.injective", 1],["congrFun", 1],["Function.partial_inv_of_injective", 1],["And", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Function.inv_fun_on_eq", 1],["congrArg", 1],["Eq.mpr_prop", 1],["And.intro", 1],["dif_pos", 1],["Classical.propDecidable", 1],["Function.surj_inv_eq", 1],["dite", 1],["exists_apply_eq_apply", 1],["rfl", 1],["congr_arg", 1],["trivial", 1]]],
["UInt64.mk", 25, [["rfl", 12],["UInt64.mk", 11],["UInt64.val", 10],["congrArg", 10],["Eq.refl", 1],["HAdd.hAdd", 1],["AddCommSemigroup.add_comm", 1],["AddSemigroup.add_assoc", 1],["AddMonoid.nsmul_succ'", 1],["SubNegMonoid.gsmul_neg'", 1],["SubNegMonoid.sub_eq_add_neg", 1],["AddMonoid.nsmul_zero'", 1],["SizeOf.sizeOf", 1],["SubNegMonoid.gsmul_zero'", 1],["Semigroup.mul_assoc", 1],["Fin.val_eq_of_lt", 1],["Fin.ofNat'_succ", 1],["SubNegMonoid.gsmul_succ'", 1],["Eq", 1],["OfNat.ofNat", 1]]],
["Or.inl", 25, [["Eq", 17],["Fin.mk", 15],["Eq.refl", 13],["congrArg", 13],["Fin.val", 12],["OfNat.ofNat", 12],["HMod.hMod", 12],["congrFun", 10],["Eq.mpr", 10],["rfl", 9],["Nat.mod_lt", 9],["Eq.trans", 9],["of_eq_true", 8],["Fin.size_positive", 8],["HAdd.hAdd", 8],["eq_self", 8],["congr", 6],["Eq.symm", 6],["LT.lt", 5],["List.length", 4],["HMul.hMul", 4],["List.cons", 4],["Decidable.em", 4],["HDiv.hDiv", 3],["eq_false", 3],["Bool.true", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["HSub.hSub", 3],["Fin.size_positive'", 3],["Nat.succ", 3],["ite_congr", 3],["UnionFind.size", 2],["Fin.add_def", 2],["if_true", 2],["dite_congr", 2],["dif_pos", 2],["BinaryHeap.arr", 2],["Fin.mul_def", 2],["Fin.ofNat'", 2],["UnionFind.rankMaxAux", 2],["List.nil", 2],["Array.size_set", 2],["if_false", 2],["BinaryHeap.size_pos_of_max", 2],["Decidable.decide", 2],["Classical.em", 2],["Array.size", 2],["Fin.eq_of_val_eq", 2],["eq_true_of_decide", 2],["dite_true", 2],["dif_neg", 2],["eq_true", 2],["Iff.mpr", 1],["Nat.add_mod_mod", 1],["Nat.succ_mul", 1],["PProd.fst", 1],["Fin.one_val", 1],["List.getLast", 1],["UnionFind.rank_lt", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["lt_irrefl", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["LE.le", 1],["funext", 1],["Nat.lt_succ_iff", 1],["Array.isEqvAux.proof_1", 1],["Array.isEqv", 1],["Subtype.val", 1],["Array.isEqvAux.proof_3", 1],["Nat.mod_add_mod", 1],["implies_congr", 1],["Nat.lt_irrefl", 1],["trivial", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["Fin.isLt", 1],["Subsingleton.allEq", 1],["dite_false", 1],["And.imp", 1],["Subsingleton.elim", 1],["absurd", 1],["Nat.mul_mod", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["WellFounded.fix_eq", 1],["UFModel.parent", 1],["Nat.one_pos", 1],["UFModel.rank", 1],["Fin.nsmuls_eq", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Fin.mk.injEq", 1],["UFModel.Agrees.push", 1],["MonoidWithZero.zero_mul", 1],["Bool.false", 1],["True", 1],["Nat.to_digits_core_length", 1],["UnionFind.rankMax", 1],["List.getLast_cons", 1],["Nat.zero_le", 1],["WellFoundedRelation.rel", 1],["UFModel.push", 1],["id", 1],["of_decide_eq_true", 1],["Eq.mp", 1],["Nat.add_comm", 1],["List.cons_ne_nil", 1],["Nat.sub_lt_sub_left", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Array.get", 1],["decide_eq_true_eq", 1],["Nat.zero_mod", 1],["sizeOf_nat", 1],["Nat.lt_eq", 1],["Array.isEqvAux_self", 1],["Nat.mod_eq_of_lt", 1],["Nat.le_add_right", 1],["and", 1],["UnionFind.lt_rankMax", 1],["UnionFind.lt_rankMax'", 1],["List.get_singleton", 1],["Fin.ext", 1],["False.elim", 1],["dite", 1],["Fin.ofNat'_succ", 1],["List.getLast_singleton", 1]]],
["Function.LeftInverse", 25, [["Iff.intro", 5],["Exists.intro", 3],["Function.RightInverse_surj_inv", 3],["Function.surj_inv", 2],["congr_fun", 2],["Function.LeftInverse.comp", 2],["And.right", 2],["Prod.swap_swap", 2],["And.left", 1],["Function.has_RightInverse.surjective", 1],["Function.RightInverse.comp_eq_id", 1],["Function.LeftInverse_inv_fun", 1],["Function.injective.has_LeftInverse", 1],["Function.inv_fun", 1],["Function.LeftInverse.comp_eq_id", 1],["Function.surjective.has_RightInverse", 1],["Function.LeftInverse.injective", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Function.inv_fun_eq", 1],["Function.RightInverse.surjective", 1],["Function.LeftInverse_surj_inv", 1],["Function.bijective", 1],["Equiv.left_inv", 1],["Function.RightInverse.comp", 1],["And.intro", 1],["Eq.symm", 1],["Equiv.right_inv", 1],["Function.surj_inv_eq", 1],["Eq.mpr", 1],["Function.has_LeftInverse.injective", 1],["rfl", 1],["Eq.refl", 1],["Eq", 1]]],
["List.reverse", 24, [["congrArg", 18],["List.nil", 18],["Eq", 17],["Eq.trans", 16],["congrFun", 15],["of_eq_true", 14],["congr", 13],["Eq.refl", 12],["List.cons", 11],["Eq.mpr", 11],["HAppend.hAppend", 10],["Eq.symm", 9],["rfl", 8],["Prod.mk", 8],["eq_self", 8],["Bool.true", 8],["List.append_nil", 7],["List.reverse", 7],["Eq.mp", 6],["funext", 6],["cond", 6],["Classical.em", 6],["propext", 6],["Nat.Linear.Poly.denote_le", 5],["HAdd.hAdd", 5],["List.reverse_cons", 5],["Nat.Linear.Poly.denote_eq", 5],["Nat.Linear.Poly", 4],["List.not_mem_nil", 4],["Prod", 4],["Nat.Linear.Poly.cancelAux", 4],["List.nil_append", 4],["absurd", 4],["HSub.hSub", 4],["Bool.of_not_eq_true", 4],["OfNat.ofNat", 4],["Nat.sub_eq", 4],["cond_false", 4],["iff_self", 4],["Membership.mem", 4],["Nat.blt", 4],["Or", 4],["List.reverse_nil", 4],["Iff", 4],["Nat.Linear.Poly.denote", 4],["cond_true", 4],["eq_false", 4],["LE.le", 3],["Nat.add_comm", 3],["And", 3],["List.reverseAux", 3],["Nat.zero_add", 3],["Iff.intro", 3],["Nat.mul_eq", 2],["or_false", 2],["Nat.add_eq", 2],["Nat.Linear.Var.denote", 2],["Nat.add", 2],["Nat.add_left_comm", 2],["Nat.Linear.Poly.denote_reverse", 2],["implies_congr", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.hugeFuel", 2],["List.map", 2],["false_and", 2],["Bool.false", 2],["Nat.Linear.Poly.denote_append", 2],["eq_true", 2],["List.mem_cons", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["HMul.hMul", 2],["List.append_assoc", 2],["Nat.Linear.Poly.denote_reverseAux", 1],["List.mapTRAux", 1],["Nat.succ", 1],["List.length_cons", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Or.inr", 1],["Unit.unit", 1],["Nat.add_le_add", 1],["False", 1],["false_or", 1],["List.reverseAux_reverseAux", 1],["Bool.and_false", 1],["Bool.and_true", 1],["List.mapTRAux_eq", 1],["And.intro", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["List.mem_filterAux", 1],["List.filterAux", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["List.mem_filter", 1],["id", 1],["List.length_nil", 1],["And.right", 1],["PProd.fst", 1],["Nat.Linear.Expr.toPoly", 1],["List", 1],["And.left", 1],["decide_eq_true_eq", 1],["List.cons_append", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Bool.and_self", 1],["Decidable.decide", 1],["List.reverseAux_reverseAux_nil", 1],["List.reverseAux_eq_append", 1],["Nat.Linear.Poly.combine", 1],["Nat.Linear.Poly.denote_combine", 1],["List.length_append", 1],["Nat.add_le_add_right", 1],["List.mem_reverse", 1],["List.mem_reverseAux", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["and", 1],["List.length", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Or.inl", 1],["Nat.Linear.Expr.denote_toPoly", 1]]],
["Classical.indefiniteDescription.proof_1", 24, [["Eq", 6],["Eq.refl", 3],["Exists.intro", 3],["Eq.mpr", 3],["Classical.choose_spec", 3],["funext", 3],["Exists", 3],["Function.inv_fun_eq", 2],["Classical.indefiniteDescription", 2],["Subtype.property", 2],["Classical.choose", 2],["Function.LeftInverse_inv_fun", 2],["And.right", 2],["Function.RightInverse_surj_inv", 2],["And.left", 2],["Function.inv_fun_on_pos", 2],["Function.extend_def", 1],["dif_pos", 1],["Eq.trans", 1],["Function.partial_inv", 1],["Function.is_partial_inv_left", 1],["Iff", 1],["Function.extend_apply", 1],["of_eq_true", 1],["dite_congr", 1],["Set.univ", 1],["True", 1],["Function.inv_fun_on_neg", 1],["trivial", 1],["Membership.mem", 1],["Function.LeftInverse.surjective", 1],["Subsingleton.elim", 1],["Iff.intro", 1],["Function.RightInverse.injective", 1],["congrFun", 1],["Function.partial_inv_of_injective", 1],["Classical.propDecidable", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Option.some", 1],["congrArg", 1],["Function.extend", 1],["And.intro", 1],["And", 1],["Function.inv_fun_on_eq", 1],["Function.surj_inv_eq", 1],["dite", 1],["exists_apply_eq_apply", 1],["rfl", 1],["congr_arg", 1],["Eq.mpr_prop", 1]]],
["USize.mk", 24, [["rfl", 12],["USize.mk", 11],["USize.val", 10],["congrArg", 10],["Eq", 1],["AddSemigroup.add_assoc", 1],["AddCommSemigroup.add_comm", 1],["HAdd.hAdd", 1],["AddMonoid.nsmul_succ'", 1],["SubNegMonoid.gsmul_neg'", 1],["SubNegMonoid.sub_eq_add_neg", 1],["SubNegMonoid.gsmul_succ'", 1],["SizeOf.sizeOf", 1],["SubNegMonoid.gsmul_zero'", 1],["Fin.ofNat'_succ", 1],["Fin.val_eq_of_lt", 1],["Semigroup.mul_assoc", 1],["AddMonoid.nsmul_zero'", 1],["OfNat.ofNat", 1],["Eq.refl", 1]]],
["Iff.intro", 24, [["Fin.mk", 13],["rfl", 12],["Eq.refl", 11],["Eq", 11],["Eq.mpr", 10],["congrArg", 9],["OfNat.ofNat", 8],["Eq.symm", 7],["LT.lt", 7],["List.get", 6],["Eq.trans", 5],["of_eq_true", 5],["congrFun", 5],["List.length", 4],["Array.size", 4],["eq_self", 4],["Fin.val", 4],["BinaryHeap.arr", 3],["Option.some", 3],["HSub.hSub", 3],["id", 3],["List.get?_eq_get", 3],["List.get?", 3],["List.nil", 2],["UnionFind.rankMaxAux", 2],["HAdd.hAdd", 2],["UnionFind.size", 2],["HEq.refl", 2],["Fin.isLt", 2],["List.cons_ne_nil", 2],["dite_congr", 2],["List.getLast", 2],["Bool.true", 2],["BinaryHeap.size_pos_of_max", 2],["HAppend.hAppend", 2],["congr", 2],["dif_pos", 2],["Subtype.property", 2],["Classical.em", 2],["Array.size_set", 2],["eq_true", 2],["Option.some.inj", 2],["Decidable.decide", 2],["PProd.fst", 2],["List.cons", 2],["dite_true", 2],["Nat.lt_succ_self", 2],["dif_neg", 2],["Iff.mpr", 1],["Array.isEqvAux_self", 1],["Nat.le_of_succ_le_succ", 1],["eq_false", 1],["Nat.le_add_right", 1],["UnionFind.rank_lt", 1],["BinaryHeap.insert.proof_1", 1],["List.getLast_singleton", 1],["Array.isEqvAux.proof_1", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["propext", 1],["Array.size_push", 1],["eq_true_of_decide", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_3", 1],["lt_irrefl", 1],["List.length_set", 1],["BinaryHeap.size_heapifyUp", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["Array.isEqv", 1],["Subtype.val", 1],["List.length_pos_of_ne_nil", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["dite_false", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["absurd", 1],["UFModel.push.proof_1", 1],["WellFounded.fix_eq", 1],["UFModel.parent", 1],["Nat.one_pos", 1],["List.map", 1],["UFModel.Agrees.push", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["UFModel.rank", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["UnionFind.rankMax", 1],["List.getLast_cons", 1],["Array.swap", 1],["Array.size_swap", 1],["Eq.mp", 1],["List.get?_append_right", 1],["Nat.sub_lt_sub_left", 1],["WellFounded.fix", 1],["Nat.sub_lt", 1],["Array.get", 1],["UFModel.push", 1],["List.length_append", 1],["List.length_map", 1],["decide_eq_true_eq", 1],["Nat.lt_eq", 1],["and", 1],["Option.some_inj", 1],["eq_of_heq", 1],["UnionFind.lt_rankMax", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["List.get_singleton", 1],["dite", 1],["List.getLast_eq_get", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["List.set", 1]]],
["Classical.indefiniteDescription", 24, [["Eq", 6],["Eq.refl", 3],["Exists.intro", 3],["Eq.mpr", 3],["Classical.choose_spec", 3],["funext", 3],["Exists", 3],["Function.inv_fun_eq", 2],["Classical.indefiniteDescription", 2],["Subtype.property", 2],["Classical.choose", 2],["Function.LeftInverse_inv_fun", 2],["And.right", 2],["Function.RightInverse_surj_inv", 2],["And.left", 2],["Function.inv_fun_on_pos", 2],["Function.extend_def", 1],["dif_pos", 1],["Eq.trans", 1],["Function.partial_inv", 1],["Function.is_partial_inv_left", 1],["Iff", 1],["Function.extend_apply", 1],["of_eq_true", 1],["dite_congr", 1],["Set.univ", 1],["True", 1],["Function.inv_fun_on_neg", 1],["trivial", 1],["Membership.mem", 1],["Function.LeftInverse.surjective", 1],["Subsingleton.elim", 1],["Iff.intro", 1],["Function.RightInverse.injective", 1],["congrFun", 1],["Function.partial_inv_of_injective", 1],["Classical.propDecidable", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Option.some", 1],["congrArg", 1],["Function.extend", 1],["And.intro", 1],["And", 1],["Function.inv_fun_on_eq", 1],["Function.surj_inv_eq", 1],["dite", 1],["exists_apply_eq_apply", 1],["rfl", 1],["congr_arg", 1],["Eq.mpr_prop", 1]]],
["UInt8.mk", 24, [["rfl", 12],["UInt8.mk", 11],["UInt8.val", 10],["congrArg", 10],["OfNat.ofNat", 1],["HAdd.hAdd", 1],["AddMonoid.nsmul_succ'", 1],["AddCommSemigroup.add_comm", 1],["SubNegMonoid.gsmul_neg'", 1],["SubNegMonoid.sub_eq_add_neg", 1],["SizeOf.sizeOf", 1],["SubNegMonoid.gsmul_zero'", 1],["AddSemigroup.add_assoc", 1],["Fin.ofNat'_succ", 1],["Fin.val_eq_of_lt", 1],["Semigroup.mul_assoc", 1],["AddMonoid.nsmul_zero'", 1],["SubNegMonoid.gsmul_succ'", 1],["Eq", 1],["Eq.refl", 1]]],
["UInt16.mk", 24, [["rfl", 12],["UInt16.mk", 11],["UInt16.val", 10],["congrArg", 10],["OfNat.ofNat", 1],["HAdd.hAdd", 1],["AddCommSemigroup.add_comm", 1],["AddMonoid.nsmul_succ'", 1],["SubNegMonoid.gsmul_succ'", 1],["SubNegMonoid.gsmul_neg'", 1],["SubNegMonoid.sub_eq_add_neg", 1],["AddSemigroup.add_assoc", 1],["SizeOf.sizeOf", 1],["SubNegMonoid.gsmul_zero'", 1],["Semigroup.mul_assoc", 1],["Fin.val_eq_of_lt", 1],["Fin.ofNat'_succ", 1],["AddMonoid.nsmul_zero'", 1],["Eq", 1],["Eq.refl", 1]]],
["Subsingleton", 23, [["Subsingleton.intro", 10],["Eq", 4],["rfl", 3],["Subsingleton.elim", 2],["funext", 2],["False.elim", 2],["Eq.refl", 2],["Iff.mp", 1],["sorryAx", 1],["Eq.mpr", 1],["instSubsingletonDecidable", 1],["instSubsingletonFinOfNatNatInstOfNatNat.proof_1", 1],["absurd", 1],["Subsingleton", 1],["True.intro", 1],["Quotient.mk", 1],["instSubsingletonSquash.proof_1", 1],["OfNat.ofNat", 1],["Squash.ind", 1],["instSubsingletonForAll.proof_1", 1],["instSubsingletonDecidable.proof_1", 1],["Empty.elim", 1],["PUnit.subsingleton", 1],["proofIrrel", 1],["instSubsingletonEmpty.proof_1", 1],["instSubsingletonFinOfNatNatInstOfNatNat_1.proof_1", 1],["eq_of_heq", 1],["HEq.refl", 1],["Eq.symm", 1],["Quot.recOnSubsingleton", 1],["not_nonempty_iff_imp_false", 1],["instSubsingletonStateM.proof_1", 1],["Fin.mk", 1],["Quot.sound", 1],["Decidable.isFalse", 1],["instSubsingleton.proof_1", 1],["Bool.true", 1],["Decidable.isTrue", 1]]],
["Classical.choose", 23, [["Eq", 6],["Eq.refl", 3],["Exists.intro", 3],["Eq.mpr", 3],["Classical.choose_spec", 3],["funext", 3],["Exists", 3],["Function.LeftInverse_inv_fun", 2],["Function.inv_fun_eq", 2],["And.left", 2],["And.right", 2],["Classical.choose", 2],["Function.RightInverse_surj_inv", 2],["Function.inv_fun_on_pos", 2],["Function.extend_def", 1],["Function.inv_fun_on_eq", 1],["Eq.mpr_prop", 1],["dif_pos", 1],["Function.partial_inv", 1],["Classical.indefiniteDescription", 1],["Function.is_partial_inv_left", 1],["Iff", 1],["Function.extend_apply", 1],["Subtype.property", 1],["dite_congr", 1],["Set.univ", 1],["True", 1],["Function.inv_fun_on_neg", 1],["trivial", 1],["Membership.mem", 1],["Function.LeftInverse.surjective", 1],["Eq.trans", 1],["Iff.intro", 1],["Function.RightInverse.injective", 1],["congrFun", 1],["Function.partial_inv_of_injective", 1],["of_eq_true", 1],["eq_true", 1],["mt", 1],["Function.inv_fun", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Subsingleton.elim", 1],["congrArg", 1],["Classical.propDecidable", 1],["And.intro", 1],["Option.some", 1],["Function.extend", 1],["Function.surj_inv_eq", 1],["dite", 1],["exists_apply_eq_apply", 1],["rfl", 1],["congr_arg", 1],["And", 1]]],
["Or.inr", 22, [["Fin.mk", 15],["Eq", 14],["Fin.val", 12],["congrArg", 10],["rfl", 9],["Nat.mod_lt", 9],["HMod.hMod", 9],["Eq.refl", 9],["OfNat.ofNat", 8],["Fin.size_positive", 8],["congrFun", 7],["Eq.mpr", 7],["Eq.trans", 6],["HAdd.hAdd", 5],["eq_self", 5],["of_eq_true", 5],["HMul.hMul", 4],["LT.lt", 4],["Fin.size_positive'", 3],["congr", 3],["HSub.hSub", 3],["Classical.em", 2],["UnionFind.rankMaxAux", 2],["BinaryHeap.size_pos_of_max", 2],["dite_congr", 2],["Bool.true", 2],["Nat.succ", 2],["BinaryHeap.arr", 2],["Fin.eq_of_val_eq", 2],["dif_pos", 2],["Fin.add_def", 2],["Fin.ofNat'", 2],["Eq.symm", 2],["Array.size_set", 2],["Fin.mul_def", 2],["Decidable.decide", 2],["UnionFind.size", 2],["Array.size", 2],["dite_true", 2],["dif_neg", 2],["Iff.mpr", 1],["UFModel.Agrees.push", 1],["UFModel.push", 1],["WellFoundedRelation.rel", 1],["decide_eq_true_eq", 1],["Nat.zero_mod", 1],["sizeOf_nat", 1],["List.cons_ne_nil", 1],["List.getLast", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["Fin.ofNat'_succ", 1],["Nat.le_add_right", 1],["Fin.ext", 1],["Nat.succ_mul", 1],["eq_false", 1],["Nat.add_mod_mod", 1],["PProd.fst", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["List.getLast_singleton", 1],["funext", 1],["Nat.lt_succ_iff", 1],["Fin.one_val", 1],["eq_true_of_decide", 1],["Array.isEqvAux_self", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["Subsingleton.allEq", 1],["lt_irrefl", 1],["dite_false", 1],["And.imp", 1],["Subsingleton.elim", 1],["absurd", 1],["Fin.zero_def", 1],["UFModel.push.proof_1", 1],["UnionFind.rank_lt", 1],["UFModel.parent", 1],["Nat.one_pos", 1],["Nat.mod_add_mod", 1],["Array.isEqvAux.proof_1", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Subtype.val", 1],["Array.isEqv", 1],["Fin.isLt", 1],["Bool.false", 1],["True", 1],["UnionFind.rankMax", 1],["List.getLast_cons", 1],["WellFounded.fix_eq", 1],["id", 1],["Nat.add_comm", 1],["Array.isEqvAux.proof_3", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Nat.sub_lt", 1],["Array.get", 1],["UFModel.rank", 1],["Fin.nsmuls_eq", 1],["Fin.val_eq_of_lt", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["Nat.mod_eq_of_lt", 1],["Fin.mk.injEq", 1],["List.get_singleton", 1],["MonoidWithZero.zero_mul", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.mul_mod", 1]]],
["True.intro", 22, [["rfl", 12],["Eq.refl", 10],["Fin.mk", 10],["Eq", 10],["congrArg", 7],["Eq.mpr", 7],["Eq.symm", 7],["Eq.trans", 5],["OfNat.ofNat", 5],["of_eq_true", 5],["congrFun", 5],["List.get", 5],["LT.lt", 5],["Fin.val", 4],["Array.size", 4],["eq_self", 4],["List.length", 3],["List.get?_eq_get", 3],["List.get?", 3],["Option.some", 3],["HEq.refl", 2],["HAdd.hAdd", 2],["UnionFind.rankMaxAux", 2],["Fin.isLt", 2],["Bool.true", 2],["UnionFind.size", 2],["dite_congr", 2],["HSub.hSub", 2],["HAppend.hAppend", 2],["congr", 2],["dif_pos", 2],["Classical.em", 2],["eq_true", 2],["id", 2],["Option.some.inj", 2],["Decidable.decide", 2],["dite_true", 2],["Subtype.property", 2],["Nat.lt_succ_self", 2],["dif_neg", 2],["Iff.mpr", 1],["UFModel.push", 1],["decide_eq_true_eq", 1],["Array.size_swap", 1],["List.get?_append_right", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["UnionFind.rank_lt", 1],["WellFoundedRelation.rel", 1],["eq_false", 1],["PProd.fst", 1],["sizeOf_nat", 1],["BinaryHeap.insert.proof_1", 1],["List.cons_ne_nil", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["List.getLast", 1],["Array.size_push", 1],["Nat.le_of_succ_le_succ", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Nat.le_add_right", 1],["Array.isEqvAux_self", 1],["List.map", 1],["propext", 1],["eq_true_of_decide", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_3", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["dite_false", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["UFModel.push.proof_1", 1],["lt_irrefl", 1],["UFModel.parent", 1],["Array.isEqvAux.proof_1", 1],["BinaryHeap.size_heapifyUp", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Subtype.val", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["UnionFind.rankMax", 1],["Array.isEqv", 1],["Eq.mp", 1],["WellFounded.fix_eq", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Array.get", 1],["List.length_set", 1],["List.length_append", 1],["List.length_map", 1],["Option.some_inj", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["eq_of_heq", 1],["UFModel.rank", 1],["Array.swap", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["List.getLast_eq_get", 1],["UFModel.Agrees.push", 1],["BinaryHeap.arr", 1],["List.set", 1]]],
["propext", 22, [["Fin.mk", 12],["Eq.refl", 10],["rfl", 10],["Eq", 10],["congrArg", 9],["Eq.mpr", 9],["Eq.symm", 7],["OfNat.ofNat", 7],["LT.lt", 7],["Eq.trans", 5],["congrFun", 5],["of_eq_true", 5],["List.get", 5],["Fin.val", 4],["eq_self", 4],["Array.size", 4],["List.length", 3],["Option.some", 3],["BinaryHeap.arr", 3],["List.get?_eq_get", 3],["List.get?", 3],["UnionFind.size", 2],["HAdd.hAdd", 2],["HEq.refl", 2],["Fin.isLt", 2],["HAppend.hAppend", 2],["dite_congr", 2],["Classical.em", 2],["Bool.true", 2],["BinaryHeap.size_pos_of_max", 2],["HSub.hSub", 2],["congr", 2],["dif_pos", 2],["Decidable.decide", 2],["Subtype.property", 2],["Array.size_set", 2],["id", 2],["eq_true", 2],["dite_true", 2],["Option.some.inj", 2],["UnionFind.rankMaxAux", 2],["Nat.lt_succ_self", 2],["dif_neg", 2],["Iff.mpr", 1],["UnionFind.rank_lt", 1],["WellFoundedRelation.rel", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["sizeOf_nat", 1],["List.cons_ne_nil", 1],["eq_false", 1],["PProd.fst", 1],["Nat.le_of_succ_le_succ", 1],["BinaryHeap.insert.proof_1", 1],["Nat.le_add_right", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["List.getLast", 1],["Array.size_push", 1],["Array.isEqvAux_self", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["List.map", 1],["propext", 1],["eq_true_of_decide", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_1", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["lt_irrefl", 1],["Array.isEqvAux.proof_3", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["dite_false", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["UFModel.push.proof_1", 1],["BinaryHeap.size_heapifyUp", 1],["UFModel.parent", 1],["Subtype.val", 1],["Array.isEqv", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["WellFounded.fix_eq", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["UnionFind.rankMax", 1],["List.length_set", 1],["Option.some_inj", 1],["Eq.mp", 1],["UFModel.rank", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Array.get", 1],["Array.swap", 1],["List.length_append", 1],["List.length_map", 1],["UFModel.Agrees.push", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["eq_of_heq", 1],["Array.size_swap", 1],["UFModel.push", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["List.getLast_eq_get", 1],["decide_eq_true_eq", 1],["List.get?_append_right", 1],["List.set", 1]]],
["Eq.trans", 22, [["Fin.mk", 12],["Eq.refl", 10],["rfl", 10],["Eq", 10],["congrArg", 9],["Eq.mpr", 9],["Eq.symm", 7],["OfNat.ofNat", 7],["LT.lt", 7],["Eq.trans", 5],["congrFun", 5],["of_eq_true", 5],["List.get", 5],["Fin.val", 4],["eq_self", 4],["Array.size", 4],["List.length", 3],["Option.some", 3],["BinaryHeap.arr", 3],["List.get?_eq_get", 3],["List.get?", 3],["UnionFind.size", 2],["HAdd.hAdd", 2],["HEq.refl", 2],["Fin.isLt", 2],["HAppend.hAppend", 2],["dite_congr", 2],["Classical.em", 2],["Bool.true", 2],["BinaryHeap.size_pos_of_max", 2],["HSub.hSub", 2],["congr", 2],["dif_pos", 2],["Decidable.decide", 2],["Subtype.property", 2],["Array.size_set", 2],["id", 2],["eq_true", 2],["dite_true", 2],["Option.some.inj", 2],["UnionFind.rankMaxAux", 2],["Nat.lt_succ_self", 2],["dif_neg", 2],["Iff.mpr", 1],["UnionFind.rank_lt", 1],["WellFoundedRelation.rel", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["sizeOf_nat", 1],["List.cons_ne_nil", 1],["eq_false", 1],["PProd.fst", 1],["Nat.le_of_succ_le_succ", 1],["BinaryHeap.insert.proof_1", 1],["Nat.le_add_right", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["List.getLast", 1],["Array.size_push", 1],["Array.isEqvAux_self", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["List.map", 1],["propext", 1],["eq_true_of_decide", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_1", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["lt_irrefl", 1],["Array.isEqvAux.proof_3", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["dite_false", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["UFModel.push.proof_1", 1],["BinaryHeap.size_heapifyUp", 1],["UFModel.parent", 1],["Subtype.val", 1],["Array.isEqv", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["WellFounded.fix_eq", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["UnionFind.rankMax", 1],["List.length_set", 1],["Option.some_inj", 1],["Eq.mp", 1],["UFModel.rank", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Array.get", 1],["Array.swap", 1],["List.length_append", 1],["List.length_map", 1],["UFModel.Agrees.push", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["eq_of_heq", 1],["Array.size_swap", 1],["UFModel.push", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["List.getLast_eq_get", 1],["decide_eq_true_eq", 1],["List.get?_append_right", 1],["List.set", 1]]],
["Id", 21, [["Pure.pure", 6],["Bind.bind", 5],["ULift.up", 3],["inferInstanceAs", 3],["MonadState.get", 3],["ULift.down", 3],["Fin", 2],["RandG", 2],["OfNat.ofNat", 2],["MonadStateOf.set", 2],["Id", 2],["rfl", 2],["Eq.refl", 1],["Monad.mk", 1],["ForIn.forIn", 1],["PUnit.unit", 1],["PUnit", 1],["Prod.map", 1],["Bool.false", 1],["Mathlib.Tactic.Lint.trieElements", 1],["ULift", 1],["MonadFinally.mk", 1],["RandomGen.next", 1],["Random.random", 1],["Nat.succ", 1],["Prod.mk", 1],["Prod", 1],["Nat", 1],["BoundedRandom.randomR", 1],["LawfulMonad.mk", 1],["instSubsingletonStateM.proof_1", 1],["ite", 1],["Random.rand", 1],["RandomGen.split", 1],["randNat", 1],["Array", 1],["Subsingleton.elim", 1],["Eq.mpr", 1],["inferInstance", 1],["BEq.beq", 1],["OfNat", 1],["ToString", 1],["Fin.ofNat", 1],["ForInStep.yield", 1],["funext", 1],["RandomGen.range", 1],["Subsingleton.intro", 1],["Id.instLawfulMonadIdInstMonadId.proof_1", 1],["Option.some", 1],["ForInStep", 1],["Eq", 1],["Bool.true", 1]]],
["Substring", 21, [["Substring.mk", 12],["Substring", 10],["HAdd.hAdd", 5],["OfNat.ofNat", 4],["Eq.refl", 4],["ite", 3],["Substring.bsize", 2],["Substring.nextn", 2],["Substring.prevn", 2],["Substring.toString", 2],["Substring.startPos", 1],["Option.some", 1],["ToString.mk", 1],["Substring.beq", 1],["Inhabited.mk", 1],["GE.ge", 1],["HAppend.hAppend", 1],["Substring.stopPos", 1],["Option.none", 1],["Prod.mk", 1],["ToStream.mk", 1],["BEq.beq", 1],["List.nil", 1],["Substring.dropWhile", 1],["List.cons", 1],["LT.lt", 1],["Stream.mk", 1],["Substring.dropRightWhile", 1],["BEq.mk", 1],["Substring.str", 1],["Nat.min", 1],["Eq", 1],["Bool.true", 1]]],
["Nat.ble", 21, [["Eq.refl", 12],["Eq", 11],["congrArg", 10],["congrFun", 10],["Bool.true", 10],["Eq.trans", 10],["congr", 9],["HAdd.hAdd", 8],["of_eq_true", 8],["Prod.mk", 8],["Eq.symm", 7],["Nat.Linear.Poly.denote", 7],["Classical.em", 6],["Bool.of_not_eq_true", 6],["List.nil", 6],["Nat.add_comm", 6],["cond_false", 6],["cond", 6],["Nat.zero_add", 6],["eq_self", 6],["cond_true", 6],["Nat.add", 5],["PProd.fst", 5],["Nat.add_eq", 5],["Eq.mpr", 5],["Nat.mul_eq", 5],["Nat.add_left_comm", 5],["Nat.Linear.Var.denote", 5],["OfNat.ofNat", 5],["HMul.hMul", 5],["HAppend.hAppend", 4],["Nat.blt", 4],["Nat.Linear.Poly.denote_eq", 4],["propext", 4],["Nat.Linear.Poly.denote_le", 4],["Iff.intro", 4],["Unit.unit", 4],["List.cons", 4],["LE.le", 3],["Nat.ble", 3],["funext", 3],["rfl", 3],["absurd", 3],["Nat.Linear.hugeFuel", 3],["Eq.mp", 3],["Nat.Linear.Poly", 3],["Nat.Linear.Poly.denote_append", 3],["Nat.sub_eq", 2],["Nat.add_assoc", 2],["HEq.refl", 2],["List.append_nil", 2],["eq_true", 2],["eq_true_of_decide", 2],["Nat.Linear.Poly.denote_reverse", 2],["List.nil_append", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse_cons", 2],["Nat.le_of_ble_eq_true", 2],["List.reverse", 2],["Nat.Linear.Poly.insertSorted", 2],["Prod", 2],["List.reverse_nil", 2],["HSub.hSub", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.ble_eq_true_of_le", 2],["Tactic.NormCast.Label.squash", 1],["Nat.succ", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_fuse", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Nat.add_le_add", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.ble_self_eq_true", 1],["Bool.and_false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["Bool.false", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.ble_succ_eq_true", 1],["Bool.and_self", 1],["Tactic.NormCast.Label.elim", 1],["id", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Nat.Linear.Poly.combineAux", 1],["Tactic.NormCast.Label.move", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.right_distrib", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["eq_of_heq", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["and", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Nat.Linear.Expr.denote_toPoly", 1]]],
["min", 21, [["min", 9],["Eq.mpr", 7],["Eq.refl", 6],["Eq", 6],["congrArg", 6],["Eq.trans", 5],["of_eq_true", 5],["min_eq_left", 5],["le_refl", 4],["min_le_left", 4],["dite", 4],["LE.le", 3],["if_pos", 3],["eq_self", 3],["OfNat.ofNat", 3],["le_min", 3],["instDecidableLeToLEToPreorderToPartialOrder", 3],["if_neg", 3],["min_eq_right", 3],["eq_true", 3],["congrFun", 3],["min_le_right", 3],["eq_min", 3],["rfl", 3],["congr", 2],["List.length_nil", 2],["HSub.hSub", 2],["Nat.zero_min", 2],["le_of_lt", 2],["Nat.succ", 2],["Eq.symm", 2],["min_comm", 2],["Nat.min_succ_succ", 2],["List.length_cons", 2],["List.length", 2],["Nat.zero_le", 2],["Nat.min_zero", 2],["ite_self", 1],["le_of_not_le", 1],["Nat.sub_self", 1],["HAdd.hAdd", 1],["le_of_not_ge", 1],["le_antisymm", 1],["Nat.sub_add_cancel", 1],["min_eq_right_of_lt", 1],["left_comm", 1],["List.take", 1],["PProd.fst", 1],["ite_congr", 1],["min_self", 1],["min_assoc", 1],["le_or_gt", 1],["le_trans", 1],["Or.elim", 1],["LT.lt", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.sub_eq_sub_min", 1],["GE.ge", 1],["List.map₂", 1]]],
["Subset.subset", 21, [["Eq.mpr", 6],["propext", 5],["Eq.refl", 4],["And.intro", 4],["Membership.mem", 4],["List.Mem.tail", 3],["List.subset.trans", 3],["Iff.mp", 3],["List.mem_cons", 3],["Iff.mpr", 3],["List.subset_def", 2],["Iff.rfl", 2],["Iff", 2],["Eq.trans", 2],["List.mem_cons_of_mem", 2],["List.mem_append", 2],["List.mem_append_left", 2],["Iff.intro", 2],["Or.inl", 2],["Or.inr", 2],["congrArg", 2],["congr", 2],["forall_congr", 2],["implies_congr", 2],["And", 2],["List.mem_append_right", 2],["List.nil_subset", 1],["and_imp", 1],["List.erasep_subset", 1],["Exists.intro", 1],["List.append_subset_of_subset_of_subset", 1],["Or", 1],["Or.elim", 1],["List.subset.refl", 1],["forall_and_distrib", 1],["List.exists_or_eq_self_of_erasep", 1],["List.mem_map", 1],["Eq.mp", 1],["congrFun", 1],["exists_imp_distrib", 1],["forall_eq", 1],["Subset.subset", 1],["List.cons_subset", 1],["List.subset_append_left", 1],["List.eq_or_mem_of_mem_cons", 1],["or_imp_distrib", 1],["List.erase", 1],["List.mem_nil_iff", 1],["List.nil", 1],["List.cons_subset_cons", 1],["List.cons", 1],["eq_of_heq", 1],["HEq.refl", 1],["False.elim", 1],["List.Mem.head", 1],["List.erase_eq_erasep", 1],["Eq.symm", 1],["Eq", 1],["List.subset_append_right", 1]]],
["AddGroupWithOne.intCast", 20, [["rfl", 13],["Int.cast_ofNat", 3],["OfNat.ofNat", 2],["AddGroupWithOne.intCast_ofNat", 2],["Int.cast", 2],["Eq.mpr", 2],["Nat.cast", 2],["AddGroupWithOne.intCast_negSucc", 2],["Eq", 2],["Eq.refl", 2],["Nat.cast_zero", 1],["Nat.cast_one", 1]]],
["ByteArray", 20, [["ByteArray.mk", 6],["ByteArray", 6],["OfNat.ofNat", 4],["ByteArray.empty", 3],["ByteArray.copySlice", 2],["Bool.true", 1],["ByteArray.push", 1],["Array.extract", 1],["Array.set", 1],["Array.set!", 1],["HSub.hSub", 1],["ByteArray.data", 1],["List.toArray", 1],["Array.push", 1],["ByteArray.size", 1],["Array.uset", 1],["ToString.mk", 1],["Append.mk", 1],["Inhabited.mk", 1],["ByteArray.extract", 1],["ByteArray.toList", 1],["HAppend.hAppend", 1],["Array.size", 1],["ForIn.mk", 1],["ByteArray.mkEmpty", 1],["PProd.fst", 1],["HAdd.hAdd", 1],["ByteArray.forIn", 1],["List.nil", 1],["List.toString", 1],["Bool.false", 1],["EmptyCollection.mk", 1],["ByteArray.append", 1]]],
["trivial", 20, [["Eq.refl", 10],["rfl", 10],["Fin.mk", 10],["Eq", 10],["congrArg", 7],["Eq.mpr", 7],["Eq.symm", 7],["Eq.trans", 5],["OfNat.ofNat", 5],["of_eq_true", 5],["congrFun", 5],["List.get", 5],["LT.lt", 5],["Fin.val", 4],["Array.size", 4],["eq_self", 4],["List.length", 3],["List.get?_eq_get", 3],["List.get?", 3],["Option.some", 3],["HEq.refl", 2],["HAdd.hAdd", 2],["UnionFind.rankMaxAux", 2],["Fin.isLt", 2],["Bool.true", 2],["UnionFind.size", 2],["dite_congr", 2],["HSub.hSub", 2],["HAppend.hAppend", 2],["congr", 2],["dif_pos", 2],["Classical.em", 2],["eq_true", 2],["id", 2],["Option.some.inj", 2],["Decidable.decide", 2],["dite_true", 2],["Subtype.property", 2],["Nat.lt_succ_self", 2],["dif_neg", 2],["Iff.mpr", 1],["UFModel.push", 1],["decide_eq_true_eq", 1],["Array.size_swap", 1],["List.get?_append_right", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["UnionFind.rank_lt", 1],["WellFoundedRelation.rel", 1],["eq_false", 1],["PProd.fst", 1],["sizeOf_nat", 1],["BinaryHeap.insert.proof_1", 1],["List.cons_ne_nil", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["List.getLast", 1],["Array.size_push", 1],["Nat.le_of_succ_le_succ", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Nat.le_add_right", 1],["Array.isEqvAux_self", 1],["List.map", 1],["propext", 1],["eq_true_of_decide", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_3", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["dite_false", 1],["And.imp", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["UFModel.push.proof_1", 1],["lt_irrefl", 1],["UFModel.parent", 1],["Array.isEqvAux.proof_1", 1],["BinaryHeap.size_heapifyUp", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Subtype.val", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["UnionFind.rankMax", 1],["Array.isEqv", 1],["Eq.mp", 1],["WellFounded.fix_eq", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Array.get", 1],["List.length_set", 1],["List.length_append", 1],["List.length_map", 1],["Option.some_inj", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["eq_of_heq", 1],["UFModel.rank", 1],["Array.swap", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["List.getLast_eq_get", 1],["UFModel.Agrees.push", 1],["BinaryHeap.arr", 1],["List.set", 1]]],
["Set", 20, [["setOf", 10],["Membership.mem", 7],["And", 4],["Eq", 4],["Not", 2],["Exists", 2],["Or", 2],["Set.subset", 1],["Set.inter", 1],["Function.comp", 1],["Functor.map", 1],["Exists.intro", 1],["Subset.subset", 1],["Set.instLawfulFunctorSetInstFunctorSet.proof_1", 1],["LawfulFunctor.mk", 1],["Iff.intro", 1],["propext", 1],["Set.diff", 1],["Sdiff.mk", 1],["And.intro", 1],["eq_of_heq", 1],["Functor.mk", 1],["Set.mem", 1],["HEq.refl", 1],["Eq.symm", 1],["Bool.false", 1],["EmptyCollection.mk", 1],["funext", 1],["Membership.mk", 1],["True", 1],["Set.union", 1],["Union.mk", 1],["rfl", 1],["Bool.true", 1],["Eq.refl", 1],["Subset.mk", 1],["Inter.mk", 1],["Set.image", 1]]],
["List.concat", 20, [["Eq", 12],["congrArg", 8],["Eq.trans", 7],["Eq.symm", 7],["of_eq_true", 6],["congrFun", 6],["eq_self", 6],["List.nil", 5],["OfNat.ofNat", 5],["Array.push", 5],["Fin.mk", 5],["Array.data", 5],["Eq.refl", 5],["Array.size", 5],["List.concat_eq_append", 4],["Eq.mpr", 4],["HAppend.hAppend", 4],["rfl", 4],["List.cons", 4],["Option.some", 3],["HAdd.hAdd", 3],["Array.size_push", 3],["List.concat", 3],["congr", 3],["Array.mk", 3],["PProd.fst", 2],["Nat.le_add_right", 2],["Exists.intro", 2],["List.append_nil", 2],["BinaryHeap.arr", 2],["Array.get", 2],["UFModel.push", 2],["Array.get?_eq_get?", 2],["List.toArray", 2],["Array.get?", 2],["UFNode.mk", 2],["sorryAx", 2],["Fin.val", 2],["LT.lt", 2],["dif_neg", 1],["UFModel.Agrees.push", 1],["List.get?_eq_get", 1],["BinaryHeap.size_heapifyUp", 1],["eq_false", 1],["BinaryHeap.insert.proof_1", 1],["List.length", 1],["lt_irrefl", 1],["And.intro", 1],["HEq.refl", 1],["Array.mkEmpty", 1],["UFModel.Models.empty", 1],["Nat.le_of_lt_succ", 1],["Array.get?_eq_get", 1],["dite_congr", 1],["UFModel.rank", 1],["List.getLast_append", 1],["Exists", 1],["Bool.true", 1],["List.length_concat", 1],["UFModel.Models", 1],["Nat.succ", 1],["List.length_cons", 1],["dite_false", 1],["And.imp", 1],["List.singleton_append", 1],["UFModel.push.proof_1", 1],["List.redLength", 1],["Array.toArrayLit", 1],["UFModel.parent", 1],["UFModel.Agrees.empty", 1],["UnionFind.model'", 1],["dif_pos", 1],["List.toArray_data", 1],["le_of_not_lt", 1],["Array.get?_push_eq", 1],["List.toArrayAux_data", 1],["Bool.false", 1],["Array.get_eq_get", 1],["BinaryHeap.size", 1],["Eq.mp", 1],["Classical.em", 1],["Array.ext'", 1],["UFModel.empty", 1],["UFModel.Agrees.mk'", 1],["List.getLast", 1],["List.get?_append", 1],["List.cons_append", 1],["UFModel.Models.push", 1],["le_antisymm", 1],["eq_true", 1],["UnionFind.arr", 1],["eq_of_heq", 1],["List.toArrayAux", 1],["Option.some.inj", 1],["Array.get?_push_lt", 1],["dite_true", 1],["List.append_assoc", 1],["List.get?_concat_length", 1],["Nat.lt_succ_self", 1]]],
["List.get?", 19, [["Eq", 16],["List.get?", 15],["Eq.trans", 10],["Eq.refl", 10],["rfl", 10],["congrArg", 9],["of_eq_true", 8],["eq_self", 7],["PProd.fst", 7],["Option.some", 7],["congrFun", 7],["Functor.map", 6],["Eq.mpr", 5],["List.get?_eq_get", 4],["List.get", 4],["List.cons", 4],["funext", 4],["Fin.mk", 4],["Nat.zero", 3],["List.length", 3],["congr", 3],["Eq.symm", 3],["Option.none", 3],["List.nil", 3],["HEq.refl", 3],["if_pos", 2],["OfNat.ofNat", 2],["True", 2],["List.modifyNth", 2],["Exists", 2],["List.get?_len_le", 2],["Iff.intro", 2],["List.get?_modifyNth", 2],["Nat.succ", 2],["List.cons_append", 2],["ite_congr", 2],["Nat.le_of_succ_le_succ", 2],["List.set_eq_modifyNth", 2],["List.length_cons", 2],["HAppend.hAppend", 2],["propext", 2],["HAdd.hAdd", 2],["List.set", 2],["Exists.intro", 1],["Iff.mp", 1],["le_of_not_lt", 1],["Nat.add_sub_add_right", 1],["List.get?_modifyNth_ne", 1],["List.mem_iff_get", 1],["HSub.hSub", 1],["Nat.succ.inj", 1],["List.get?_modifyNth_eq", 1],["List.get?_set_eq", 1],["ite", 1],["Iff", 1],["instDecidableEqNat", 1],["List.get_of_mem", 1],["mt", 1],["List.Fin.exists_iff", 1],["Array.data", 1],["Array.size", 1],["Not", 1],["eq_false", 1],["List.map", 1],["List.get?_eq_some", 1],["Option.getD", 1],["if_false", 1],["id_map'", 1],["iff_self", 1],["Classical.em", 1],["if_neg", 1],["Nat.add_eq", 1],["Nat.add_zero", 1],["Nat.add", 1],["LT.lt", 1],["Nat.lt_succ_iff", 1],["Decidable.em", 1],["congr_arg", 1],["dif_pos", 1],["Classical.byContradiction", 1],["Option.map", 1],["dif_neg", 1],["not_false_iff", 1]]],
["of_eq_true", 19, [["rfl", 10],["Eq.refl", 9],["Eq", 9],["Fin.mk", 9],["Eq.mpr", 7],["congrArg", 6],["Eq.symm", 6],["List.get", 5],["LT.lt", 5],["Eq.trans", 4],["congrFun", 4],["OfNat.ofNat", 4],["Array.size", 4],["of_eq_true", 4],["Fin.val", 3],["List.get?", 3],["eq_self", 3],["List.get?_eq_get", 3],["Option.some", 3],["List.length", 3],["UnionFind.size", 2],["Fin.isLt", 2],["Bool.true", 2],["HEq.refl", 2],["HSub.hSub", 2],["HAppend.hAppend", 2],["Option.some.inj", 2],["congr", 2],["dif_pos", 2],["HAdd.hAdd", 2],["Classical.em", 2],["id", 2],["Subtype.property", 2],["Decidable.decide", 2],["Nat.lt_succ_self", 2],["UnionFind.rankMaxAux", 2],["dif_neg", 2],["Iff.mpr", 1],["Array.size_swap", 1],["List.get?_append_right", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["eq_true", 1],["UnionFind.rank_lt", 1],["PProd.fst", 1],["WellFoundedRelation.rel", 1],["BinaryHeap.insert.proof_1", 1],["sizeOf_nat", 1],["List.nil", 1],["Nat.succ_pos", 1],["List.cons_ne_nil", 1],["Array.size_push", 1],["List.getLast", 1],["funext", 1],["Nat.add", 1],["Nat.lt_succ_iff", 1],["Nat.le_of_succ_le_succ", 1],["Array.isEqvAux_self", 1],["List.map", 1],["propext", 1],["eq_true_of_decide", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_3", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["Option.map", 1],["Subsingleton.elim", 1],["BinaryHeap.popMaxAux", 1],["Array.isEqvAux.proof_1", 1],["BinaryHeap.size_heapifyUp", 1],["Subtype.val", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Array.isEqv", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["UnionFind.rankMax", 1],["WellFounded.fix_eq", 1],["Eq.mp", 1],["List.length_set", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Array.get", 1],["Option.some_inj", 1],["List.length_append", 1],["List.length_map", 1],["Array.swap", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["eq_of_heq", 1],["dite_congr", 1],["dite_true", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["List.getLast_eq_get", 1],["BinaryHeap.arr", 1],["decide_eq_true_eq", 1],["List.set", 1]]],
["UFNode.rank", 19, [["OfNat.ofNat", 8],["Fin.val", 8],["Fin.mk", 7],["UnionFind.arr", 7],["Eq.refl", 7],["congrArg", 6],["Array.get", 6],["Eq.trans", 5],["Exists.intro", 5],["Eq.mpr", 5],["Eq", 5],["congrFun", 5],["UFNode.rank", 4],["Eq.symm", 4],["Fin.isLt", 4],["Array.size", 4],["LT.lt", 4],["UnionFind.size", 3],["UFNode.parent", 3],["UFModel.Models.size_eq", 3],["UFModel.parent", 3],["eq_true", 3],["UFNode.mk", 3],["eq_self", 3],["And.intro", 3],["dite_congr", 3],["of_eq_true", 3],["dite_true", 3],["LE.le", 2],["UnionFind.rankMaxAux", 2],["UFModel.Models", 2],["congr", 2],["And.right", 2],["UFModel.Models.rank_eq", 2],["Eq.mpr_prop", 2],["UnionFind.model'", 2],["eq_false", 2],["UFModel.rank", 2],["UFModel.push", 2],["UFModel.empty", 2],["Exists", 2],["UFModel.Models.empty", 2],["rfl", 2],["UFModel.Agrees.get_eq", 2],["Nat.le_add_right", 2],["Iff.mpr", 1],["UnionFind.model", 1],["Subtype.val", 1],["UFModel.Agrees.set", 1],["HEq.refl", 1],["Nat.succ_pos", 1],["ite_true", 1],["ite_false", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["Unit.unit", 1],["And", 1],["And.left", 1],["UFModel.Agrees.push", 1],["Bool.true", 1],["implies_congr", 1],["UnionFind.findAux.proof_1", 1],["dite_false", 1],["And.imp", 1],["max", 1],["Ne.symm", 1],["UFModel.push.proof_1", 1],["Ne", 1],["UFNode.value", 1],["UFModel.Agrees.empty", 1],["HAdd.hAdd", 1],["dif_pos", 1],["sorryAx", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["UnionFind.rankMax", 1],["UFModel.Models.parent_eq", 1],["UnionFind.rankMaxAux.proof_1", 1],["ne_eq", 1],["Array.size_set", 1],["Subtype.property", 1],["UFModel.rank_lt", 1],["WellFounded.fix", 1],["Subtype", 1],["Nat.sub_lt_sub_left", 1],["UFModel.Models.push", 1],["UnionFind.rank_lt", 1],["PProd.fst", 1],["UnionFind.findAux.proof_2", 1],["UnionFind.rankMaxAux.proof_2", 1],["Subtype.mk", 1],["eq_of_heq", 1],["PSigma.mk", 1],["lt_irrefl", 1],["ite_congr", 1],["UFModel.Models.parent_eq'", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["dif_neg", 1]]],
["Acc", 19, [["Acc.intro", 6],["Eq.refl", 3],["Eq.symm", 3],["eq_of_heq", 3],["HEq.refl", 3],["PSigma.mk", 2],["Iff.mp", 1],["WellFounded.apply.proof_1", 1],["Nat.find_x", 1],["Nat.find_min", 1],["Prod.lexAccessible.proof_1", 1],["Subtype.property", 1],["PSigma.revLexAccessible.proof_1", 1],["Acc.inv", 1],["Acc.inv.proof_1", 1],["Prod.mk", 1],["PSigma.lexAccessible.proof_1", 1],["InvImage.accessible.proof_1", 1],["TC.accessible.proof_1", 1],["Subrelation.accessible.proof_1", 1],["rfl", 1],["WellFounded.apply", 1],["And.left", 1],["not_lt", 1]]],
["Sum", 18, [["Sum.inl", 3],["Nonempty", 3],["Sum.inr", 2],["inferInstanceAs", 2],["Tactic.instNonemptyDeclCache", 2],["Inhabited.mk", 2],["Sum", 2],["HAppend.hAppend", 2],["Inhabited.default", 2],["Eq", 1],["Prod", 1],["instDecidableEqSum.proof_6", 1],["Nonempty.intro", 1],["Bind.bind", 1],["Except", 1],["Or", 1],["PUnit.unit", 1],["Or.inl", 1],["Tactic.instNonemptyCache.proof_1", 1],["Iff.intro", 1],["Decidable.isFalse", 1],["Decidable.isTrue", 1],["Or.inr", 1],["Task", 1],["instDecidableEqSum.proof_2", 1],["instDecidableEqSum.proof_4", 1],["ForInStep", 1],["ToString.mk", 1],["instDecidableEqSum.proof_5", 1],["instDecidableEqSum.proof_3", 1],["instDecidableEqSum.proof_1", 1],["Decidable", 1],["Prod.mk", 1],["reprArg", 1],["Pure.pure", 1],["Tactic.Cache", 1],["ToString.toString", 1],["Tactic.Cache.mk", 1],["addParenHeuristic", 1],["ForIn.forIn", 1],["ForInStep.yield", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["dite", 1],["liftM", 1]]],
["Int.subNatNat", 18, [["Eq", 7],["rfl", 7],["Eq.refl", 6],["Int.subNatNat", 6],["Eq.mpr", 5],["OfNat.ofNat", 5],["Eq.symm", 4],["Int.ofNat", 4],["HSub.hSub", 4],["Int.ofNat_zero", 3],["HAdd.hAdd", 3],["Int.negSucc", 2],["congr", 2],["Nat.sub_self", 2],["Nat.succ", 2],["Int.subNatNat_elim", 2],["congrFun", 2],["Int.subNatNat_of_sub_eq_zero", 2],["Eq.trans", 2],["congrArg", 2],["Unit.unit", 2],["Int.add_left_comm", 1],["Int.ofNat_sub", 1],["Nat.le_refl", 1],["Int.subNatNat_add_right", 1],["Nat.sub_add_cancel", 1],["Int.add_right_neg", 1],["Int.negOfNat", 1],["Int.add_zero", 1],["Int.neg_add", 1],["Nat.add_comm", 1],["eq_self", 1],["Nat.zero_mul", 1],["Nat.sub_pos_of_lt", 1],["Neg.neg", 1],["Int.zero_mul", 1],["Nat.add_assoc", 1],["Int.ofNat_add", 1],["Int.subNatNat_add_left", 1],["Int.sub_nat_self", 1],["HMul.hMul", 1],["Int.subNatNat_add_add", 1],["Int.zero_add", 1],["Nat.zero_eq", 1],["Int.negSucc_ofNat_coe", 1],["Nat.succ_pred_eq_of_pos", 1],["Nat.sub_eq_zero_of_le", 1],["Nat.pred", 1],["Int.sub_eq_add_neg", 1],["Int.add_assoc", 1],["Int.subNatNat_of_sub_eq_succ", 1],["of_eq_true", 1]]],
["GT.gt", 18, [["OfNat.ofNat", 4],["GT.gt", 4],["absurd", 3],["Eq", 3],["Or.inl", 2],["Or", 2],["rfl", 2],["Trans.mk", 2],["Or.inr", 2],["Eq.mpr", 2],["Eq.refl", 2],["Bool.true", 1],["Nat.pos_pow_of_pos", 1],["Classical.em", 1],["le_or_lt", 1],["BEq.beq", 1],["List.cons_ne_nil", 1],["lt_of_lt_of_le", 1],["ne_of_gt", 1],["congr", 1],["Eq.trans", 1],["Nat.le_add_right", 1],["Nat.one_pos", 1],["List.getLast_singleton", 1],["instTransGeToLEGtToLT.proof_1", 1],["HAdd.hAdd", 1],["Nat.Linear.Var.denote.go", 1],["Eq.symm", 1],["lt_irrefl", 1],["lt_trichotomy", 1],["Nat.mul_one", 1],["Fin.mk", 1],["lt_of_le_of_lt", 1],["lt_trans", 1],["Nat.add_eq", 1],["decide_eq_true_eq", 1],["List.getLast_cons", 1],["List.getLast", 1],["Iff.intro", 1],["Nat.zero_lt_succ", 1],["Ne", 1],["cond", 1],["id", 1],["List.length_pos_of_ne_nil", 1],["Eq.mp", 1],["Nat.add_comm", 1],["Nat.Linear.Poly.denote", 1],["HSub.hSub", 1],["List.get", 1],["eq_of_beq", 1],["congrFun", 1],["Nat.sub_lt", 1],["gt_of_ge_of_gt", 1],["Nat.Linear.fixedVar", 1],["cond_true", 1],["Nat.lt_or_ge", 1],["Decidable.decide", 1],["Nat.le_trans", 1],["Nat.lt_of_succ_le", 1],["HMul.hMul", 1],["PProd.fst", 1],["congrArg", 1],["ne_of_lt", 1],["List.length", 1],["instTransGtToLTGeToLE.proof_1", 1],["List.nil", 1],["List.cons", 1],["gt_of_gt_of_ge", 1],["Nat.Linear.Var.denote", 1],["Nat.succ_pos", 1],["LT.lt", 1],["List.get_singleton", 1],["Nat.add", 1],["lt_or_gt_of_ne", 1],["Nat.mul_eq", 1],["Nat.not_lt_eq", 1],["Unit.unit", 1],["beq_self_eq_true", 1],["Nat.Linear.Poly.isNonZero", 1],["System.Platform.numBits", 1]]],
["ExceptT", 18, [["ExceptT.mk", 10],["Pure.pure", 7],["Except.ok", 6],["Except", 6],["Bind.bind", 5],["Except.error", 4],["MonadExceptOf.mk", 2],["ExceptT.run", 2],["Functor.map", 2],["MonadLift.mk", 2],["Eq.refl", 1],["of_eq_true", 1],["MonadControl.mk", 1],["Eq.trans", 1],["Option.some", 1],["ExceptT.instLawfulMonadExceptTInstMonadExceptT.proof_1", 1],["Monad.mk", 1],["congr", 1],["Inhabited.mk", 1],["ExceptT.tryCatch", 1],["MonadExcept.throw", 1],["LawfulMonad.pure_bind", 1],["Eq.symm", 1],["ExceptT.bindCont", 1],["Eq.mpr", 1],["MonadFinally.mk", 1],["ExceptT.run_pure", 1],["ExceptT.ext", 1],["Option.none", 1],["Prod.mk", 1],["Prod", 1],["ExceptT.bind_pure_comp", 1],["MonadFunctor.mk", 1],["MonadFinally.tryFinally'", 1],["LawfulMonad.mk", 1],["eq_self", 1],["congrFun", 1],["LawfulMonad.bind_assoc", 1],["bind_congr", 1],["throwThe", 1],["ExceptT.lift", 1],["Except.mapError", 1],["congrArg", 1],["Inhabited.default", 1],["funext", 1],["ExceptT.run_bind", 1],["liftM", 1],["rfl", 1],["tryCatchThe", 1],["Eq", 1]]],
["Option.map", 18, [["Eq", 11],["Eq.symm", 10],["Eq.refl", 9],["Eq.trans", 8],["of_eq_true", 8],["congrArg", 8],["Option.map_some'", 8],["Option.map_none'", 7],["Option.none", 7],["rfl", 7],["congr", 7],["eq_self", 7],["Option.map", 7],["congrFun", 6],["Option.some", 6],["id", 4],["Option.bind", 3],["funext", 3],["id_eq", 3],["Option.some_bind", 3],["Option.none_bind", 3],["propext", 2],["Option.mem_def", 2],["eq_false'", 2],["Option.map_map", 2],["Iff", 2],["Function.comp_apply", 1],["exists_false", 1],["Iff.mp", 1],["iff_self", 1],["List.map", 1],["Option.map_id", 1],["exists_eq_left'", 1],["List.get?", 1],["eq_true_of_decide", 1],["Function.comp", 1],["false_and", 1],["Option.some.inj", 1],["Eq.mpr", 1],["eq_false", 1],["PProd.fst", 1],["Iff.mpr", 1],["HEq.refl", 1],["Exists", 1],["Unit.unit", 1],["And", 1],["Option.some.injEq", 1],["False", 1],["Bool.true", 1]]],
["System.FilePath", 18, [["System.FilePath.mk", 9],["System.FilePath.toString", 5],["Eq", 4],["System.FilePath.pathSeparator", 3],["HAppend.hAppend", 3],["ite", 3],["OfNat.ofNat", 3],["Bool.true", 3],["Functor.map", 2],["BEq.beq", 2],["System.FilePath.pathSeparators", 2],["System.FilePath.join", 2],["System.FilePath", 2],["Unit.unit", 2],["List.contains", 2],["System.FilePath.isAbsolute", 1],["mixHash", 1],["List.map", 1],["Hashable.mk", 1],["ToString.mk", 1],["System.FilePath.withFileName", 1],["not", 1],["System.SearchPath.separator", 1],["Decidable", 1],["Coe.mk", 1],["Inhabited.mk", 1],["System.FilePath.parent", 1],["HDiv.mk", 1],["List.length", 1],["List.nil", 1],["Inhabited.default", 1],["HDiv.hDiv", 1],["and", 1],["repr", 1],["Div.mk", 1],["System.FilePath.fileStem", 1],["UInt64", 1],["Prod.snd", 1],["dite", 1],["rfl", 1],["Decidable.isFalse", 1],["Hashable.hash", 1],["Decidable.isTrue", 1],["List.toArray", 1]]],
["max", 18, [["Eq.mpr", 7],["max", 7],["congrArg", 6],["LT.lt", 5],["Eq", 4],["Eq.trans", 4],["congrFun", 4],["of_eq_true", 4],["LE.le", 3],["eq_max", 3],["if_pos", 3],["le_max_left", 3],["le_of_lt", 3],["Eq.symm", 3],["max_eq_left", 3],["if_neg", 3],["max_eq_right", 3],["le_refl", 3],["le_max_right", 3],["max_le", 3],["dite", 3],["instDecidableLtToLTToPreorderToPartialOrder", 3],["Eq.refl", 3],["eq_self", 2],["eq_true", 2],["UnionFind.rankMaxAux", 2],["max_comm", 2],["Fin.val", 2],["UnionFind.size", 2],["HSub.hSub", 2],["Iff.mpr", 2],["HAdd.hAdd", 2],["max_assoc", 1],["dif_pos", 1],["ite_self", 1],["le_of_not_lt", 1],["le_antisymm", 1],["le_total", 1],["le_trans", 1],["UnionFind.rank_lt", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["Subtype.property", 1],["Or.elim", 1],["List.repeat'", 1],["Nat.sub_add_cancel", 1],["Subtype.val", 1],["List.length_append", 1],["max_eq_left_of_lt", 1],["List.length", 1],["Fin.isLt", 1],["le_or_gt", 1],["Nat.succ_pos", 1],["Fin.mk", 1],["Nat.sub_eq_zero_iff_le", 1],["Classical.em", 1],["List.length_repeat'", 1],["UnionFind.lt_rankMax", 1],["Nat.zero_add", 1],["Nat.sub_add_eq_max", 1],["Nat.lt_succ_iff", 1],["rfl", 1],["dif_neg", 1],["UnionFind.rankMax", 1],["OfNat.ofNat", 1],["left_comm", 1]]],
["Ring.gsmul", 18, [["congrArg", 15],["SubNegMonoid.gsmul_neg'", 5],["SubNegMonoid.gsmul_succ'", 5],["SubNegMonoid.gsmul_zero'", 5],["UInt8.val", 3],["UInt64.mk", 3],["USize.mk", 3],["UInt32.mk", 3],["UInt64.val", 3],["USize.val", 3],["UInt16.val", 3],["UInt16.mk", 3],["UInt32.val", 3],["UInt8.mk", 3]]],
["UnionFind.arr", 17, [["Fin.val", 9],["UnionFind.arr", 9],["Array.get", 7],["Eq.refl", 7],["Eq.mpr", 6],["LT.lt", 6],["UnionFind.size", 6],["Fin.isLt", 6],["OfNat.ofNat", 5],["Array.size", 5],["congrArg", 5],["Fin.mk", 5],["UFNode.rank", 4],["Eq", 4],["UFNode.parent", 4],["Eq.trans", 4],["congrFun", 4],["UnionFind.model'", 3],["eq_true", 3],["Exists.intro", 3],["Eq.symm", 3],["LE.le", 2],["And", 2],["UFModel.Models", 2],["UnionFind.rankMaxAux", 2],["of_eq_true", 2],["UFModel.Models.rank_eq", 2],["UFModel.Models.parent_eq'", 2],["dite_congr", 2],["Exists", 2],["UFNode.mk", 2],["UFModel.parent", 2],["UFModel.Models.size_eq", 2],["Eq.mpr_prop", 2],["dite_true", 2],["Bool.true", 2],["eq_true_of_decide", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["UFModel.Models.parent_eq", 1],["ne_eq", 1],["UnionFind.rankMaxAux.proof_1", 1],["UnionFind.findAux.proof_1", 1],["Ne", 1],["Array.size_set", 1],["max", 1],["eq_self", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["congr", 1],["WellFounded.fix", 1],["Array.push", 1],["UnionFind.lt_rankMax'", 1],["Subtype.val", 1],["UFModel.Models.push", 1],["UFModel.rank_lt", 1],["Classical.em", 1],["Nat.le_add_right", 1],["Subtype", 1],["UnionFind.findAux.proof_2", 1],["Subtype.property", 1],["UnionFind.rank_lt", 1],["UnionFind.rankMaxAux.proof_2", 1],["PProd.fst", 1],["UnionFind.model", 1],["Subtype.mk", 1],["And.intro", 1],["eq_of_heq", 1],["UFModel.rank", 1],["Nat.succ_pos", 1],["UFNode.value", 1],["HEq.refl", 1],["PSigma.mk", 1],["UnionFind.lt_rankMax", 1],["UnionFind.findAux", 1],["HAdd.hAdd", 1],["dite", 1],["Nat.lt_succ_iff", 1],["rfl", 1],["Unit.unit", 1],["dif_neg", 1],["PSigma", 1],["implies_congr", 1],["Iff.mpr", 1],["dif_pos", 1],["Sigma", 1]]],
["Array.push", 17, [["Eq", 9],["congrArg", 6],["Eq.symm", 6],["Array.push", 5],["Fin.mk", 5],["Array.size", 5],["Array.data", 5],["Eq.trans", 5],["congrFun", 5],["Eq.refl", 4],["OfNat.ofNat", 4],["eq_self", 4],["of_eq_true", 4],["List.nil", 4],["List.concat_eq_append", 3],["Option.some", 3],["HAppend.hAppend", 3],["Array.size_push", 3],["Eq.mpr", 3],["List.cons", 3],["Array.mk", 3],["rfl", 3],["HAdd.hAdd", 2],["Array.get", 2],["UFModel.push", 2],["Array.get?_eq_get?", 2],["sorryAx", 2],["Array.get?", 2],["List.toArray", 2],["UFNode.mk", 2],["BinaryHeap.arr", 2],["Exists.intro", 2],["LT.lt", 2],["Fin.val", 2],["Nat.le_add_right", 2],["List.append_nil", 1],["dite_false", 1],["Bool.false", 1],["Nat.le_of_lt_succ", 1],["Array.mkEmpty", 1],["UFModel.rank", 1],["dite_congr", 1],["Exists", 1],["And.imp", 1],["Array.get?_push_lt", 1],["Array.get_eq_get", 1],["BinaryHeap.size", 1],["List.toArrayAux_data", 1],["List.toArray_data", 1],["Eq.mp", 1],["Array.ext'", 1],["List.singleton_append", 1],["List.get?_append", 1],["UFModel.empty", 1],["le_antisymm", 1],["List.toArrayAux", 1],["UFModel.push.proof_1", 1],["UFModel.Agrees.mk'", 1],["congr", 1],["List.length_concat", 1],["eq_true", 1],["UFModel.Models.push", 1],["UFModel.Models", 1],["UFModel.parent", 1],["Option.some.inj", 1],["Array.toArrayLit", 1],["UnionFind.arr", 1],["eq_false", 1],["List.redLength", 1],["PProd.fst", 1],["UFModel.Agrees.empty", 1],["BinaryHeap.insert.proof_1", 1],["Classical.em", 1],["And.intro", 1],["List.get?_eq_get", 1],["eq_of_heq", 1],["UnionFind.model'", 1],["UFModel.Models.empty", 1],["UFModel.Agrees.push", 1],["HEq.refl", 1],["dif_pos", 1],["dite_true", 1],["le_of_not_lt", 1],["List.append_assoc", 1],["Nat.lt_succ_self", 1],["List.get?_concat_length", 1],["Array.get?_push_eq", 1],["lt_irrefl", 1],["Array.get?_eq_get", 1],["dif_neg", 1],["Bool.true", 1],["BinaryHeap.size_heapifyUp", 1]]],
["Nat.le_step", 17, [["Eq", 13],["HMod.hMod", 13],["Fin.mk", 11],["Fin.val", 10],["Eq.refl", 10],["Nat.mod_lt", 10],["congrArg", 8],["Fin.size_positive", 8],["congrFun", 7],["rfl", 7],["HAdd.hAdd", 7],["Eq.trans", 7],["eq_self", 6],["of_eq_true", 6],["Eq.mpr", 6],["OfNat.ofNat", 6],["Eq.symm", 6],["congr", 5],["Decidable.em", 4],["HMul.hMul", 4],["Fin.size_positive'", 3],["List.cons", 3],["List.length", 3],["Nat.succ", 3],["Nat.toDigitsCore", 3],["ite_congr", 3],["HDiv.hDiv", 3],["Nat.digitChar", 3],["Fin.add_def", 2],["Nat.mod_eq_of_lt", 2],["Fin.eq_of_val_eq", 2],["if_false", 2],["LT.lt", 2],["eq_false", 2],["Fin.mul_def", 2],["Fin.ofNat'", 2],["if_true", 2],["Bool.true", 1],["Fin.ext", 1],["Nat.add_comm", 1],["Eq.mp", 1],["Nat.add_mod_mod", 1],["HSub.hSub", 1],["Fin.one_val", 1],["Nat.mul_mod", 1],["eq_true", 1],["Fin.ofNat'_succ", 1],["eq_true_of_decide", 1],["zero_lt_of_lt", 1],["Subsingleton.allEq", 1],["Array.size", 1],["Nat.succ_mul", 1],["Nat.lt_irrefl", 1],["Fin.nsmuls_eq", 1],["Array.size_swap", 1],["Nat.mod_add_mod", 1],["trivial", 1],["Fin.zero_def", 1],["List.nil", 1],["Array.swap", 1],["Fin.mk.injEq", 1],["Nat.to_digits_core_length", 1],["False.elim", 1],["MonoidWithZero.zero_mul", 1],["Nat.lt_succ_self", 1],["LE.le", 1],["of_decide_eq_true", 1],["Nat.lt_trans", 1],["implies_congr", 1],["Nat.zero_mod", 1],["Nat.zero_le", 1]]],
["Nat.lt_trans", 17, [["Eq", 13],["HMod.hMod", 13],["Fin.mk", 11],["Fin.val", 10],["Eq.refl", 10],["Nat.mod_lt", 10],["congrArg", 8],["Fin.size_positive", 8],["congrFun", 7],["rfl", 7],["HAdd.hAdd", 7],["Eq.trans", 7],["eq_self", 6],["of_eq_true", 6],["Eq.mpr", 6],["OfNat.ofNat", 6],["Eq.symm", 6],["congr", 5],["Decidable.em", 4],["HMul.hMul", 4],["Fin.size_positive'", 3],["List.cons", 3],["List.length", 3],["Nat.succ", 3],["Nat.toDigitsCore", 3],["ite_congr", 3],["HDiv.hDiv", 3],["Nat.digitChar", 3],["Fin.add_def", 2],["Nat.mod_eq_of_lt", 2],["Fin.eq_of_val_eq", 2],["if_false", 2],["LT.lt", 2],["eq_false", 2],["Fin.mul_def", 2],["Fin.ofNat'", 2],["if_true", 2],["Bool.true", 1],["Fin.ext", 1],["Nat.add_comm", 1],["Eq.mp", 1],["Nat.add_mod_mod", 1],["HSub.hSub", 1],["Fin.one_val", 1],["Nat.mul_mod", 1],["eq_true", 1],["Fin.ofNat'_succ", 1],["eq_true_of_decide", 1],["zero_lt_of_lt", 1],["Subsingleton.allEq", 1],["Array.size", 1],["Nat.succ_mul", 1],["Nat.lt_irrefl", 1],["Fin.nsmuls_eq", 1],["Array.size_swap", 1],["Nat.mod_add_mod", 1],["trivial", 1],["Fin.zero_def", 1],["List.nil", 1],["Array.swap", 1],["Fin.mk.injEq", 1],["Nat.to_digits_core_length", 1],["False.elim", 1],["MonoidWithZero.zero_mul", 1],["Nat.lt_succ_self", 1],["LE.le", 1],["of_decide_eq_true", 1],["Nat.lt_trans", 1],["implies_congr", 1],["Nat.zero_mod", 1],["Nat.zero_le", 1]]],
["List.disjoint", 17, [["propext", 5],["Iff", 4],["of_eq_true", 4],["iff_self", 4],["Eq.refl", 4],["False", 3],["congrFun", 3],["List.disjoint", 3],["Not", 3],["congrArg", 3],["Eq.trans", 3],["Membership.mem", 3],["List.disjoint_append_left", 3],["List.disjoint_comm", 3],["implies_congr", 2],["forall_congr", 2],["Eq.mpr", 2],["List.nil", 2],["List.subset_cons", 2],["Iff.mp", 2],["List.singleton_disjoint", 2],["Iff.intro", 2],["And", 2],["or_imp_distrib", 1],["And.right", 1],["forall_and_distrib", 1],["List.mem_singleton", 1],["List.not_mem_nil", 1],["List.disjoint_nil_left", 1],["List.cons", 1],["Eq.symm", 1],["List.disjoint_of_subset_right", 1],["Iff.rfl", 1],["Not.elim", 1],["rfl", 1],["Iff.trans", 1],["List.mem_append", 1],["And.left", 1],["List.disjoint_of_subset_left", 1],["List.disjoint_symm", 1],["forall_eq", 1]]],
["Int.cast", 16, [["rfl", 13],["Int.cast_ofNat", 3],["OfNat.ofNat", 2],["Nat.cast", 2],["Int.cast", 2],["Eq.refl", 2],["Eq.mpr", 2],["Eq", 2],["AddGroupWithOne.intCast_ofNat", 1],["Nat.cast_zero", 1],["AddGroupWithOne.intCast_negSucc", 1],["Nat.cast_one", 1]]],
["Hashable", 16, [["Hashable.mk", 15],["OfNat.ofNat", 6],["UInt64", 5],["mixHash", 4],["Hashable.hash", 4],["Unit.unit", 2],["UInt64.ofNat", 2],["HMul.hMul", 1],["HAdd.hAdd", 1],["UInt8.toUInt64", 1],["UInt16.toUInt64", 1],["List.foldl", 1],["Nat.toUInt64", 1],["Fin.val", 1],["UInt32.toUInt64", 1],["USize.toUInt64", 1]]],
["UFNode.parent", 16, [["Fin.val", 7],["UnionFind.arr", 6],["Eq.refl", 6],["Array.size", 5],["OfNat.ofNat", 5],["Eq.trans", 5],["Eq", 5],["Exists.intro", 5],["congrFun", 4],["Array.get", 4],["UFModel.parent", 4],["congrArg", 4],["Eq.symm", 4],["UFNode.parent", 4],["Fin.mk", 3],["of_eq_true", 3],["eq_true", 3],["And.intro", 3],["UnionFind.model'", 3],["UFModel.push", 2],["Exists", 2],["And.left", 2],["eq_false", 2],["UFModel.Models.parent_eq", 2],["eq_self", 2],["Nat.le_add_right", 2],["UFModel.empty", 2],["UFModel.Models.size_eq", 2],["UFModel.Models.parent_eq'", 2],["UFModel.Models", 2],["Eq.mpr", 2],["And", 2],["dite_true", 2],["Fin.isLt", 2],["UFNode.mk", 2],["UFModel.Models.empty", 2],["UnionFind.size", 2],["rfl", 2],["UFModel.Agrees.get_eq", 2],["LT.lt", 2],["congr", 2],["dite_congr", 2],["UnionFind.rank_lt", 1],["Ne.symm", 1],["UFNode.rank", 1],["Ne", 1],["Eq.mpr_prop", 1],["Nat.sub_lt_sub_left", 1],["ite_false", 1],["eq_true_of_decide", 1],["WellFounded.fix", 1],["Array.push", 1],["lt_irrefl", 1],["UFModel.Models.push", 1],["UFModel.rank_lt", 1],["UFModel.push.proof_1", 1],["Sigma", 1],["And.right", 1],["UnionFind.findAux", 1],["UFModel.Models.rank_eq", 1],["UnionFind.findAux.proof_2", 1],["ite_congr", 1],["dite_false", 1],["UnionFind.model", 1],["eq_of_heq", 1],["UFModel.Agrees.set", 1],["UFModel.rank", 1],["HEq.refl", 1],["And.imp", 1],["PSigma.mk", 1],["PSigma", 1],["ite_true", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.push", 1],["UFModel.Agrees.empty", 1],["dite", 1],["HAdd.hAdd", 1],["ne_eq", 1],["implies_congr", 1],["Bool.true", 1],["UnionFind.findAux.proof_1", 1]]],
["UFModel.rank", 16, [["Eq.refl", 9],["Eq", 8],["OfNat.ofNat", 7],["Fin.val", 7],["Eq.symm", 6],["congrFun", 6],["congrArg", 6],["Eq.trans", 6],["UFModel.rank", 5],["UFModel.parent", 5],["Eq.mpr", 5],["Exists.intro", 5],["Fin.mk", 4],["eq_self", 4],["LT.lt", 4],["Classical.em", 3],["congr", 3],["eq_false", 3],["dite_congr", 3],["UnionFind.arr", 3],["of_eq_true", 3],["ne_eq", 3],["eq_true", 3],["Array.size", 3],["Not", 3],["UFModel.Models.size_eq", 3],["And.intro", 3],["dite_true", 3],["implies_congr", 3],["Exists", 2],["UFModel.rank_lt", 2],["Array.get", 2],["UFModel.push", 2],["if_pos", 2],["Fin.isLt", 2],["ite_congr", 2],["UFModel.Models", 2],["Nat.le_add_right", 2],["And.right", 2],["dite", 2],["UFNode.mk", 2],["UFModel.Models.empty", 2],["UFModel.empty", 2],["ite", 2],["UFModel.Agrees.get_eq", 2],["And", 2],["rfl", 2],["HAdd.hAdd", 2],["if_neg", 2],["UFNode.parent", 2],["Bool.true", 1],["WellFounded.fix", 1],["Array.push", 1],["lt_of_lt_of_le", 1],["false_and", 1],["UFModel.push.proof_1", 1],["UFModel.Models.push", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["UFModel.Models.rank_eq", 1],["And.imp", 1],["ite_true", 1],["And.left", 1],["UFModel.Agrees.set", 1],["UFModel.Agrees.empty", 1],["UnionFind.findAux.proof_2", 1],["UFModel.Models.parent_eq", 1],["UnionFind.model", 1],["eq_of_heq", 1],["Ne.symm", 1],["UnionFind.model'", 1],["UnionFind.size", 1],["UnionFind.findAux.proof_1", 1],["HEq.refl", 1],["PSigma.mk", 1],["False.elim", 1],["true_and", 1],["lt_of_le_of_ne", 1],["ite_false", 1],["Fin", 1],["Eq.mp", 1],["Nat.lt_succ_self", 1],["and_true", 1],["Eq.mpr_prop", 1],["dif_neg", 1],["dif_pos", 1],["lt_irrefl", 1],["sorryAx", 1]]],
["Function.update", 16, [["Eq", 5],["funext", 4],["Eq.trans", 3],["Function.update_noteq", 3],["Eq.symm", 3],["rfl", 3],["Decidable.em", 3],["Eq.refl", 3],["eq_false", 2],["dif_pos", 2],["congrArg", 2],["Function.update_same", 2],["And.intro", 2],["of_eq_true", 2],["eq_self", 2],["Function.funext_iff", 2],["dif_neg", 2],["congr", 2],["Iff.trans", 2],["Iff.mpr", 2],["Function.forall_update_iff", 2],["Function.update_eq_iff", 1],["dite_false", 1],["Eq.mpr_prop", 1],["ne_eq", 1],["Function.eq_update_iff", 1],["Function.update_comp_eq_of_injective'", 1],["congrFun", 1],["Eq.mpr", 1],["True.intro", 1],["dite_true", 1],["dite", 1],["dite_congr", 1],["Function.injective.ne", 1],["Function.update_comp_eq_of_forall_ne'", 1],["Function.apply_update", 1],["Not", 1],["eq_true_of_decide", 1],["Bool.true", 1],["Iff.intro", 1]]],
["UInt32.val", 16, [["UInt32.val", 8],["congrArg", 7],["UInt32.mk", 6],["rfl", 6],["Fin.val", 3],["Eq", 3],["Eq.refl", 2],["Bool.true", 2],["of_decide_eq_true", 1],["Nat.lt_trans", 1],["Or.inl", 1],["of_eq_true", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["UInt8.val", 1],["Nat.Linear.ExprCnstr.mk", 1],["OfNat.ofNat", 1],["Nat.isValidChar", 1],["AddMonoid.nsmul_zero'", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["UInt32.mk.sizeOf_spec", 1],["UInt32.ofNat", 1],["SubNegMonoid.gsmul_neg'", 1],["Eq.trans", 1],["List.nil", 1],["List.cons", 1],["UInt32.val_eq_of_lt", 1],["Eq.symm", 1],["SubNegMonoid.gsmul_zero'", 1],["Nat.Linear.Expr.add", 1],["Fin.isLt", 1],["Nat.Linear.Expr.num", 1],["Fin.val_eq_of_lt", 1],["SubNegMonoid.gsmul_succ'", 1],["Eq.mpr", 1],["UInt8.toChar_aux", 1],["AddMonoid.nsmul_succ'", 1]]],
["UFModel.parent", 16, [["Eq", 7],["Fin.val", 7],["Eq.refl", 7],["OfNat.ofNat", 6],["Eq.symm", 6],["congrFun", 5],["UFModel.parent", 5],["congrArg", 5],["Eq.trans", 5],["Exists.intro", 5],["UFModel.rank", 4],["Eq.mpr", 4],["eq_self", 3],["Not", 3],["Classical.em", 3],["Fin.mk", 3],["ne_eq", 3],["congr", 3],["Array.size", 3],["And.intro", 3],["eq_false", 3],["UnionFind.arr", 3],["LT.lt", 3],["implies_congr", 3],["HAdd.hAdd", 2],["if_pos", 2],["UFModel.push", 2],["dite_congr", 2],["UFModel.empty", 2],["ite", 2],["eq_true", 2],["UFModel.rank_lt", 2],["Array.get", 2],["And", 2],["Exists", 2],["And.left", 2],["ite_congr", 2],["UFModel.Models", 2],["dite_true", 2],["if_neg", 2],["UFNode.mk", 2],["UFModel.Models.empty", 2],["UFModel.Agrees.get_eq", 2],["UFModel.Models.parent_eq", 2],["Nat.le_add_right", 2],["dite", 2],["rfl", 2],["UFNode.parent", 2],["of_eq_true", 2],["UFModel.Models.size_eq", 2],["Bool.true", 1],["Fin.isLt", 1],["false_and", 1],["And.imp", 1],["UFModel.Models.push", 1],["ite_true", 1],["UFModel.Agrees.set", 1],["ite_false", 1],["UFModel.Agrees.empty", 1],["And.right", 1],["UnionFind.model'", 1],["lt_of_lt_of_le", 1],["Ne.symm", 1],["dif_pos", 1],["UnionFind.findAux.proof_2", 1],["UnionFind.model", 1],["eq_of_heq", 1],["UnionFind.findAux.proof_1", 1],["lt_of_le_of_ne", 1],["UnionFind.size", 1],["lt_irrefl", 1],["HEq.refl", 1],["PSigma.mk", 1],["False.elim", 1],["true_and", 1],["Fin", 1],["Eq.mp", 1],["and_true", 1],["UFModel.push.proof_1", 1],["Nat.lt_succ_self", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["dif_neg", 1],["sorryAx", 1],["WellFounded.fix", 1],["Array.push", 1]]],
["OfNat", 16, [["OfNat.mk", 14],["Int.ofNat", 2],["Nat.cast", 1],["USize.ofNat", 1],["UInt64.ofNat", 1],["UInt16.ofNat", 1],["One.one", 1],["inferInstanceAs", 1],["Zero.zero", 1],["UInt32.ofNat", 1],["OfNat", 1],["Float.ofNat", 1],["Fin.ofNat'", 1],["UInt8.ofNat", 1],["Fin.ofNat", 1],["Fin.size_positive'", 1]]],
["Array.set", 15, [["Array.size_set", 8],["congrArg", 8],["Fin.val", 8],["Eq.mpr", 7],["LT.lt", 6],["Eq.refl", 6],["eq_self", 5],["of_eq_true", 5],["Fin.mk", 5],["Eq.trans", 5],["Eq", 5],["Array.size", 4],["Fin.isLt", 4],["Eq.symm", 4],["BinaryHeap.arr", 4],["congrFun", 3],["Array.set", 3],["Array.data", 3],["congr", 2],["BinaryHeap.size_pos_of_max", 2],["eq_false", 2],["Array.get?_eq_get?", 2],["Array.mk", 2],["List.set", 2],["Option.some", 2],["OfNat.ofNat", 2],["Array.get", 2],["List.get?_set_ne", 1],["Ne.symm", 1],["ne_eq", 1],["ite_false", 1],["UFNode.rank", 1],["List.get?", 1],["if_pos", 1],["List.length_set", 1],["UFModel.Agrees.set", 1],["Array.get?_set_ne", 1],["unsafeCast", 1],["UFModel.Agrees.mk'", 1],["Array.get?", 1],["UFModel.parent", 1],["UFNode.value", 1],["eq_true_of_decide", 1],["Not", 1],["And.right", 1],["ite_congr", 1],["Array.get?_set_eq", 1],["Nat.lt_trans", 1],["UnionFind.arr", 1],["List.get?_set_of_lt", 1],["And.intro", 1],["eq_of_heq", 1],["UFNode.mk", 1],["HEq.refl", 1],["Classical.em", 1],["UFModel.Agrees.get_eq", 1],["Array.size_swap", 1],["Nat.lt_succ_self", 1],["Unit.unit", 1],["rfl", 1],["Array.swap", 1],["ite_true", 1],["Bool.true", 1],["And.left", 1],["if_neg", 1]]],
["Equiv.toFun", 15, [["rfl", 5],["Eq", 2],["eq_self", 2],["Equiv.right_inv", 2],["Eq.trans", 2],["LawfulFunctor.id_map", 2],["congrArg", 2],["Equiv.left_inv", 2],["of_eq_true", 2],["congrFun", 2],["Functor.map_map", 2],["funext", 2],["Equiv.symm", 2],["Functor.map", 2],["Equiv.toFun", 2],["Equiv.apply_symm_apply", 1],["Equiv.symm_apply_apply", 1],["Equiv.self_comp_symm", 1],["Equiv.symm_comp_self", 1],["Function.RightInverse.comp", 1],["Function.LeftInverse.comp", 1]]],
["Int.natAbs", 15, [["rfl", 12],["Int.natAbs", 10],["Eq", 7],["Eq.refl", 4],["Int.ofNat", 4],["Nat.cast", 3],["Eq.mpr", 3],["Eq.symm", 3],["Neg.neg", 3],["OfNat.ofNat", 2],["HMul.hMul", 2],["Int.eq_ofNat_of_zero_le", 2],["Unit.unit", 2],["Int.eq_natAbs_of_zero_le", 1],["HSub.hSub", 1],["Nat.eq_zero_or_pos", 1],["Or.inr", 1],["absurd", 1],["Or", 1],["mt", 1],["Or.elim", 1],["LE.le", 1],["Or.inl", 1],["Int.sign", 1],["le_trans", 1],["Int.eq_zero_ofNatAbs_eq_zero", 1],["HAdd.hAdd", 1],["Int.natAbs_neg", 1],["Nat.zero_le", 1],["le_total", 1],["Int.le_refl", 1],["Int.ofNat_zero_le", 1],["eq_of_heq", 1],["Int.negSucc", 1],["Int.neg_eq_neg_one_mul", 1],["HEq.refl", 1],["Int.natAbs_of_nonneg", 1],["not_lt_of_ge", 1],["Int.one_mul", 1],["Int.neg_succ_lt_zero", 1],["Int.neg_nonneg_of_nonpos", 1],["Or.resolve_left", 1]]],
["USize.val", 15, [["USize.val", 7],["congrArg", 7],["USize.mk", 6],["rfl", 6],["Eq", 3],["Eq.refl", 1],["Fin.modn_lt", 1],["USize.mk.sizeOf_spec", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["USize.toNat", 1],["Nat.Linear.ExprCnstr.mk", 1],["OfNat.ofNat", 1],["AddMonoid.nsmul_zero'", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["Fin.sizeOf", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Nat.Linear.Expr.add", 1],["SubNegMonoid.gsmul_neg'", 1],["HMod.hMod", 1],["List.nil", 1],["List.cons", 1],["SubNegMonoid.gsmul_succ'", 1],["Eq.symm", 1],["SubNegMonoid.gsmul_zero'", 1],["LT.lt", 1],["Nat.Linear.Expr.num", 1],["Fin.val_eq_of_lt", 1],["Fin.val", 1],["AddMonoid.nsmul_succ'", 1],["of_eq_true", 1],["Bool.true", 1]]],
["PProd.snd", 15, [["eq_self", 6],["Eq", 6],["Eq.trans", 6],["of_eq_true", 6],["congr", 6],["congrArg", 6],["congrFun", 6],["Eq.refl", 6],["Eq.symm", 5],["OfNat.ofNat", 5],["Nat.Linear.Expr.denote", 5],["Bool.true", 5],["cond_false", 4],["cond", 4],["Nat.add_comm", 4],["Classical.em", 4],["Bool.of_not_eq_true", 4],["cond_true", 4],["HMul.hMul", 4],["HAdd.hAdd", 4],["Nat.Linear.Var.denote", 4],["Nat.mul_eq", 4],["Eq.mpr", 4],["Nat.add_eq", 3],["Prod.mk", 3],["Nat.Linear.Poly.denote", 3],["Nat.add", 3],["Nat.Linear.Expr.toPoly", 3],["Nat.zero_add", 3],["LE.le", 2],["Nat.one_mul", 2],["Nat.Linear.Poly.denote_eq", 2],["Nat.mul_one", 2],["BEq.beq", 2],["eq_of_beq", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.monomialToExpr", 2],["Nat.Linear.Poly.denote_le", 2],["Nat.Linear.fixedVar", 2],["List.nil", 2],["Nat.Linear.Expr.denote_toPoly", 2],["beq_self_eq_true", 2],["Nat.Linear.Expr.inc", 1],["Nat.Linear.Poly.denote_append", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Expr.mulL", 1],["eq_true_of_decide", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.Expr.add", 1],["List.cons", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.add_left_comm", 1],["Nat.Linear.Var.denote.go", 1],["Nat.mul_comm", 1],["Nat.Linear.Expr.num", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.mul", 1],["rfl", 1],["Unit.unit", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Expr.var", 1]]],
["LT", 15, [["LT.mk", 13],["LT.lt", 4],["Eq", 2],["Prod.fst", 1],["Int.lt", 1],["Or", 1],["UInt64.lt", 1],["USize.lt", 1],["UInt16.lt", 1],["Option.lt", 1],["Float.lt", 1],["Prod.snd", 1],["UInt32.val", 1],["Nat.lt", 1],["Ordering.lt", 1],["UInt8.lt", 1],["BEq.beq", 1],["Fin.val", 1],["Bool.true", 1],["Ord.compare", 1],["And", 1],["List.lt", 1]]],
["UFModel.Agrees", 15, [["Eq.refl", 7],["Eq.symm", 7],["Eq", 6],["Array.size", 5],["Exists.intro", 5],["eq_of_heq", 4],["Eq.trans", 4],["HEq.refl", 4],["Fin.val", 4],["OfNat.ofNat", 4],["eq_self", 3],["UnionFind.arr", 3],["Fin.mk", 3],["Array.get", 3],["of_eq_true", 3],["And.intro", 3],["congrArg", 3],["rfl", 3],["UFModel.Agrees.mk'", 2],["UFModel.push", 2],["UFModel.empty", 2],["congrFun", 2],["eq_false", 2],["UFModel.Models.size_eq", 2],["UFModel.parent", 2],["UFModel.Models", 2],["UFNode.parent", 2],["UFNode.mk", 2],["Nat.le_add_right", 2],["UFModel.Models.empty", 2],["Exists", 2],["ite_false", 1],["UnionFind.findAux.proof_1", 1],["Ne.symm", 1],["Array.size_set", 1],["Bool.true", 1],["sorryAx", 1],["UnionFind.model'", 1],["WellFounded.fix", 1],["HAdd.hAdd", 1],["Array.push", 1],["List.toArray", 1],["lt_irrefl", 1],["eq_true", 1],["UFModel.Models.push", 1],["And", 1],["UFModel.push.proof_1", 1],["UFModel.Agrees.set", 1],["UFModel.rank", 1],["UnionFind.findAux.proof_2", 1],["ite_congr", 1],["dite_congr", 1],["And.right", 1],["UnionFind.model", 1],["List.nil", 1],["UFModel.Agrees.push", 1],["congr", 1],["And.left", 1],["UnionFind.size", 1],["dite_false", 1],["UFModel.Agrees.empty", 1],["PSigma.mk", 1],["dite_true", 1],["UFModel.Agrees.get_eq", 1],["dite", 1],["UFModel.Models.parent_eq", 1],["And.imp", 1],["Eq.mpr", 1],["ite_true", 1]]],
["Mul", 15, [["Mul.mk", 9],["UInt32.mul", 1],["Nat.mul", 1],["Float.mul", 1],["Int.mul", 1],["UInt8.mul", 1],["Fin.mul", 1],["UInt64.mul", 1],["USize.mul", 1],["UInt16.mul", 1]]],
["UInt8.val", 15, [["UInt8.val", 8],["congrArg", 7],["rfl", 6],["UInt8.mk", 6],["Eq", 3],["Fin.val", 2],["Eq.refl", 1],["of_eq_true", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["Eq.trans", 1],["Nat.Linear.Expr.add", 1],["Nat.Linear.ExprCnstr.mk", 1],["OfNat.ofNat", 1],["AddMonoid.nsmul_zero'", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["SubNegMonoid.gsmul_succ'", 1],["SubNegMonoid.gsmul_neg'", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["SubNegMonoid.gsmul_zero'", 1],["Fin.isLt", 1],["Nat.Linear.Expr.num", 1],["Fin.val_eq_of_lt", 1],["UInt8.toChar_aux", 1],["AddMonoid.nsmul_succ'", 1],["UInt8.mk.sizeOf_spec", 1],["Bool.true", 1]]],
["WellFoundedRelation", 15, [["WellFoundedRelation.mk", 9],["WellFoundedRelation.rel", 5],["Fin.gt_wf", 1],["Nat.lt", 1],["Nat.Up.WF", 1],["PSigma.SkipLeft", 1],["emptyRelation", 1],["invImage.proof_1", 1],["Nat.lt_wfRel.proof_1", 1],["sizeOfWFRel", 1],["PSigma.lex", 1],["Nat.Up", 1],["Prod.rprod.proof_1", 1],["PSigma.skipLeft.proof_1", 1],["Prod.RProd", 1],["Prod.Lex", 1],["Prod.lex.proof_1", 1],["InvImage", 1],["measure", 1],["PSigma.lex.proof_1", 1],["Prod.lex", 1],["PSigma.Lex", 1],["emptyWf.proof_1", 1],["Nat.lt_wfRel", 1],["invImage", 1],["SizeOf.sizeOf", 1],["LT.lt", 1]]],
["LawfulBEq", 15, [["LawfulBEq.mk", 7],["Eq.symm", 4],["Bool.true", 4],["Eq.refl", 4],["congrArg", 3],["Eq.trans", 3],["of_decide_eq_true", 3],["congrFun", 3],["Eq", 3],["of_decide_eq_self_eq_true", 2],["and", 2],["eq_self", 2],["rfl", 2],["of_eq_true", 2],["beq_self_eq_true", 2],["instLawfulBEqProdInstBEqProd.proof_1", 1],["instLawfulBEqBoolInstBEqInstDecidableEqBool.proof_1", 1],["Nat.beq_refl", 1],["BEq.beq", 1],["Nat.instLawfulBEqNatInstBEqNat.proof_1", 1],["Nat.eq_of_beq_eq_true", 1],["congr", 1],["eq_of_beq", 1],["Bool.and_self", 1],["List.cons.injEq", 1],["And.intro", 1],["Bool.true_and", 1],["instLawfulBEqStringInstBEqInstDecidableEqString.proof_1", 1],["instLawfulBEqCharInstBEqInstDecidableEqChar.proof_1", 1],["List.beq", 1],["List.instLawfulBEqListInstBEqList.proof_1", 1],["Bool.and_eq_true", 1],["implies_congr", 1],["Nat.Linear.instLawfulBEqPolyCnstrInstBEqPolyCnstr.proof_1", 1],["Eq.mpr", 1]]],
["List.insert", 15, [["Eq", 10],["of_eq_true", 9],["congrArg", 7],["Eq.trans", 7],["eq_self", 6],["List.insert", 6],["Eq.refl", 6],["congrFun", 5],["Or", 4],["Eq.mpr", 4],["Membership.mem", 4],["propext", 4],["Iff", 4],["List.cons", 4],["List.mem_insert_iff", 4],["rfl", 4],["List.card", 3],["congr", 3],["List.insert_of_mem", 3],["HAdd.hAdd", 3],["List.mem_cons", 3],["List.insert_of_not_mem", 3],["iff_self", 3],["Or.inr", 2],["eq_false", 2],["List.instDecidableMemListInstMembershipList", 2],["List.length", 2],["OfNat.ofNat", 2],["List", 2],["Iff.mpr", 2],["Subsingleton.elim", 2],["List.card_append_disjoint", 1],["Or.inl", 1],["if_pos", 1],["Eq.symm", 1],["List.foldr", 1],["List.card_cons_of_not_mem", 1],["List.mem_union_iff", 1],["false_or", 1],["eq_true_of_decide", 1],["eq_true", 1],["List.cons_union", 1],["or_assoc", 1],["Not", 1],["List.union_equiv_append", 1],["HAppend.hAppend", 1],["List.nil_union", 1],["if_neg", 1],["Iff.rfl", 1],["List.union", 1],["List.not_mem_nil", 1],["List.mem_append", 1],["Decidable.em", 1],["Iff.intro", 1],["Bool.true", 1],["List.card_eq_of_equiv", 1]]],
["Task", 15, [["Task.pure", 4],["Task.get", 2],["inferInstanceAs", 2],["Tactic.instNonemptyDeclCache", 2],["Nonempty", 2],["Unit.unit", 1],["Pure.pure", 1],["Prod.mk", 1],["Except", 1],["Bind.bind", 1],["Sum.inl", 1],["PUnit.unit", 1],["Prod", 1],["Tactic.instNonemptyCache.proof_1", 1],["Task", 1],["Sum", 1],["ForIn.forIn", 1],["ForInStep", 1],["Inhabited.mk", 1],["Tactic.Cache", 1],["Tactic.Cache.mk", 1],["Inhabited.default", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["ForInStep.yield", 1],["liftM", 1]]],
["UInt64.val", 14, [["UInt64.val", 7],["congrArg", 7],["UInt64.mk", 6],["rfl", 6],["Eq", 3],["Eq.refl", 1],["UInt64.mk.sizeOf_spec", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["Nat.Linear.ExprCnstr.mk", 1],["OfNat.ofNat", 1],["AddMonoid.nsmul_zero'", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["Fin.sizeOf", 1],["HAdd.hAdd", 1],["Eq.trans", 1],["Nat.Linear.Expr.add", 1],["SubNegMonoid.gsmul_neg'", 1],["List.nil", 1],["List.cons", 1],["SubNegMonoid.gsmul_succ'", 1],["Eq.symm", 1],["SubNegMonoid.gsmul_zero'", 1],["Nat.Linear.Expr.num", 1],["Fin.val_eq_of_lt", 1],["Fin.val", 1],["AddMonoid.nsmul_succ'", 1],["of_eq_true", 1],["Bool.true", 1]]],
["BinaryHeap.arr", 14, [["BinaryHeap.arr", 10],["Eq.refl", 8],["Array.size", 7],["OfNat.ofNat", 7],["Eq.mpr", 6],["LT.lt", 6],["congrArg", 5],["Array.size_set", 4],["Fin.mk", 4],["Eq", 4],["Eq.trans", 3],["congrFun", 3],["Array.push", 2],["BinaryHeap.size_pos_of_max", 2],["HSub.hSub", 2],["BinaryHeap.size", 2],["BinaryHeap.max", 2],["of_eq_true", 2],["Array.size_push", 2],["Fin.isLt", 2],["eq_self", 2],["Fin.val", 2],["Array.set", 2],["Option.none", 1],["BinaryHeap.popMaxAux", 1],["Subtype", 1],["Eq.mpr_prop", 1],["eq_false", 1],["HAdd.hAdd", 1],["Eq.mp", 1],["BinaryHeap.insert.proof_1", 1],["Subtype.mk", 1],["Subtype.property", 1],["Decidable.of_not_not", 1],["Nat.succ_pos", 1],["Option.some", 1],["BinaryHeap.size_heapifyUp", 1],["False.elim", 1],["BinaryHeap.popMaxAux.proof_1", 1],["Nat.zero_sub", 1],["congr", 1],["dite_congr", 1],["Nat.lt_succ_self", 1],["BinaryHeap.popMaxAux.proof_2", 1],["eq_false'", 1],["dite_false", 1],["Array.get", 1]]],
["Nat.Linear.Expr", 14, [["OfNat.ofNat", 5],["Nat.Linear.Expr.num", 4],["Nat.Linear.Expr.add", 3],["Unit.unit", 3],["Nat.Linear.monomialToExpr", 3],["Eq.refl", 2],["HMul.hMul", 2],["of_eq_true", 2],["Nat.add_comm", 2],["eq_self", 2],["Nat.Linear.Poly.denote", 2],["Nat.Linear.denote_monomialToExpr", 2],["congrFun", 2],["Nat.Linear.Expr", 2],["congr", 2],["Nat.add", 2],["congrArg", 2],["HAdd.hAdd", 2],["Nat.Linear.Var.denote", 2],["Nat.mul_eq", 2],["Nat.add_eq", 2],["Eq.trans", 2],["Eq", 2],["cond", 1],["PProd.fst", 1],["BEq.beq", 1],["eq_true_of_decide", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.fixedVar", 1],["Inhabited.default", 1],["Eq.symm", 1],["Nat.add_left_comm", 1],["Nat.zero_add", 1],["Nat.Linear.Expr.var", 1],["Nat.Linear.Expr.denote", 1],["Inhabited.mk", 1],["Nat.Linear.Expr.mulL", 1],["Bool.true", 1]]],
["UInt16.val", 14, [["UInt16.val", 7],["congrArg", 7],["UInt16.mk", 6],["rfl", 6],["Eq", 3],["Bool.true", 1],["of_eq_true", 1],["SubNegMonoid.gsmul_succ'", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["Nat.Linear.ExprCnstr.mk", 1],["OfNat.ofNat", 1],["AddMonoid.nsmul_zero'", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["SubNegMonoid.gsmul_neg'", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["UInt16.mk.sizeOf_spec", 1],["SubNegMonoid.gsmul_zero'", 1],["Nat.Linear.Expr.num", 1],["Fin.val_eq_of_lt", 1],["Nat.Linear.Expr.add", 1],["Fin.val", 1],["Eq.refl", 1],["AddMonoid.nsmul_succ'", 1]]],
["decide_eq_false", 14, [["Eq.refl", 7],["congrArg", 6],["congrFun", 6],["OfNat.ofNat", 6],["Eq", 6],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["HAdd.hAdd", 4],["Eq.symm", 4],["Decidable.em", 4],["congr", 4],["Bool.true", 3],["List.cons", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["ite_congr", 3],["List.length", 3],["LT.lt", 3],["HDiv.hDiv", 3],["rfl", 3],["HMod.hMod", 3],["if_true", 2],["dif_pos", 2],["UnionFind.rankMaxAux", 2],["if_false", 2],["Fin.mk", 2],["eq_true_of_decide", 2],["Classical.em", 2],["UnionFind.size", 2],["Decidable.decide", 2],["Fin.val", 2],["dif_neg", 2],["Array.size", 2],["eq_false", 2],["Subtype.property", 2],["LE.le", 1],["Nat.to_digits_core_length", 1],["UnionFind.rankMax", 1],["of_decide_eq_true", 1],["decide_eq_true_eq", 1],["Nat.zero_le", 1],["sizeOf_nat", 1],["Eq.mp", 1],["trivial", 1],["HSub.hSub", 1],["Nat.lt_irrefl", 1],["Nat.sub_lt_sub_left", 1],["Bool.and_true", 1],["WellFounded.fix", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["Array.isEqvAux.proof_3", 1],["Array.get", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Array.isEqvAux_self", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Nat.succ", 1],["Subsingleton.elim", 1],["List.nil", 1],["and", 1],["BinaryHeap.popMaxAux", 1],["WellFoundedRelation.rel", 1],["Array.isEqv", 1],["Nat.succ_pos", 1],["funext", 1],["UnionFind.lt_rankMax", 1],["dite_true", 1],["False.elim", 1],["Bool.false", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.rank_lt", 1],["WellFounded.fix_eq", 1],["Iff.mpr", 1],["dite_congr", 1],["True", 1],["implies_congr", 1]]],
["OptionT", 14, [["OptionT.mk", 7],["Pure.pure", 6],["Option", 5],["Bind.bind", 4],["Option.none", 4],["Option.some", 4],["Unit.unit", 3],["OptionT.fail", 2],["MonadExceptOf.mk", 2],["tryCatchThe", 1],["MonadLift.mk", 1],["MonadFunctor.mk", 1],["MonadControl.mk", 1],["Alternative.mk", 1],["OptionT.tryCatch", 1],["liftM", 1],["OptionT.lift", 1],["OptionT.orElse", 1],["OptionT.run", 1],["Monad.mk", 1],["throwThe", 1]]],
["Nat.Linear.PolyCnstr", 14, [["Nat.Linear.PolyCnstr.mk", 6],["Nat.Linear.PolyCnstr", 5],["Bool.true", 4],["Nat.Linear.Poly.cancel", 3],["OfNat.ofNat", 3],["Nat.Linear.PolyCnstr.rhs", 3],["Nat.Linear.PolyCnstr.lhs", 3],["Eq.symm", 3],["Nat.Linear.PolyCnstr.eq", 3],["and", 3],["Eq.refl", 3],["LE.le", 2],["Nat.Linear.ExprCnstr.lhs", 2],["congr", 2],["Nat.Linear.Expr.toPoly", 2],["Nat.Linear.ExprCnstr.rhs", 2],["Classical.em", 2],["Bool.of_not_eq_true", 2],["Eq.trans", 2],["Eq.mpr", 2],["HAdd.hAdd", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["of_eq_true", 2],["Bool.false", 2],["cond_false", 2],["Prod.mk", 2],["cond", 2],["eq_self", 2],["congrFun", 2],["Nat.Linear.Poly.denote_eq", 2],["List.nil", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["cond_true", 2],["Nat.Linear.Poly.combine", 2],["Nat.Linear.ExprCnstr.toNormPoly", 2],["congrArg", 2],["Nat.Linear.ExprCnstr.eq", 2],["Nat.add", 2],["Nat.Linear.PolyCnstr.mul", 2],["Nat.Linear.Poly.denote_le", 2],["Nat.Linear.Expr.toNormPoly", 2],["Unit.unit", 2],["Eq", 2],["Nat.zero_add", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.add_le_add", 1],["Bool.and_true", 1],["Nat.add_le_add_left", 1],["Bool.and_false", 1],["BEq.mk", 1],["Bool", 1],["Nat.add_le_add_right", 1],["PProd.fst", 1],["Nat.Linear.PolyCnstr.combine", 1],["BEq.beq", 1],["Nat.Linear.Poly.sort", 1],["Bool.and_self", 1],["LawfulBEq.mk", 1],["Nat.Linear.Poly.mul", 1],["id", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Poly.fuse", 1],["Nat.add_comm", 1],["Eq.mp", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["Nat.Linear.instLawfulBEqPolyCnstrInstBEqPolyCnstr.proof_1", 1],["Nat.Linear.Certificate.combineHyps", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote", 1]]],
["Nat.blt", 14, [["congrFun", 10],["congrArg", 10],["Eq.trans", 10],["congr", 9],["HAdd.hAdd", 8],["Prod.mk", 8],["of_eq_true", 8],["Eq", 8],["Bool.true", 7],["Eq.refl", 7],["Nat.Linear.Poly.denote", 7],["Bool.of_not_eq_true", 6],["Eq.symm", 6],["cond_false", 6],["cond", 6],["Nat.add_comm", 6],["Nat.zero_add", 6],["eq_self", 6],["cond_true", 6],["List.nil", 6],["Classical.em", 6],["Eq.mpr", 5],["HMul.hMul", 5],["Nat.add", 5],["Nat.add_left_comm", 5],["Nat.Linear.Var.denote", 5],["Nat.add_eq", 5],["Nat.mul_eq", 5],["OfNat.ofNat", 5],["Nat.blt", 4],["Nat.Linear.Poly.denote_le", 4],["Nat.Linear.Poly.denote_eq", 4],["List.cons", 4],["HAppend.hAppend", 4],["Nat.Linear.Poly.denote_append", 3],["absurd", 3],["Nat.Linear.hugeFuel", 3],["funext", 3],["Iff.intro", 3],["Nat.Linear.Poly", 3],["Eq.mp", 3],["LE.le", 3],["propext", 3],["eq_true_of_decide", 2],["Nat.sub_eq", 2],["Prod", 2],["Nat.add_assoc", 2],["List.nil_append", 2],["HSub.hSub", 2],["Nat.Linear.Poly.cancelAux", 2],["List.append_nil", 2],["List.reverse_nil", 2],["List.reverse", 2],["Nat.Linear.Poly.insertSorted", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["PProd.fst", 2],["Unit.unit", 2],["eq_true", 2],["List.reverse_cons", 2],["Nat.Linear.Poly.denote_reverse", 2],["Bool.and_false", 1],["Nat.right_distrib", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Poly.combine", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.add_le_add_right", 1],["id", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Nat.Linear.Poly.denote_combine", 1],["and", 1],["Bool.false", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.le_of_ble_eq_true", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.ble_eq_true_of_le", 1],["Bool.and_true", 1]]],
["ne_true_of_eq_false", 14, [["Eq.refl", 7],["congrArg", 6],["congrFun", 6],["OfNat.ofNat", 6],["Eq", 6],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["HAdd.hAdd", 4],["Eq.symm", 4],["Decidable.em", 4],["congr", 4],["Bool.true", 3],["List.cons", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["ite_congr", 3],["List.length", 3],["LT.lt", 3],["HDiv.hDiv", 3],["rfl", 3],["HMod.hMod", 3],["if_true", 2],["dif_pos", 2],["UnionFind.rankMaxAux", 2],["if_false", 2],["Fin.mk", 2],["eq_true_of_decide", 2],["Classical.em", 2],["UnionFind.size", 2],["Decidable.decide", 2],["Fin.val", 2],["dif_neg", 2],["Array.size", 2],["eq_false", 2],["Subtype.property", 2],["LE.le", 1],["Nat.to_digits_core_length", 1],["UnionFind.rankMax", 1],["of_decide_eq_true", 1],["decide_eq_true_eq", 1],["Nat.zero_le", 1],["sizeOf_nat", 1],["Eq.mp", 1],["trivial", 1],["HSub.hSub", 1],["Nat.lt_irrefl", 1],["Nat.sub_lt_sub_left", 1],["Bool.and_true", 1],["WellFounded.fix", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["Array.isEqvAux.proof_3", 1],["Array.get", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Array.isEqvAux_self", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Nat.succ", 1],["Subsingleton.elim", 1],["List.nil", 1],["and", 1],["BinaryHeap.popMaxAux", 1],["WellFoundedRelation.rel", 1],["Array.isEqv", 1],["Nat.succ_pos", 1],["funext", 1],["UnionFind.lt_rankMax", 1],["dite_true", 1],["False.elim", 1],["Bool.false", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.rank_lt", 1],["WellFounded.fix_eq", 1],["Iff.mpr", 1],["dite_congr", 1],["True", 1],["implies_congr", 1]]],
["ULift", 14, [["ULift.down", 5],["ULift.up", 4],["Pure.pure", 4],["Bind.bind", 4],["MonadState.get", 3],["RandG", 2],["OfNat.ofNat", 2],["MonadStateOf.set", 2],["Fin", 2],["ULift", 2],["Bool.true", 1],["Random.random", 1],["BoundedRandom.randomR", 1],["RandomGen.next", 1],["ite", 1],["BEq.beq", 1],["ToString.mk", 1],["Random.rand", 1],["Nonempty", 1],["reprArg", 1],["RandomGen.split", 1],["randNat", 1],["Nat", 1],["HAppend.hAppend", 1],["Nonempty.intro", 1],["Iff.intro", 1],["Nat.succ", 1],["ToString.toString", 1],["Prod.map", 1],["Fin.ofNat", 1],["Bool.false", 1],["lcProof", 1],["RandomGen.range", 1],["Prod", 1],["Id", 1],["Eq", 1]]],
["List.erasep", 14, [["Eq.refl", 12],["Eq.trans", 10],["List.cons", 9],["congrArg", 9],["rfl", 9],["Eq", 9],["eq_self", 8],["of_eq_true", 8],["List.erasep", 8],["eq_false", 7],["congr", 6],["List.erasep_cons_of_neg", 6],["Not", 6],["eq_true_of_decide", 6],["Bool.true", 6],["Eq.symm", 5],["Decidable.em", 5],["Eq.mpr", 5],["eq_true", 4],["List.erasep_cons_of_pos", 4],["congrFun", 4],["HAppend.hAppend", 3],["Subsingleton.elim", 3],["And", 3],["List.cons_append", 3],["PProd.fst", 3],["Or.inl", 2],["propext", 2],["ite_congr", 2],["Or.inr", 2],["HEq.refl", 2],["List.erasep_cons", 2],["List.nil", 2],["eq_of_heq", 2],["List.exists_of_erasep", 2],["Exists", 2],["List.forall_mem_cons", 2],["Membership.mem", 2],["List.exists_or_eq_self_of_erasep", 2],["List.mem_of_mem_erasep", 1],["not_exists", 1],["List.erasep_of_forall_not", 1],["Ne.symm", 1],["ne_eq", 1],["List.subset.refl", 1],["Eq.mp", 1],["List.length_cons", 1],["Function.comp", 1],["List.erase_cons_tail", 1],["and_self", 1],["List.mem_cons_of_mem", 1],["List.cons.injEq", 1],["List.erase", 1],["mt", 1],["List.forall_mem_nil", 1],["forall_congr", 1],["List.length_append", 1],["Exists.intro", 1],["HAdd.hAdd", 1],["And.right", 1],["List.nil_append", 1],["ite_true", 1],["ite_false", 1],["Function.comp_apply", 1],["True", 1],["List.length", 1],["Or.elim", 1],["List.forall_mem_of_forall_mem_cons", 1],["And.intro", 1],["And.left", 1],["List.erase_cons_head", 1],["List.map", 1],["not_and", 1],["true_and", 1],["List.Mem.head", 1],["Nat.pred", 1],["Unit.unit", 1],["List.mem_of_ne_of_mem", 1],["List.mem_append", 1],["Iff.mpr", 1],["Iff.mp", 1],["Iff.intro", 1]]],
["Nat.Linear.Expr.denote", 14, [["eq_self", 6],["Eq", 6],["Eq.trans", 6],["of_eq_true", 6],["congr", 6],["congrArg", 6],["congrFun", 6],["Eq.refl", 6],["Eq.symm", 5],["OfNat.ofNat", 5],["Nat.Linear.Expr.denote", 5],["Bool.true", 5],["cond_false", 4],["cond", 4],["Nat.add_comm", 4],["Classical.em", 4],["Eq.mpr", 4],["Bool.of_not_eq_true", 4],["HAdd.hAdd", 4],["HMul.hMul", 4],["cond_true", 4],["Nat.Linear.Var.denote", 4],["Nat.mul_eq", 4],["Prod.mk", 3],["Nat.Linear.Poly.denote", 3],["Nat.zero_add", 3],["Nat.add_eq", 3],["Nat.add", 3],["Nat.Linear.Expr.toPoly", 3],["eq_of_beq", 2],["Nat.Linear.denote_monomialToExpr", 2],["Nat.Linear.monomialToExpr", 2],["Nat.Linear.Poly.denote_eq", 2],["Nat.Linear.fixedVar", 2],["BEq.beq", 2],["Nat.one_mul", 2],["List.nil", 2],["Nat.mul_one", 2],["Nat.Linear.Poly.denote_le", 2],["LE.le", 2],["Nat.Linear.Expr.denote_toPoly", 2],["beq_self_eq_true", 2],["Nat.Linear.Expr.var", 1],["Nat.Linear.Poly.denote_append", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Expr.of_cancel_le", 1],["Nat.Linear.Expr.add", 1],["Nat.add_left_comm", 1],["Nat.Linear.Var.denote.go", 1],["List.cons", 1],["Nat.mul", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Expr.inc", 1],["Nat.mul_comm", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.toNormPoly", 1],["Unit.unit", 1],["eq_true_of_decide", 1],["Nat.add_zero", 1],["Nat.Linear.Expr.mulL", 1]]],
["of_decide_eq_true", 14, [["Eq.refl", 7],["congrArg", 6],["congrFun", 6],["OfNat.ofNat", 6],["Eq", 6],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["HAdd.hAdd", 4],["Eq.symm", 4],["Decidable.em", 4],["congr", 4],["Bool.true", 3],["List.cons", 3],["Nat.toDigitsCore", 3],["Nat.digitChar", 3],["ite_congr", 3],["List.length", 3],["LT.lt", 3],["HDiv.hDiv", 3],["rfl", 3],["HMod.hMod", 3],["if_true", 2],["dif_pos", 2],["UnionFind.rankMaxAux", 2],["if_false", 2],["Fin.mk", 2],["eq_true_of_decide", 2],["Classical.em", 2],["UnionFind.size", 2],["Decidable.decide", 2],["Fin.val", 2],["dif_neg", 2],["Array.size", 2],["eq_false", 2],["Subtype.property", 2],["LE.le", 1],["Nat.to_digits_core_length", 1],["UnionFind.rankMax", 1],["of_decide_eq_true", 1],["decide_eq_true_eq", 1],["Nat.zero_le", 1],["sizeOf_nat", 1],["Eq.mp", 1],["trivial", 1],["HSub.hSub", 1],["Nat.lt_irrefl", 1],["Nat.sub_lt_sub_left", 1],["Bool.and_true", 1],["WellFounded.fix", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["Array.isEqvAux.proof_3", 1],["Array.get", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Array.isEqvAux_self", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Nat.succ", 1],["Subsingleton.elim", 1],["List.nil", 1],["and", 1],["BinaryHeap.popMaxAux", 1],["WellFoundedRelation.rel", 1],["Array.isEqv", 1],["Nat.succ_pos", 1],["funext", 1],["UnionFind.lt_rankMax", 1],["dite_true", 1],["False.elim", 1],["Bool.false", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.rank_lt", 1],["WellFounded.fix_eq", 1],["Iff.mpr", 1],["dite_congr", 1],["True", 1],["implies_congr", 1]]],
["Nat.eq_or_lt_of_le", 14, [["Eq", 12],["Fin.mk", 10],["Nat.mod_lt", 9],["Fin.val", 9],["HMod.hMod", 9],["Fin.size_positive", 8],["rfl", 8],["Eq.refl", 7],["congrArg", 6],["HAdd.hAdd", 5],["congrFun", 5],["Eq.trans", 5],["eq_self", 4],["of_eq_true", 4],["HMul.hMul", 4],["OfNat.ofNat", 4],["Fin.size_positive'", 3],["Eq.mpr", 3],["congr", 3],["Bool.true", 2],["Decidable.decide", 2],["Fin.ofNat'", 2],["Array.size", 2],["Fin.add_def", 2],["Fin.mul_def", 2],["HSub.hSub", 2],["Nat.succ", 2],["Fin.eq_of_val_eq", 2],["Fin.nsmuls_eq", 1],["Subsingleton.allEq", 1],["Eq.symm", 1],["Array.isEqv", 1],["Bool.false", 1],["Subsingleton.elim", 1],["Nat.mod_add_mod", 1],["WellFoundedRelation.rel", 1],["WellFounded.fix_eq", 1],["dite_congr", 1],["Fin.mk.injEq", 1],["True", 1],["MonoidWithZero.zero_mul", 1],["sizeOf_nat", 1],["Fin.zero_def", 1],["decide_eq_true_eq", 1],["Nat.zero_mod", 1],["Nat.add_comm", 1],["Array.isEqvAux.proof_1", 1],["Array.isEqvAux.proof_3", 1],["Fin.ext", 1],["WellFounded.fix", 1],["Nat.add_mod_mod", 1],["Fin.ofNat'_succ", 1],["Array.get", 1],["Fin.one_val", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["Nat.succ_mul", 1],["Nat.lt_eq", 1],["Nat.mul_mod", 1],["dif_pos", 1],["Nat.mod_eq_of_lt", 1],["and", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["dite", 1],["dif_neg", 1],["Classical.em", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux_self", 1]]],
["Function.RightInverse", 13, [["Iff.intro", 3],["Function.RightInverse_surj_inv", 2],["Function.surj_inv", 2],["Exists.intro", 2],["Prod.swap_swap", 1],["Function.LeftInverse.injective", 1],["And.right", 1],["Function.RightInverse.surjective", 1],["Function.RightInverse.comp_eq_id", 1],["Function.LeftInverse.comp", 1],["Function.LeftInverse_surj_inv", 1],["Function.bijective", 1],["Function.RightInverse.comp", 1],["And.intro", 1],["congr_fun", 1],["Equiv.right_inv", 1],["Function.has_RightInverse.surjective", 1],["Function.surj_inv_eq", 1],["Function.surjective.has_RightInverse", 1],["Function.inv_fun_eq", 1]]],
["Trans", 13, [["Trans.mk", 12],["instTransLeToLE.proof_1", 1],["instTransGeToLEGtToLT.proof_1", 1],["instTransEq_1.proof_1", 1],["Nat.instTransNatLeInstLENat.proof_1", 1],["instTransEq.proof_1", 1],["instTransGtToLTGeToLE.proof_1", 1],["instTransGeToLE.proof_1", 1],["Nat.instTransNatLtInstLTNat.proof_1", 1],["Nat.instTransNatLeInstLENatLtInstLTNat.proof_1", 1],["instTransLtToLTLeToLE.proof_1", 1],["Nat.instTransNatLtInstLTNatLeInstLENat.proof_1", 1],["instTransLeToLELtToLT.proof_1", 1]]],
["LE", 13, [["LE.mk", 11],["LE.le", 2],["Bool.true", 1],["Nat.le", 1],["Ordering.isLE", 1],["Int.le", 1],["UInt16.le", 1],["UInt64.le", 1],["USize.le", 1],["Float.le", 1],["UInt32.val", 1],["UInt8.le", 1],["Fin.val", 1],["List.le", 1],["Eq", 1],["Ord.compare", 1]]],
["Sub", 13, [["Sub.mk", 9],["UInt32.sub", 1],["Nat.sub", 1],["Float.sub", 1],["Int.sub", 1],["UInt8.sub", 1],["Fin.sub", 1],["USize.sub", 1],["UInt16.sub", 1],["UInt64.sub", 1]]],
["congr", 13, [["Eq", 10],["Eq.refl", 10],["Fin.mk", 9],["Eq.symm", 7],["congrArg", 6],["rfl", 6],["Eq.mpr", 6],["OfNat.ofNat", 5],["Eq.trans", 5],["of_eq_true", 5],["List.get", 5],["congrFun", 4],["Array.size", 4],["eq_self", 4],["LT.lt", 4],["List.get?_eq_get", 3],["List.get?", 3],["Option.some", 3],["List.length", 3],["HEq.refl", 2],["HAppend.hAppend", 2],["eq_true", 2],["Option.some.inj", 2],["dite_congr", 2],["congr", 2],["HAdd.hAdd", 2],["HSub.hSub", 2],["id", 2],["Bool.true", 2],["Decidable.decide", 2],["Fin.val", 2],["dite_true", 2],["Nat.lt_succ_self", 2],["List.set", 1],["UFModel.rank", 1],["Array.swap", 1],["Array.isEqvAux.proof_1", 1],["BinaryHeap.arr", 1],["UFModel.push", 1],["decide_eq_true_eq", 1],["List.length_set", 1],["List.map", 1],["Array.push", 1],["UFModel.Agrees.push", 1],["Array.size_swap", 1],["eq_false", 1],["List.get?_append_right", 1],["PProd.fst", 1],["BinaryHeap.insert.proof_1", 1],["WellFoundedRelation.rel", 1],["List.nil", 1],["Array.size_push", 1],["List.getLast", 1],["UFNode.mk", 1],["funext", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["sizeOf_nat", 1],["List.cons_ne_nil", 1],["Option.some_inj", 1],["Nat.le_add_right", 1],["List.get?_set_ne", 1],["Nat.lt_add_right", 1],["Array.isEqvAux_self", 1],["Classical.em", 1],["List.get_append_right_aux", 1],["Nat.lt_trans", 1],["List.length_cons", 1],["dite_false", 1],["Subsingleton.elim", 1],["Option.map", 1],["And.imp", 1],["BinaryHeap.popMaxAux", 1],["UFModel.push.proof_1", 1],["propext", 1],["UFModel.parent", 1],["dif_pos", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Bool.false", 1],["List.get?_map", 1],["True", 1],["Subtype.property", 1],["Eq.mp", 1],["lt_irrefl", 1],["WellFounded.fix", 1],["BinaryHeap.size_heapifyUp", 1],["Array.get", 1],["List.length_map", 1],["List.length_append", 1],["Array.isEqv", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["eq_of_heq", 1],["WellFounded.fix_eq", 1],["Array.isEqvAux.proof_3", 1],["dite", 1],["List.getLast_eq_get", 1],["Fin.isLt", 1],["dif_neg", 1]]],
["StateCpsT.runK", 13, [["rfl", 13]]],
["Monad", 13, [["Monad.mk", 7],["inferInstanceAs", 5],["Monad", 5],["Empty", 2],["EStateM", 2],["EST", 1]]],
["Inv.inv", 13, [["mul_left_inv", 4],["OfNat.ofNat", 3],["HMul.hMul", 3],["Eq.mpr", 3],["Inv.inv", 3],["rfl", 3],["Eq", 3],["Eq.refl", 3],["Semigroup.mul_assoc", 2],["mul_right_inv", 2],["Eq.symm", 2],["one_mul", 1],["inv_inv", 1],["inv_eq_of_mul_eq_one", 1],["left_inv_eq_right_inv", 1],["Group.mul_left_inv", 1],["mul_one", 1],["inv_mul_self", 1]]],
["List.card", 13, [["Eq.refl", 11],["List.card", 10],["congrArg", 8],["Eq", 8],["Membership.mem", 7],["OfNat.ofNat", 6],["Eq.mpr", 6],["Eq.trans", 6],["congrFun", 6],["of_eq_true", 6],["HAdd.hAdd", 6],["Eq.symm", 5],["Decidable.em", 5],["eq_self", 4],["rfl", 4],["List.card_nil", 4],["Subsingleton.elim", 4],["congr", 3],["LE.le", 3],["eq_true", 3],["List.cons", 3],["if_pos", 2],["HAppend.hAppend", 2],["le_refl", 2],["Not", 2],["eq_false", 2],["eq_true_of_decide", 2],["List.nil", 2],["List.insert", 2],["List.card_cons_of_mem", 2],["List.card_cons_of_not_mem", 2],["List.map", 2],["ite", 2],["Bool.true", 2],["implies_congr", 1],["List", 1],["List.nil_append", 1],["List.remove", 1],["List.exists_of_mem_map", 1],["And.left", 1],["Nat.le_trans", 1],["List.insert_of_mem", 1],["List.union_equiv_append", 1],["And.right", 1],["if_neg", 1],["List.equiv_iff_subset_and_subset", 1],["Nat.le_antisymm", 1],["List.card_subset_le", 1],["Nat.le_succ", 1],["Iff.mp", 1],["Nat.zero_le", 1],["List.card_eq_of_equiv", 1],["List.union", 1],["False.elim", 1],["List.inj_on", 1],["List.insert_of_not_mem", 1],["List.card_le_card_cons", 1],["List.not_mem_nil", 1],["implies_true", 1],["Nat.zero_add", 1],["List.card_append_disjoint", 1]]],
["BinaryHeap", 13, [["BinaryHeap.mk", 8],["Subtype.val", 7],["BinaryHeap.arr", 5],["Fin.mk", 5],["Array.set", 4],["BinaryHeap.max", 3],["BinaryHeap.heapifyDown", 3],["Prod.mk", 3],["Prod", 2],["Array.push", 2],["BinaryHeap.heapifyUp", 2],["OfNat.ofNat", 2],["List.nil", 2],["BinaryHeap", 2],["List.toArray", 2],["BinaryHeap.size_pos_of_max", 2],["BinaryHeap.empty", 2],["Fin.val", 2],["BinaryHeap.replaceMax.proof_2", 1],["Option.some", 1],["BinaryHeap.replaceMax.proof_1", 1],["BinaryHeap.decreaseKey.proof_1", 1],["Inhabited.mk", 1],["Option", 1],["BinaryHeap.mkHeap", 1],["BinaryHeap.insert.proof_1", 1],["Option.none", 1],["BinaryHeap.popMax", 1],["List.cons", 1],["EmptyCollection.mk", 1],["BinaryHeap.insertExtractMax.proof_2", 1],["BinaryHeap.insertExtractMax.proof_1", 1],["ite", 1],["BinaryHeap.increaseKey.proof_1", 1],["BinaryHeap.size", 1],["BinaryHeap.popMaxAux", 1],["Bool.true", 1],["Eq", 1]]],
["Tactic.Ring.HornerExpr", 13, [["Bind.bind", 5],["Pure.pure", 5],["Tactic.Ring.HornerExpr.e", 5],["Tactic.Ring.HornerExpr.const", 4],["Tactic.Ring.mkAppCS", 4],["List.toArray", 4],["List.nil", 4],["Prod.mk", 4],["List.cons", 4],["liftM", 4],["Prod.fst", 3],["OfNat.ofNat", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["Option.some", 2],["Prod", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Prod.snd", 2],["Tactic.Ring.RingM", 2],["Tactic.Ring.HornerExpr", 2],["Eq.refl", 1],["HMul.hMul", 1],["Tactic.Ring.Cache.α", 1],["PProd.snd", 1],["MonadReader.read", 1],["PProd.fst", 1],["HAdd.hAdd", 1],["Option.none", 1],["And", 1],["Tactic.Ring.addAtom", 1],["Inhabited.mk", 1],["Coe.mk", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["ite", 1],["Eq", 1]]],
["eq_self", 13, [["Eq", 8],["Eq.refl", 8],["rfl", 7],["Fin.mk", 7],["Eq.symm", 5],["Eq.mpr", 5],["Array.size", 4],["congrArg", 4],["OfNat.ofNat", 4],["List.get", 4],["List.get?", 3],["eq_self", 3],["congrFun", 3],["Option.some", 3],["Eq.trans", 3],["LT.lt", 3],["List.get?_eq_get", 3],["of_eq_true", 3],["id", 2],["Decidable.decide", 2],["Bool.true", 2],["HAdd.hAdd", 2],["List.length", 2],["HSub.hSub", 2],["HAppend.hAppend", 2],["Option.some.inj", 2],["Nat.lt_add_right", 1],["Nat.le_of_succ_le_succ", 1],["propext", 1],["List.length_set", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["List.map", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqvAux.proof_1", 1],["Array.isEqv", 1],["Bool.false", 1],["Fin.isLt", 1],["Array.isEqvAux.proof_3", 1],["WellFounded.fix_eq", 1],["dite_congr", 1],["Array.swap", 1],["List.get?_map", 1],["True", 1],["BinaryHeap.arr", 1],["decide_eq_true_eq", 1],["Nat.lt_trans", 1],["Eq.mp", 1],["List.get_append_right_aux", 1],["Classical.em", 1],["Array.size_swap", 1],["WellFounded.fix", 1],["Array.push", 1],["Option.map", 1],["Array.get", 1],["Subsingleton.elim", 1],["List.length_append", 1],["List.length_map", 1],["BinaryHeap.popMaxAux", 1],["Nat.lt_eq", 1],["PProd.fst", 1],["List.get?_append_right", 1],["BinaryHeap.insert.proof_1", 1],["Array.isEqvAux_self", 1],["List.nil", 1],["and", 1],["HEq.refl", 1],["Array.size_push", 1],["funext", 1],["Nat.add", 1],["dite_true", 1],["WellFoundedRelation.rel", 1],["dite", 1],["Nat.lt_succ_self", 1],["List.set", 1],["dif_neg", 1],["Fin.val", 1],["sizeOf_nat", 1],["List.get?_set_ne", 1],["Option.some_inj", 1],["congr", 1]]],
["FloatArray", 13, [["FloatArray.mk", 5],["FloatArray", 5],["FloatArray.empty", 2],["Inhabited.mk", 1],["ForIn.mk", 1],["Array.set!", 1],["FloatArray.toList", 1],["FloatArray.forIn", 1],["FloatArray.push", 1],["PProd.fst", 1],["List.nil", 1],["List.toString", 1],["Array.set", 1],["EmptyCollection.mk", 1],["List.toArray", 1],["Array.push", 1],["ToString.mk", 1],["Array.uset", 1],["FloatArray.mkEmpty", 1],["OfNat.ofNat", 1]]],
["Tactic.Ring.horner", 13, [["eq_self", 13],["congrArg", 13],["Eq.trans", 13],["of_eq_true", 13],["HAdd.hAdd", 13],["Eq", 13],["HMul.hMul", 12],["HPow.hPow", 12],["congr", 11],["Eq.symm", 11],["congrFun", 11],["Semigroup.mul_assoc", 7],["add_zero", 7],["OfNat.ofNat", 6],["add_mul", 6],["Eq.refl", 5],["add_assoc", 5],["Tactic.Ring.horner", 5],["Eq.mpr", 5],["add_comm", 3],["pow_add", 3],["add_left_comm", 3],["mul_add", 2],["CommSemigroup.mul_comm", 2],["mul_pow", 1],["MonoidWithZero.zero_mul", 1],["pow_mul", 1],["pow_one", 1],["zero_add", 1],["one_mul", 1]]],
["Equiv.invFun", 13, [["rfl", 3],["Eq", 2],["eq_self", 2],["Equiv.right_inv", 2],["Eq.trans", 2],["LawfulFunctor.id_map", 2],["congrArg", 2],["Equiv.left_inv", 2],["of_eq_true", 2],["congrFun", 2],["Functor.map_map", 2],["funext", 2],["Equiv.symm", 2],["Functor.map", 2],["Equiv.toFun", 2],["Equiv.apply_symm_apply", 1],["Equiv.symm_apply_apply", 1],["Equiv.self_comp_symm", 1],["Equiv.symm_comp_self", 1],["Function.RightInverse.comp", 1],["Function.LeftInverse.comp", 1]]],
["Except.ok", 13, [["rfl", 8],["Except.ok", 5],["congrArg", 4],["Eq.refl", 4],["Eq", 4],["eq_self", 3],["of_eq_true", 3],["Pure.pure", 3],["Except.error", 3],["Except", 3],["Eq.symm", 3],["Bind.bind", 2],["ExceptT.mk", 2],["map_eq_pure_bind", 2],["funext", 2],["congrFun", 2],["Eq.trans", 2],["Eq.mpr", 2],["Except.map", 1],["congr", 1],["bind_congr", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["LawfulMonad.pure_bind", 1],["eq_of_heq", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["id_eq", 1],["ExceptT.run", 1],["LawfulApplicative.map_pure", 1],["LawfulMonad.bind_assoc", 1],["OfNat.ofNat", 1]]],
["congrFun", 13, [["Eq", 8],["Fin.mk", 8],["Eq.refl", 7],["congrArg", 7],["OfNat.ofNat", 7],["rfl", 6],["congrFun", 5],["of_eq_true", 5],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 4],["BinaryHeap.arr", 3],["Eq.symm", 3],["LT.lt", 3],["Array.size", 3],["dite_congr", 2],["HSub.hSub", 2],["Array.size_set", 2],["congr", 2],["UFModel.parent", 2],["HAppend.hAppend", 2],["HAdd.hAdd", 2],["BinaryHeap.size_pos_of_max", 2],["id", 2],["List.length", 2],["List.get", 2],["Decidable.decide", 2],["eq_false", 2],["Fin.val", 2],["dite_true", 2],["Bool.true", 2],["And.imp", 1],["ite_false", 1],["dif_pos", 1],["Bool.and_true", 1],["eq_true_of_decide", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get?", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqv", 1],["Bool.false", 1],["WellFounded.fix_eq", 1],["Nat.le_of_succ_le_succ", 1],["UFModel.rank", 1],["Nat.lt_add_right", 1],["True", 1],["Array.isEqvAux.proof_1", 1],["And.left", 1],["UFModel.push", 1],["decide_eq_true_eq", 1],["Ne.symm", 1],["WellFoundedRelation.rel", 1],["Subsingleton.elim", 1],["Option.some", 1],["Array.isEqvAux.proof_3", 1],["sizeOf_nat", 1],["WellFounded.fix", 1],["UFModel.push.proof_1", 1],["Array.push", 1],["eq_true", 1],["Array.get", 1],["Array.isEqvAux_self", 1],["Option.some.inj", 1],["List.length_append", 1],["UFModel.Agrees.set", 1],["Nat.lt_eq", 1],["PProd.fst", 1],["And.right", 1],["BinaryHeap.popMaxAux", 1],["ite_congr", 1],["List.get_append_right_aux", 1],["BinaryHeap.insert.proof_1", 1],["Nat.le_add_right", 1],["List.nil", 1],["And.intro", 1],["and", 1],["UFNode.mk", 1],["HEq.refl", 1],["Array.size_push", 1],["funext", 1],["Nat.add", 1],["UFModel.Agrees.get_eq", 1],["ite_true", 1],["Classical.em", 1],["dite", 1],["List.get?_append_right", 1],["UFModel.Agrees.push", 1],["dif_neg", 1],["dite_false", 1],["List.get?_eq_get", 1]]],
["Neg", 12, [["Neg.mk", 8],["Neg.neg", 5],["Fin.val", 1],["instNegFin.proof_1", 1],["UInt16.mk", 1],["USize.mk", 1],["UInt64.mk", 1],["UInt32.mk", 1],["HMod.hMod", 1],["UInt16.val", 1],["USize.val", 1],["UInt64.val", 1],["Float.neg", 1],["HSub.hSub", 1],["UInt32.val", 1],["UInt8.mk", 1],["Int.neg", 1],["Fin.mk", 1],["UInt8.val", 1]]],
["Prod.map", 12, [["Eq", 6],["Eq.trans", 5],["eq_self", 5],["Prod.fst", 5],["of_eq_true", 5],["Prod.snd", 5],["congrArg", 5],["prod_map", 5],["funext", 5],["Prod.mk", 4],["Prod.map", 3],["congrFun", 3],["rfl", 3],["congr", 2],["Function.comp", 2],["Function.comp_apply", 2],["Prod", 1],["Prod.map_snd", 1],["implies_true", 1],["Exists.intro", 1],["Eq.symm", 1],["forall_congr", 1],["Prod.map_fst", 1],["Prod.ext'", 1],["Exists", 1],["Eq.refl", 1]]],
["Eq.mpr", 12, [["Fin.mk", 8],["congrArg", 8],["OfNat.ofNat", 7],["Eq", 7],["congrFun", 6],["Eq.refl", 6],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["eq_self", 5],["Fin.val", 4],["LT.lt", 4],["rfl", 3],["BinaryHeap.arr", 3],["Array.size", 3],["Classical.em", 2],["HAdd.hAdd", 2],["BinaryHeap.size_pos_of_max", 2],["HSub.hSub", 2],["Bool.true", 2],["dite_congr", 2],["congr", 2],["UFModel.parent", 2],["dif_pos", 2],["eq_false", 2],["Array.size_set", 2],["UnionFind.rankMaxAux", 2],["Decidable.decide", 2],["dite_true", 2],["UnionFind.size", 2],["dif_neg", 2],["Iff.mpr", 1],["Array.isEqvAux.proof_1", 1],["UFModel.Agrees.set", 1],["And.left", 1],["UFModel.push", 1],["decide_eq_true_eq", 1],["List.getLast", 1],["Ne.symm", 1],["UFModel.Agrees.push", 1],["ite_true", 1],["UnionFind.lt_rankMax'", 1],["Array.push", 1],["eq_true", 1],["ite_false", 1],["PProd.fst", 1],["ite_congr", 1],["WellFoundedRelation.rel", 1],["And.right", 1],["BinaryHeap.insert.proof_1", 1],["List.length", 1],["List.nil", 1],["And.intro", 1],["Nat.succ_pos", 1],["sizeOf_nat", 1],["Array.size_push", 1],["UFNode.mk", 1],["funext", 1],["Nat.lt_succ_iff", 1],["List.cons_ne_nil", 1],["Array.isEqvAux_self", 1],["Nat.le_add_right", 1],["List.getLast_singleton", 1],["eq_true_of_decide", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["dite_false", 1],["Subsingleton.elim", 1],["And.imp", 1],["absurd", 1],["UFModel.push.proof_1", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["Nat.one_pos", 1],["lt_irrefl", 1],["UnionFind.rank_lt", 1],["Bool.and_true", 1],["Array.isEqvAux.proof_2", 1],["Eq.symm", 1],["Bool.false", 1],["True", 1],["UnionFind.rankMax", 1],["List.getLast_cons", 1],["BinaryHeap.size_heapifyUp", 1],["id", 1],["Subtype.val", 1],["WellFounded.fix", 1],["Nat.sub_lt_sub_left", 1],["Nat.sub_lt", 1],["Array.isEqv", 1],["Array.get", 1],["WellFounded.fix_eq", 1],["Nat.lt_eq", 1],["and", 1],["List.cons", 1],["Array.isEqvAux.proof_3", 1],["List.get_singleton", 1],["Fin.isLt", 1],["UFModel.Agrees.get_eq", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["UFModel.rank", 1]]],
["ReprAtom", 12, [["ReprAtom.mk", 11]]],
["Ord", 12, [["Ord.mk", 11],["compareOfLessAndEq", 9],["Bool.true", 1],["Ordering.gt", 1],["Ordering.lt", 1],["Ordering", 1],["Bool.false", 1],["Ordering.eq", 1],["Fin.val", 1],["Unit.unit", 1],["Ord.compare", 1]]],
["Div", 12, [["Div.mk", 10],["Fin.div", 1],["USize.div", 1],["UInt16.div", 1],["UInt64.div", 1],["System.FilePath.join", 1],["UInt32.div", 1],["Float.div", 1],["Nat.div", 1],["Int.div", 1],["UInt8.div", 1]]],
["List.erase", 12, [["List.erase", 10],["Eq.refl", 9],["Eq", 9],["rfl", 7],["Eq.mpr", 7],["List.erase_eq_erasep", 6],["List.cons", 6],["congrArg", 5],["congrFun", 4],["Membership.mem", 4],["Ne.symm", 4],["of_eq_true", 4],["Not", 4],["eq_self", 4],["Eq.trans", 4],["congr", 3],["List.erase_cons", 3],["if_neg", 3],["HAppend.hAppend", 3],["Eq.symm", 3],["List.erasep", 2],["Decidable.em", 2],["List", 2],["Eq.mp", 2],["Bool.true", 1],["And", 1],["And.left", 1],["List.erase_cons_tail", 1],["List.erasep_append_right", 1],["Or", 1],["Iff.mp", 1],["ne_eq", 1],["List.erasep_cons_of_pos", 1],["if_pos", 1],["EqIffBeqTrue", 1],["List.exists_of_erasep", 1],["not_or", 1],["Subsingleton.elim", 1],["Exists.intro", 1],["ite", 1],["Subset.subset", 1],["List.mem_cons", 1],["NeqIffBeqFalse", 1],["propext", 1],["List.length_erasep_of_mem", 1],["eq_false", 1],["eq_true_of_decide", 1],["List.erasep_append_left", 1],["ite_congr", 1],["And.right", 1],["List.length", 1],["And.intro", 1],["eq_of_heq", 1],["Iff", 1],["HEq.refl", 1],["Nat.pred", 1],["List.erasep_cons_of_neg", 1],["ite_true", 1],["List.mem_erasep_of_neg", 1],["List.erasep_subset", 1],["Unit.unit", 1],["Exists", 1],["List.erase_cons_head", 1]]],
["Nat.le_refl", 12, [["Eq", 9],["Eq.refl", 8],["Fin.mk", 6],["congrArg", 6],["OfNat.ofNat", 6],["Eq.trans", 6],["of_eq_true", 5],["congrFun", 5],["eq_self", 4],["rfl", 4],["Array.size", 4],["Eq.symm", 4],["Eq.mpr", 4],["LT.lt", 3],["Nat.lt_succ_self", 3],["HAdd.hAdd", 3],["eq_true", 2],["List.get", 2],["dite_congr", 2],["List.length", 2],["List.cons", 2],["HEq.refl", 2],["dite_true", 2],["Nat.add", 2],["congr", 2],["Bool.false", 2],["Decidable.decide", 2],["Bool.true", 2],["Nat.lt_add_right", 1],["HAppend.hAppend", 1],["List.drop", 1],["Array.isEqvAux.proof_3", 1],["dif_pos", 1],["Bool.and_true", 1],["eq_true_of_decide", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["lt_irrefl", 1],["Array.isEqvAux.proof_1", 1],["BinaryHeap.size_heapifyUp", 1],["Array.isEqv", 1],["Classical.em", 1],["Array.getLit", 1],["WellFounded.fix_eq", 1],["Nat.lt_trans", 1],["UFModel.rank", 1],["Array.isEqvAux_self", 1],["Array.swap", 1],["Fin.val_eq_of_lt", 1],["True", 1],["BinaryHeap.arr", 1],["UFModel.push", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["decide_eq_true_eq", 1],["Nat.le_of_succ_le", 1],["Array.toListLitAux", 1],["id", 1],["UFModel.Agrees.push", 1],["HSub.hSub", 1],["sorryAx", 1],["WellFounded.fix", 1],["Nat.add_zero", 1],["Array.push", 1],["List.length_cons", 1],["Array.data", 1],["Array.get", 1],["dite_false", 1],["List.length_append", 1],["Array.size_swap", 1],["Nat.lt_eq", 1],["eq_false", 1],["PProd.fst", 1],["And.imp", 1],["BinaryHeap.insert.proof_1", 1],["Nat.lt_of_lt_of_le", 1],["Subsingleton.elim", 1],["List.nil", 1],["eq_of_heq", 1],["and", 1],["WellFoundedRelation.rel", 1],["UFNode.mk", 1],["List.cons_ne_nil", 1],["Array.size_push", 1],["funext", 1],["sizeOf_nat", 1],["UFModel.push.proof_1", 1],["List.getLast", 1],["List.getLast_eq_get", 1],["dite", 1],["Nat.le_of_succ_le_succ", 1],["Fin.val", 1],["Nat.le_add_right", 1],["dif_neg", 1],["UFModel.parent", 1],["Array.toArrayLit", 1]]],
["Seq.seq", 12, [["Eq", 3],["rfl", 3],["Seq.seq", 2],["LawfulMonad.bind_map", 2],["Bind.bind", 2],["Eq.refl", 2],["Functor.map", 2],["Eq.mpr", 2],["LawfulApplicative.pure_seq", 1],["id", 1],["of_eq_true", 1],["Eq.symm", 1],["eq_self", 1],["congrFun", 1],["congrArg", 1],["LawfulFunctor.id_map", 1],["Eq.trans", 1]]],
["Quot.mk", 12, [["rfl", 4],["Quot.sound", 2],["Eq", 1],["Quot.exists_rep", 1],["instSubsingletonDecidable", 1],["Exists.intro", 1],["Quotient.sound.proof_1", 1],["Quot.recOnSubsingleton", 1],["PSigma.eta", 1],["Quot.ind", 1],["Quot.inductionOn", 1],["Quotient.mk", 1]]],
["Tactic.Ring.Cache", 12, [["Pure.pure", 7],["Bind.bind", 7],["List.nil", 5],["List.toArray", 5],["List.cons", 5],["liftM", 5],["Tactic.Ring.HornerExpr.e", 4],["Prod.mk", 4],["Tactic.Ring.mkAppCS", 4],["Prod.fst", 3],["Tactic.Ring.RingM", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["Option.some", 3],["Tactic.Ring.HornerExpr.const", 3],["OfNat.ofNat", 3],["HAdd.hAdd", 2],["Prod", 2],["Tactic.Ring.HornerExpr", 2],["ite", 2],["MonadReader.read", 2],["Tactic.Ring.Cache.α", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Prod.snd", 2],["Option.none", 2],["Eq", 2],["Bool.true", 1],["Tactic.Ring.Cache.cs", 1],["Tactic.Ring.State.atoms", 1],["And", 1],["Nat", 1],["PUnit.unit", 1],["ForIn.forIn", 1],["MProd.snd", 1],["Tactic.Ring.State.mk", 1],["Array.push", 1],["PProd.snd", 1],["Array.getOp", 1],["MProd.mk", 1],["modify", 1],["HMul.hMul", 1],["MonadState.get", 1],["PProd.fst", 1],["Tactic.Ring.Cache.univ", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["MProd.fst", 1],["Tactic.Ring.addAtom", 1],["ForInStep.done", 1],["ForInStep.yield", 1],["HAppend.hAppend", 1],["Unit.unit", 1],["Eq.refl", 1],["Tactic.Ring.State.numAtoms", 1]]],
["Add", 12, [["Add.mk", 9],["USize.add", 1],["Float.add", 1],["UInt32.add", 1],["Nat.add", 1],["Int.add", 1],["UInt8.add", 1],["Fin.add", 1],["UInt16.add", 1],["UInt64.add", 1]]],
["Prod.Lex", 12, [["Eq.refl", 3],["eq_of_heq", 3],["Prod.Lex", 3],["Eq.symm", 3],["Prod.Lex.left", 3],["HEq.refl", 3],["Prod.mk", 2],["Prod.Lex.right", 2],["Nat.lt", 1],["Or", 1],["Prod.Lex.decidable.proof_1", 1],["or_true", 1],["of_eq_true", 1],["eq_self", 1],["Prod.snd", 1],["Prod.RProdSubLex.proof_1", 1],["and_self", 1],["true_or", 1],["congrFun", 1],["Nat.eq_or_lt_of_le", 1],["Prod.lex_def", 1],["eq_true", 1],["WellFoundedRelation.rel", 1],["WellFounded.apply", 1],["congr", 1],["And", 1],["Prod.fst", 1],["congrArg", 1],["Iff.symm", 1],["Acc.intro", 1],["Eq.trans", 1],["WellFoundedRelation.wf", 1],["Prod.lexAccessible.proof_1", 1],["Iff.intro", 1],["Acc", 1],["WellFounded.intro", 1],["decidable_of_decidable_of_iff", 1],["Prod.Lex.right'.proof_1", 1],["True", 1],["Prod.lexAccessible", 1],["Eq", 1]]],
["Equiv.mk", 12, [["rfl", 4],["Eq.refl", 2],["Eq.trans", 2],["LawfulFunctor.id_map", 2],["of_eq_true", 2],["eq_self", 2],["Functor.map_map", 2],["congrFun", 2],["Equiv.symm", 2],["Functor.map", 2],["congrArg", 2],["funext", 2],["Equiv.toFun", 2],["Eq", 2],["OfNat.ofNat", 1],["Equiv.mk", 1],["And.intro", 1],["eq_of_heq", 1],["HEq.refl", 1],["Equiv.right_inv", 1],["Eq.symm", 1],["Equiv.self_comp_symm", 1],["Equiv.symm_apply_apply", 1],["Equiv.symm_comp_self", 1],["Equiv.apply_symm_apply", 1],["Eq.propIntro", 1],["Equiv.left_inv", 1]]],
["Tactic.Ring.State", 12, [["Pure.pure", 7],["Bind.bind", 7],["List.nil", 5],["List.toArray", 5],["List.cons", 5],["liftM", 5],["Tactic.Ring.HornerExpr.e", 4],["Prod.mk", 4],["Tactic.Ring.mkAppCS", 4],["Prod.fst", 3],["Tactic.Ring.RingM", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["Option.some", 3],["Tactic.Ring.HornerExpr.const", 3],["OfNat.ofNat", 3],["HAdd.hAdd", 2],["Prod", 2],["Tactic.Ring.HornerExpr", 2],["ite", 2],["MonadReader.read", 2],["Tactic.Ring.Cache.α", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Prod.snd", 2],["Option.none", 2],["Eq", 2],["Bool.true", 1],["Tactic.Ring.Cache.cs", 1],["Tactic.Ring.State.atoms", 1],["And", 1],["Nat", 1],["PUnit.unit", 1],["ForIn.forIn", 1],["MProd.snd", 1],["Tactic.Ring.State.mk", 1],["Array.push", 1],["PProd.snd", 1],["Array.getOp", 1],["MProd.mk", 1],["modify", 1],["HMul.hMul", 1],["MonadState.get", 1],["PProd.fst", 1],["Tactic.Ring.Cache.univ", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["MProd.fst", 1],["Tactic.Ring.addAtom", 1],["ForInStep.done", 1],["ForInStep.yield", 1],["HAppend.hAppend", 1],["Unit.unit", 1],["Eq.refl", 1],["Tactic.Ring.State.numAtoms", 1]]],
["AddMonoid.nsmul", 12, [["congrArg", 10],["AddMonoid.nsmul_zero'", 5],["AddMonoid.nsmul_succ'", 5],["UInt8.val", 2],["UInt16.mk", 2],["USize.mk", 2],["UInt64.mk", 2],["UInt32.mk", 2],["UInt16.val", 2],["USize.val", 2],["UInt64.val", 2],["UInt32.val", 2],["UInt8.mk", 2]]],
["Function.inv_fun_on", 12, [["Eq", 3],["Exists.intro", 3],["funext", 2],["Function.inv_fun_on_pos", 2],["Exists", 2],["Function.LeftInverse_inv_fun", 2],["Function.inv_fun_eq", 2],["Eq.refl", 1],["Eq.mpr", 1],["Function.inv_fun", 1],["And.intro", 1],["Function.inv_fun_on_eq", 1],["Function.LeftInverse.surjective", 1],["Function.inv_fun_on_neg", 1],["Set.univ", 1],["trivial", 1],["mt", 1],["Membership.mem", 1],["And", 1],["And.left", 1],["And.right", 1]]],
["Nat.lcm", 12, [["Nat.lcm", 4],["Nat.lcm_comm", 3],["Eq.mpr", 3],["OfNat.ofNat", 3],["Eq.refl", 3],["Eq", 2],["Nat.lcm_zero_left", 2],["Nat.gcd", 2],["Nat.eq_zero_or_pos", 2],["HMul.hMul", 2],["Eq.symm", 2],["Nat.dvd_lcm_left", 2],["rfl", 2],["Nat.dvd_gcd", 1],["Nat.pos_of_dvd_of_pos", 1],["Nat.lcm_one_left", 1],["Nat.dvd_lcm_right", 1],["Nat.mul_dvd_mul_right", 1],["Nat.gcd_mul_lcm", 1],["Nat.dvd_trans", 1],["Nat.dvd_zero", 1],["Nat.gcd_mul_right", 1],["Nat.mul_dvd_mul_left", 1],["Nat.gcd_pos_of_pos_left", 1],["Nat.lcm_dvd", 1],["Nat.dvd_antisymm", 1],["Dvd.dvd", 1],["HDiv.hDiv", 1],["Nat.gcd_dvd_right", 1],["Nat.mul_div_assoc", 1],["Nat.mul_comm", 1],["Exists.intro", 1],["Nat.dvd_of_mul_dvd_mul_left", 1]]],
["Except.error", 11, [["rfl", 8],["Eq.refl", 4],["Eq.symm", 3],["Except.error", 3],["Except.ok", 2],["Eq.mpr", 2],["congrArg", 2],["Except", 2],["Eq", 2],["Except.map", 1],["eq_self", 1],["bind_congr", 1],["ExceptT.mk", 1],["ExceptT.run", 1],["map_eq_pure_bind", 1],["congr", 1],["OfNat.ofNat", 1],["id_eq", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Bind.bind", 1],["HEq.refl", 1],["funext", 1],["Pure.pure", 1],["of_eq_true", 1]]],
["Tactic.Ring.RingM", 11, [["Pure.pure", 7],["Bind.bind", 7],["List.nil", 5],["List.toArray", 5],["List.cons", 5],["liftM", 5],["Tactic.Ring.HornerExpr.e", 4],["Prod.mk", 4],["Tactic.Ring.mkAppCS", 4],["Prod.fst", 3],["Tactic.Ring.RingM", 3],["Tactic.Ring.HornerExpr.xadd'", 3],["Option.some", 3],["Tactic.Ring.HornerExpr.const", 3],["OfNat.ofNat", 3],["HAdd.hAdd", 2],["Prod", 2],["Tactic.Ring.HornerExpr", 2],["ite", 2],["MonadReader.read", 2],["Tactic.Ring.Cache.α", 2],["Tactic.Ring.HornerExpr.xadd", 2],["Prod.snd", 2],["Option.none", 2],["Eq", 2],["Bool.true", 1],["Tactic.Ring.Cache.cs", 1],["Tactic.Ring.State.atoms", 1],["And", 1],["Nat", 1],["PUnit.unit", 1],["ForIn.forIn", 1],["MProd.snd", 1],["Tactic.Ring.State.mk", 1],["Array.push", 1],["PProd.snd", 1],["Array.getOp", 1],["MProd.mk", 1],["modify", 1],["HMul.hMul", 1],["MonadState.get", 1],["PProd.fst", 1],["Tactic.Ring.Cache.univ", 1],["Tactic.Ring.HornerExpr.reflConv", 1],["MProd.fst", 1],["Tactic.Ring.addAtom", 1],["ForInStep.done", 1],["ForInStep.yield", 1],["HAppend.hAppend", 1],["Unit.unit", 1],["Eq.refl", 1],["Tactic.Ring.State.numAtoms", 1]]],
["System.Platform.getNumBits", 11, [["OfNat.ofNat", 4],["Unit.unit", 3],["Bool.true", 2],["Eq.symm", 2],["HEq.refl", 2],["usize_size_eq", 2],["eq_of_heq", 2],["LT.lt", 2],["USize.size", 2],["of_decide_eq_true", 2],["instNonempty", 2],["Eq.refl", 2],["Nat.zero_lt_succ", 1],["System.Platform.getNumBits", 1],["System.Platform.numBits", 1],["Subtype.property", 1],["Nat.pos_pow_of_pos", 1],["Fin.val_eq_of_lt", 1],["Fin.ofNat'", 1],["Nat.lt_trans", 1],["usize_size_gt_zero", 1],["USize.size_positive", 1],["Inhabited.mk", 1]]],
["Subarray", 11, [["Subarray.toArray", 3],["OfNat.ofNat", 3],["Array.size", 3],["dite", 3],["LT.lt", 2],["ToStream.mk", 2],["Subarray.mk", 2],["Subarray.start", 2],["HAppend.hAppend", 2],["Subarray.stop", 2],["Array.toSubarray", 2],["LE.le", 1],["Array.toSubarray.proof_1", 1],["Option.none", 1],["ForIn.mk", 1],["HAdd.hAdd", 1],["Stream.mk", 1],["Nat.le_refl", 1],["ToString.toString", 1],["Subarray.popFront.proof_1", 1],["repr", 1],["Subarray.h₂", 1],["Subarray.as", 1],["ToString.mk", 1],["Array.ofSubarray", 1],["Subarray.forIn", 1],["Coe.mk", 1],["Append.mk", 1]]],
["Nat.Linear.Poly.denote_eq", 11, [["congrFun", 8],["Eq.symm", 8],["congr", 8],["congrArg", 8],["Eq.refl", 8],["Eq", 7],["Eq.mpr", 7],["cond", 7],["Eq.trans", 7],["Classical.em", 7],["Bool.true", 7],["cond_false", 6],["of_eq_true", 6],["Nat.Linear.Poly.denote_eq", 6],["cond_true", 6],["Prod.mk", 6],["Bool.of_not_eq_true", 6],["LE.le", 5],["eq_self", 5],["Nat.Linear.Poly.denote", 4],["List.nil", 4],["Eq.mp", 3],["HAdd.hAdd", 3],["OfNat.ofNat", 3],["and", 3],["HAppend.hAppend", 3],["Nat.Linear.Poly.denote_le", 3],["implies_congr", 3],["Nat.add_comm", 2],["List.reverse", 2],["Nat.Linear.Poly.of_isZero", 2],["Prod", 2],["Nat.Linear.Expr.denote", 2],["Nat.blt", 2],["Nat.Linear.Poly.cancelAux", 2],["HSub.hSub", 2],["Nat.zero_add", 2],["Nat.Linear.Poly.isZero", 2],["Bool.and_eq_true", 2],["Nat.sub_eq", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly", 2],["Nat.Linear.Expr.toPoly", 2],["List.cons", 2],["List.append_nil", 2],["funext", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["absurd", 2],["Nat.Linear.hugeFuel", 1],["eq_true_of_decide", 1],["Nat.add_left_comm", 1],["id", 1],["Nat.Linear.Expr.toNormPoly", 1],["Bool.or_eq_true", 1],["propext", 1],["List.nil_append", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.Linear.Poly.denote_append", 1],["List.reverse_nil", 1],["Nat.Linear.Poly.denote_fuse", 1],["False", 1],["eq_true", 1],["Bool.false", 1],["List.reverse_cons", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["HMul.hMul", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Bool.and_self", 1],["True", 1],["Nat.Linear.Poly.denote_reverse", 1],["Nat.add_eq", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Var.denote", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Or", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Iff.intro", 1],["or", 1],["Bool.and_true", 1],["Bool.and_false", 1]]],
["Prod.swap", 11, [["rfl", 4],["Prod.swap_swap", 3],["Prod.swap_LeftInverse", 2],["Prod.swap_injective", 2],["Eq", 1],["And.intro", 1],["Function.LeftInverse.injective", 1],["Prod.swap_surjective", 1],["Function.RightInverse.surjective", 1],["funext", 1],["Prod.swap", 1],["Function.injective.eq_iff", 1]]],
["LawfulMonad", 11, [["rfl", 4],["LawfulMonad.mk", 4],["Eq", 1],["Except.error", 1],["ExceptT.ext", 1],["LawfulMonad.bind_assoc", 1],["inferInstanceAs", 1],["Eq.trans", 1],["ExceptT.instLawfulMonadExceptTInstMonadExceptT.proof_1", 1],["Pure.pure", 1],["Eq.mpr", 1],["ExceptT.bind_pure_comp", 1],["Bind.bind", 1],["Except.ok", 1],["of_eq_true", 1],["ExceptT.run_pure", 1],["eq_self", 1],["ExceptCpsT.instLawfulMonadExceptCpsTInstMonadExceptCpsT.proof_1", 1],["congrFun", 1],["bind_congr", 1],["LawfulMonad", 1],["ExceptT.run", 1],["congr", 1],["instLawfulMonadStateRefT'InstMonadStateRefT'.proof_1", 1],["congrArg", 1],["LawfulMonad.pure_bind", 1],["Eq.symm", 1],["funext", 1],["ExceptT.run_bind", 1],["Id.instLawfulMonadIdInstMonadId.proof_1", 1],["Except", 1],["StateCpsT.instLawfulMonadStateCpsTInstMonadStateCpsT.proof_1", 1],["Eq.refl", 1]]],
["MonadExceptOf", 11, [["MonadExceptOf.mk", 8],["throwThe", 3],["tryCatchThe", 3],["EStateM", 2],["inferInstanceAs", 2],["Except.error", 2],["ExceptT.mk", 2],["MonadExceptOf", 2],["EStateM.throw", 1],["StateRefT'.lift", 1],["EStateM.tryCatch", 1],["OptionT.fail", 1],["Function.comp", 1],["ExceptT.tryCatch", 1],["Pure.pure", 1],["OptionT.tryCatch", 1],["OptionT.mk", 1],["Except.tryCatch", 1]]],
["GE.ge", 11, [["Trans.mk", 3],["GE.ge", 2],["Unit.unit", 1],["Or", 1],["Iff.intro", 1],["Nat.zero_le", 1],["Nat.not_le_eq", 1],["Or.inl", 1],["Nat.succ", 1],["ge_trans", 1],["le_trans", 1],["lt_of_not_ge", 1],["Nat.eq_or_lt_of_le", 1],["Or.inr", 1],["not_le_of_gt", 1],["absurd", 1],["Nat.lt_or_ge", 1],["Nat.le_succ_of_le", 1],["instTransGeToLE.proof_1", 1],["lt_or_le", 1],["instTransGeToLEGtToLT.proof_1", 1],["PProd.fst", 1],["Nat.le_refl", 1],["instTransGtToLTGeToLE.proof_1", 1],["LT.lt", 1]]],
["and", 11, [["Eq.refl", 10],["Eq.symm", 7],["rfl", 6],["Eq", 4],["Bool.true", 4],["congrFun", 3],["Eq.trans", 3],["congrArg", 3],["of_eq_true", 3],["eq_self", 3],["Bool.false", 2],["and", 2],["Classical.em", 2],["congr", 2],["Decidable.decide", 2],["Array.size", 2],["OfNat.ofNat", 2],["HAdd.hAdd", 2],["LT.lt", 2],["Bool.and_true", 2],["Eq.mpr", 2],["LE.le", 1],["Array.isEqvAux_self", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["HMod.hMod", 1],["Subsingleton.elim", 1],["Array.isEqv", 1],["Nat.add_le_add_left", 1],["cond_false", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["True", 1],["of_decide_eq_true", 1],["Nat.mod_lt", 1],["decide_eq_true_eq", 1],["Prod.mk", 1],["cond", 1],["id", 1],["Eq.mp", 1],["HSub.hSub", 1],["WellFoundedRelation.rel", 1],["Nat.Linear.Poly.denote", 1],["sizeOf_nat", 1],["WellFounded.fix", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["cond_true", 1],["Array.get", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Array.isEqvAux.proof_1", 1],["Nat.lt_eq", 1],["Nat.add_le_add", 1],["Bool.and_self", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.of_not_eq_true", 1],["funext", 1],["Nat.Linear.Poly.denote_le", 1],["dite_true", 1],["eq_true_of_decide", 1],["dite", 1],["dif_neg", 1],["dif_pos", 1],["Array.isEqvAux.proof_3", 1],["Bool.and_false", 1]]],
["Nat.Linear.Poly.denote_le", 11, [["congrFun", 8],["Eq.symm", 8],["congr", 8],["congrArg", 8],["Eq.refl", 8],["Eq", 7],["Eq.mpr", 7],["cond", 7],["Eq.trans", 7],["Classical.em", 7],["Bool.true", 7],["LE.le", 6],["cond_true", 6],["Prod.mk", 6],["Bool.of_not_eq_true", 6],["cond_false", 6],["Nat.Linear.Poly.denote_le", 6],["of_eq_true", 6],["eq_self", 5],["Nat.Linear.Poly.denote", 4],["List.nil", 4],["OfNat.ofNat", 3],["Nat.Linear.Poly.denote_eq", 3],["HAdd.hAdd", 3],["Eq.mp", 3],["and", 3],["HAppend.hAppend", 3],["implies_congr", 3],["List.append_nil", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse", 2],["absurd", 2],["Nat.Linear.Poly.of_isZero", 2],["Prod", 2],["Nat.blt", 2],["Nat.add_comm", 2],["HSub.hSub", 2],["Bool.and_eq_true", 2],["Nat.Linear.Expr.denote", 2],["List.cons", 2],["Nat.Linear.Expr.toPoly", 2],["Nat.sub_eq", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.zero_add", 2],["funext", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly", 2],["Nat.Linear.Expr.denote_toPoly", 2],["False", 1],["Nat.Linear.Poly.isNonZero", 1],["id", 1],["Nat.Linear.Expr.toNormPoly", 1],["List.nil_append", 1],["Nat.Linear.Poly.denote_reverse", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.and_true", 1],["Bool.false", 1],["Nat.Linear.Poly.denote_append", 1],["List.reverse_nil", 1],["Bool.and_false", 1],["True", 1],["eq_true", 1],["eq_true_of_decide", 1],["Nat.add_eq", 1],["HMul.hMul", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["List.reverse_cons", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["Or", 1],["Iff.intro", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Var.denote", 1],["Bool.or_eq_true", 1],["Nat.Linear.hugeFuel", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Nat.Linear.Poly.denote_sort_go", 1],["or", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["propext", 1],["Nat.add_le_add_left", 1],["Nat.add_left_comm", 1]]],
["List.join", 11, [["congrArg", 5],["Eq.trans", 5],["of_eq_true", 5],["And.intro", 5],["rfl", 5],["eq_self", 4],["Exists.intro", 4],["Membership.mem", 3],["HAppend.hAppend", 3],["propext", 3],["And", 3],["Iff.intro", 3],["Exists", 3],["congrFun", 3],["Eq.mpr", 3],["congr", 3],["funext", 3],["Eq", 3],["Eq.refl", 3],["Iff.mpr", 2],["List.mem_bind", 2],["List.join", 2],["List.mem_join", 2],["PProd.fst", 2],["Iff", 2],["List.bind", 2],["eq_of_heq", 2],["HEq.refl", 2],["Eq.symm", 2],["Unit.unit", 2],["List.map", 2],["List.cons_bind", 2],["List.mem_map", 2],["List.not_mem_nil", 1],["Or.inr", 1],["List.cons_append", 1],["false_and", 1],["exists_eq_right_right'", 1],["eq_false", 1],["Prod.mk.injEq", 1],["iff_self", 1],["List.nil", 1],["List.cons", 1],["List.map_append", 1],["Or", 1],["List.Mem.tail", 1],["List.mem_append", 1],["List.append_assoc", 1],["List.Mem.head", 1],["False", 1],["id", 1],["Or.inl", 1],["implies_congr", 1],["exists_false", 1],["and_imp", 1]]],
["System.Platform.numBits", 11, [["OfNat.ofNat", 4],["Unit.unit", 3],["Bool.true", 2],["Eq.symm", 2],["HEq.refl", 2],["usize_size_eq", 2],["eq_of_heq", 2],["LT.lt", 2],["USize.size", 2],["of_decide_eq_true", 2],["instNonempty", 2],["Eq.refl", 2],["Nat.zero_lt_succ", 1],["System.Platform.getNumBits", 1],["System.Platform.numBits", 1],["Subtype.property", 1],["Nat.pos_pow_of_pos", 1],["Fin.val_eq_of_lt", 1],["Fin.ofNat'", 1],["Nat.lt_trans", 1],["usize_size_gt_zero", 1],["USize.size_positive", 1],["Inhabited.mk", 1]]],
["StateM", 11, [["Bind.bind", 4],["Pure.pure", 4],["ULift.up", 3],["ULift.down", 3],["MonadState.get", 3],["OfNat.ofNat", 2],["RandG", 2],["Fin", 2],["MonadStateOf.set", 2],["Eq.refl", 1],["instSubsingletonStateM.proof_1", 1],["BoundedRandom.randomR", 1],["Subsingleton.elim", 1],["Eq.mpr", 1],["ite", 1],["BEq.beq", 1],["Prod", 1],["Random.rand", 1],["RandomGen.split", 1],["randNat", 1],["Nat", 1],["Nat.succ", 1],["RandomGen.next", 1],["Random.random", 1],["Prod.map", 1],["Fin.ofNat", 1],["Bool.false", 1],["funext", 1],["RandomGen.range", 1],["Subsingleton.intro", 1],["ULift", 1],["Id", 1],["rfl", 1],["Eq", 1],["Bool.true", 1]]],
["Fin.size_positive", 11, [["Fin.mk", 9],["HMod.hMod", 9],["Nat.mod_lt", 9],["Fin.val", 9],["Eq", 9],["Fin.size_positive", 8],["rfl", 7],["congrArg", 4],["Eq.refl", 4],["HAdd.hAdd", 4],["HMul.hMul", 4],["Fin.size_positive'", 3],["congrFun", 3],["Eq.trans", 3],["Fin.add_def", 2],["eq_self", 2],["Fin.mul_def", 2],["Eq.mpr", 2],["Fin.ofNat'", 2],["Fin.eq_of_val_eq", 2],["congr", 2],["OfNat.ofNat", 2],["of_eq_true", 2],["Nat.succ", 2],["Fin.nsmuls_eq", 1],["Fin.ofNat'_succ", 1],["Nat.mul_mod", 1],["Fin.zero_def", 1],["Nat.add_comm", 1],["Nat.mod_eq_of_lt", 1],["HSub.hSub", 1],["Eq.symm", 1],["Nat.mod_add_mod", 1],["Fin.ext", 1],["Subsingleton.allEq", 1],["Fin.mk.injEq", 1],["Nat.add_mod_mod", 1],["Nat.succ_mul", 1],["MonoidWithZero.zero_mul", 1],["Fin.one_val", 1],["Nat.zero_mod", 1]]],
["BEq", 11, [["BEq.mk", 10],["BEq.beq", 5],["and", 3],["Bool", 3],["Bool.true", 2],["Bool.false", 2],["Float.beq", 1],["Array.isEqv", 1],["Option.none", 1],["Decidable.decide", 1],["List.beq", 1],["Option.some", 1],["Unit.unit", 1],["Ordering.toCtorIdx", 1],["Nat.beq", 1],["Eq", 1],["Substring.beq", 1]]],
["UnionFind.size", 10, [["Fin.val", 7],["UnionFind.size", 6],["Eq.refl", 6],["LT.lt", 5],["Eq.mpr", 5],["Fin.isLt", 5],["congrArg", 4],["congrFun", 4],["Eq.trans", 4],["Fin.mk", 3],["Array.get", 3],["Array.size", 3],["UFNode.parent", 3],["eq_true", 3],["UnionFind.arr", 3],["Eq", 3],["Eq.mpr_prop", 2],["of_eq_true", 2],["OfNat.ofNat", 2],["UnionFind.rankMaxAux", 2],["dite_congr", 2],["UFModel.Models.rank_eq", 2],["And", 2],["UFModel.parent", 2],["dite_true", 2],["UnionFind.model'", 2],["UFModel.Models.parent_eq'", 2],["Iff.mpr", 1],["eq_true_of_decide", 1],["UFModel.rank", 1],["PSigma", 1],["Exists", 1],["UnionFind.rankMax", 1],["UFModel.Models.parent_eq", 1],["ne_eq", 1],["UFNode.rank", 1],["Ne", 1],["eq_self", 1],["dif_pos", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["Exists.intro", 1],["UFModel.rank_lt", 1],["congr", 1],["Subtype.property", 1],["Eq.symm", 1],["Classical.em", 1],["And.intro", 1],["Nat.succ_pos", 1],["Sigma", 1],["UnionFind.findAux", 1],["Subtype.val", 1],["UnionFind.lt_rankMax", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["UnionFind.rank_lt", 1],["implies_congr", 1],["UFModel.Models.size_eq", 1],["Bool.true", 1],["UFModel.Models", 1]]],
["DecidableRel", 10, [["decidable_of_decidable_of_iff", 2],["Eq", 2],["Decidable", 2],["inferInstanceAs", 2],["Decidable.isFalse", 2],["DecidableRel", 2],["Decidable.isTrue", 2],["Bool.true", 2],["Ord.compare", 2],["LE.le", 1],["decidableLt_of_decidableLe.proof_2", 1],["decidableLt_of_decidableLe.proof_1", 1],["Option.lt", 1],["not_false", 1],["Ordering.lt", 1],["Nat.decidable_dvd.proof_1", 1],["LT.lt", 1],["BEq.beq", 1],["dite", 1],["trivial", 1],["lt_of_le_not_le", 1],["Unit.unit", 1],["Prod.Lex.decidable.proof_1", 1],["Ordering.isLE", 1]]],
["Array.get?", 10, [["congrArg", 8],["Eq.trans", 8],["Eq", 8],["congrFun", 7],["Option.some", 7],["of_eq_true", 7],["eq_self", 7],["Array.data", 5],["Eq.refl", 5],["Array.mk", 4],["Fin.mk", 4],["Array.get?_eq_get?", 4],["Option.none", 3],["Eq.mpr", 3],["Fin.val", 3],["Array.get?", 3],["BinaryHeap.max", 2],["congr", 2],["HAppend.hAppend", 2],["List.get?_eq_get", 2],["Array.get", 2],["Array.size", 2],["List.concat_eq_append", 2],["eq_false", 2],["Eq.mpr_prop", 2],["List.nil", 2],["List.cons", 2],["Classical.em", 2],["dite_congr", 2],["List.set", 2],["List.get?", 2],["List.get?_set_ne", 1],["Array.set", 1],["List.get?_append", 1],["Array.get?_set_ne", 1],["dite_false", 1],["dif_pos", 1],["eq_true", 1],["le_of_not_lt", 1],["Array.get?_set_eq", 1],["Eq.symm", 1],["Not", 1],["not_lt_of_ge", 1],["Fin.isLt", 1],["List.get?_len_le", 1],["List.get?_set_of_lt", 1],["List.get", 1],["if_neg", 1],["Array.get_eq_get", 1],["dite_true", 1],["LT.lt", 1],["List.get?_concat_length", 1],["True.intro", 1],["dif_neg", 1],["ne_eq", 1],["Bool.true", 1],["if_pos", 1],["eq_true_of_decide", 1]]],
["Option.isSome", 10, [["Eq.refl", 8],["Bool.true", 8],["Bool.false", 7],["congrArg", 7],["of_eq_true", 7],["Eq.symm", 7],["eq_self", 7],["Eq", 7],["eq_false_of_decide", 7],["Eq.trans", 7],["congrFun", 6],["Option.none", 6],["iff_self", 5],["congr", 5],["False", 5],["Iff", 5],["Option.some", 5],["True", 5],["Option.isSome_some", 4],["eq_false'", 3],["Fin", 3],["Eq.mp", 3],["eq_true_of_decide", 3],["Option.isSome_none", 3],["Iff.intro", 3],["Prod.mk", 3],["Bool", 3],["Unit.unit", 3],["Fin.val", 3],["Decidable.em", 3],["decide_eq_false", 3],["Option", 3],["LE.le", 2],["LT.lt", 2],["decide_eq_true_iff", 2],["eq_true", 2],["Not", 2],["eq_false", 2],["rfl", 2],["False.elim", 2],["Iff.mpr", 2],["not_le", 1],["Option.some.injEq", 1],["ne_eq", 1],["Nonempty.intro", 1],["Classical.choice", 1],["propext", 1],["HSub.hSub", 1],["Eq.mpr", 1],["decide_eq_true", 1],["Nat.not_lt_of_le", 1],["Decidable.decide", 1],["HMul.hMul", 1],["Option.isSome", 1],["Nonempty", 1],["not_lt", 1],["Nat.lt_of_not_le", 1],["Option.isNone_some", 1],["exists_eq'", 1],["funext", 1],["Option.get", 1],["HAdd.hAdd", 1],["dite", 1],["Nat.le_of_not_lt", 1],["Option.isNone_none", 1],["exists_false", 1],["false_iff", 1],["Nat.not_le_of_lt", 1],["dif_pos", 1],["Subsingleton.elim", 1],["Exists", 1]]],
["Int.sign", 10, [["rfl", 8],["Int.sign", 4],["OfNat.ofNat", 4],["Eq", 4],["Eq.symm", 3],["Eq.refl", 3],["Iff.intro", 3],["eq_of_heq", 2],["Int.negSucc", 2],["HEq.refl", 2],["Int.ofNat", 1],["Nat.cast", 1],["Int.sign_eq_neg_one_of_neg", 1],["Eq.mpr", 1],["HMul.hMul", 1],["HAdd.hAdd", 1],["Int.natAbs", 1],["Int.neg_of_sign_eq_neg_one", 1],["Int.pos_of_sign_eq_one", 1],["Int.neg_eq_neg_one_mul", 1],["Nat.succ", 1],["Neg.neg", 1],["Int.sign_zero", 1],["Int.one_mul", 1],["Int.eq_zero_of_sign_eq_zero", 1],["Int.eq_succ_of_zero_lt", 1],["Int.sign_eq_one_of_pos", 1],["Unit.unit", 1],["Int.eq_neg_succ_of_lt_zero", 1]]],
["UInt32.size", 10, [["Eq.refl", 6],["OfNat.ofNat", 5],["Decidable.em", 4],["Eq.symm", 4],["congrArg", 3],["of_eq_true", 3],["Nat.digitChar", 3],["eq_self", 3],["HDiv.hDiv", 3],["congrFun", 3],["of_decide_eq_true", 3],["congr", 3],["ite_congr", 3],["HAdd.hAdd", 3],["List.length", 3],["HMod.hMod", 3],["Eq.mpr", 3],["List.cons", 3],["Eq.trans", 3],["Nat.toDigitsCore", 3],["Bool.true", 3],["Eq", 3],["if_true", 2],["instNonempty", 2],["eq_false", 2],["if_false", 2],["implies_congr", 1],["Nat.zero_le", 1],["List.nil", 1],["Eq.mp", 1],["Fin.ofNat'", 1],["Inhabited.mk", 1],["eq_true_of_decide", 1],["Nat.lt_irrefl", 1],["LT.lt", 1],["False.elim", 1],["UInt32.size_positive", 1],["Nat.to_digits_core_length", 1],["trivial", 1],["eq_true", 1],["Nat.succ", 1],["LE.le", 1]]],
["UFModel.Models", 10, [["Exists.intro", 5],["Eq.symm", 4],["Eq.refl", 4],["OfNat.ofNat", 4],["Fin.val", 4],["Eq", 4],["Eq.trans", 3],["UnionFind.arr", 3],["Array.size", 3],["And.intro", 3],["congrFun", 2],["UFModel.parent", 2],["UFModel.Models", 2],["UFNode.parent", 2],["Fin.mk", 2],["Exists", 2],["UFModel.push", 2],["eq_self", 2],["eq_false", 2],["Array.get", 2],["UFModel.empty", 2],["Nat.le_add_right", 2],["congrArg", 2],["UFModel.Models.empty", 2],["UFModel.Models.size_eq", 2],["UFNode.mk", 2],["of_eq_true", 2],["rfl", 2],["dite_false", 1],["And.left", 1],["Eq.mpr", 1],["UFModel.Models.parent_eq", 1],["UnionFind.findAux.proof_1", 1],["Ne.symm", 1],["ite_true", 1],["And.imp", 1],["WellFounded.fix", 1],["ite_false", 1],["Array.push", 1],["eq_true", 1],["UFModel.Models.push", 1],["UFModel.Agrees.empty", 1],["UnionFind.model'", 1],["UnionFind.findAux.proof_2", 1],["HAdd.hAdd", 1],["lt_irrefl", 1],["ite_congr", 1],["UFModel.push.proof_1", 1],["And.right", 1],["UnionFind.model", 1],["UFModel.Agrees.set", 1],["eq_of_heq", 1],["congr", 1],["PSigma.mk", 1],["UFModel.rank", 1],["HEq.refl", 1],["UnionFind.size", 1],["dite_true", 1],["UFModel.Agrees.get_eq", 1],["dite", 1],["dite_congr", 1],["And", 1],["UFModel.Agrees.push", 1]]],
["Empty", 10, [["Empty", 3],["inferInstanceAs", 3],["Bind.bind", 2],["Pure.pure", 2],["MonadLift.mk", 2],["Monad", 2],["System.FilePath.metadata", 2],["Bool.true", 1],["EStateM.Result", 1],["Bool", 1],["Empty.elim", 1],["EStateM.Result.ok", 1],["False", 1],["MonadFinally", 1],["Except.toBool", 1],["instSubsingletonEmpty.proof_1", 1],["sorryAx", 1],["Bool.false", 1],["EST", 1],["Subsingleton.intro", 1],["BEq.beq", 1]]],
["WellFoundedRelation.rel", 10, [["WellFoundedRelation.wf", 6],["Eq.refl", 3],["WellFoundedRelation.rel", 3],["Eq", 3],["congrFun", 2],["OfNat.ofNat", 2],["of_eq_true", 2],["Acc", 2],["eq_self", 2],["congrArg", 2],["WellFounded.apply", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["WellFounded.intro", 2],["Bool.true", 2],["Classical.em", 1],["Bool.and_true", 1],["eq_true_of_decide", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Array.isEqvAux.proof_1", 1],["PSigma.lexAccessible", 1],["Array.isEqv", 1],["Bool.false", 1],["Array.isEqvAux.proof_3", 1],["Subrelation.wf", 1],["Fin.mk", 1],["WellFounded.fix_eq", 1],["dite_congr", 1],["True", 1],["decide_eq_true_eq", 1],["Prod.Lex", 1],["InvImage.wf", 1],["Array.isEqvAux_self", 1],["HSub.hSub", 1],["WellFounded.fix", 1],["Subsingleton.elim", 1],["Eq.mpr", 1],["Array.get", 1],["sizeOf_nat", 1],["Prod.RProdSubLex", 1],["Nat.lt_eq", 1],["Prod.lexAccessible", 1],["PSigma.Lex", 1],["and", 1],["congr", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["PSigma.revLex", 1],["dite", 1],["rfl", 1],["dif_neg", 1],["HAdd.hAdd", 1],["dif_pos", 1]]],
["HasEquiv.Equiv", 10, [["Setoid.iseqv", 3],["Setoid.refl", 2],["Quot.inductionOn", 1],["Setoid.trans", 1],["Iff.rfl", 1],["Subtype.refl", 1],["Equivalence.trans", 1],["Equivalence.mk", 1],["Subtype.trans", 1],["Setoid.symm", 1],["Equivalence.refl", 1],["Subtype.val", 1],["Equivalence.symm", 1],["Quot.sound", 1],["Subtype.symm", 1]]],
["List.Perm", 10, [["List.Perm.cons", 3],["List.Perm.trans", 3],["List.Perm.swap", 2],["List.Perm", 2],["PProd.fst", 2],["List.Perm.nil", 2],["List.Perm.symm", 2],["List.Perm.refl", 2],["Unit.unit", 1],["List.nil", 1],["List.cons", 1],["HAppend.hAppend", 1],["Equivalence.mk", 1],["Iff.intro", 1]]],
["Fin.ofNat'", 10, [["Fin.mk", 5],["congrArg", 5],["Nat.mod_lt", 5],["Eq.refl", 5],["Fin.val", 5],["HMod.hMod", 5],["Eq", 5],["congrFun", 4],["rfl", 4],["Eq.trans", 4],["Fin.size_positive", 3],["of_eq_true", 3],["HMul.hMul", 3],["eq_self", 3],["Fin.size_positive'", 3],["Fin.add_def", 2],["Fin.mul_def", 2],["Fin.eq_of_val_eq", 2],["Nat.mod_eq_of_lt", 2],["Fin.ofNat'", 2],["congr", 2],["OfNat.ofNat", 2],["Eq.mpr", 2],["Nat.succ", 2],["HAdd.hAdd", 2],["Fin.nsmuls_eq", 1],["zero_lt_of_lt", 1],["Fin.zero_def", 1],["Nat.add_comm", 1],["Subsingleton.allEq", 1],["Fin.ext", 1],["Eq.symm", 1],["Nat.mod_add_mod", 1],["Nat.zero_mod", 1],["Nat.add_mod_mod", 1],["Fin.val_eq_of_lt", 1],["Fin.mk.injEq", 1],["Nat.succ_mul", 1],["Fin.one_val", 1],["MonoidWithZero.zero_mul", 1],["Fin.ofNat'_succ", 1],["Nat.mul_mod", 1]]],
["Nat.sub", 10, [["congrFun", 6],["Eq.trans", 6],["congr", 6],["Prod.mk", 6],["congrArg", 6],["List.nil", 5],["cond_false", 4],["HAppend.hAppend", 4],["Bool.of_not_eq_true", 4],["HAdd.hAdd", 4],["Eq.symm", 4],["cond_true", 4],["Eq", 4],["cond", 4],["Eq.mpr", 4],["Nat.Linear.Poly.denote_eq", 4],["Nat.Linear.Poly.denote_le", 4],["of_eq_true", 4],["Classical.em", 4],["Eq.refl", 4],["Bool.true", 4],["LE.le", 3],["Nat.Linear.Poly.denote", 3],["Nat.add_comm", 3],["Eq.mp", 3],["OfNat.ofNat", 3],["Nat.zero_add", 3],["Nat.Linear.hugeFuel", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["absurd", 2],["List.nil_append", 2],["List.append_nil", 2],["List.reverse", 2],["Nat.add_left_comm", 2],["Nat.add_eq", 2],["Iff.intro", 2],["Prod", 2],["Nat.Linear.Poly", 2],["Nat.blt", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["propext", 2],["HSub.hSub", 2],["eq_self", 2],["Nat.Linear.Poly.denote_reverse", 2],["List.cons", 2],["Nat.Linear.Poly.denote_append", 2],["List.reverse_nil", 2],["Nat.sub_eq", 2],["eq_true", 2],["HMul.hMul", 2],["Nat.Linear.Poly.cancelAux", 2],["List.reverse_cons", 2],["Nat.Linear.Var.denote", 2],["funext", 2],["Nat.mul_eq", 2],["Nat.add", 2],["rfl", 2],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["id", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.false", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Bool.and_true", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Bool.and_false", 1],["Nat.add_le_add", 1]]],
["not", 10, [["Eq.refl", 9],["Eq.symm", 6],["Bool.true", 5],["rfl", 4],["of_decide_eq_true", 3],["Eq", 2],["Nat.mod_lt", 1],["of_eq_true", 1],["Eq.mp", 1],["eq_self", 1],["congrFun", 1],["BEq.beq", 1],["Bool.not_false", 1],["eq_true", 1],["congr", 1],["propext", 1],["Not", 1],["False", 1],["congrArg", 1],["eq_false", 1],["eq_true_of_decide", 1],["eq_false_of_decide", 1],["HMod.hMod", 1],["Bool.not_true", 1],["Bool.false", 1],["LT.lt", 1],["LawfulBEq.rfl", 1],["True", 1],["Iff.intro", 1],["Eq.trans", 1],["not", 1]]],
["Function.const", 10, [["rfl", 5]]],
["Tactic.Cache", 9, [["Tactic.instNonemptyDeclCache", 2],["ForInStep", 1],["Tactic.Cache", 1],["inferInstanceAs", 1],["Prod.mk", 1],["Prod", 1],["ForIn.forIn", 1],["Pure.pure", 1],["Bind.bind", 1],["Sum.inl", 1],["Nonempty", 1],["PUnit.unit", 1],["Tactic.Cache.mk", 1],["Tactic.instNonemptyCache.proof_1", 1],["ForInStep.yield", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["liftM", 1]]],
["PSigma.RevLex", 9, [["PSigma.revLexAccessible", 1],["PSigma.revLexAccessible.proof_1", 1],["PSigma.RevLex", 1],["Acc.intro", 1],["eq_of_heq", 1],["WellFoundedRelation.wf", 1],["PSigma.RevLex.right", 1],["HEq.refl", 1],["Eq.symm", 1],["PSigma.mk", 1],["Acc", 1],["WellFounded.intro", 1],["PSigma.mkSkipLeft.proof_1", 1],["PSigma.revLex", 1],["PSigma.revLex.proof_1", 1],["WellFounded.apply", 1],["Eq.refl", 1]]],
["Setoid.r", 9, [["Quotient.mk", 3],["Eq", 2],["Quotient.sound.proof_1", 1],["Quot.exists_rep", 1],["Setoid.r", 1],["Quot.recOnSubsingleton", 1],["Quotient.sound", 1],["Quotient.recOnSubsingleton₂", 1],["Quot.mk", 1],["instSubsingletonDecidable", 1],["Decidable.isTrue", 1],["Decidable.isFalse", 1],["instDecidableEqQuotient.proof_2", 1],["Decidable", 1]]],
["Semigroup", 9, [["Semigroup.mk", 5],["UInt16.instSemigroupUInt16.proof_1", 1],["USize.instSemigroupUSize.proof_1", 1],["UInt32.instSemigroupUInt32.proof_1", 1],["UInt64.instSemigroupUInt64.proof_1", 1],["UInt8.instSemigroupUInt8.proof_1", 1]]],
["MonadLift", 9, [["MonadLift.mk", 8],["EStateM.Result.ok", 1],["StateRefT'.lift", 1],["EStateM.Result", 1],["ExceptCpsT.lift", 1],["Pure.pure", 1],["ExceptT.mk", 1],["StateCpsT.lift", 1],["ExceptT.lift", 1],["OptionT.lift", 1]]],
["Tactic.NormCast.CoeFnType", 9, [["Unit.unit", 2],["Tactic.NormCast.CoeFnType.coe", 2],["Eq", 1],["cond", 1],["List.nil", 1],["Decidable.isTrue", 1],["Decidable.isFalse", 1],["Nat.ble", 1],["ite", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["dite", 1],["Inhabited.mk", 1],["GE.ge", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_1", 1],["Tactic.NormCast.instDecidableEqCoeFnType.proof_2", 1],["Nat.beq", 1],["OfNat.ofNat", 1]]],
["Function.bijective", 9, [["And.intro", 7],["And.right", 2],["and_congr", 2],["Function.bijective.injective", 2],["Exists.intro", 2],["Function.bijective.surjective", 2],["Function.bijective", 2],["Iff.intro", 2],["Eq", 1],["ExistsUnique.exists", 1],["Function.injective_id", 1],["Function.comp", 1],["Prod.swap_injective", 1],["Eq.trans", 1],["Function.surjective.comp", 1],["Prod.swap_surjective", 1],["Function.surjective.of_comp_iff", 1],["Function.LeftInverse.injective", 1],["Subtype.coind_surjective", 1],["Function.injective.of_comp_iff'", 1],["Function.RightInverse.surjective", 1],["Function.involutive.surjective", 1],["Function.LeftInverse_surj_inv", 1],["Function.injective.comp", 1],["Function.involutive.injective", 1],["Function.surj_inv", 1],["Function.surjective_id", 1],["Eq.symm", 1],["unique_of_exists_unique", 1],["Function.surjective.of_comp_iff'", 1],["Subtype.coind_injective", 1],["ExistsUnique", 1],["Function.RightInverse_surj_inv", 1],["Function.injective.of_comp_iff", 1],["rfl", 1],["And.left", 1]]],
["USize.size", 9, [["OfNat.ofNat", 4],["Bool.true", 2],["of_decide_eq_true", 2],["USize.size", 2],["usize_size_eq", 2],["eq_of_heq", 2],["Eq.symm", 2],["LT.lt", 2],["instNonempty", 2],["Unit.unit", 2],["HEq.refl", 2],["Eq.refl", 2],["Nat.zero_lt_succ", 1],["Nat.lt_trans", 1],["Nat.pos_pow_of_pos", 1],["usize_size_gt_zero", 1],["USize.size_positive", 1],["Inhabited.mk", 1],["Fin.ofNat'", 1],["System.Platform.numBits", 1]]],
["List.modifyNthTail", 9, [["Eq", 8],["rfl", 7],["PProd.fst", 6],["Eq.refl", 6],["List.cons", 5],["congr_arg", 5],["Eq.symm", 5],["Functor.map", 4],["List.get?", 4],["Eq.trans", 4],["eq_self", 3],["congrArg", 3],["List.modifyNthTail", 3],["List.modifyNth", 3],["congrFun", 3],["of_eq_true", 3],["funext", 3],["OfNat.ofNat", 2],["List.get?_modifyNth", 2],["ite_congr", 2],["HAdd.hAdd", 2],["if_pos", 2],["True", 2],["List.set", 2],["congr", 1],["Nat.zero", 1],["Nat.succ.inj", 1],["Option.getD", 1],["List.modifyNthTail_length", 1],["ite", 1],["List.tail", 1],["mt", 1],["Not", 1],["propext", 1],["if_neg", 1],["Option.none", 1],["eq_false", 1],["List.removeNth", 1],["List.length", 1],["if_false", 1],["List.nil", 1],["Nat.succ", 1],["id_map'", 1],["List.modifyHead", 1],["not_false_iff", 1],["Option.some", 1],["id", 1],["Decidable.em", 1],["instDecidableEqNat", 1]]],
["Sat.Literal", 9, [["List.nil", 3],["Sat.Literal.pos", 2],["List.cons", 2],["Sat.Literal.neg", 2],["HSub.hSub", 1],["Sat.Literal", 1],["OfNat.ofNat", 1],["ite", 1],["LT.lt", 1],["Neg.neg", 1],["Int.toNat", 1],["HAppend.hAppend", 1]]],
["RandG", 9, [["Bind.bind", 4],["Pure.pure", 4],["ULift.up", 3],["ULift.down", 3],["MonadState.get", 3],["OfNat.ofNat", 2],["RandG", 2],["Fin", 2],["MonadStateOf.set", 2],["Bool.true", 1],["RandomGen.next", 1],["ite", 1],["BEq.beq", 1],["Nat", 1],["Random.rand", 1],["RandomGen.split", 1],["randNat", 1],["Prod", 1],["Random.random", 1],["Nat.succ", 1],["BoundedRandom.randomR", 1],["Prod.map", 1],["Fin.ofNat", 1],["Bool.false", 1],["RandomGen.range", 1],["Id", 1],["ULift", 1],["Eq", 1]]],
["And.intro", 9, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["Eq.symm", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Subtype.property", 2],["Iff.mpr", 1],["Subtype.val", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push.proof_1", 1],["And.left", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["Iff.mp", 1],["ne_eq", 1],["id", 1],["Fin", 1],["eq_self", 1],["UnionFind.rank_lt", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["congr", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["not_lt", 1],["Nat.find_x", 1],["List.length", 1],["Nat.find_min", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["List.get", 1],["lt_irrefl", 1],["of_eq_true", 1],["implies_congr", 1],["UFModel.Agrees.push", 1],["Bool.true", 1]]],
["Nat.Linear.Poly.cancelAux", 9, [["congrFun", 6],["Eq.trans", 6],["congr", 6],["Prod.mk", 6],["congrArg", 6],["List.nil", 5],["cond_false", 4],["HAppend.hAppend", 4],["Bool.of_not_eq_true", 4],["HAdd.hAdd", 4],["Eq.symm", 4],["cond_true", 4],["Eq", 4],["cond", 4],["Eq.mpr", 4],["Nat.Linear.Poly.denote_eq", 4],["Nat.Linear.Poly.denote_le", 4],["of_eq_true", 4],["Classical.em", 4],["Eq.refl", 4],["Bool.true", 4],["LE.le", 3],["Nat.Linear.Poly.denote", 3],["Nat.add_comm", 3],["Eq.mp", 3],["OfNat.ofNat", 3],["Nat.zero_add", 3],["Nat.Linear.hugeFuel", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote_reverse", 2],["List.nil_append", 2],["List.append_nil", 2],["List.reverse", 2],["Nat.add_left_comm", 2],["Nat.add_eq", 2],["Iff.intro", 2],["Prod", 2],["Nat.Linear.Poly", 2],["Nat.blt", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["propext", 2],["HSub.hSub", 2],["eq_self", 2],["Nat.Linear.Poly.cancelAux", 2],["absurd", 2],["Nat.Linear.Poly.denote_append", 2],["List.reverse_nil", 2],["Nat.sub_eq", 2],["eq_true", 2],["HMul.hMul", 2],["funext", 2],["List.cons", 2],["Nat.Linear.Var.denote", 2],["Nat.add", 2],["List.reverse_cons", 2],["Nat.mul_eq", 2],["Nat.Linear.Poly.denote_fuse", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["id", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Bool.false", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Bool.and_true", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["rfl", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Bool.and_false", 1],["Nat.add_le_add", 1]]],
["Iff.mpr", 9, [["Fin.mk", 5],["rfl", 4],["OfNat.ofNat", 4],["Fin.val", 4],["Eq.refl", 4],["Eq", 4],["congrArg", 3],["Eq.mpr", 3],["congrFun", 3],["Classical.em", 2],["List.get", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_congr", 2],["id", 2],["LT.lt", 2],["eq_true", 2],["PProd.fst", 2],["Eq.trans", 2],["List.length", 2],["List.nil", 2],["UnionFind.size", 2],["dif_pos", 2],["dite_true", 2],["UFModel.parent", 2],["Eq.symm", 2],["dif_neg", 2],["UnionFind.rankMaxAux", 2],["Bool.true", 1],["List.length_pos_of_ne_nil", 1],["Subtype.val", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["List.getLast_cons", 1],["ne_eq", 1],["Fin", 1],["absurd", 1],["eq_self", 1],["HSub.hSub", 1],["Nat.sub_lt_sub_left", 1],["List.cons_ne_nil", 1],["sorryAx", 1],["UnionFind.lt_rankMax'", 1],["lt_of_lt_of_le", 1],["Nat.sub_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["UFModel.push.proof_1", 1],["Nat.lt_add_right", 1],["congr", 1],["Nat.le_add_right", 1],["List.cons", 1],["UFNode.mk", 1],["HEq.refl", 1],["List.getLast", 1],["Nat.succ_pos", 1],["Nat.add", 1],["UnionFind.lt_rankMax", 1],["HAppend.hAppend", 1],["Nat.one_pos", 1],["List.get_singleton", 1],["dite", 1],["Nat.lt_succ_iff", 1],["List.getLast_singleton", 1],["Nat.le_of_succ_le_succ", 1],["Subtype.property", 1],["Iff.mpr", 1],["lt_irrefl", 1],["implies_congr", 1],["UnionFind.rank_lt", 1]]],
["Equiv.symm", 9, [["rfl", 3],["Eq", 2],["funext", 2],["Equiv.toFun", 2],["Eq.trans", 2],["LawfulFunctor.id_map", 2],["congrArg", 2],["of_eq_true", 2],["Functor.map", 2],["congrFun", 2],["Functor.map_map", 2],["Equiv.symm", 2],["eq_self", 2],["Equiv.apply_symm_apply", 1],["Equiv.symm_apply_apply", 1],["Equiv.self_comp_symm", 1],["Equiv.symm_comp_self", 1],["Equiv.left_inv", 1],["Equiv.right_inv", 1]]],
["Equiv.right_inv", 9, [["rfl", 3],["Eq", 2],["funext", 2],["Equiv.toFun", 2],["Eq.trans", 2],["LawfulFunctor.id_map", 2],["congrArg", 2],["of_eq_true", 2],["Functor.map", 2],["congrFun", 2],["Functor.map_map", 2],["Equiv.symm", 2],["eq_self", 2],["Equiv.apply_symm_apply", 1],["Equiv.symm_apply_apply", 1],["Equiv.self_comp_symm", 1],["Equiv.symm_comp_self", 1],["Equiv.left_inv", 1],["Equiv.right_inv", 1]]],
["Equiv.left_inv", 9, [["rfl", 3],["Eq", 2],["funext", 2],["Equiv.toFun", 2],["Eq.trans", 2],["LawfulFunctor.id_map", 2],["congrArg", 2],["of_eq_true", 2],["Functor.map", 2],["congrFun", 2],["Functor.map_map", 2],["Equiv.symm", 2],["eq_self", 2],["Equiv.apply_symm_apply", 1],["Equiv.symm_apply_apply", 1],["Equiv.self_comp_symm", 1],["Equiv.symm_comp_self", 1],["Equiv.left_inv", 1],["Equiv.right_inv", 1]]],
["Mod", 9, [["Mod.mk", 8],["Fin.mod", 1],["USize.mod", 1],["UInt16.mod", 1],["UInt32.mod", 1],["Nat.mod", 1],["Int.mod", 1],["UInt8.mod", 1],["UInt64.mod", 1]]],
["List.length_cons", 8, [["Fin.mk", 7],["Eq", 6],["Eq.refl", 6],["Eq.symm", 6],["List.get", 5],["Eq.mpr", 5],["rfl", 5],["List.get?", 3],["LT.lt", 3],["congrArg", 3],["List.length", 3],["Option.some", 3],["List.get?_eq_get", 3],["Eq.trans", 2],["Option.some.inj", 2],["Array.size", 2],["HAppend.hAppend", 2],["of_eq_true", 2],["HEq.refl", 2],["OfNat.ofNat", 2],["Nat.lt_succ_self", 2],["id", 2],["Nat.lt_add_right", 1],["propext", 1],["Nat.le_of_succ_le_succ", 1],["HAdd.hAdd", 1],["List.get_append_right_aux", 1],["BinaryHeap.size_heapifyUp", 1],["Fin.isLt", 1],["Nat.lt_trans", 1],["List.get?_map", 1],["Array.swap", 1],["BinaryHeap.arr", 1],["List.map", 1],["Eq.mp", 1],["eq_self", 1],["HSub.hSub", 1],["congrFun", 1],["Array.push", 1],["eq_true", 1],["List.length_cons", 1],["List.length_append", 1],["List.length_map", 1],["Array.size_swap", 1],["PProd.fst", 1],["Option.map", 1],["BinaryHeap.insert.proof_1", 1],["List.get?_append_right", 1],["List.nil", 1],["List.cons", 1],["eq_of_heq", 1],["Array.size_push", 1],["Option.some_inj", 1],["Nat.add", 1],["List.cons_ne_nil", 1],["List.getLast_eq_get", 1],["List.getLast", 1],["List.set", 1],["Fin.val", 1],["congr", 1],["List.get?_set_ne", 1],["List.length_set", 1]]],
["ForIn", 8, [["ForIn.mk", 7],["Stream.forIn", 1],["Subarray.forIn", 1],["ByteSlice.forIn.loop", 1],["Array.forIn", 1],["List.forIn", 1],["FloatArray.forIn", 1],["HAdd.hAdd", 1],["ByteArray.forIn", 1]]],
["CommRing", 8, [["CommRing.mk", 7],["CommSemiring", 1],["UInt32.instCommRingUInt32.proof_1", 1],["UInt8.instCommRingUInt8.proof_1", 1],["inferInstanceAs", 1],["AddGroupWithOne", 1],["USize.instCommRingUSize.proof_1", 1],["Int.mul_comm", 1],["instCommRingFin.proof_8", 1],["UInt16.instCommRingUInt16.proof_1", 1],["UInt64.instCommRingUInt64.proof_1", 1],["Fin", 1]]],
["AndOp", 8, [["AndOp.mk", 7],["Nat.land", 1],["UInt8.land", 1],["UInt16.land", 1],["UInt64.land", 1],["USize.land", 1],["UInt32.land", 1],["Fin.land", 1]]],
["List.toArrayAux", 8, [["Eq", 4],["List.toArray", 2],["sorryAx", 2],["Array.data", 2],["List.nil", 2],["List.append_nil", 1],["of_eq_true", 1],["Array.mkEmpty", 1],["Array.ext'", 1],["eq_self", 1],["UFModel.empty", 1],["Eq.trans", 1],["congrFun", 1],["List.singleton_append", 1],["Exists.intro", 1],["UFModel.Agrees.mk'", 1],["List.toArrayAux", 1],["Array.push", 1],["OfNat.ofNat", 1],["List.toArrayAux_data", 1],["Array.toArrayLit", 1],["List.redLength", 1],["Array.get", 1],["UFModel.Agrees.empty", 1],["HAppend.hAppend", 1],["List.concat_eq_append", 1],["PProd.fst", 1],["congrArg", 1],["List.toArray_data", 1],["And.intro", 1],["List.cons", 1],["UFModel.Models.empty", 1],["Eq.symm", 1],["Bool.false", 1],["Array.mk", 1],["Fin.mk", 1],["List.append_assoc", 1],["rfl", 1],["Bool.true", 1]]],
["Zero", 8, [["OfNat.ofNat", 1],["Zero.mk", 1]]],
["Nat.Linear.hugeFuel", 8, [["congrFun", 5],["Eq.trans", 5],["of_eq_true", 5],["congrArg", 5],["congr", 4],["Prod.mk", 4],["Eq", 3],["HAdd.hAdd", 3],["eq_self", 3],["Nat.Linear.hugeFuel", 3],["Nat.Linear.Poly.denote_eq", 3],["List.nil", 3],["Nat.Linear.Poly.denote_le", 3],["LE.le", 2],["cond", 2],["List.reverse_nil", 2],["HAppend.hAppend", 2],["Bool.of_not_eq_true", 2],["propext", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["List.nil_append", 2],["Eq.symm", 2],["cond_false", 2],["Iff.intro", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote", 2],["Classical.em", 2],["eq_true", 2],["Eq.mpr", 2],["cond_true", 2],["Eq.refl", 2],["Bool.true", 2],["OfNat.ofNat", 1],["Nat.add_comm", 1],["Eq.mp", 1],["Nat.Linear.Expr.denote", 1],["Bool.and_false", 1],["Nat.add_le_add_left", 1],["Nat.zero_add", 1],["Bool.false", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.Linear.Expr.toPoly", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["rfl", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Nat.Linear.Poly.denote_fuse", 1],["id", 1]]],
["AddCommSemigroup", 8, [["AddCommSemigroup.mk", 7],["instAddCommSemigroupFin.proof_2", 1],["AddCommMonoid.add_comm", 1],["UInt16.instAddCommSemigroupUInt16.proof_1", 1],["UInt8.instAddCommSemigroupUInt8.proof_1", 1],["USize.instAddCommSemigroupUSize.proof_1", 1],["UInt64.instAddCommSemigroupUInt64.proof_1", 1],["UInt32.instAddCommSemigroupUInt32.proof_1", 1]]],
["Iff.mp", 8, [["Fin.mk", 5],["Fin.val", 4],["OfNat.ofNat", 4],["Eq.refl", 4],["Eq", 4],["congrArg", 3],["congrFun", 3],["rfl", 3],["Eq.mpr", 3],["Classical.em", 2],["List.get", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_congr", 2],["id", 2],["LT.lt", 2],["eq_true", 2],["PProd.fst", 2],["Eq.trans", 2],["List.length", 2],["List.nil", 2],["UnionFind.size", 2],["dif_neg", 2],["dite_true", 2],["UFModel.parent", 2],["Eq.symm", 2],["dif_pos", 2],["UnionFind.rankMaxAux", 2],["Bool.true", 1],["List.length_pos_of_ne_nil", 1],["Subtype.val", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["List.getLast_cons", 1],["ne_eq", 1],["Fin", 1],["absurd", 1],["eq_self", 1],["HSub.hSub", 1],["Nat.sub_lt_sub_left", 1],["List.cons_ne_nil", 1],["sorryAx", 1],["UnionFind.lt_rankMax'", 1],["lt_of_lt_of_le", 1],["Nat.sub_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["UFModel.push.proof_1", 1],["Nat.lt_add_right", 1],["congr", 1],["Nat.le_add_right", 1],["List.cons", 1],["UFNode.mk", 1],["HEq.refl", 1],["List.getLast", 1],["Nat.succ_pos", 1],["Nat.add", 1],["UnionFind.lt_rankMax", 1],["HAppend.hAppend", 1],["Nat.one_pos", 1],["List.get_singleton", 1],["dite", 1],["Nat.lt_succ_iff", 1],["List.getLast_singleton", 1],["Nat.le_of_succ_le_succ", 1],["Subtype.property", 1],["Iff.mpr", 1],["lt_irrefl", 1],["implies_congr", 1],["UnionFind.rank_lt", 1]]],
["Tactic.NormCast.Label", 8, [["Tactic.NormCast.Label.elim", 3],["Tactic.NormCast.Label.squash", 2],["ite", 2],["Tactic.NormCast.Label.move", 2],["OfNat.ofNat", 2],["Eq", 2],["Bool.true", 1],["Pure.pure", 1],["Bind.bind", 1],["cond", 1],["Tactic.NormCast.Label", 1],["PUnit.unit", 1],["Decidable.isFalse", 1],["Decidable.isTrue", 1],["Nat.ble", 1],["Tactic.NormCast.instDecidableEqLabel.proof_1", 1],["Tactic.NormCast.countCoes", 1],["Nat.beq", 1],["Prod.mk", 1],["Inhabited.mk", 1],["Tactic.NormCast.instDecidableEqLabel.proof_2", 1],["GE.ge", 1],["HAppend.hAppend", 1],["Tactic.NormCast.countHeadCoes", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["LT.lt", 1],["dite", 1],["Unit.unit", 1],["Tactic.NormCast.countInternalCoes", 1]]],
["ShiftRight", 8, [["ShiftRight.mk", 7],["Nat.shiftRight", 1],["UInt8.shiftRight", 1],["USize.shiftRight", 1],["Fin.shiftRight", 1],["UInt16.shiftRight", 1],["UInt64.shiftRight", 1],["UInt32.shiftRight", 1]]],
["ShiftLeft", 8, [["ShiftLeft.mk", 7],["UInt8.shiftLeft", 1],["UInt64.shiftLeft", 1],["UInt16.shiftLeft", 1],["USize.shiftLeft", 1],["UInt32.shiftLeft", 1],["Nat.shiftLeft", 1],["Fin.shiftLeft", 1]]],
["Ordering", 8, [["Ordering.lt", 2],["Eq", 1],["Ordering.eq", 1],["Ordering.gt", 1],["Inhabited.mk", 1],["ite", 1],["LT.lt", 1],["BEq.beq", 1],["Ordering.toCtorIdx", 1],["BEq.mk", 1]]],
["AddSemigroup", 8, [["AddSemigroup.mk", 5],["UInt64.instAddSemigroupUInt64.proof_1", 1],["UInt16.instAddSemigroupUInt16.proof_1", 1],["USize.instAddSemigroupUSize.proof_1", 1],["UInt8.instAddSemigroupUInt8.proof_1", 1],["UInt32.instAddSemigroupUInt32.proof_1", 1]]],
["CoeHTCT", 8, [["CoeHTCT.mk", 7],["CoeTC.coe", 4],["CoeTail.coe", 3],["CoeHead.coe", 3],["Nat.cast", 1]]],
["Semiring", 8, [["Semiring.mk", 5],["inferInstanceAs", 5],["Semigroup", 5],["AddCommSemigroup", 5],["UInt32.instSemiringUInt32.proof_13", 1],["UInt32.instSemiringUInt32.proof_14", 1],["UInt16.instSemiringUInt16.proof_16", 1],["UInt32.instSemiringUInt32.proof_15", 1],["UInt64", 1],["USize", 1],["UInt8.instSemiringUInt8.proof_14", 1],["UInt32.instSemiringUInt32.proof_16", 1],["UInt8.instSemiringUInt8.proof_13", 1],["UInt64.instSemiringUInt64.proof_14", 1],["UInt64.instSemiringUInt64.proof_13", 1],["UInt16.instSemiringUInt16.proof_15", 1],["USize.instSemiringUSize.proof_13", 1],["USize.instSemiringUSize.proof_14", 1],["UInt8.instSemiringUInt8.proof_15", 1],["UInt64.instSemiringUInt64.proof_15", 1],["UInt32", 1],["UInt8.instSemiringUInt8.proof_16", 1],["UInt64.instSemiringUInt64.proof_16", 1],["UInt8", 1],["USize.instSemiringUSize.proof_15", 1],["UInt16", 1],["UInt16.instSemiringUInt16.proof_13", 1],["UInt16.instSemiringUInt16.proof_14", 1],["USize.instSemiringUSize.proof_16", 1]]],
["Xor", 8, [["Xor.mk", 7],["Nat.xor", 1],["Fin.xor", 1],["UInt16.xor", 1],["UInt64.xor", 1],["USize.xor", 1],["UInt32.xor", 1],["UInt8.xor", 1]]],
["Int.negOfNat", 8, [["rfl", 7],["Int.negOfNat", 6],["Eq", 6],["HMul.hMul", 4],["Int.ofNat", 4],["Unit.unit", 4],["Eq.mpr", 3],["Nat.succ", 3],["Eq.refl", 3],["Eq.trans", 2],["Int.negSucc", 2],["congrFun", 2],["OfNat.ofNat", 2],["congrArg", 2],["Int.mul_comm", 2],["Nat.mul_comm", 2],["of_eq_true", 2],["Int.subNatNat", 1],["Nat.zero_add", 1],["Nat.zero_eq", 1],["Nat.succ_add", 1],["congr", 1],["Bool.true", 1],["Int.ofNat_mul_negOfNat", 1],["HAdd.hAdd", 1],["eq_true_of_decide", 1],["Int.negSucc_ofNat_mul_negOfNat", 1],["Nat.add_zero", 1],["eq_self", 1]]],
["Coe", 8, [["Coe.mk", 7],["Bool.true", 1],["Int.ofNat", 1],["Array.ofSubarray", 1],["Tactic.Ring.HornerExpr.e", 1],["Fin.val", 1],["System.FilePath.mk", 1],["Eq", 1]]],
["HMod", 8, [["HMod.mk", 7],["UInt32.modn", 1],["UInt8.modn", 1],["Fin.modn", 1],["UInt64.modn", 1],["Mod.mod", 1],["UInt16.modn", 1],["USize.modn", 1]]],
["PSigma", 8, [["PSigma.mk", 3],["UnionFind.arr", 2],["WellFoundedRelation.rel", 2],["WellFoundedRelation.mk", 2],["Array.get", 2],["UFNode.parent", 2],["Eq", 2],["PSigma", 2],["Fin.val", 2],["Nonempty", 1],["PSigma.skipLeft.proof_1", 1],["Iff.intro", 1],["And", 1],["UnionFind.findAux.proof_1", 1],["UnionFind.findAux.proof_2", 1],["Nonempty.intro", 1],["PSigma.lex.proof_1", 1],["PSigma.Lex", 1],["Quot.mk", 1],["PSigma.SkipLeft", 1],["Sigma", 1],["UnionFind.size", 1],["UnionFind.findAux", 1],["PSigma.lex", 1],["dite", 1],["WellFounded.fix", 1],["Exists.intro", 1],["Exists", 1]]],
["Array.mkEmpty", 8, [["Eq", 3],["UFModel.empty", 2],["UFModel.Models.empty", 2],["sorryAx", 2],["Exists.intro", 2],["List.toArray", 2],["OfNat.ofNat", 2],["Array.toArrayLit", 1],["And.intro", 1],["Array.mkEmpty", 1],["Array.ext'", 1],["List.redLength", 1],["Bool.false", 1],["Array.get", 1],["UFModel.Agrees.empty", 1],["List.toArrayAux_data", 1],["UFModel.Agrees.mk'", 1],["Fin.mk", 1],["List.toArray_data", 1],["rfl", 1],["Array.data", 1],["List.nil", 1],["Bool.true", 1]]],
["OrOp", 8, [["OrOp.mk", 7],["UInt32.lor", 1],["UInt8.lor", 1],["Fin.lor", 1],["UInt16.lor", 1],["UInt64.lor", 1],["USize.lor", 1],["Nat.lor", 1]]],
["Nat.Linear.PolyCnstr.eq", 7, [["Eq.refl", 6],["Eq.symm", 6],["Eq", 5],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["congr", 5],["Bool.of_not_eq_true", 5],["LE.le", 5],["cond_false", 5],["cond_true", 5],["cond", 5],["Classical.em", 5],["congrArg", 5],["congrFun", 5],["Bool.true", 5],["Nat.Linear.Poly.denote", 3],["Nat.Linear.Poly.denote_eq", 3],["and", 3],["Nat.Linear.Poly.denote_le", 3],["Prod.mk", 3],["Nat.Linear.Expr.denote", 2],["Nat.Linear.Expr.toPoly", 2],["HAdd.hAdd", 2],["Bool.and_eq_true", 2],["Nat.Linear.Poly.of_isZero", 2],["OfNat.ofNat", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["implies_congr", 2],["eq_true_of_decide", 1],["Nat.Linear.Expr.toNormPoly", 1],["id", 1],["Eq.mp", 1],["Nat.add_comm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.false", 1],["Nat.add_le_add_left", 1],["Nat.zero_add", 1],["True", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Bool.or_eq_true", 1],["Bool.and_self", 1],["List.nil", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.Linear.Poly.denote_combine", 1],["False", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Or", 1],["rfl", 1],["Bool.and_true", 1],["or", 1],["Bool.and_false", 1]]],
["le_trans", 7, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Eq.symm", 2],["Iff.mpr", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.push.proof_1", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.rank_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["congr", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get", 1],["implies_congr", 1],["of_eq_true", 1],["Bool.true", 1]]],
["Nat.Linear.PolyCnstr.mk", 7, [["Eq.refl", 6],["Eq.symm", 5],["Eq", 3],["cond", 3],["Eq.trans", 3],["Eq.mpr", 3],["of_eq_true", 3],["congr", 3],["Bool.of_not_eq_true", 3],["HAdd.hAdd", 3],["LE.le", 3],["cond_false", 3],["Prod.mk", 3],["cond_true", 3],["eq_self", 3],["congrFun", 3],["Nat.Linear.Poly.denote_eq", 3],["Nat.Linear.Poly.denote_le", 3],["congrArg", 3],["Classical.em", 3],["Bool.true", 3],["Nat.Linear.Expr.denote", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["OfNat.ofNat", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.Linear.Expr.toPoly", 2],["Bool.false", 1],["Eq.mp", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.zero_add", 1],["Bool.and_false", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Bool.and_true", 1],["Bool.and_self", 1],["Eq.propIntro", 1],["List.nil", 1],["eq_of_heq", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["And.intro", 1],["SizeOf.sizeOf", 1],["HEq.refl", 1],["Nat.Linear.PolyCnstr.mk", 1],["id", 1],["Nat.Linear.Poly.denote_sort_go", 1],["rfl", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.add_comm", 1]]],
["Nat.Linear.Poly.cancel", 7, [["congrFun", 4],["Eq.trans", 4],["of_eq_true", 4],["congr", 4],["Prod.mk", 4],["congrArg", 4],["Nat.Linear.Poly.denote_eq", 3],["Nat.Linear.Poly.denote_le", 3],["List.nil", 3],["Eq", 2],["eq_self", 2],["HAppend.hAppend", 2],["Bool.of_not_eq_true", 2],["propext", 2],["HAdd.hAdd", 2],["List.nil_append", 2],["Eq.symm", 2],["cond_false", 2],["Iff.intro", 2],["LE.le", 2],["cond", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Eq.mpr", 2],["List.reverse_nil", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["eq_true", 2],["Nat.Linear.hugeFuel", 2],["cond_true", 2],["Classical.em", 2],["Eq.refl", 2],["Bool.true", 2],["Nat.Linear.Expr.toNormPoly", 1],["Nat.add_comm", 1],["Eq.mp", 1],["Bool.and_true", 1],["Nat.Linear.Poly.denote", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Expr.toPoly", 1],["Bool.false", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_eq_cancel", 1],["Nat.Linear.Poly.of_denote_eq_cancel", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["OfNat.ofNat", 1],["Nat.Linear.Poly.denote_eq_cancelAux", 1],["Bool.and_self", 1],["Nat.Linear.Poly.of_denote_le_cancel", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_le_cancelAux", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.zero_add", 1],["Nat.Linear.Expr.denote_toPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["rfl", 1],["Nat.Linear.Poly.denote_le_cancel", 1],["Bool.and_false", 1],["id", 1]]],
["Preorder.lt_iff_le_not_le", 7, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Eq.symm", 2],["Iff.mpr", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.push.proof_1", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.rank_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["congr", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get", 1],["implies_congr", 1],["of_eq_true", 1],["Bool.true", 1]]],
["Set.univ", 7, [["Eq", 3],["Exists.intro", 3],["Function.LeftInverse_inv_fun", 2],["funext", 2],["Exists", 2],["Function.inv_fun_eq", 2],["Eq.refl", 1],["Eq.mpr", 1],["And.intro", 1],["Function.inv_fun", 1],["Function.inv_fun_on_eq", 1],["Function.LeftInverse.surjective", 1],["Set.univ", 1],["Function.inv_fun_on_neg", 1],["mt", 1],["Membership.mem", 1],["And", 1],["trivial", 1]]],
["Nat.Linear.PolyCnstr.rhs", 7, [["Eq.refl", 6],["Eq.symm", 6],["Eq", 5],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["congr", 5],["Bool.of_not_eq_true", 5],["LE.le", 5],["cond_false", 5],["cond_true", 5],["cond", 5],["Classical.em", 5],["congrArg", 5],["congrFun", 5],["Bool.true", 5],["Nat.Linear.Poly.denote", 3],["Nat.Linear.Poly.denote_eq", 3],["and", 3],["Nat.Linear.Poly.denote_le", 3],["Prod.mk", 3],["Nat.Linear.Expr.denote", 2],["Nat.Linear.Expr.toPoly", 2],["HAdd.hAdd", 2],["Bool.and_eq_true", 2],["Nat.Linear.Poly.of_isZero", 2],["OfNat.ofNat", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["implies_congr", 2],["eq_true_of_decide", 1],["Nat.Linear.Expr.toNormPoly", 1],["id", 1],["Eq.mp", 1],["Nat.add_comm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.false", 1],["Nat.add_le_add_left", 1],["Nat.zero_add", 1],["True", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Bool.or_eq_true", 1],["Bool.and_self", 1],["List.nil", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.Linear.Poly.denote_combine", 1],["False", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Or", 1],["rfl", 1],["Bool.and_true", 1],["or", 1],["Bool.and_false", 1]]],
["CoeTail", 7, [["CoeTail.mk", 6],["CoeSort.coe", 2],["Option.some", 1],["Nat.cast", 1],["Int.cast", 1],["CoeFun.coe", 1]]],
["Function.inv_fun", 7, [["Eq", 3],["Exists.intro", 3],["Function.LeftInverse_inv_fun", 2],["funext", 2],["Exists", 2],["Function.inv_fun_eq", 2],["Eq.refl", 1],["Eq.mpr", 1],["And.intro", 1],["Function.inv_fun", 1],["Function.inv_fun_on_eq", 1],["Function.LeftInverse.surjective", 1],["Set.univ", 1],["Function.inv_fun_on_neg", 1],["mt", 1],["Membership.mem", 1],["And", 1],["trivial", 1]]],
["Nat.Linear.PolyCnstr.lhs", 7, [["Eq.refl", 6],["Eq.symm", 6],["Eq", 5],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["congr", 5],["Bool.of_not_eq_true", 5],["LE.le", 5],["cond_false", 5],["cond_true", 5],["cond", 5],["Classical.em", 5],["congrArg", 5],["congrFun", 5],["Bool.true", 5],["Nat.Linear.Poly.denote", 3],["Nat.Linear.Poly.denote_eq", 3],["and", 3],["Nat.Linear.Poly.denote_le", 3],["Prod.mk", 3],["Nat.Linear.Expr.denote", 2],["Nat.Linear.Expr.toPoly", 2],["HAdd.hAdd", 2],["Bool.and_eq_true", 2],["Nat.Linear.Poly.of_isZero", 2],["OfNat.ofNat", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["implies_congr", 2],["eq_true_of_decide", 1],["Nat.Linear.Expr.toNormPoly", 1],["id", 1],["Eq.mp", 1],["Nat.add_comm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.false", 1],["Nat.add_le_add_left", 1],["Nat.zero_add", 1],["True", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Bool.or_eq_true", 1],["Bool.and_self", 1],["List.nil", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.Linear.Poly.denote_combine", 1],["False", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Or", 1],["rfl", 1],["Bool.and_true", 1],["or", 1],["Bool.and_false", 1]]],
["List.repeat'", 7, [["List.repeat'", 5],["Eq.trans", 3],["of_eq_true", 3],["congrFun", 3],["rfl", 3],["congrArg", 3],["Eq", 3],["eq_self", 2],["List.length", 2],["Exists.intro", 2],["congr", 2],["OfNat.ofNat", 2],["HAdd.hAdd", 2],["HSub.hSub", 2],["Bool.true", 1],["False", 1],["propext", 1],["List.length_cons", 1],["eq_true_of_decide", 1],["Iff", 1],["Bool.false", 1],["or_iff_left_iff_imp", 1],["and_imp", 1],["iff_self", 1],["Membership.mem", 1],["List.get_mem", 1],["Nat.add_eq", 1],["Or", 1],["ne_eq", 1],["Ne", 1],["implies_true", 1],["Nat.add_zero", 1],["List.eq_of_mem_repeat'", 1],["Nat.succ_ne_zero", 1],["false_and", 1],["max", 1],["List.mem_cons", 1],["List.length_append", 1],["List.length_nil", 1],["Not", 1],["List.not_mem_nil", 1],["eq_false", 1],["eq_false_of_decide", 1],["PProd.fst", 1],["Nat.succ", 1],["Nat.zero_eq", 1],["List.cons", 1],["List.length_repeat'", 1],["true_and", 1],["Nat.sub_add_eq_max", 1],["Unit.unit", 1],["And", 1],["implies_congr", 1],["imp_self", 1],["Eq.refl", 1]]],
["Ring", 7, [["Int.cast", 5],["Ring.gsmul", 5],["Ring.mk", 5],["UInt64.instRingUInt64.proof_4", 1],["UInt64.instRingUInt64.proof_3", 1],["USize.instRingUSize.proof_7", 1],["UInt32.instRingUInt32.proof_7", 1],["UInt16.instRingUInt16.proof_7", 1],["UInt16.mk", 1],["UInt8.instRingUInt8.proof_6", 1],["UInt16.val", 1],["USize.instRingUSize.proof_6", 1],["UInt8.instRingUInt8.proof_8", 1],["UInt8.mk", 1],["UInt64.instRingUInt64.proof_7", 1],["UInt32.instRingUInt32.proof_6", 1],["UInt16.instRingUInt16.proof_6", 1],["UInt64.instRingUInt64.proof_5", 1],["UInt8.val", 1],["USize.instRingUSize.proof_8", 1],["UInt64.instRingUInt64.proof_1", 1],["UInt8.instRingUInt8.proof_4", 1],["UInt8.instRingUInt8.proof_5", 1],["UInt32.instRingUInt32.proof_8", 1],["UInt16.instRingUInt16.proof_8", 1],["UInt8.instRingUInt8.proof_1", 1],["UInt8.instRingUInt8.proof_3", 1],["USize.instRingUSize.proof_4", 1],["USize.instRingUSize.proof_5", 1],["USize.mk", 1],["UInt64.mk", 1],["USize.instRingUSize.proof_3", 1],["USize.instRingUSize.proof_1", 1],["UInt64.instRingUInt64.proof_6", 1],["UInt32.instRingUInt32.proof_4", 1],["UInt32.mk", 1],["UInt16.instRingUInt16.proof_4", 1],["UInt32.instRingUInt32.proof_5", 1],["USize.val", 1],["UInt16.instRingUInt16.proof_5", 1],["UInt64.val", 1],["UInt32.instRingUInt32.proof_3", 1],["UInt32.instRingUInt32.proof_1", 1],["UInt16.instRingUInt16.proof_1", 1],["UInt16.instRingUInt16.proof_3", 1],["UInt32.val", 1],["UInt64.instRingUInt64.proof_8", 1],["UInt8.instRingUInt8.proof_7", 1]]],
["setOf", 7, [["Eq", 3],["Exists.intro", 3],["Function.LeftInverse_inv_fun", 2],["funext", 2],["Exists", 2],["Function.inv_fun_eq", 2],["Eq.refl", 1],["Eq.mpr", 1],["And.intro", 1],["Function.inv_fun", 1],["Function.inv_fun_on_eq", 1],["Function.LeftInverse.surjective", 1],["Set.univ", 1],["Function.inv_fun_on_neg", 1],["mt", 1],["Membership.mem", 1],["And", 1],["trivial", 1]]],
["Equiv", 7, [["Equiv.toFun", 4],["Equiv.mk", 4],["Equiv.symm", 2],["Equiv.invFun", 1],["Equiv.refl.proof_2", 1],["Equiv.refl.proof_1", 1],["Functor.map_equiv.proof_2", 1],["Functor.map_equiv.proof_1", 1],["id", 1],["Inhabited.mk", 1],["Equiv.left_inv", 1],["Equiv.right_inv", 1],["Function.comp", 1],["Equiv.trans.proof_1", 1],["Equiv.trans.proof_2", 1],["Functor.map", 1],["CoeFun.mk", 1],["Equiv.refl", 1]]],
["or", 7, [["Eq.symm", 6],["Eq.refl", 6],["rfl", 5],["Nat.mod_lt", 1],["LT.lt", 1],["of_decide_eq_true", 1],["Bool.true", 1],["HMod.hMod", 1]]],
["StdGen", 7, [["OfNat.ofNat", 4],["StdGen.mk", 4],["HAdd.hAdd", 3],["stdNext", 2],["HSub.hSub", 2],["ite", 2],["Prod", 2],["StdGen", 2],["Prod.mk", 2],["HMod.hMod", 2],["HDiv.hDiv", 2],["Eq", 1],["Prod.snd", 1],["StdGen.s1", 1],["Inhabited.mk", 1],["HMul.hMul", 1],["RandomGen.mk", 1],["HAppend.hAppend", 1],["Int.ofNat", 1],["StdGen.s2", 1],["Nat", 1],["repr", 1],["LT.lt", 1],["Int.toNat", 1],["stdRange", 1],["stdSplit", 1],["Eq.refl", 1]]],
["lt_of_le_not_le", 7, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Eq.symm", 2],["Iff.mpr", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.push.proof_1", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.rank_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["congr", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get", 1],["implies_congr", 1],["of_eq_true", 1],["Bool.true", 1]]],
["List.redLength", 7, [["Eq", 3],["List.toArray", 2],["sorryAx", 2],["OfNat.ofNat", 1],["UFModel.Agrees.empty", 1],["List.toArrayAux_data", 1],["List.toArray_data", 1],["List.nil", 1],["And.intro", 1],["Array.mkEmpty", 1],["Array.ext'", 1],["UFModel.Models.empty", 1],["Bool.false", 1],["Array.toArrayLit", 1],["UFModel.empty", 1],["List.redLength", 1],["UFModel.Agrees.mk'", 1],["Fin.mk", 1],["Exists.intro", 1],["rfl", 1],["Array.data", 1],["Array.get", 1],["Bool.true", 1]]],
["ExceptCpsT", 7, [["Inhabited.default", 1],["Inhabited.mk", 1],["MonadLift.mk", 1],["ExceptCpsT.lift", 1],["LawfulMonad.mk", 1],["ExceptCpsT.instLawfulMonadExceptCpsTInstMonadExceptCpsT.proof_1", 1],["Bind.bind", 1],["MonadExceptOf.mk", 1],["Monad.mk", 1],["rfl", 1]]],
["EmptyCollection", 7, [["EmptyCollection.mk", 6],["Bool.true", 1],["ByteArray.empty", 1],["Bool.false", 1],["Array.empty", 1],["BinaryHeap.empty", 1],["FloatArray.empty", 1],["List.nil", 1],["Eq", 1]]],
["PSigma.Lex", 7, [["WellFounded.apply", 3],["WellFounded.intro", 2],["Acc", 2],["PSigma.lexAccessible", 2],["Eq.refl", 1],["WellFoundedRelation.wf", 1],["eq_of_heq", 1],["HEq.refl", 1],["PSigma.lexAccessible.proof_1", 1],["PSigma.mk", 1],["Eq.symm", 1],["PSigma.lexNdepWf.proof_1", 1],["PSigma.Lex", 1],["PSigma.lexNdep", 1],["WellFoundedRelation.rel", 1],["Acc.intro", 1]]],
["MonadFinally", 7, [["Option.some", 3],["MonadFinally", 3],["MonadFinally.mk", 3],["inferInstanceAs", 3],["Prod.mk", 3],["Option.none", 2],["Pure.pure", 2],["Prod", 2],["Except.error", 1],["Except", 1],["EStateM.Result", 1],["EStateM.Result.error", 1],["Bind.bind", 1],["Empty", 1],["EStateM.Result.ok", 1],["Except.ok", 1],["MonadFinally.tryFinally'", 1],["EStateM", 1],["ExceptT.mk", 1]]],
["lt_iff_le_not_le", 7, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Eq.symm", 2],["Iff.mpr", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.push.proof_1", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.rank_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["congr", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get", 1],["implies_congr", 1],["of_eq_true", 1],["Bool.true", 1]]],
["List.getLast", 7, [["rfl", 6],["Eq", 4],["Eq.refl", 4],["List.getLast", 4],["List.nil", 3],["Eq.mpr", 3],["List.cons", 3],["absurd", 2],["List.length", 2],["List.cons_ne_nil", 2],["Fin.mk", 2],["List.get", 2],["List.getLast_cons", 1],["Nat.sub_lt", 1],["eq_true", 1],["Eq.trans", 1],["OfNat.ofNat", 1],["congr", 1],["List.concat", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["HAppend.hAppend", 1],["List.concat_eq_append", 1],["PProd.fst", 1],["congrArg", 1],["id", 1],["of_eq_true", 1],["List.length_cons", 1],["eq_of_heq", 1],["Eq.symm", 1],["HEq.refl", 1],["List.get_singleton", 1],["HSub.hSub", 1],["LT.lt", 1],["List.getLast_eq_get", 1],["Nat.lt_succ_self", 1],["List.getLast_append", 1],["List.length_pos_of_ne_nil", 1]]],
["List.toArray", 7, [["Eq", 3],["List.toArray", 2],["sorryAx", 2],["OfNat.ofNat", 1],["UFModel.Agrees.empty", 1],["List.toArrayAux_data", 1],["List.toArray_data", 1],["List.nil", 1],["And.intro", 1],["Array.mkEmpty", 1],["Array.ext'", 1],["UFModel.Models.empty", 1],["Bool.false", 1],["Array.toArrayLit", 1],["UFModel.empty", 1],["List.redLength", 1],["UFModel.Agrees.mk'", 1],["Fin.mk", 1],["Exists.intro", 1],["rfl", 1],["Array.data", 1],["Array.get", 1],["Bool.true", 1]]],
["Quot", 7, [["Quotient.mk", 2],["Quot.mk", 2],["Eq", 1],["Setoid.r", 1],["Quotient.sound", 1],["Quotient.recOnSubsingleton₂", 1],["Squash.ind", 1],["Decidable.isTrue", 1],["Decidable.isFalse", 1],["instDecidableEqQuotient.proof_2", 1],["Subsingleton.intro", 1],["Quot.sound", 1],["True", 1],["True.intro", 1],["Decidable", 1],["instSubsingletonSquash.proof_1", 1]]],
["Preorder.le_trans", 7, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Eq.symm", 2],["Iff.mpr", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.push.proof_1", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.rank_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["congr", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get", 1],["implies_congr", 1],["of_eq_true", 1],["Bool.true", 1]]],
["List.bind", 7, [["eq_self", 4],["Eq.trans", 4],["of_eq_true", 4],["congrArg", 4],["HAppend.hAppend", 3],["And.intro", 3],["Eq", 3],["rfl", 3],["List.mem_map", 2],["Exists.intro", 2],["List.mem_bind", 2],["congr", 2],["And", 2],["funext", 2],["Eq.mpr", 2],["propext", 2],["Iff.intro", 2],["List.map", 2],["List.bind", 2],["Exists", 2],["List.cons_bind", 2],["congrFun", 2],["Eq.refl", 2],["Membership.mem", 2],["Prod.mk.injEq", 1],["id", 1],["eq_of_heq", 1],["HEq.refl", 1],["Eq.symm", 1],["List.mem_join", 1],["List.cons_append", 1],["and_imp", 1],["List.append_assoc", 1],["exists_eq_right_right'", 1],["List.join", 1],["PProd.fst", 1],["Unit.unit", 1],["List.map_append", 1],["implies_congr", 1],["Iff.mpr", 1],["Iff", 1],["List.nil", 1]]],
["Nat.not_lt_zero", 7, [["Eq.refl", 3],["Eq", 3],["congrFun", 2],["of_eq_true", 2],["OfNat.ofNat", 2],["eq_self", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["Classical.em", 1],["congr", 1],["not_lt", 1],["Fin.elim0", 1],["UFModel.Agrees.empty", 1],["dif_pos", 1],["HAdd.hAdd", 1],["Bool.and_true", 1],["eq_true_of_decide", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["Bool.false", 1],["Array.isEqv", 1],["Fin.mk", 1],["WellFounded.fix_eq", 1],["dite_congr", 1],["True", 1],["And.left", 1],["decide_eq_true_eq", 1],["Iff.mp", 1],["Array.isEqvAux.proof_3", 1],["HSub.hSub", 1],["Array.isEqvAux.proof_1", 1],["WellFounded.fix", 1],["Array.isEqvAux_self", 1],["Array.get", 1],["Subsingleton.elim", 1],["Nat.lt_eq", 1],["WellFoundedRelation.rel", 1],["Nat.find_x", 1],["Nat.find_min", 1],["and", 1],["And.intro", 1],["funext", 1],["LT.lt", 1],["dite_true", 1],["dite", 1],["rfl", 1],["dif_neg", 1],["sizeOf_nat", 1],["Eq.mpr", 1]]],
["le_not_le_of_lt", 7, [["Fin.val", 4],["Fin.mk", 4],["congrArg", 3],["congrFun", 3],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq", 3],["dite_congr", 2],["UnionFind.rankMaxAux", 2],["Eq.trans", 2],["Fin.isLt", 2],["UFModel.rank", 2],["dite_true", 2],["Eq.mpr", 2],["eq_true", 2],["Classical.em", 2],["UnionFind.size", 2],["LT.lt", 2],["rfl", 2],["UFModel.parent", 2],["dif_neg", 2],["dif_pos", 2],["Eq.symm", 2],["Iff.mpr", 1],["Subtype.val", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["And.imp", 1],["lt_of_lt_of_le", 1],["UFModel.push", 1],["UnionFind.rankMax", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.push.proof_1", 1],["sorryAx", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.rank_lt", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["PProd.fst", 1],["congr", 1],["List.length", 1],["List.nil", 1],["UFNode.mk", 1],["Nat.le_add_right", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["UnionFind.lt_rankMax", 1],["dite", 1],["Nat.lt_succ_iff", 1],["Nat.lt_add_right", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.get", 1],["implies_congr", 1],["of_eq_true", 1],["Bool.true", 1]]],
["Decidable.byCases", 7, [["congrArg", 4],["Fin.mk", 4],["Eq.mpr", 3],["OfNat.ofNat", 3],["LT.lt", 3],["Fin.val", 3],["UnionFind.size", 2],["BinaryHeap.size_pos_of_max", 2],["UnionFind.rankMaxAux", 2],["congrFun", 2],["BinaryHeap.arr", 2],["Array.size_set", 2],["Iff.mpr", 1],["And.imp", 1],["UnionFind.rank_lt", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["Eq.trans", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UFModel.push", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["UnionFind.rankMax", 1],["Classical.em", 1],["Subtype.val", 1],["dite_true", 1],["Fin.isLt", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["UFModel.rank", 1],["dite_congr", 1],["Fin.val_eq_of_lt", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["dite_false", 1],["eq_self", 1],["Eq.refl", 1],["Eq", 1]]],
["Nat.le", 7, [["rfl", 2],["OfNat.ofNat", 1],["Prod.Lex", 1],["Prod.mk", 1],["Nat.succ", 1],["Acc.intro", 1],["Prod.Lex.left", 1],["Nat.eq_or_lt_of_le", 1],["WellFounded.intro", 1],["Prod.Lex.right'.proof_1", 1],["absurd", 1],["Nat.not_lt_zero", 1],["Prod.Lex.right", 1],["Nat.lt", 1]]],
["List.getLast.proof_1", 7, [["rfl", 6],["Eq", 4],["Eq.refl", 4],["List.getLast", 4],["List.nil", 3],["Eq.mpr", 3],["List.cons", 3],["absurd", 2],["List.length", 2],["List.cons_ne_nil", 2],["Fin.mk", 2],["List.get", 2],["List.getLast_cons", 1],["Nat.sub_lt", 1],["eq_true", 1],["Eq.trans", 1],["OfNat.ofNat", 1],["congr", 1],["List.concat", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["HAppend.hAppend", 1],["List.concat_eq_append", 1],["PProd.fst", 1],["congrArg", 1],["id", 1],["of_eq_true", 1],["List.length_cons", 1],["eq_of_heq", 1],["Eq.symm", 1],["HEq.refl", 1],["List.get_singleton", 1],["HSub.hSub", 1],["LT.lt", 1],["List.getLast_eq_get", 1],["Nat.lt_succ_self", 1],["List.getLast_append", 1],["List.length_pos_of_ne_nil", 1]]],
["List.getLast.proof_2", 7, [["rfl", 6],["Eq", 4],["Eq.refl", 4],["List.getLast", 4],["List.nil", 3],["Eq.mpr", 3],["List.cons", 3],["absurd", 2],["List.length", 2],["List.cons_ne_nil", 2],["Fin.mk", 2],["List.get", 2],["List.getLast_cons", 1],["Nat.sub_lt", 1],["eq_true", 1],["Eq.trans", 1],["OfNat.ofNat", 1],["congr", 1],["List.concat", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["HAppend.hAppend", 1],["List.concat_eq_append", 1],["PProd.fst", 1],["congrArg", 1],["id", 1],["of_eq_true", 1],["List.length_cons", 1],["eq_of_heq", 1],["Eq.symm", 1],["HEq.refl", 1],["List.get_singleton", 1],["HSub.hSub", 1],["LT.lt", 1],["List.getLast_eq_get", 1],["Nat.lt_succ_self", 1],["List.getLast_append", 1],["List.length_pos_of_ne_nil", 1]]],
["Mathlib.Tactic.Lint.LintVerbosity", 7, [["Mathlib.Tactic.Lint.LintVerbosity.low", 2],["OfNat.ofNat", 1],["Inhabited.mk", 1],["GE.ge", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["cond", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_1", 1],["Mathlib.Tactic.Lint.instDecidableEqLintVerbosity.proof_2", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["Decidable.isTrue", 1],["Decidable.isFalse", 1],["Nat.ble", 1],["ite", 1],["dite", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.beq", 1],["Unit.unit", 1],["Eq", 1]]],
["UInt8.size", 6, [["Eq.refl", 2],["of_decide_eq_true", 2],["Bool.true", 2],["instNonempty", 2],["Fin.ofNat'", 1],["OfNat.ofNat", 1],["UInt8.size_positive", 1],["Inhabited.mk", 1]]],
["EST", 6, [["inferInstanceAs", 4],["EStateM", 3],["Monad", 2],["Inhabited", 1],["EStateM.Result", 1],["STWorld.mk", 1],["EST", 1],["MonadLift.mk", 1],["MonadExceptOf", 1],["Empty", 1],["EStateM.Result.ok", 1]]],
["UInt64.size", 6, [["Bool.true", 2],["Eq.refl", 2],["of_decide_eq_true", 2],["instNonempty", 2],["Inhabited.mk", 1],["Fin.ofNat'", 1],["UInt64.size_positive", 1],["OfNat.ofNat", 1]]],
["Nat.lt.base.proof_1", 6, [["Eq", 4],["congrArg", 3],["Eq.trans", 3],["Eq.mpr", 3],["Nat.lt_succ_self", 3],["Fin.mk", 3],["Eq.refl", 3],["Array.size", 2],["List.cons", 2],["of_eq_true", 2],["congrFun", 2],["OfNat.ofNat", 2],["HAdd.hAdd", 2],["LT.lt", 2],["Eq.symm", 2],["rfl", 2],["Nat.lt_trans", 1],["Array.push", 1],["eq_true", 1],["List.cons_ne_nil", 1],["Array.data", 1],["Nat.add_zero", 1],["congr", 1],["Array.toArrayLit", 1],["Nat.add_eq", 1],["List.drop", 1],["List.length_cons", 1],["Nat.le_of_succ_le", 1],["BinaryHeap.insert.proof_1", 1],["Nat.lt_of_lt_of_le", 1],["List.length", 1],["eq_of_heq", 1],["Array.size_swap", 1],["HEq.refl", 1],["eq_self", 1],["Array.size_push", 1],["BinaryHeap.size_heapifyUp", 1],["Bool.false", 1],["Array.getLit", 1],["Nat.add", 1],["List.getLast", 1],["sorryAx", 1],["Array.swap", 1],["List.getLast_eq_get", 1],["Nat.lt_of_lt_of_eq", 1],["Array.toListLitAux", 1],["BinaryHeap.arr", 1],["List.get", 1]]],
["Nat.Linear.ExprCnstr.eq", 6, [["Eq.refl", 2],["LE.le", 2],["Classical.em", 2],["Eq.trans", 2],["Nat.Linear.Expr.denote", 2],["congr", 2],["Prod.mk", 2],["Eq.mpr", 2],["cond", 2],["of_eq_true", 2],["congrArg", 2],["eq_self", 2],["congrFun", 2],["Nat.Linear.Poly.denote_le", 2],["Nat.Linear.Poly.denote_eq", 2],["cond_true", 2],["Nat.Linear.Expr.toPoly", 2],["Bool.of_not_eq_true", 2],["Eq.symm", 2],["Nat.Linear.Expr.denote_toPoly", 2],["cond_false", 2],["Eq", 2],["Bool.true", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["List.nil", 1],["OfNat.ofNat", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.zero_add", 1],["rfl", 1],["Nat.add_comm", 1],["HAdd.hAdd", 1]]],
["List.modifyNth", 6, [["Eq.refl", 5],["Eq", 5],["Functor.map", 4],["Eq.trans", 4],["rfl", 4],["Eq.symm", 4],["List.get?", 4],["PProd.fst", 3],["funext", 3],["congrArg", 3],["List.cons", 3],["eq_self", 3],["congrFun", 3],["List.modifyNth", 3],["of_eq_true", 3],["ite_congr", 2],["True", 2],["congr_arg", 2],["if_pos", 2],["List.set", 2],["List.get?_modifyNth", 2],["if_neg", 1],["propext", 1],["Not", 1],["List.modifyNthTail_length", 1],["eq_false", 1],["HAdd.hAdd", 1],["Nat.succ.inj", 1],["Option.none", 1],["Nat.zero", 1],["if_false", 1],["not_false_iff", 1],["List.nil", 1],["Option.getD", 1],["ite", 1],["Nat.succ", 1],["List.modifyHead", 1],["Option.some", 1],["Decidable.em", 1],["instDecidableEqNat", 1],["mt", 1],["OfNat.ofNat", 1],["congr", 1],["id_map'", 1]]],
["eq_true_of_decide", 6, [["UnionFind.size", 2],["Subtype.property", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["rfl", 2],["Iff.mpr", 1],["dif_pos", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Classical.em", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["Subtype.val", 1],["congrFun", 1],["BinaryHeap.popMaxAux", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["congrArg", 1],["Eq.mpr", 1],["dif_neg", 1]]],
["Tactic.NormCast.CoeFnInfo", 6, [["Inhabited.default", 1],["Tactic.NormCast.coeExt", 1],["Tactic.NormCast.CoeFnInfo.numArgs", 1],["Inhabited.mk", 1],["repr", 1],["HAppend.hAppend", 1],["Tactic.NormCast.CoeFnInfo.type", 1],["Tactic.NormCast.CoeFnInfo.coercee", 1],["Pure.pure", 1],["Bind.bind", 1],["Tactic.NormCast.CoeFnInfo.mk", 1],["List.nil", 1]]],
["List.modifyHead", 6, [["Eq.refl", 5],["Eq", 5],["Functor.map", 4],["Eq.trans", 4],["rfl", 4],["Eq.symm", 4],["List.get?", 4],["PProd.fst", 3],["funext", 3],["congrArg", 3],["List.cons", 3],["eq_self", 3],["congrFun", 3],["List.modifyNth", 3],["of_eq_true", 3],["ite_congr", 2],["True", 2],["congr_arg", 2],["if_pos", 2],["List.set", 2],["List.get?_modifyNth", 2],["if_neg", 1],["propext", 1],["Not", 1],["List.modifyNthTail_length", 1],["eq_false", 1],["HAdd.hAdd", 1],["Nat.succ.inj", 1],["Option.none", 1],["Nat.zero", 1],["if_false", 1],["not_false_iff", 1],["List.nil", 1],["Option.getD", 1],["ite", 1],["Nat.succ", 1],["List.modifyHead", 1],["Option.some", 1],["Decidable.em", 1],["instDecidableEqNat", 1],["mt", 1],["OfNat.ofNat", 1],["congr", 1],["id_map'", 1]]],
["Nat.Linear.PolyCnstr.denote", 6, [["Eq.refl", 6],["Eq.symm", 6],["Eq", 5],["eq_self", 5],["Eq.trans", 5],["Eq.mpr", 5],["of_eq_true", 5],["congr", 5],["Bool.of_not_eq_true", 5],["LE.le", 5],["cond_false", 5],["cond_true", 5],["cond", 5],["Classical.em", 5],["congrArg", 5],["congrFun", 5],["Bool.true", 5],["Nat.Linear.Poly.denote", 3],["Nat.Linear.Poly.denote_eq", 3],["and", 3],["Nat.Linear.Poly.denote_le", 3],["Prod.mk", 3],["Nat.Linear.Expr.denote", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 2],["Nat.Linear.Expr.toPoly", 2],["HAdd.hAdd", 2],["Bool.and_eq_true", 2],["Nat.Linear.Poly.of_isZero", 2],["OfNat.ofNat", 2],["Nat.Linear.Poly.isZero", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["implies_congr", 2],["eq_true_of_decide", 1],["Nat.Linear.Expr.toNormPoly", 1],["id", 1],["Eq.mp", 1],["Nat.add_comm", 1],["Bool.false", 1],["Nat.add_le_add_left", 1],["Bool.or_eq_true", 1],["Nat.zero_add", 1],["True", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.Linear.Poly.denote_fuse", 1],["Bool.and_self", 1],["List.nil", 1],["Nat.Linear.Poly.isNonZero", 1],["Nat.Linear.Poly.denote_combine", 1],["False", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Or", 1],["Bool.and_true", 1],["or", 1],["Bool.and_false", 1]]],
["Nat.isValidChar", 6, [["Eq.refl", 5],["Eq.symm", 4],["OfNat.ofNat", 4],["Decidable.em", 4],["Eq.mpr", 4],["ite_congr", 3],["Nat.digitChar", 3],["eq_self", 3],["congrFun", 3],["Eq.trans", 3],["congr", 3],["List.cons", 3],["congrArg", 3],["List.length", 3],["HMod.hMod", 3],["HDiv.hDiv", 3],["Nat.toDigitsCore", 3],["HAdd.hAdd", 3],["of_eq_true", 3],["Eq", 3],["of_decide_eq_true", 2],["if_false", 2],["Fin.val", 2],["eq_false", 2],["Bool.true", 2],["if_true", 2],["implies_congr", 1],["Nat.zero_le", 1],["Eq.mp", 1],["UInt32.ofNat", 1],["Nat.lt_irrefl", 1],["UInt8.toChar_aux", 1],["List.nil", 1],["eq_true", 1],["trivial", 1],["UInt8.val", 1],["UInt32.val_eq_of_lt", 1],["Nat.lt_trans", 1],["UInt32.val", 1],["Fin.isLt", 1],["LT.lt", 1],["False.elim", 1],["Or.inl", 1],["Nat.to_digits_core_length", 1],["Nat.isValidChar", 1],["eq_true_of_decide", 1],["Nat.succ", 1],["LE.le", 1]]],
["Nat.Linear.ExprCnstr.lhs", 6, [["Eq.refl", 2],["LE.le", 2],["Classical.em", 2],["Eq.trans", 2],["Nat.Linear.Expr.denote", 2],["congr", 2],["Prod.mk", 2],["Eq.mpr", 2],["cond", 2],["of_eq_true", 2],["congrArg", 2],["eq_self", 2],["congrFun", 2],["Nat.Linear.Poly.denote_le", 2],["Nat.Linear.Poly.denote_eq", 2],["cond_true", 2],["Nat.Linear.Expr.toPoly", 2],["Bool.of_not_eq_true", 2],["Eq.symm", 2],["Nat.Linear.Expr.denote_toPoly", 2],["cond_false", 2],["Eq", 2],["Bool.true", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["List.nil", 1],["OfNat.ofNat", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.zero_add", 1],["rfl", 1],["Nat.add_comm", 1],["HAdd.hAdd", 1]]],
["TC", 6, [["Acc.intro", 1],["TC.accessible", 1],["Acc.inv", 1],["WellFounded.intro", 1],["TC.accessible.proof_1", 1],["TC.wf.proof_1", 1],["WellFounded.apply", 1]]],
["One", 6, [["OfNat.ofNat", 1],["One.mk", 1]]],
["Sigma", 6, [["Sigma.mk", 2],["HAppend.hAppend", 2],["Sigma", 2],["Eq", 1],["Nonempty", 1],["Iff.intro", 1],["UnionFind.arr", 1],["Nonempty.intro", 1],["Array.get", 1],["ToString.toString", 1],["UnionFind.findAux", 1],["List.bind", 1],["repr", 1],["List.map", 1],["UnionFind.size", 1],["UFNode.parent", 1],["Exists.intro", 1],["PSigma", 1],["Exists", 1],["Fin.val", 1],["ToString.mk", 1],["And", 1]]],
["Nat.beq", 6, [["Eq.refl", 5],["Bool.true", 1],["Tactic.NormCast.Label.elim", 1],["Iff.intro", 1],["propext", 1],["Eq.trans", 1],["eq_true_of_decide", 1],["congrArg", 1],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.Label.move", 1],["of_eq_true", 1],["eq_self", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["congrFun", 1],["Tactic.NormCast.CoeFnType.coeFn", 1],["Nat.beq_refl", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Nat.beq", 1],["Nat.eq_of_beq_eq_true", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Eq", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1]]],
["Function.uncurry", 6, [["rfl", 6],["funext", 2],["Eq", 1],["Function.curry", 1],["Function.uncurry", 1]]],
["Nat.lt.base", 6, [["Eq", 4],["congrArg", 3],["Eq.trans", 3],["Eq.mpr", 3],["Nat.lt_succ_self", 3],["Fin.mk", 3],["Eq.refl", 3],["Array.size", 2],["List.cons", 2],["of_eq_true", 2],["congrFun", 2],["OfNat.ofNat", 2],["HAdd.hAdd", 2],["LT.lt", 2],["Eq.symm", 2],["rfl", 2],["Nat.lt_trans", 1],["Array.push", 1],["eq_true", 1],["List.cons_ne_nil", 1],["Array.data", 1],["Nat.add_zero", 1],["congr", 1],["Array.toArrayLit", 1],["Nat.add_eq", 1],["List.drop", 1],["List.length_cons", 1],["Nat.le_of_succ_le", 1],["BinaryHeap.insert.proof_1", 1],["Nat.lt_of_lt_of_le", 1],["List.length", 1],["eq_of_heq", 1],["Array.size_swap", 1],["HEq.refl", 1],["eq_self", 1],["Array.size_push", 1],["BinaryHeap.size_heapifyUp", 1],["Bool.false", 1],["Array.getLit", 1],["Nat.add", 1],["List.getLast", 1],["sorryAx", 1],["Array.swap", 1],["List.getLast_eq_get", 1],["Nat.lt_of_lt_of_eq", 1],["Array.toListLitAux", 1],["BinaryHeap.arr", 1],["List.get", 1]]],
["AddGroupWithOne.gsmul", 6, [["AddGroupWithOne.gsmul_succ'", 1],["AddGroupWithOne.gsmul_zero'", 1],["AddGroupWithOne.gsmul_neg'", 1]]],
["dite_congr", 6, [["Fin.mk", 4],["congrArg", 4],["Eq.mpr", 3],["OfNat.ofNat", 3],["LT.lt", 3],["Fin.val", 3],["UnionFind.size", 2],["congrFun", 2],["UnionFind.rankMaxAux", 2],["Array.size_set", 2],["BinaryHeap.arr", 2],["BinaryHeap.size_pos_of_max", 2],["Iff.mpr", 1],["And.imp", 1],["Eq.trans", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["UnionFind.rankMax", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UFModel.push", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["Classical.em", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["dite_true", 1],["Fin.isLt", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["dite_false", 1],["eq_self", 1],["Eq.refl", 1],["Eq", 1]]],
["Nat.Linear.Poly.mul", 6, [["Eq.refl", 5],["Eq.symm", 5],["Eq", 4],["Classical.em", 4],["eq_self", 4],["Eq.trans", 4],["cond_false", 4],["Eq.mpr", 4],["congrFun", 4],["of_eq_true", 4],["congr", 4],["Bool.of_not_eq_true", 4],["cond", 4],["congrArg", 4],["cond_true", 4],["Bool.true", 4],["Nat.Linear.Expr.toPoly", 3],["Nat.add_comm", 3],["Nat.Linear.Expr.denote", 3],["HAdd.hAdd", 3],["OfNat.ofNat", 3],["List.nil", 3],["Prod.mk", 3],["Nat.Linear.Poly.denote", 2],["BEq.beq", 2],["HMul.hMul", 2],["Nat.add_eq", 2],["Nat.zero_add", 2],["LE.le", 2],["Nat.one_mul", 2],["Nat.Linear.Poly.denote_le", 2],["eq_of_beq", 2],["Nat.Linear.Poly.denote_eq", 2],["Nat.mul", 2],["Nat.Linear.Var.denote", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.add", 2],["Nat.mul_eq", 2],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.add_zero", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Expr.toNormPoly", 1],["List.cons", 1],["Nat.Linear.Poly.denote_append", 1],["Nat.zero_mul", 1],["Nat.left_distrib", 1],["Nat.mul_assoc", 1],["Nat.mul_comm", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.fixedVar", 1],["rfl", 1],["beq_self_eq_true", 1],["Nat.mul_zero", 1],["Nat.mul_one", 1]]],
["Option.join", 6, [["congrFun", 5],["of_eq_true", 5],["Eq", 5],["Eq.trans", 5],["id_eq", 5],["Option.some", 5],["congrArg", 5],["Option.bind", 3],["Option.none", 3],["Iff", 3],["exists_eq_right", 3],["propext", 3],["id", 3],["Exists", 3],["funext", 3],["iff_self", 3],["Option.some_bind", 2],["not_forall", 2],["eq_self", 2],["congr", 2],["forall_congr", 2],["not_not", 2],["Eq.symm", 2],["Not", 2],["Option.none_bind", 2],["Option.map_some'", 2],["exists_prop", 2],["Option.mem_def", 2],["Membership.mem", 2],["Option.map_none'", 2],["Eq.refl", 2],["implies_congr", 2],["Option.bind_eq_none", 2],["ne_eq", 1],["Option.map", 1],["rfl", 1],["And", 1],["Option.bind_eq_some", 1]]],
["Nat.Linear.ExprCnstr.rhs", 6, [["Eq.refl", 2],["LE.le", 2],["Classical.em", 2],["Eq.trans", 2],["Nat.Linear.Expr.denote", 2],["congr", 2],["Prod.mk", 2],["Eq.mpr", 2],["cond", 2],["of_eq_true", 2],["congrArg", 2],["eq_self", 2],["congrFun", 2],["Nat.Linear.Poly.denote_le", 2],["Nat.Linear.Poly.denote_eq", 2],["cond_true", 2],["Nat.Linear.Expr.toPoly", 2],["Bool.of_not_eq_true", 2],["Eq.symm", 2],["Nat.Linear.Expr.denote_toPoly", 2],["cond_false", 2],["Eq", 2],["Bool.true", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["List.nil", 1],["OfNat.ofNat", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.zero_add", 1],["rfl", 1],["Nat.add_comm", 1],["HAdd.hAdd", 1]]],
["List.Pairwise", 6, [["List.cons", 2],["And.intro", 2],["List.Pairwise", 2],["Iff.mpr", 1],["decidableBAll", 1],["Iff.intro", 1],["PProd.fst", 1],["List.decidablePairwise.proof_4", 1],["And.elim", 1],["eq_of_heq", 1],["List.decidablePairwise.proof_3", 1],["List.decidablePairwise.proof_2", 1],["List.decidablePairwise.proof_1", 1],["Decidable", 1],["List.Pairwise.nil", 1],["HEq.refl", 1],["Eq.symm", 1],["Decidable.isTrue", 1],["Decidable.isFalse", 1],["List.Pairwise.cons", 1],["List.Pairwise_cons", 1],["List.decidablePairwise", 1],["And", 1],["Eq.refl", 1]]],
["Stream", 6, [["Stream.mk", 5],["Option.none", 5],["Option.some", 4],["Prod.mk", 4],["LT.lt", 3],["ite", 2],["Prod", 2],["Option", 2],["Unit.unit", 2],["Substring.startPos", 1],["Substring.str", 1],["HAdd.hAdd", 1],["dite", 1],["Substring.mk", 1],["Stream.next?", 1],["List", 1],["Subarray.stop", 1],["Subarray.start", 1],["Substring.stopPos", 1]]],
["StateCpsT", 6, [["PUnit.unit", 1],["MonadLift.mk", 1],["LawfulMonad.mk", 1],["MonadStateOf.mk", 1],["StateCpsT.lift", 1],["Bind.bind", 1],["Monad.mk", 1],["rfl", 1],["StateCpsT.instLawfulMonadStateCpsTInstMonadStateCpsT.proof_1", 1]]],
["Nat.lt_succ_self", 6, [["Eq", 4],["congrArg", 3],["Eq.trans", 3],["Eq.mpr", 3],["Nat.lt_succ_self", 3],["Fin.mk", 3],["Eq.refl", 3],["Array.size", 2],["List.cons", 2],["of_eq_true", 2],["congrFun", 2],["OfNat.ofNat", 2],["HAdd.hAdd", 2],["LT.lt", 2],["Eq.symm", 2],["rfl", 2],["Nat.lt_trans", 1],["Array.push", 1],["eq_true", 1],["List.cons_ne_nil", 1],["Array.data", 1],["Nat.add_zero", 1],["congr", 1],["Array.toArrayLit", 1],["Nat.add_eq", 1],["List.drop", 1],["List.length_cons", 1],["Nat.le_of_succ_le", 1],["BinaryHeap.insert.proof_1", 1],["Nat.lt_of_lt_of_le", 1],["List.length", 1],["eq_of_heq", 1],["Array.size_swap", 1],["HEq.refl", 1],["eq_self", 1],["Array.size_push", 1],["BinaryHeap.size_heapifyUp", 1],["Bool.false", 1],["Array.getLit", 1],["Nat.add", 1],["List.getLast", 1],["sorryAx", 1],["Array.swap", 1],["List.getLast_eq_get", 1],["Nat.lt_of_lt_of_eq", 1],["Array.toListLitAux", 1],["BinaryHeap.arr", 1],["List.get", 1]]],
["UInt16.size", 6, [["Bool.true", 2],["of_decide_eq_true", 2],["Eq.refl", 2],["instNonempty", 2],["OfNat.ofNat", 1],["Inhabited.mk", 1],["Fin.ofNat'", 1],["UInt16.size_positive", 1]]],
["ExceptT.run", 6, [["rfl", 4],["Bind.bind", 2],["Except", 2],["Except.error", 2],["congrArg", 2],["Pure.pure", 2],["eq_self", 2],["Except.ok", 2],["of_eq_true", 2],["map_eq_pure_bind", 2],["Eq", 2],["Except.map", 1],["LawfulMonad.pure_bind", 1],["Eq.symm", 1],["LawfulMonad.bind_assoc", 1],["funext", 1],["congrFun", 1],["bind_congr", 1],["ExceptT.mk", 1],["ExceptT.run", 1],["Eq.mpr", 1],["Eq.trans", 1],["Eq.refl", 1]]],
["dif_neg", 6, [["Fin.mk", 4],["congrArg", 4],["Eq.mpr", 3],["OfNat.ofNat", 3],["LT.lt", 3],["Fin.val", 3],["UnionFind.size", 2],["congrFun", 2],["UnionFind.rankMaxAux", 2],["Array.size_set", 2],["BinaryHeap.arr", 2],["BinaryHeap.size_pos_of_max", 2],["Iff.mpr", 1],["And.imp", 1],["Eq.trans", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["UnionFind.rankMax", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UFModel.push", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["Classical.em", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["dite_true", 1],["Fin.isLt", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["dite_false", 1],["eq_self", 1],["Eq.refl", 1],["Eq", 1]]],
["dif_pos", 6, [["Fin.mk", 4],["congrArg", 4],["Eq.mpr", 3],["OfNat.ofNat", 3],["LT.lt", 3],["Fin.val", 3],["UnionFind.size", 2],["congrFun", 2],["UnionFind.rankMaxAux", 2],["Array.size_set", 2],["BinaryHeap.arr", 2],["BinaryHeap.size_pos_of_max", 2],["Iff.mpr", 1],["And.imp", 1],["Eq.trans", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["UnionFind.rankMax", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UFModel.push", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["Classical.em", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["dite_true", 1],["Fin.isLt", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["dite_false", 1],["eq_self", 1],["Eq.refl", 1],["Eq", 1]]],
["Complement", 6, [["Complement.mk", 5],["UInt8.complement", 1],["UInt64.complement", 1],["USize.complement", 1],["UInt16.complement", 1],["UInt32.complement", 1]]],
["Tactic.DeclCache", 6, [["Tactic.instNonemptyDeclCache", 2],["PUnit.unit", 1],["Tactic.instNonemptyDeclCache.proof_1", 1],["Prod.mk", 1],["ForIn.forIn", 1],["Pure.pure", 1],["Bind.bind", 1],["ForInStep", 1],["ForInStep.yield", 1],["Tactic.Cache.mk", 1]]],
["Decidable.em", 6, [["Fin.mk", 4],["congrArg", 4],["Eq.mpr", 3],["OfNat.ofNat", 3],["LT.lt", 3],["Fin.val", 3],["UnionFind.size", 2],["congrFun", 2],["UnionFind.rankMaxAux", 2],["Array.size_set", 2],["BinaryHeap.arr", 2],["BinaryHeap.size_pos_of_max", 2],["Iff.mpr", 1],["And.imp", 1],["Eq.trans", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["UnionFind.rankMax", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UFModel.push", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["Nat.succ_pos", 1],["Classical.em", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["dite_true", 1],["Fin.isLt", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["UnionFind.lt_rankMax", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["dite_false", 1],["eq_self", 1],["Eq.refl", 1],["Eq", 1]]],
["MonadExcept.throw", 6, [["rfl", 5],["Eq", 1],["eq_self", 1],["Except", 1],["Except.error", 1],["congrFun", 1],["Eq.trans", 1],["Pure.pure", 1],["congrArg", 1],["LawfulMonad.pure_bind", 1],["of_eq_true", 1]]],
["Fin.ofNat.proof_1", 6, [["Fin.val_eq_of_lt", 4],["Fin.val", 2],["Eq.refl", 1],["Eq.mpr", 1],["UInt8.toChar_aux", 1],["UInt32.ofNat", 1],["Nat.lt_trans", 1],["Or.inl", 1],["UInt32.val_eq_of_lt", 1],["UInt32.val", 1],["Fin.isLt", 1],["Nat.isValidChar", 1],["UInt8.val", 1],["of_decide_eq_true", 1],["Bool.true", 1]]],
["LawfulFunctor", 6, [["Eq.symm", 2],["Eq.refl", 2],["LawfulFunctor.mk", 2],["rfl", 2],["instLawfulFunctorOptionInstFunctorOption.proof_1", 1],["eq_of_heq", 1],["And.intro", 1],["propext", 1],["HEq.refl", 1],["Function.comp", 1],["funext", 1],["Exists.intro", 1],["Functor.map", 1],["Set.instLawfulFunctorSetInstFunctorSet.proof_1", 1],["Iff.intro", 1]]],
["ToStream", 6, [["ToStream.mk", 5],["Array.toSubarray", 1],["Array.size", 1],["OfNat.ofNat", 1]]],
["MonadStateOf", 6, [["MonadStateOf.mk", 5],["MonadState.modifyGet", 1],["MonadStateOf.set", 1],["EStateM.modifyGet", 1],["MonadLiftT.monadLift", 1],["EStateM.get", 1],["PUnit.unit", 1],["StateRefT'.set", 1],["MonadStateOf.get", 1],["StateRefT'.modifyGet", 1],["liftM", 1],["EStateM.set", 1],["StateRefT'.get", 1]]],
["Fin.ofNat", 6, [["Fin.val_eq_of_lt", 4],["Fin.val", 2],["Eq.refl", 1],["Eq.mpr", 1],["UInt8.toChar_aux", 1],["UInt32.ofNat", 1],["Nat.lt_trans", 1],["Or.inl", 1],["UInt32.val_eq_of_lt", 1],["UInt32.val", 1],["Fin.isLt", 1],["Nat.isValidChar", 1],["UInt8.val", 1],["of_decide_eq_true", 1],["Bool.true", 1]]],
["UnionFind", 6, [["UnionFind.mk", 4],["UFNode.mk", 2],["OfNat.ofNat", 2],["UnionFind.arr", 2],["Fin.mk", 2],["Fin.val", 2],["Eq", 1],["Array.set", 1],["List.toArray", 1],["Array.push", 1],["UnionFind.find", 1],["UnionFind.link.proof_3", 1],["UnionFind.link.proof_1", 1],["UnionFind.link", 1],["Array.get", 1],["UnionFind.union.proof_1", 1],["Array.size", 1],["UFNode.value", 1],["HAdd.hAdd", 1],["UnionFind.union.proof_2", 1],["List.nil", 1],["UnionFind.push.proof_1", 1],["UnionFind", 1],["UFNode.parent", 1],["UnionFind.empty.proof_1", 1],["UFNode.rank", 1],["LT.lt", 1],["dite", 1],["Array.mkEmpty", 1],["UnionFind.link.proof_2", 1],["UnionFind.mkEmpty.proof_1", 1]]],
["OrElse", 6, [["OrElse.mk", 5],["MonadExcept.orElse", 2],["Option.orElse", 1],["Alternative.orElse", 1],["EStateM.orElse", 1]]],
["Append", 5, [["Append.mk", 4],["OfNat.ofNat", 1],["Array.append", 1],["HAppend.hAppend", 1],["Array.size", 1],["Subarray.toArray", 1],["ByteArray.append", 1],["List.append", 1],["Array.toSubarray", 1]]],
["funext", 5, [["rfl", 3],["Eq.refl", 3],["Eq", 3],["Decidable.decide", 2],["eq_self", 2],["congrFun", 2],["OfNat.ofNat", 2],["Eq.trans", 2],["Array.size", 2],["congrArg", 2],["of_eq_true", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["Classical.em", 1],["Subsingleton.elim", 1],["WellFounded.fix", 1]]],
["InvImage", 5, [["InvImage.accessible", 1],["WellFoundedRelation.wf", 1],["InvImage.wf", 1],["InvImage.accessible.proof_1", 1],["WellFounded.intro", 1],["InvImage.wf.proof_1", 1],["rfl", 1],["WellFounded.apply", 1],["Acc.intro", 1]]],
["Equivalence", 5, [["Equivalence.mk", 3],["Subtype.trans", 1],["List.Perm.symm", 1],["Function.Equiv.refl", 1],["Subtype.refl", 1],["List.Perm.trans", 1],["Function.Equiv.symm", 1],["List.Perm.refl", 1],["Subtype.symm", 1],["Function.Equiv.trans", 1]]],
["ByteSlice", 5, [["ByteSlice.mk", 2],["ByteArray.size", 2],["OfNat.ofNat", 1],["HAdd.hAdd", 1],["Pure.pure", 1],["ForIn.forIn", 1],["Bind.bind", 1],["ByteSlice", 1],["PUnit.unit", 1],["Id.run", 1],["HSub.hSub", 1],["ForInStep.yield", 1],["ByteSlice.forIn.loop", 1],["ToString.mk", 1],["UInt8.toChar", 1],["ForIn.mk", 1]]],
["UFModel", 5, [["UFModel.mk", 4],["UFModel.rank", 3],["UFModel.parent", 3],["Fin.val", 3],["OfNat.ofNat", 3],["Eq", 2],["ite", 2],["UFModel.empty.proof_1", 1],["Fin.elim0", 1],["LT.lt", 1],["UFModel.setParentBump.proof_1", 1],["dite", 1],["UFModel.setParent.proof_1", 1],["UFModel.push.proof_2", 1],["UFModel.push.proof_1", 1],["And", 1],["HAdd.hAdd", 1],["Fin", 1],["Fin.mk", 1]]],
["Nat.Linear.ExprCnstr.denote", 5, [["Eq.refl", 2],["LE.le", 2],["Classical.em", 2],["Eq.trans", 2],["Nat.Linear.Expr.denote", 2],["congr", 2],["Prod.mk", 2],["Eq.mpr", 2],["cond", 2],["of_eq_true", 2],["Bool.of_not_eq_true", 2],["eq_self", 2],["congrFun", 2],["Nat.Linear.Poly.denote_le", 2],["Nat.Linear.Poly.denote_eq", 2],["cond_true", 2],["Nat.Linear.Expr.toPoly", 2],["congrArg", 2],["Eq.symm", 2],["Nat.Linear.Expr.denote_toPoly", 2],["cond_false", 2],["Eq", 2],["Bool.true", 2],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["List.nil", 1],["OfNat.ofNat", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.add_comm", 1],["Nat.zero_add", 1],["HAdd.hAdd", 1]]],
["Nat.Linear.Expr.num", 5, [["Eq.refl", 5],["OfNat.ofNat", 4],["congrArg", 3],["HMul.hMul", 3],["Eq.trans", 3],["of_eq_true", 3],["eq_self", 3],["congrFun", 3],["congr", 3],["Nat.Linear.Var.denote", 3],["HAdd.hAdd", 3],["Eq.symm", 3],["Nat.mul_eq", 3],["Eq", 3],["Nat.Linear.denote_monomialToExpr", 2],["Nat.add", 2],["Nat.Linear.Poly.denote", 2],["Nat.Linear.monomialToExpr", 2],["Nat.add_eq", 2],["Nat.Linear.Expr.denote", 2],["Nat.add_comm", 2],["Nat.Linear.Expr.num", 2],["Bool.true", 2],["Nat.Linear.Expr.add", 1],["Eq.mpr", 1],["Classical.em", 1],["Bool.of_not_eq_true", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["cond", 1],["eq_true_of_decide", 1],["BEq.beq", 1],["Eq.propIntro", 1],["Nat.Linear.Var.denote.go", 1],["eq_of_heq", 1],["HEq.refl", 1],["Nat.add_left_comm", 1],["Nat.Linear.Expr.mulL", 1],["SizeOf.sizeOf", 1],["Nat.one_mul", 1],["cond_false", 1],["Nat.mul_one", 1],["Nat.Linear.fixedVar", 1],["cond_true", 1],["Nat.zero_add", 1],["Unit.unit", 1],["beq_self_eq_true", 1],["Nat.Linear.Expr.var", 1],["eq_of_beq", 1]]],
["List.foldr", 5, [["of_eq_true", 4],["propext", 2],["Or", 2],["Eq.trans", 2],["congr", 2],["eq_self", 2],["iff_self", 2],["congrArg", 2],["Iff", 2],["Eq", 2],["Membership.mem", 2],["List.nil_union", 1],["List.card_append_disjoint", 1],["congrFun", 1],["false_or", 1],["List.card", 1],["List.cons_union", 1],["List.not_mem_nil", 1],["List.mem_cons", 1],["HAppend.hAppend", 1],["List.mem_insert_iff", 1],["List.union_equiv_append", 1],["HAdd.hAdd", 1],["List.card_eq_of_equiv", 1],["eq_false", 1],["Eq.mpr", 1],["List.union", 1],["List.foldr", 1],["List.mem_append", 1],["rfl", 1],["or_assoc", 1],["Eq.refl", 1],["List.mem_union_iff", 1],["List.insert", 1]]],
["eq_true", 5, [["congrArg", 3],["Fin.mk", 3],["Fin.val", 3],["eq_true", 2],["UnionFind.rankMaxAux", 2],["Eq.symm", 2],["Eq.trans", 2],["congrFun", 2],["LT.lt", 2],["Eq.mpr", 2],["UnionFind.size", 2],["Eq", 2],["of_eq_true", 2],["Eq.refl", 2],["Iff.mpr", 1],["UFModel.push.proof_1", 1],["UFModel.parent", 1],["Nat.le_add_right", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["List.getLast", 1],["Classical.em", 1],["Subtype.val", 1],["List.get", 1],["Fin.isLt", 1],["UFModel.rank", 1],["dite_congr", 1],["UnionFind.rankMax", 1],["UFModel.push", 1],["eq_self", 1],["UnionFind.rank_lt", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["List.length_cons", 1],["eq_false", 1],["UFModel.Agrees.push", 1],["List.length", 1],["List.cons", 1],["eq_of_heq", 1],["dite_false", 1],["Nat.succ_pos", 1],["HEq.refl", 1],["UFNode.mk", 1],["dite_true", 1],["And.imp", 1],["UnionFind.lt_rankMax", 1],["List.getLast_eq_get", 1],["Nat.lt_succ_self", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["rfl", 1],["List.cons_ne_nil", 1],["congr", 1],["OfNat.ofNat", 1]]],
["ExceptCpsT.runCatch", 5, [["rfl", 4],["Eq", 1],["congrFun", 1],["bind_pure", 1],["Eq.trans", 1],["congrArg", 1],["eq_self", 1],["of_eq_true", 1]]],
["List.union", 5, [["of_eq_true", 4],["propext", 2],["Or", 2],["Eq.trans", 2],["congr", 2],["eq_self", 2],["iff_self", 2],["congrArg", 2],["Iff", 2],["Eq", 2],["Membership.mem", 2],["List.nil_union", 1],["List.card_append_disjoint", 1],["congrFun", 1],["false_or", 1],["List.card", 1],["List.cons_union", 1],["List.not_mem_nil", 1],["List.mem_cons", 1],["HAppend.hAppend", 1],["List.mem_insert_iff", 1],["List.union_equiv_append", 1],["HAdd.hAdd", 1],["List.card_eq_of_equiv", 1],["eq_false", 1],["Eq.mpr", 1],["List.union", 1],["List.foldr", 1],["List.mem_append", 1],["rfl", 1],["or_assoc", 1],["Eq.refl", 1],["List.mem_union_iff", 1],["List.insert", 1]]],
["Mathlib.Tactic.Lint.NamedLinter", 5, [["Mathlib.Tactic.Lint.NamedLinter.toLinter", 2],["Pure.pure", 2],["Bind.bind", 2],["HAppend.hAppend", 2],["Bool.true", 1],["Prod", 1],["Classical.ofNonempty", 1],["Prod.mk", 1],["Task.get", 1],["Option.none", 1],["List.filter", 1],["Mathlib.Tactic.Lint.getLinter", 1],["PUnit.unit", 1],["Mathlib.Tactic.Lint.NamedLinter.name", 1],["ite", 1],["Mathlib.Tactic.Lint.shouldBeLinted", 1],["Functor.map", 1],["List.mapM", 1],["Mathlib.Tactic.Lint.getLinters", 1],["Option.some", 1],["ForInStep", 1],["Mathlib.Tactic.Lint.NamedLinter", 1],["OfNat.ofNat", 1],["ForIn.forIn", 1],["Array.size", 1],["Array.filterM", 1],["Option", 1],["Task.Priority.default", 1],["Mathlib.Tactic.Lint.Linter.test", 1],["Array.toList", 1],["List.nil", 1],["Array.mapM", 1],["Mathlib.Tactic.Lint.mathlibLinterAttr", 1],["ForInStep.yield", 1],["Mathlib.Tactic.Lint.Linter.isFast", 1],["EmptyCollection.emptyCollection", 1],["liftM", 1],["Eq", 1]]],
["Eq.mpr_prop", 5, [["Fin.mk", 3],["Eq.mpr", 3],["congrArg", 3],["LT.lt", 3],["UnionFind.size", 2],["BinaryHeap.size_pos_of_max", 2],["OfNat.ofNat", 2],["UnionFind.rankMaxAux", 2],["Array.size_set", 2],["BinaryHeap.arr", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["Subtype.property", 1],["Nat.succ_pos", 1],["UnionFind.rank_lt", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.lt_rankMax'", 1],["UnionFind.lt_rankMax", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["UnionFind.rankMax", 1],["Classical.em", 1]]],
["BinaryHeap.size", 5, [["BinaryHeap.arr", 4],["Array.size", 3],["OfNat.ofNat", 3],["Eq", 3],["Eq.refl", 2],["Array.push", 2],["Eq.trans", 2],["Fin.mk", 2],["congrArg", 2],["Array.size_push", 2],["BinaryHeap.size", 2],["congrFun", 2],["eq_false'", 1],["Eq.mpr", 1],["Option.some", 1],["BinaryHeap.popMaxAux.proof_1", 1],["of_eq_true", 1],["Array.get", 1],["Eq.mp", 1],["Subtype", 1],["Eq.mpr_prop", 1],["eq_false", 1],["HAdd.hAdd", 1],["dite_false", 1],["BinaryHeap.insert.proof_1", 1],["Subtype.mk", 1],["Subtype.property", 1],["Decidable.of_not_not", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["False.elim", 1],["HSub.hSub", 1],["LT.lt", 1],["dite_congr", 1],["Nat.lt_succ_self", 1],["Option.none", 1],["BinaryHeap.popMaxAux.proof_2", 1],["BinaryHeap.popMaxAux", 1]]],
["SizeOf", 5, [["SizeOf.mk", 4],["Unit.unit", 1],["SizeOf.sizeOf", 1],["default.sizeOf", 1]]],
["Fin.isLt", 5, [["rfl", 3],["Eq.symm", 3],["Eq.refl", 3],["Fin.val", 2],["Fin.mk", 2],["Eq", 2],["UFModel.push", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["eq_self", 1],["congrFun", 1],["Option.map", 1],["And.imp", 1],["eq_true", 1],["Option.some", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["Nat.le_add_right", 1],["Option.some.inj", 1],["UFModel.parent", 1],["List.length_map", 1],["List.get?_eq_get", 1],["eq_false", 1],["congrArg", 1],["And.intro", 1],["eq_of_heq", 1],["lt_irrefl", 1],["List.get?", 1],["HEq.refl", 1],["UFNode.mk", 1],["dite_true", 1],["Fin.isLt", 1],["List.map", 1],["UFModel.rank", 1],["dite_congr", 1],["List.get?_map", 1],["Eq.trans", 1],["Eq.mpr", 1],["List.get", 1]]],
["Option.getD", 5, [["rfl", 5],["Eq.refl", 3],["Eq.symm", 3],["Option.getD", 2],["Eq", 2],["Option.none", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.cons", 1],["List.get?", 1],["Functor.map", 1],["absurd", 1],["Option.some", 1],["congr_arg", 1],["Eq.trans", 1],["List.modifyNth", 1],["List.set", 1],["Option.getD_some", 1]]],
["noConfusionTypeEnum", 5, [["noConfusionEnum", 4],["noConfusionEnum.proof_1", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["False.elim", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["Ordering.toCtorIdx", 1]]],
["List.drop", 5, [["rfl", 5],["List.drop", 5],["Eq", 5],["Eq.refl", 3],["OfNat.ofNat", 3],["List.cons", 3],["PProd.fst", 3],["List.nil", 2],["HAdd.hAdd", 2],["HEq.refl", 2],["Eq.symm", 2],["Nat.add", 2],["List.length", 2],["Nat.add_eq", 1],["Array.data", 1],["Nat.lt_of_lt_of_eq", 1],["HAppend.hAppend", 1],["List.take", 1],["Nat.le_of_succ_le_succ", 1],["congrArg", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["Nat.lt_of_lt_of_le", 1],["Eq.mpr", 1],["Nat.succ_sub_succ_eq_sub", 1],["List.get", 1],["Array.toListLitAux", 1],["Trans.trans", 1],["Nat.succ", 1],["Nat.add_zero", 1],["Array.getLit", 1],["Fin.mk", 1],["HSub.hSub", 1],["Nat.lt_succ_self", 1],["congr_arg", 1],["Fin.val", 1],["congrFun", 1],["Nat.zero_sub", 1]]],
["Sum.inl", 5, [["Eq.refl", 2],["OfNat.ofNat", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HAdd.hAdd", 1],["rfl", 1],["Eq.propIntro", 1],["Sum.inl", 1],["eq_of_heq", 1]]],
["Option.get", 5, [["Option.get", 4],["rfl", 4],["Eq.refl", 4],["Eq", 3],["Bool.true", 3],["HEq.refl", 3],["Eq.symm", 2],["Option.some", 2],["eq_false'", 1],["eq_self", 1],["congrFun", 1],["sorryAx", 1],["Eq.trans", 1],["Eq.mpr", 1],["And", 1],["congr", 1],["Option.get_some", 1],["propext", 1],["False", 1],["congrArg", 1],["Iff", 1],["eq_of_heq", 1],["not_exists", 1],["Option.isSome_some", 1],["funext", 1],["true_and", 1],["false_iff", 1],["iff_self", 1],["of_eq_true", 1],["Exists", 1],["Option.some.injEq", 1],["exists_prop", 1],["Membership.mem", 1]]],
["UFNode.mk", 5, [["UFNode.mk", 4],["Eq.refl", 3],["OfNat.ofNat", 3],["Eq.symm", 3],["UFModel.push", 2],["HAdd.hAdd", 2],["UnionFind.arr", 2],["Nat.le_add_right", 2],["congrArg", 2],["Fin.val", 2],["Array.size_set", 1],["congrFun", 1],["And.imp", 1],["Exists.intro", 1],["Array.push", 1],["eq_true", 1],["UFModel.Models.push", 1],["UFModel.push.proof_1", 1],["Eq.trans", 1],["Array.get", 1],["UFModel.parent", 1],["of_eq_true", 1],["Array.size", 1],["UFNode.value", 1],["UnionFind.model'", 1],["eq_false", 1],["UFNode.rank", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["Eq.propIntro", 1],["And.intro", 1],["eq_of_heq", 1],["lt_irrefl", 1],["Eq.mpr", 1],["SizeOf.sizeOf", 1],["UFModel.Models", 1],["HEq.refl", 1],["dite_true", 1],["Fin.mk", 1],["LT.lt", 1],["Fin.isLt", 1],["UFModel.rank", 1],["dite_congr", 1],["rfl", 1],["Exists", 1],["eq_self", 1],["Eq", 1]]],
["ExistsUnique", 5, [["Exists.intro", 2],["And.intro", 2],["Eq", 1],["Iff.intro", 1],["Function.bijective_iff_exists_unique", 1],["Iff.mp", 1],["Eq.trans", 1],["forall_congr'", 1],["and_congr", 1],["ExistsUnique.intro", 1],["imp_congr_left", 1],["Function.bijective.surjective", 1],["ExistsUnique.exists", 1],["Eq.symm", 1],["unique_of_exists_unique", 1],["Exists.elim", 1],["ExistsUnique", 1],["Function.bijective.injective", 1],["exists_congr", 1],["rfl", 1]]],
["xor", 5, [["eq_self", 4],["Or", 4],["Eq.trans", 4],["of_eq_true", 4],["congrArg", 4],["Eq", 4],["congr", 3],["congrFun", 3],["Not", 3],["And", 3],["funext", 2],["Eq.refl", 2],["Bool.true", 1],["false_or", 1],["false_and", 1],["or_comm", 1],["and_true", 1],["id_eq", 1],["forall_congr", 1],["or_self", 1],["propext", 1],["False", 1],["implies_true", 1],["eq_false", 1],["eq_true_of_decide", 1],["and_false", 1],["eq_false_of_decide", 1],["and_not_self", 1],["instDecidableXor.proof_4", 1],["or_false", 1],["instDecidableXor.proof_3", 1],["instDecidableXor.proof_1", 1],["Decidable.isTrue", 1],["Bool.false", 1],["true_and", 1],["dite", 1],["Decidable.isFalse", 1],["instDecidableXor.proof_2", 1]]],
["Nat.succ_add", 5, [["Eq.refl", 5],["Eq", 5],["Fin.mk", 3],["rfl", 3],["OfNat.ofNat", 3],["eq_self", 2],["List.get", 2],["of_eq_true", 2],["Eq.trans", 2],["HAppend.hAppend", 2],["Eq.symm", 2],["id", 2],["Array.size", 2],["HSub.hSub", 2],["congrFun", 2],["Decidable.decide", 2],["List.length", 2],["congrArg", 2],["Eq.mpr", 2],["Bool.true", 2],["Nat.le_of_succ_le_succ", 1],["List.get?_eq_get", 1],["dif_pos", 1],["HAdd.hAdd", 1],["Bool.and_true", 1],["eq_true_of_decide", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Classical.em", 1],["Array.isEqv", 1],["Bool.false", 1],["Nat.lt_add_right", 1],["WellFounded.fix_eq", 1],["dite_congr", 1],["True", 1],["decide_eq_true_eq", 1],["List.get_append_right_aux", 1],["Array.isEqvAux_self", 1],["Subsingleton.elim", 1],["List.get?_append_right", 1],["WellFounded.fix", 1],["WellFoundedRelation.rel", 1],["Array.get", 1],["Option.some.inj", 1],["List.length_append", 1],["Option.some", 1],["Nat.lt_eq", 1],["PProd.fst", 1],["sizeOf_nat", 1],["Array.isEqvAux.proof_3", 1],["List.nil", 1],["and", 1],["HEq.refl", 1],["funext", 1],["Nat.add", 1],["dite_true", 1],["LT.lt", 1],["dite", 1],["congr", 1],["dif_neg", 1],["List.get?", 1],["Array.isEqvAux.proof_1", 1]]],
["Subtype.property", 5, [["rfl", 2],["Eq", 1],["Subtype.coe_injective", 1],["Iff.symm", 1],["Function.injective.comp", 1],["id", 1],["Subtype.forall", 1],["Subtype.val", 1],["Subtype.map", 1],["funext", 1],["Subtype.coind_injective", 1],["Subtype.ext", 1],["Subtype.map.proof_1", 1]]],
["Mathlib.Tactic.Lint.Linter", 5, [["Bool.true", 3],["ite", 3],["Option.none", 3],["Pure.pure", 3],["Bind.bind", 3],["PUnit.unit", 3],["Function.comp", 3],["Option", 3],["Option.some", 3],["Mathlib.Tactic.Lint.Linter.mk", 3],["Mathlib.Tactic.Lint.isSimpTheorem", 3],["Eq", 3],["BEq.beq", 2],["Mathlib.Tactic.Lint.checkAllSimpTheoremInfos", 2],["HAppend.hAppend", 2],["Mathlib.Tactic.Lint.formatLemmas", 1],["Array.contains", 1],["Mathlib.Tactic.Lint.decorateError", 1],["Not", 1],["not", 1],["Mathlib.Tactic.Lint.isSimpEq", 1],["Mathlib.Tactic.Lint.heuristicallyExtractSimpTheorems", 1],["and", 1],["Option.getD", 1],["Bool.false", 1],["liftM", 1],["Option.isNone", 1],["OfNat.ofNat", 1]]],
["Monoid.npow", 5, [["rfl", 1],["Monoid.npow_succ'", 1],["Monoid.npow_zero'", 1]]],
["Sum.inr", 5, [["Eq.refl", 2],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Sum.inr", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["rfl", 1],["OfNat.ofNat", 1]]],
["FloatArray.size", 5, [["FloatArray.size", 3],["Nat.lt_of_lt_of_le", 3],["Nat.le_refl", 2],["Nat.lt_succ_self", 2],["Bool.true", 1],["Nat.lt_of_le_of_lt", 1],["HSub.hSub", 1],["Nat.sub_le", 1],["Nat.zero_lt_of_lt", 1],["Nat.le_of_lt", 1],["Nat.sub_lt", 1],["of_decide_eq_true", 1],["OfNat.ofNat", 1],["Eq.refl", 1]]],
["MonadControl", 5, [["MonadControl.mk", 3],["liftM", 2],["id", 1],["Except", 1],["inferInstanceAs", 1],["Option", 1],["MonadControl", 1],["ExceptT.run", 1],["OptionT.run", 1]]],
["Nat.min", 5, [["Eq.refl", 4],["ite_true", 3],["Eq.trans", 3],["Eq.mpr", 3],["of_eq_true", 3],["ite_congr", 3],["congrArg", 3],["eq_true", 3],["Eq", 3],["LE.le", 2],["congrFun", 2],["eq_self", 2],["eq_false", 2],["Eq.symm", 2],["Decidable.em", 2],["ite_false", 2],["Nat.le_or_le", 1],["Nat.min_eq_left", 1],["Nat.le_of_not_le", 1],["Nat.le_antisymm", 1],["le_refl", 1],["Nat.min_comm", 1],["rfl", 1],["not_or_intro", 1],["congr", 1],["Nat.min", 1]]],
["ExceptCpsT.run", 5, [["rfl", 5]]],
["Nat.zero_add", 5, [["Eq.refl", 5],["Eq", 5],["Fin.mk", 3],["rfl", 3],["OfNat.ofNat", 3],["eq_self", 2],["List.get", 2],["of_eq_true", 2],["Eq.trans", 2],["HAppend.hAppend", 2],["Eq.symm", 2],["id", 2],["Array.size", 2],["HSub.hSub", 2],["congrFun", 2],["Decidable.decide", 2],["List.length", 2],["congrArg", 2],["Eq.mpr", 2],["Bool.true", 2],["Nat.le_of_succ_le_succ", 1],["List.get?_eq_get", 1],["dif_pos", 1],["HAdd.hAdd", 1],["Bool.and_true", 1],["eq_true_of_decide", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Classical.em", 1],["Array.isEqv", 1],["Bool.false", 1],["Nat.lt_add_right", 1],["WellFounded.fix_eq", 1],["dite_congr", 1],["True", 1],["decide_eq_true_eq", 1],["List.get_append_right_aux", 1],["Array.isEqvAux_self", 1],["Subsingleton.elim", 1],["List.get?_append_right", 1],["WellFounded.fix", 1],["WellFoundedRelation.rel", 1],["Array.get", 1],["Option.some.inj", 1],["List.length_append", 1],["Option.some", 1],["Nat.lt_eq", 1],["PProd.fst", 1],["sizeOf_nat", 1],["Array.isEqvAux.proof_3", 1],["List.nil", 1],["and", 1],["HEq.refl", 1],["funext", 1],["Nat.add", 1],["dite_true", 1],["LT.lt", 1],["dite", 1],["congr", 1],["dif_neg", 1],["List.get?", 1],["Array.isEqvAux.proof_1", 1]]],
["UFModel.mk", 5, [["Eq.refl", 4],["And.intro", 3],["congrArg", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["OfNat.ofNat", 2],["UFModel.parent", 2],["Eq.symm", 2],["eq_false", 2],["Eq", 2],["Fin.val", 2],["Fin.mk", 2],["Eq.trans", 2],["UFModel.push", 1],["UFModel.Agrees.push", 1],["UFModel.mk", 1],["congr", 1],["Nat.le_add_right", 1],["dite_false", 1],["UFModel.Agrees.empty", 1],["And.right", 1],["UFModel.Agrees.set", 1],["ite_congr", 1],["And.imp", 1],["Eq.propIntro", 1],["Ne.symm", 1],["eq_of_heq", 1],["lt_irrefl", 1],["UFNode.mk", 1],["ite_true", 1],["HEq.refl", 1],["dite_true", 1],["UFModel.Agrees.get_eq", 1],["ite_false", 1],["UFModel.rank", 1],["dite_congr", 1],["rfl", 1],["eq_true", 1],["And.left", 1],["UFModel.push.proof_1", 1]]],
["ByteArray.size", 5, [["Nat.lt_of_lt_of_le", 3],["ByteArray.size", 3],["Nat.le_refl", 2],["Nat.lt_succ_self", 2],["Bool.true", 1],["Nat.zero_lt_of_lt", 1],["HSub.hSub", 1],["Nat.sub_le", 1],["of_decide_eq_true", 1],["Nat.lt_of_le_of_lt", 1],["Nat.le_of_lt", 1],["Nat.sub_lt", 1],["OfNat.ofNat", 1],["Eq.refl", 1]]],
["Membership", 5, [["Membership.mk", 4],["Eq", 2],["Bool.true", 1],["Set.mem", 1],["List.Mem", 1],["Option.some", 1],["Array.contains", 1]]],
["Option.lift_or_get", 4, [["rfl", 4],["Eq.symm", 2],["Eq.refl", 2],["Or.inl", 1],["Option.lift_or_get", 1],["Unit.unit", 1],["Or", 1],["Or.inr", 1],["Eq", 1]]],
["Nat.Linear.Expr.var", 4, [["Eq.refl", 4],["OfNat.ofNat", 3],["Eq.symm", 3],["HMul.hMul", 2],["Eq.trans", 2],["Nat.Linear.Expr.denote", 2],["of_eq_true", 2],["eq_self", 2],["Nat.Linear.Expr.var", 2],["congrFun", 2],["congr", 2],["HAdd.hAdd", 2],["congrArg", 2],["Nat.mul_eq", 2],["Nat.Linear.Var.denote", 2],["Eq", 2],["Nat.Linear.denote_monomialToExpr", 1],["Nat.Linear.monomialToExpr", 1],["cond", 1],["BEq.beq", 1],["Nat.Linear.fixedVar", 1],["cond_true", 1],["Nat.zero_add", 1],["Nat.add_eq", 1],["Classical.em", 1],["Nat.Linear.Expr.add", 1],["Bool.of_not_eq_true", 1],["Nat.add_left_comm", 1],["Nat.add_comm", 1],["Nat.Linear.Var.denote.go", 1],["Eq.propIntro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Nat.Linear.Expr.mulL", 1],["HEq.refl", 1],["Nat.Linear.Poly.denote", 1],["Nat.one_mul", 1],["Nat.add", 1],["cond_false", 1],["Nat.mul_one", 1],["Nat.Linear.Expr.num", 1],["Eq.mpr", 1],["beq_self_eq_true", 1],["Bool.true", 1],["eq_of_beq", 1]]],
["eq_false'", 4, [["OfNat.ofNat", 2],["Fin.mk", 2],["LT.lt", 2],["BinaryHeap.size_pos_of_max", 2],["Eq.mpr", 2],["congrArg", 2],["rfl", 2],["Array.size_set", 2],["BinaryHeap.arr", 2]]],
["AddMonoidWithOne", 4, [["AddMonoidWithOne.mk", 2],["NonUnitalNonAssocSemiring.natCast", 1],["AddCommMonoid", 1],["Fin.size_positive'", 1],["inferInstanceAs", 1],["NonUnitalNonAssocSemiring.natCast_zero", 1],["instAddMonoidWithOneFin.proof_2", 1],["instAddMonoidWithOneFin.proof_1", 1],["Fin.ofNat'", 1],["NonUnitalNonAssocSemiring.natCast_succ", 1],["Fin", 1]]],
["PSum", 4, [["PSum", 2],["PSum.inl", 2],["PSum.inr", 2],["Nonempty", 2],["Or", 1],["False", 1],["Iff.intro", 1],["Classical.propDecidable", 1],["Nonempty.intro", 1],["Inhabited.default", 1],["Or.inl", 1],["Or.inr", 1],["Classical.typeDecidable.proof_1", 1]]],
["Or.elim", 4, [["UnionFind.rankMaxAux", 2],["Eq.mpr", 2],["UnionFind.size", 2],["Fin.mk", 2],["Fin.val", 2],["Eq", 1],["UnionFind.rankMax", 1],["List.length_pos_of_ne_nil", 1],["List.get", 1],["id", 1],["HSub.hSub", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["UnionFind.lt_rankMax'", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["OfNat.ofNat", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["congrArg", 1],["dif_pos", 1],["List.length", 1],["List.nil", 1],["Subtype.property", 1],["List.cons", 1],["Nat.succ_pos", 1],["List.getLast", 1],["UnionFind.rank_lt", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["List.get_singleton", 1],["List.getLast_cons", 1],["LT.lt", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["rfl", 1],["dif_neg", 1],["Iff.mpr", 1],["Eq.refl", 1]]],
["Nat.lt", 4, [["OfNat.ofNat", 1],["Nat.lt", 1],["Prod.Lex", 1],["Prod.mk", 1],["Nat.succ", 1],["Acc.intro", 1],["Prod.Lex.left", 1],["Nat.eq_or_lt_of_le", 1],["WellFounded.intro", 1],["Prod.Lex.right'.proof_1", 1],["absurd", 1],["Nat.not_lt_zero", 1],["Prod.Lex.right", 1],["rfl", 1]]],
["ne_eq", 4, [["rfl", 3],["Eq.refl", 2],["Eq.trans", 2],["congrArg", 2],["eq_false", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["Fin.val", 2],["Fin.mk", 2],["UFModel.parent", 2],["Eq", 2],["UFModel.Agrees.set", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.le_add_right", 1],["UFModel.push", 1],["Ne.symm", 1],["ite_congr", 1],["UFModel.Agrees.push", 1],["And.right", 1],["And.intro", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["dite_true", 1],["dite_false", 1],["UFModel.Agrees.get_eq", 1],["UFModel.rank", 1],["dite_congr", 1],["And.imp", 1],["ite_true", 1],["ite_false", 1],["And.left", 1]]],
["plift.up", 4, [["plift.up", 2],["Eq.refl", 2],["rfl", 2],["eq_of_heq", 1],["plift.down", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["Eq.propIntro", 1],["Eq", 1],["OfNat.ofNat", 1]]],
["Subarray.stop", 4, [["Nat.le_of_lt_succ", 1],["Nat.succ_le_of_lt", 1],["Nat.add_lt_add_right", 1],["OfNat.ofNat", 1]]],
["UnionFind.rank", 4, [["congrFun", 3],["congrArg", 3],["Fin.mk", 3],["Eq.refl", 2],["UFModel.Models.rank_eq", 2],["Eq.trans", 2],["eq_true", 2],["OfNat.ofNat", 2],["LT.lt", 2],["Eq.mpr_prop", 2],["Eq.mpr", 2],["dite_congr", 2],["dite_true", 2],["Fin.val", 2],["UnionFind.rankMax", 1],["UnionFind.lt_rankMax'", 1],["Classical.em", 1],["congr", 1],["UFNode.rank", 1],["UFModel.rank_lt", 1],["Array.get", 1],["UFModel.parent", 1],["Array.size", 1],["UnionFind.model'", 1],["UnionFind.arr", 1],["Ne", 1],["dif_pos", 1],["of_eq_true", 1],["Nat.succ_pos", 1],["UnionFind.size", 1],["UnionFind.rankMaxAux", 1],["UFNode.parent", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["UFModel.Models.parent_eq'", 1],["eq_self", 1],["UnionFind.rank_lt", 1],["Nat.sub_lt_sub_left", 1],["UFModel.rank", 1],["ne_eq", 1],["dif_neg", 1],["implies_congr", 1],["Eq", 1]]],
["Subtype.map", 4, [["rfl", 2],["id", 1],["Subtype.coe_injective", 1],["Subtype.coind_injective", 1],["funext", 1],["Subtype.map", 1],["Subtype.val", 1],["Subtype.ext", 1],["Function.injective.comp", 1],["Subtype.map.proof_1", 1],["Eq", 1]]],
["Nat.Linear.Expr.toPoly", 4, [["Eq.symm", 3],["Prod.mk", 3],["Classical.em", 3],["Nat.Linear.Expr.denote", 3],["Eq.trans", 3],["Eq.mpr", 3],["of_eq_true", 3],["Nat.Linear.Expr.toPoly", 3],["congr", 3],["Bool.of_not_eq_true", 3],["cond_true", 3],["cond_false", 3],["cond", 3],["eq_self", 3],["congrFun", 3],["Eq.refl", 3],["congrArg", 3],["Bool.true", 3],["Eq", 3],["LE.le", 2],["List.nil", 2],["Nat.zero_add", 2],["Nat.add_comm", 2],["OfNat.ofNat", 2],["Nat.Linear.Poly.denote_eq", 2],["Nat.Linear.Expr.denote_toPoly", 2],["Nat.Linear.Poly.denote_le", 2],["HAdd.hAdd", 2],["Nat.mul", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Poly.denote", 1],["Nat.mul_one", 1],["Nat.Linear.Poly.denote_mul", 1],["Nat.Linear.Poly.denote_append", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.fixedVar", 1],["Nat.one_mul", 1],["HMul.hMul", 1],["Nat.add_zero", 1],["Nat.add_eq", 1],["List.cons", 1],["Nat.Linear.Var.denote", 1],["beq_self_eq_true", 1],["Nat.add", 1],["Nat.mul_comm", 1],["eq_of_beq", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.mul_eq", 1],["rfl", 1],["Nat.Linear.Expr.toNormPoly", 1],["Nat.Linear.Poly.denote_fuse", 1],["BEq.beq", 1]]],
["Subtype.prop", 4, [["rfl", 2],["id", 1],["Subtype.coe_injective", 1],["Subtype.coind_injective", 1],["funext", 1],["Subtype.map", 1],["Subtype.val", 1],["Subtype.ext", 1],["Function.injective.comp", 1],["Subtype.map.proof_1", 1],["Eq", 1]]],
["Nat.sub_succ", 4, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["BinaryHeap.popMaxAux", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["Subtype.property", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Eq.mp", 4, [["Fin.mk", 4],["Eq.mpr", 4],["LT.lt", 3],["congrArg", 3],["List.get?_eq_get", 2],["List.get", 2],["Array.size_set", 2],["Option.some", 2],["OfNat.ofNat", 2],["Eq.refl", 2],["List.get?", 2],["Eq.symm", 2],["BinaryHeap.size_pos_of_max", 2],["rfl", 2],["BinaryHeap.arr", 2],["Eq", 2],["Option.some_inj", 1],["propext", 1],["id", 1],["Eq.mp", 1],["List.length", 1],["HSub.hSub", 1],["List.get?_append_right", 1],["List.length_set", 1],["List.get_append_right_aux", 1],["Option.some.inj", 1],["List.set", 1],["List.get?_set_ne", 1],["HAppend.hAppend", 1]]],
["Function.Equiv", 4, [["rfl", 1],["Eq.symm", 1],["Function.Equiv.refl", 1],["Eq.trans", 1],["Function.Equiv.symm", 1],["Equivalence.mk", 1],["Function.Equiv.trans", 1]]],
["CommSemiring", 4, [["CommSemiring.mk", 3],["Fin", 1],["AddCommMonoid", 1],["instCommSemiringFin.proof_12", 1],["inferInstanceAs", 1],["CommSemigroup", 1],["Nat.mul_comm", 1],["CommRing.mul_comm", 1],["MonoidWithZero", 1],["AddMonoidWithOne", 1]]],
["cast", 4, [["rfl", 2],["Eq.symm", 2],["Eq.refl", 1],["HEq", 1],["HEq.refl", 1],["unsafeCast", 1],["Fin.mk", 1],["cast", 1],["eq_of_heq", 1],["Array.size_set", 1],["Unit.unit", 1]]],
["Nat.Linear.Expr.mulL", 4, [["Eq.refl", 4],["OfNat.ofNat", 3],["Eq.symm", 3],["congr", 2],["HMul.hMul", 2],["Eq.trans", 2],["HAdd.hAdd", 2],["Nat.Linear.Expr.denote", 2],["of_eq_true", 2],["Nat.Linear.Expr.mulL", 2],["eq_self", 2],["congrFun", 2],["Nat.Linear.Var.denote", 2],["congrArg", 2],["Nat.mul_eq", 2],["Eq", 2],["Eq.mpr", 1],["Nat.Linear.monomialToExpr", 1],["Nat.add_left_comm", 1],["BEq.beq", 1],["Nat.Linear.fixedVar", 1],["cond_true", 1],["Nat.zero_add", 1],["Nat.add_eq", 1],["Nat.Linear.denote_monomialToExpr", 1],["Nat.Linear.Expr.add", 1],["Bool.of_not_eq_true", 1],["Nat.add_comm", 1],["cond", 1],["Nat.Linear.Var.denote.go", 1],["Eq.propIntro", 1],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Classical.em", 1],["HEq.refl", 1],["Nat.Linear.Poly.denote", 1],["Nat.one_mul", 1],["Nat.add", 1],["cond_false", 1],["Nat.mul_one", 1],["Nat.Linear.Expr.num", 1],["eq_of_beq", 1],["beq_self_eq_true", 1],["Bool.true", 1],["Nat.Linear.Expr.var", 1]]],
["Sat.Clause.reify", 4, [["Sat.Clause.reify.mk", 3],["Sat.Clause.reify.prop", 2],["And.left", 1],["Sat.Clause.reify_zero", 1],["trivial", 1],["Not.elim", 1],["by_contra", 1],["Sat.Literal.reify.prop", 1],["Sat.Clause.reify_and", 1],["And.intro", 1]]],
["Option.isNone", 4, [["rfl", 3],["Eq.symm", 2],["Eq", 1],["Eq.trans", 1],["Option.eq_none_of_isNone", 1],["Iff.intro", 1],["eq_false_of_decide", 1],["congrArg", 1],["Option.isSome_some", 1],["Iff", 1],["of_eq_true", 1],["eq_self", 1],["Option.isNone_some", 1],["Option.isNone_none", 1],["congrFun", 1],["Bool.false", 1],["Option.isSome_none", 1],["True", 1],["iff_self", 1],["False", 1],["Eq.refl", 1],["Bool.true", 1],["congr", 1]]],
["List.replicate", 4, [["OfNat.ofNat", 3],["List.replicate", 2],["Nat.succ", 2],["Eq.trans", 2],["congrArg", 2],["Nat.zero_eq", 2],["of_eq_true", 2],["congrFun", 2],["eq_self", 2],["Eq", 2],["List.length_nil", 1],["List.cons", 1],["List.length_cons", 1],["Eq.symm", 1],["Nat.succ_add", 1],["funext", 1],["Eq.mpr", 1],["List.replicateTR_loop_replicate_eq", 1],["List.length_replicate", 1],["List.replicateTR.loop", 1],["Eq.refl", 1],["Nat.zero_add", 1],["HAdd.hAdd", 1],["congr", 1]]],
["Thunk", 4, [["Thunk.mk", 3],["Thunk.get", 2]]],
["Fin.size_positive'", 4, [["Fin.size_positive'", 2],["Nat.mod_lt", 2],["congrFun", 2],["congrArg", 2],["HMod.hMod", 2],["Fin.ofNat'", 2],["rfl", 2],["Fin.mk", 2],["Fin.val", 2],["Eq", 2],["Eq.refl", 2],["Fin.size_positive", 1],["OfNat.ofNat", 1],["Fin.ext", 1],["HMul.hMul", 1],["Fin.add_def", 1],["Fin.one_val", 1],["Eq.mpr", 1],["HAdd.hAdd", 1],["Fin.mul_def", 1],["Nat.mul_mod", 1],["Nat.mod_eq_of_lt", 1],["of_eq_true", 1],["Eq.symm", 1],["Nat.succ", 1],["Nat.mod_add_mod", 1],["Subsingleton.allEq", 1],["eq_self", 1],["Eq.trans", 1],["Fin.eq_of_val_eq", 1],["Fin.ofNat'_succ", 1]]],
["if_pos", 4, [["Fin.val", 3],["UnionFind.rankMaxAux", 2],["congrArg", 2],["UnionFind.size", 2],["Fin.mk", 2],["congrFun", 2],["Eq.refl", 1],["UFModel.Agrees.set", 1],["of_eq_true", 1],["eq_self", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.rankMax", 1],["ite_true", 1],["UnionFind.lt_rankMax'", 1],["ite_false", 1],["congr", 1],["UFModel.parent", 1],["And.right", 1],["UnionFind.rank_lt", 1],["dif_pos", 1],["ite_congr", 1],["eq_false", 1],["Subtype.property", 1],["And.intro", 1],["Nat.succ_pos", 1],["Classical.em", 1],["Eq.trans", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["Eq.mpr", 1],["LT.lt", 1],["Nat.lt_succ_iff", 1],["rfl", 1],["dif_neg", 1],["Ne.symm", 1],["Iff.mpr", 1],["And.left", 1],["Eq", 1]]],
["sorryAx", 4, [["Fin.val", 3],["UnionFind.rankMaxAux", 2],["congrArg", 2],["UnionFind.size", 2],["Fin.mk", 2],["congrFun", 2],["Iff.mpr", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["eq_self", 1],["UFModel.push", 1],["Nat.sub_lt_sub_left", 1],["And.imp", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UnionFind.rankMax", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["Nat.succ_pos", 1],["Classical.em", 1],["UnionFind.rank_lt", 1],["UFNode.mk", 1],["Subtype.val", 1],["dite_true", 1],["Eq.trans", 1],["LT.lt", 1],["UnionFind.lt_rankMax", 1],["Fin.isLt", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["Eq.mpr", 1],["Eq.refl", 1],["Eq", 1]]],
["ExceptCpsT.lift", 4, [["rfl", 3],["Eq", 1],["congrFun", 1],["bind_pure", 1],["Eq.trans", 1],["congrArg", 1],["eq_self", 1],["of_eq_true", 1]]],
["if_neg", 4, [["Fin.val", 3],["UnionFind.rankMaxAux", 2],["congrArg", 2],["UnionFind.size", 2],["Fin.mk", 2],["congrFun", 2],["Eq.refl", 1],["UFModel.Agrees.set", 1],["of_eq_true", 1],["eq_self", 1],["Nat.sub_lt_sub_left", 1],["UnionFind.rankMax", 1],["ite_true", 1],["UnionFind.lt_rankMax'", 1],["ite_false", 1],["congr", 1],["UFModel.parent", 1],["And.right", 1],["UnionFind.rank_lt", 1],["dif_pos", 1],["ite_congr", 1],["eq_false", 1],["Subtype.property", 1],["And.intro", 1],["Nat.succ_pos", 1],["Classical.em", 1],["Eq.trans", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["UFModel.Agrees.get_eq", 1],["Eq.mpr", 1],["LT.lt", 1],["Nat.lt_succ_iff", 1],["rfl", 1],["dif_neg", 1],["Ne.symm", 1],["Iff.mpr", 1],["And.left", 1],["Eq", 1]]],
["emptyRelation", 4, [["Acc.intro", 1],["PSigma.RevLex.right", 1],["WellFoundedRelation.wf", 1],["PSigma.mkSkipLeft.proof_1", 1],["WellFounded.intro", 1],["Acc", 1],["PSigma.revLex", 1],["emptyRelation", 1],["Eq.refl", 1]]],
["Function.surj_inv", 4, [["Function.RightInverse_surj_inv", 2],["And.left", 1],["Function.RightInverse_of_injective_of_LeftInverse", 1],["Function.surj_inv_eq", 1],["And.right", 1],["Function.RightInverse.injective", 1],["Classical.choose_spec", 1]]],
["Subtype.map.proof_1", 4, [["rfl", 2],["id", 1],["Subtype.coe_injective", 1],["Subtype.coind_injective", 1],["funext", 1],["Subtype.map", 1],["Subtype.val", 1],["Subtype.ext", 1],["Function.injective.comp", 1],["Subtype.map.proof_1", 1],["Eq", 1]]],
["HPow", 4, [["HPow.mk", 3],["Pow.pow", 1],["Int.pow", 1],["Monoid.npow", 1]]],
["Sat.Fmla.subsumes", 4, [["Sat.Fmla.subsumes.mk", 3],["Iff.mpr", 2],["List.mem_append", 2],["Sat.Fmla.subsumes.prop", 2],["Or.inr", 1],["Or.inl", 1]]],
["Nonempty.elim.proof_1", 4, [["Fin.size_positive'", 2],["Nat.mod_lt", 2],["congrFun", 2],["congrArg", 2],["HMod.hMod", 2],["Fin.ofNat'", 2],["rfl", 2],["Fin.mk", 2],["Fin.val", 2],["Eq", 2],["Eq.refl", 2],["Fin.size_positive", 1],["OfNat.ofNat", 1],["Fin.ext", 1],["HMul.hMul", 1],["Fin.add_def", 1],["Fin.one_val", 1],["Eq.mpr", 1],["HAdd.hAdd", 1],["Fin.mul_def", 1],["Nat.mul_mod", 1],["Nat.mod_eq_of_lt", 1],["of_eq_true", 1],["Eq.symm", 1],["Nat.succ", 1],["Nat.mod_add_mod", 1],["Subsingleton.allEq", 1],["eq_self", 1],["Eq.trans", 1],["Fin.eq_of_val_eq", 1],["Fin.ofNat'_succ", 1]]],
["Nat.toDigitsCore", 4, [["Decidable.em", 4],["OfNat.ofNat", 4],["Eq.symm", 4],["Eq.refl", 4],["congrArg", 3],["Nat.digitChar", 3],["eq_self", 3],["HMod.hMod", 3],["congrFun", 3],["Eq.trans", 3],["congr", 3],["ite_congr", 3],["HAdd.hAdd", 3],["List.length", 3],["Eq.mpr", 3],["HDiv.hDiv", 3],["List.cons", 3],["of_eq_true", 3],["Nat.toDigitsCore", 3],["Eq", 3],["if_true", 2],["eq_false", 2],["if_false", 2],["implies_congr", 1],["eq_true", 1],["Nat.lt_irrefl", 1],["List.nil", 1],["Nat.succ", 1],["trivial", 1],["eq_true_of_decide", 1],["of_decide_eq_true", 1],["LT.lt", 1],["False.elim", 1],["Nat.to_digits_core_length", 1],["Eq.mp", 1],["Bool.true", 1],["Nat.zero_le", 1],["LE.le", 1]]],
["LinearOrder", 4, [["LinearOrder.mk", 3],["inferInstance", 3],["Fin.le_total", 1],["Nat.le_total", 1],["Int.le_total", 1]]],
["Nat.digitChar", 4, [["Decidable.em", 4],["OfNat.ofNat", 4],["Eq.symm", 4],["Eq.refl", 4],["congrArg", 3],["Nat.digitChar", 3],["eq_self", 3],["HMod.hMod", 3],["congrFun", 3],["Eq.trans", 3],["congr", 3],["ite_congr", 3],["HAdd.hAdd", 3],["List.length", 3],["Eq.mpr", 3],["HDiv.hDiv", 3],["List.cons", 3],["of_eq_true", 3],["Nat.toDigitsCore", 3],["Eq", 3],["if_true", 2],["eq_false", 2],["if_false", 2],["implies_congr", 1],["eq_true", 1],["Nat.lt_irrefl", 1],["List.nil", 1],["Nat.succ", 1],["trivial", 1],["eq_true_of_decide", 1],["of_decide_eq_true", 1],["LT.lt", 1],["False.elim", 1],["Nat.to_digits_core_length", 1],["Eq.mp", 1],["Bool.true", 1],["Nat.zero_le", 1],["LE.le", 1]]],
["Quotient.mk", 4, [["Eq", 1],["Quotient.sound.proof_1", 1],["Quot.exists_rep", 1],["Quotient.mk", 1],["instSubsingletonDecidable", 1]]],
["ulift.up", 4, [["rfl", 2],["ulift.up", 2],["Eq.refl", 2],["Eq", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["eq_of_heq", 1],["ulift.down", 1],["Eq.propIntro", 1],["HEq.refl", 1],["Eq.symm", 1],["OfNat.ofNat", 1]]],
["AddCommMonoid", 4, [["AddCommMonoid.mk", 2],["inferInstanceAs", 1],["AddCommSemigroup", 1],["instAddCommMonoidFin.proof_5", 1],["AddCommGroup.add_comm", 1],["Fin", 1]]],
["MonoidWithZero", 4, [["MonoidWithZero.mk", 3],["Fin", 1],["NonUnitalNonAssocSemiring.zero_mul", 1],["GroupWithZero.mul_zero", 1],["GroupWithZero.zero_mul", 1],["instMonoidWithZeroFin.proof_4", 1],["inferInstanceAs", 1],["instMonoidWithZeroFin.proof_5", 1],["CommSemigroup", 1],["NonUnitalNonAssocSemiring.mul_zero", 1]]],
["Int.NonNeg", 4, [["Int.NonNeg", 2],["Int.NonNeg.mk", 2],["Eq.refl", 1],["Or", 1],["Iff.intro", 1],["LE.le", 1],["Nat.succ", 1],["Or.inl", 1],["eq_of_heq", 1],["Neg.neg", 1],["HEq.refl", 1],["Eq.symm", 1],["Or.inr", 1],["Iff.refl", 1],["Exists.intro", 1],["Nat.cast", 1],["Exists", 1],["rfl", 1],["Eq", 1]]],
["Functor", 4, [["Functor.mk", 2],["Set.image", 1],["Option.map", 1]]],
["BoundedRandom", 4, [["BoundedRandom.mk", 3],["Pure.pure", 3],["Bind.bind", 3],["Subtype.mk", 3],["And", 2],["Subtype", 2],["Random.randBound", 2],["HSub.hSub", 2],["LE.le", 2],["RandG", 2],["Nat", 2],["HAdd.hAdd", 2],["Fin.val", 2],["Random.instBoundedRandomNatToPreorderToPartialOrderInstLinearOrderNat.proof_1", 1],["Fin", 1],["Random.rand", 1],["OfNat.ofNat", 1],["Nat.succ", 1],["Random.instBoundedRandomIntToPreorderToPartialOrderInstLinearOrderInt.proof_2", 1],["Nat.cast", 1],["Int.natAbs", 1],["Random.instBoundedRandomIntToPreorderToPartialOrderInstLinearOrderInt.proof_1", 1],["Random.instBoundedRandomFinToPreorderToPartialOrderInstLinearOrderFin.proof_1", 1],["Fin.mk", 1],["Random.instBoundedRandomFinToPreorderToPartialOrderInstLinearOrderFin.proof_2", 1]]],
["CoeT", 4, [["CoeT.mk", 3],["CoeDep.coe", 1],["CoeHTCT.coe", 1]]],
["CoeDep", 4, [["CoeDep.mk", 3],["Decidable.decide", 2],["CoeFun.coe", 1]]],
["MulZeroClass", 4, [["MulZeroClass.mk", 3],["MulZeroOneClass.mul_zero", 1],["NonUnitalNonAssocSemiring.zero_mul", 1],["NonUnitalNonAssocSemiring.mul_zero", 1],["SemigroupWithZero.zero_mul", 1],["SemigroupWithZero.mul_zero", 1],["MulZeroOneClass.zero_mul", 1]]],
["MonadFunctor", 4, [["MonadFunctor.mk", 2],["inferInstanceAs", 1],["MonadFunctor", 1],["Except", 1],["Option", 1]]],
["Nonempty.elim", 4, [["Fin.size_positive'", 2],["Nat.mod_lt", 2],["congrFun", 2],["congrArg", 2],["HMod.hMod", 2],["Fin.ofNat'", 2],["rfl", 2],["Fin.mk", 2],["Fin.val", 2],["Eq", 2],["Eq.refl", 2],["Fin.size_positive", 1],["OfNat.ofNat", 1],["Fin.ext", 1],["HMul.hMul", 1],["Fin.add_def", 1],["Fin.one_val", 1],["Eq.mpr", 1],["HAdd.hAdd", 1],["Fin.mul_def", 1],["Nat.mul_mod", 1],["Nat.mod_eq_of_lt", 1],["of_eq_true", 1],["Eq.symm", 1],["Nat.succ", 1],["Nat.mod_add_mod", 1],["Subsingleton.allEq", 1],["eq_self", 1],["Eq.trans", 1],["Fin.eq_of_val_eq", 1],["Fin.ofNat'_succ", 1]]],
["Sat.Clause", 4, [["List.nil", 2],["List.cons", 2],["HAppend.hAppend", 1]]],
["dite_true", 4, [["Fin.val", 3],["UnionFind.rankMaxAux", 2],["congrArg", 2],["UnionFind.size", 2],["Fin.mk", 2],["congrFun", 2],["Iff.mpr", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["eq_self", 1],["UFModel.push", 1],["Nat.sub_lt_sub_left", 1],["And.imp", 1],["UnionFind.lt_rankMax'", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["eq_false", 1],["UnionFind.rankMax", 1],["dif_pos", 1],["Subtype.property", 1],["lt_irrefl", 1],["Eq.symm", 1],["Nat.succ_pos", 1],["Classical.em", 1],["UnionFind.rank_lt", 1],["UFNode.mk", 1],["Subtype.val", 1],["dite_true", 1],["Eq.trans", 1],["LT.lt", 1],["UnionFind.lt_rankMax", 1],["Fin.isLt", 1],["UFModel.rank", 1],["dite_congr", 1],["Nat.lt_succ_iff", 1],["dif_neg", 1],["Eq.mpr", 1],["Eq.refl", 1],["Eq", 1]]],
["MonadWithReaderOf", 3, [["MonadWithReaderOf.mk", 2],["MonadFunctorT.monadMap", 1],["withTheReader", 1]]],
["List.length_set", 3, [["Fin.mk", 2],["Eq.symm", 2],["Eq.mpr", 2],["LT.lt", 2],["Eq.refl", 2],["Eq", 1],["congrArg", 1],["Option.some_inj", 1],["List.length_set", 1],["List.get", 1],["Nat.lt_trans", 1],["Eq.mp", 1],["List.get?", 1],["Array.size_swap", 1],["Array.size", 1],["List.get?_eq_get", 1],["Array.swap", 1],["Option.some", 1],["Nat.lt_succ_self", 1],["rfl", 1],["List.set", 1],["List.get?_set_ne", 1],["propext", 1]]],
["List.remove", 3, [["Eq", 3],["List.remove", 3],["Membership.mem", 2],["Eq.mpr", 2],["if_pos", 2],["of_eq_true", 2],["congrFun", 2],["List", 2],["Eq.symm", 2],["congrArg", 2],["List.cons", 2],["Eq.refl", 2],["Decidable.em", 2],["List.not_mem_nil", 2],["if_neg", 1],["Or.inr", 1],["Ne.symm", 1],["Subsingleton.elim", 1],["ite", 1],["ne_eq", 1],["false_and", 1],["List.card", 1],["Or", 1],["And", 1],["OfNat.ofNat", 1],["congr", 1],["List.mem_cons", 1],["propext", 1],["False", 1],["Not", 1],["And.right", 1],["Ne", 1],["HAdd.hAdd", 1],["eq_false", 1],["Iff", 1],["List.nil", 1],["And.intro", 1],["Or.inl", 1],["Or.resolve_left", 1],["False.elim", 1],["iff_self", 1],["Iff.intro", 1],["And.left", 1],["Eq.trans", 1],["eq_self", 1]]],
["Option.toList", 3, [["rfl", 2],["congr", 1],["List.not_mem_nil", 1],["eq_false'", 1],["Or", 1],["eq_comm", 1],["Eq.trans", 1],["propext", 1],["False", 1],["eq_false", 1],["congrArg", 1],["Iff", 1],["Option.mem_def", 1],["Option.some.injEq", 1],["of_eq_true", 1],["or_false", 1],["Eq.symm", 1],["List.mem_cons", 1],["iff_self", 1],["Eq.refl", 1],["Eq", 1]]],
["MonadControlT", 3, [["MonadControlT.mk", 2],["MonadControlT.stM", 1],["MonadControl.stM", 1],["Function.comp", 1],["MonadControl.restoreM", 1],["Pure.pure", 1],["MonadControlT.liftWith", 1],["MonadControlT.restoreM", 1],["MonadControl.liftWith", 1]]],
["Quot.sound", 3, [["Quot.ind", 1],["eq_of_heq", 1],["Quot.sound", 1],["Subsingleton.elim", 1],["rfl", 1]]],
["MulZeroOneClass", 3, [["MulZeroOneClass.mk", 2],["NonUnitalNonAssocSemiring.mul_zero", 1],["NonUnitalNonAssocSemiring.zero_mul", 1],["MonoidWithZero.mul_zero", 1],["MonoidWithZero.zero_mul", 1]]],
["Nat.lt_eq", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Pow", 3, [["Pow.mk", 2],["Float.pow", 1],["Nat.pow", 1]]],
["Classical.strongIndefiniteDescription.proof_2", 3, [["Classical.epsilon_spec", 1],["Subtype.property", 1],["Classical.epsilon_spec_aux", 1],["nonempty_of_exists", 1],["Exists.intro", 1],["Classical.strongIndefiniteDescription", 1],["rfl", 1]]],
["le_max_left", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Preorder.le_refl", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["lt_of_lt_of_le", 3, [["Eq", 3],["OfNat.ofNat", 3],["Fin.mk", 3],["Eq.refl", 3],["congrFun", 2],["Eq.trans", 2],["dite_congr", 2],["UFModel.rank", 2],["dite_true", 2],["eq_true", 2],["congrArg", 2],["UFModel.parent", 2],["Fin.val", 2],["Eq.symm", 2],["Bool.true", 1],["Nat.le_of_succ_le_succ", 1],["Nat.le_add_right", 1],["HAppend.hAppend", 1],["dif_pos", 1],["lt_irrefl", 1],["Nat.lt_add_right", 1],["Fin.isLt", 1],["Eq.mpr", 1],["List.get", 1],["of_eq_true", 1],["UFModel.push", 1],["ne_eq", 1],["Fin", 1],["id", 1],["eq_self", 1],["UFModel.Agrees.push", 1],["sorryAx", 1],["dite_false", 1],["UFModel.rank_lt", 1],["List.length_append", 1],["Not", 1],["eq_false", 1],["And.imp", 1],["PProd.fst", 1],["List.length", 1],["List.nil", 1],["HEq.refl", 1],["UFNode.mk", 1],["lt_of_lt_of_le", 1],["LT.lt", 1],["Nat.add", 1],["dite", 1],["congr", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["implies_congr", 1],["UFModel.push.proof_1", 1]]],
["le_of_lt", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["MonadReaderOf", 3, [["MonadReaderOf.mk", 2],["liftM", 1],["MonadReader.read", 1]]],
["Nat.sub_succ_lt_self", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Array.toListLitAux.proof_1", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["lt_trichotomy", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Array.getLit", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["Tactic.NormCast.NormCastExtension", 3, [["Inhabited.default", 1],["Inhabited.mk", 1],["Tactic.NormCast.NormCastExtension.mk", 1]]],
["UnionFind.rankMaxAux", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Decidable.lt_or_eq_of_le", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Subarray.start", 3, [["Nat.le_of_lt_succ", 1],["Nat.succ_le_of_lt", 1],["Nat.add_lt_add_right", 1],["OfNat.ofNat", 1]]],
["AddGroupWithOne", 3, [["AddGroupWithOne.mk", 2],["Eq", 1],["add_comm", 1],["Fin.ofInt'", 1],["instAddGroupWithOneFin.proof_3", 1],["Eq.trans", 1],["Eq.mpr", 1],["Ring.gsmul_zero'", 1],["of_eq_true", 1],["Fin.sub_def", 1],["Fin.zero_def", 1],["congr", 1],["OfNat.ofNat", 1],["Ring.sub_eq_add_neg", 1],["Nat.add_mod_mod", 1],["propext", 1],["Nat.mod_self", 1],["Ring.intCast_ofNat", 1],["HAdd.hAdd", 1],["Ring.add_left_neg", 1],["instAddGroupWithOneFin.proof_6", 1],["HMod.hMod", 1],["Eq.symm", 1],["Fin.mk", 1],["Fin.isLt", 1],["Fin.size_positive", 1],["Nat.mod_lt", 1],["Ring.gsmul_neg'", 1],["Nat.add_sub_cancel'", 1],["Ring.intCast", 1],["instNegFin.proof_1", 1],["Ring.gsmul", 1],["inferInstanceAs", 1],["Fin", 1],["eq_self", 1],["HSub.hSub", 1],["Neg.neg", 1],["congrFun", 1],["instAddGroupWithOneFin.proof_7", 1],["Ring.intCast_negSucc", 1],["instAddGroupWithOneFin.proof_5", 1],["Fin.eq_of_val_eq", 1],["Ring.gsmul_succ'", 1],["forall_congr", 1],["Fin.add_def", 1],["congrArg", 1],["forall_const", 1],["Nat.le_of_lt", 1],["Fin.val", 1],["AddMonoidWithOne", 1],["instAddGroupWithOneFin.proof_4", 1],["Eq.refl", 1]]],
["UnionFind.rankMax", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Sat.Literal.reify", 3, [["Sat.Literal.reify.mk", 2],["mt", 1],["Iff.mp", 1],["Iff.mpr", 1]]],
["UnionFind.rankMaxAux.proof_1", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Union", 3, [["Union.mk", 2],["Set.union", 1],["List.union", 1]]],
["Function.curry", 3, [["rfl", 3],["Eq", 1],["Function.uncurry", 1],["funext", 1],["Function.curry", 1]]],
["lt_or_eq_of_le", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Nat.le_of_lt_succ", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["MonadFunctorT", 3, [["MonadFunctorT.mk", 2],["MonadFunctor.monadMap", 1],["MonadFunctorT.monadMap", 1]]],
["HOrElse.hOrElse", 3, [["rfl", 3],["Eq.refl", 2],["Eq.symm", 2]]],
["le_refl", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["SeqRight.seqRight", 3, [["Eq.refl", 1],["LawfulApplicative.seqRight_eq", 1],["SeqRight.seqRight", 1],["LawfulMonad.bind_assoc", 1],["Eq.trans", 1],["Pure.pure", 1],["Eq.mpr", 1],["congrArg", 1],["id_eq", 1],["Bind.bind", 1],["seq_eq_bind_map", 1],["Seq.seq", 1],["of_eq_true", 1],["id", 1],["LawfulMonad.pure_bind", 1],["eq_self", 1],["bind_pure", 1],["funext", 1],["congrFun", 1],["map_eq_pure_bind", 1],["Eq", 1]]],
["ExceptT.lift", 3, [["Eq", 2],["Pure.pure", 2],["of_eq_true", 2],["Eq.trans", 2],["congrArg", 2],["eq_self", 2],["Except.ok", 2],["congrFun", 2],["Except", 1],["Except.error", 1],["LawfulMonad.pure_bind", 1],["Bind.bind", 1],["funext", 1],["LawfulMonad.bind_assoc", 1],["LawfulApplicative.map_pure", 1],["ExceptT.mk", 1],["map_eq_pure_bind", 1],["rfl", 1]]],
["instDecidableLtToLTToPreorderToPartialOrder", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Inter", 3, [["Inter.mk", 2],["List.inter", 1],["Set.inter", 1]]],
["Nat.add_sub_self_left", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Function.HasUncurry", 3, [["Function.HasUncurry.mk", 2],["id", 1],["Prod.snd", 1],["Function.HasUncurry.uncurry", 1],["Prod.fst", 1]]],
["Nat.pred_lt", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["List.take", 3, [["List.take", 2],["Eq", 2],["Eq.trans", 2],["of_eq_true", 2],["PProd.fst", 2],["congrArg", 2],["List.length", 2],["min", 1],["List.length_cons", 1],["eq_self", 1],["congrFun", 1],["eq_true", 1],["congr", 1],["OfNat.ofNat", 1],["Nat.zero_min", 1],["HAppend.hAppend", 1],["LE.le", 1],["List.length_nil", 1],["List.length_take", 1],["min_le_left", 1],["List.drop", 1],["Nat.succ", 1],["List.cons", 1],["Nat.min_zero", 1],["Nat.min_succ_succ", 1],["congr_arg", 1],["rfl", 1]]],
["Nat.zero_eq", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["sizeOf_nat", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Array.isEqvAux.proof_3", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Nat.Linear.Poly.combineAux", 3, [["eq_self", 3],["Eq.trans", 3],["of_eq_true", 3],["HAdd.hAdd", 3],["Nat.Linear.Poly.denote", 3],["congrArg", 3],["congrFun", 3],["Eq", 3],["Bool.true", 2],["cond_false", 2],["Eq.mpr", 2],["congr", 2],["Bool.of_not_eq_true", 2],["cond", 2],["Eq.symm", 2],["cond_true", 2],["Prod.mk", 2],["Classical.em", 2],["Eq.refl", 2],["Nat.add_le_add_left", 1],["Bool.and_true", 1],["absurd", 1],["Bool.and_false", 1],["Nat.Linear.hugeFuel", 1],["Bool.false", 1],["Nat.zero_add", 1],["Nat.add_eq", 1],["OfNat.ofNat", 1],["Nat.blt", 1],["LE.le", 1],["id", 1],["Nat.add_comm", 1],["Eq.mp", 1],["Nat.Linear.Poly.combineAux", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Nat.Linear.Poly.denote_append", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.right_distrib", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Poly", 1],["HMul.hMul", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Nat.add_le_add", 1],["Bool.and_self", 1],["List.nil", 1],["List.cons", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Nat.Linear.Var.denote", 1],["funext", 1],["Nat.Linear.Poly.denote_le", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Nat.add_assoc", 1],["Nat.add_left_comm", 1]]],
["Classical.strongIndefiniteDescription", 3, [["Classical.epsilon_spec", 1],["Subtype.property", 1],["Classical.epsilon_spec_aux", 1],["nonempty_of_exists", 1],["Exists.intro", 1],["Classical.strongIndefiniteDescription", 1],["rfl", 1]]],
["STWorld", 3, [["STWorld.mk", 2]]],
["Array.getLit.proof_1", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["Nat.Linear.Expr.add", 3, [["Eq.refl", 3],["HAdd.hAdd", 2],["OfNat.ofNat", 2],["Eq.symm", 2],["Nat.Linear.Expr.add", 2],["Eq", 1],["of_eq_true", 1],["Nat.add_left_comm", 1],["Nat.add_comm", 1],["eq_self", 1],["Nat.Linear.Poly.denote", 1],["Nat.Linear.monomialToExpr", 1],["congrFun", 1],["Nat.Linear.denote_monomialToExpr", 1],["Nat.zero_add", 1],["congr", 1],["HMul.hMul", 1],["congrArg", 1],["Eq.trans", 1],["Eq.propIntro", 1],["And.intro", 1],["eq_of_heq", 1],["Nat.Linear.Var.denote", 1],["SizeOf.sizeOf", 1],["Nat.add_eq", 1],["HEq.refl", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Nat.Linear.Expr.denote", 1]]],
["HAppend", 3, [["HAppend.mk", 2],["Append.append", 1],["Array.appendList", 1]]],
["Nat.add_one", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Nat.Linear.Certificate.denote", 3, [["Nat.Linear.Certificate.combineHyps", 1],["Nat.add_eq", 1],["Eq.trans", 1],["Nat.Linear.PolyCnstr.denote_mul", 1],["Prod.mk", 1],["cond", 1],["of_eq_true", 1],["id", 1],["Eq.mp", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.PolyCnstr.mul", 1],["eq_true", 1],["cond_true", 1],["Nat.Linear.PolyCnstr.denote", 1],["OfNat.ofNat", 1],["true_implies", 1],["Nat.Linear.ExprCnstr.toNormPoly", 1],["Nat.Linear.ExprCnstr.denote_toNormPoly", 1],["False", 1],["congrArg", 1],["HAdd.hAdd", 1],["List.nil", 1],["Nat.Linear.Certificate.of_combineHyps", 1],["Nat.Linear.Poly.denote_le", 1],["False.elim", 1],["True", 1],["Bool.true", 1],["implies_congr", 1],["Eq.refl", 1]]],
["Nat.add_succ", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Setoid", 3, [["Setoid.mk", 2],["List.Perm.Equivalence", 1],["List.Perm", 1],["Subtype.equivalence", 1],["HasEquiv.Equiv", 1]]],
["ULift.down", 3, [["rfl", 2],["Eq", 1],["Eq.symm", 1],["ULift.up", 1],["ULift.down", 1],["Fin.mk", 1],["Unit.unit", 1],["unsafeCast", 1],["Array.size_set", 1]]],
["And.left", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["List.leftpad", 3, [["Exists.intro", 2],["HSub.hSub", 2],["List.length", 2],["List.repeat'", 2],["rfl", 2],["Eq", 1],["of_eq_true", 1],["eq_self", 1],["List.length_append", 1],["congrFun", 1],["congrArg", 1],["List.length_repeat'", 1],["Nat.sub_add_eq_max", 1],["HAdd.hAdd", 1],["max", 1],["Eq.trans", 1]]],
["ForInStep", 3, [["Inhabited.default", 1],["Inhabited.mk", 1],["ForInStep.done", 1]]],
["LinearOrder.decidable_lt", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Subtype.restrict", 3, [["rfl", 2],["Subtype.coe_injective", 1],["Function.injective.comp", 1]]],
["Nat.AtLeastTwo", 3, [["Nat.AtLeastTwo.mk", 1],["Nat.zero_le", 1],["instAtLeastTwoHAddNatInstHAddInstAddNatOfNat.proof_1", 1],["Nat.succ_le_succ", 1]]],
["le_of_not_lt", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["List.filterAux", 3, [["Membership.mem", 3],["List.not_mem_nil", 3],["propext", 3],["eq_false", 3],["Or", 3],["Eq.trans", 3],["of_eq_true", 3],["Iff", 3],["congrFun", 3],["And", 3],["congrArg", 3],["iff_self", 3],["Eq", 3],["false_and", 2],["List.mem_cons", 2],["List.nil", 2],["List.cons", 2],["Eq.symm", 2],["congr", 2],["Eq.refl", 2],["Bool.true", 2],["Iff.intro", 1],["decide_eq_true_eq", 1],["And.right", 1],["PProd.fst", 1],["List.mem_filterAux", 1],["false_or", 1],["List.mem_reverse", 1],["List", 1],["Eq.mpr", 1],["And.intro", 1],["Eq.mp", 1],["or_false", 1],["Or.inr", 1],["Bool.false", 1],["List.filterAux", 1],["Decidable.decide", 1],["Unit.unit", 1],["Or.inl", 1],["And.left", 1],["List.mem_filter", 1],["False", 1]]],
["UInt32.ofNat", 3, [["Fin.val", 2],["Bool.true", 1],["of_decide_eq_true", 1],["Eq.mpr", 1],["UInt8.toChar_aux", 1],["UInt32.ofNat", 1],["Nat.lt_trans", 1],["Or.inl", 1],["UInt32.val_eq_of_lt", 1],["UInt32.val", 1],["Fin.isLt", 1],["Fin.val_eq_of_lt", 1],["UInt8.val", 1],["Nat.isValidChar", 1],["Eq.refl", 1]]],
["Nat.lt_of_lt_of_eq", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["PNonScalar", 3, [["Inhabited.default", 2],["OfNat.ofNat", 1],["Inhabited.mk", 1],["HAdd.hAdd", 1],["Pure.pure", 1],["Array.mapMUnsafe.map", 1],["Bind.bind", 1],["Array.uget", 1],["unsafeCast", 1],["PNonScalar.mk", 1],["lcProof", 1],["LT.lt", 1],["ite", 1],["Array.uset", 1]]],
["Mathlib.Tactic.Sat.LRATStep", 3, [["Eq", 1],["SeqLeft.seqLeft", 1],["Mathlib.Tactic.Sat.LRATStep.del", 1],["Mathlib.Tactic.Sat.Parser.parseNat", 1],["ite", 1],["Mathlib.Tactic.Sat.Parser.parseNats", 1],["List.toArray", 1],["Pure.pure", 1],["Mathlib.Tactic.Sat.Parser.parseInts", 1],["Bind.bind", 1],["Mathlib.Tactic.Sat.LRATStep.add", 1],["List.nil", 1]]],
["Nat.not_eq_zero_of_lt", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["CommSemigroup", 3, [["CommSemigroup.mk", 2],["CommMonoid.mul_comm", 1],["instCommSemigroupFin.proof_2", 1]]],
["Random", 3, [["Random.mk", 2],["Random.randFin", 1],["Random.randBool", 1]]],
["SemigroupWithZero", 3, [["SemigroupWithZero.mk", 2],["NonUnitalNonAssocSemiring.mul_zero", 1],["NonUnitalNonAssocSemiring.zero_mul", 1],["MonoidWithZero.mul_zero", 1],["MonoidWithZero.zero_mul", 1]]],
["MulOneClass", 3, [["Monoid.mul_one", 1],["Monoid.one_mul", 1],["MulOneClass.mk", 1]]],
["Array.isEqvAux", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["AddGroup", 3, [["AddGroupWithOne.add_left_neg", 1],["AddGroup.mk", 1]]],
["SeqLeft.seqLeft", 3, [["Eq.refl", 1],["LawfulMonad.bind_assoc", 1],["Eq.trans", 1],["Function.const_apply", 1],["Pure.pure", 1],["Eq.mpr", 1],["congrArg", 1],["LawfulApplicative.seqLeft_eq", 1],["Bind.bind", 1],["seq_eq_bind_map", 1],["Seq.seq", 1],["of_eq_true", 1],["LawfulMonad.pure_bind", 1],["SeqLeft.seqLeft", 1],["eq_self", 1],["funext", 1],["congrFun", 1],["Function.const", 1],["map_eq_pure_bind", 1],["Eq", 1]]],
["Sat.Literal.pos", 3, [["Eq.refl", 2],["OfNat.ofNat", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["Sat.Literal.pos", 1],["Sat.Literal.reify.mk", 1],["HAdd.hAdd", 1],["mt", 1],["Eq.propIntro", 1],["Iff.mpr", 1],["eq_of_heq", 1]]],
["CoeTC", 3, [["CoeTC.mk", 2],["Coe.coe", 2],["CoeTC.coe", 1]]],
["List.equiv", 3, [["Iff", 3],["Membership.mem", 3],["congrArg", 2],["Or", 2],["of_eq_true", 2],["propext", 2],["Eq.trans", 2],["iff_self", 2],["congr", 2],["Iff.mp", 1],["List.mem_append", 1],["Iff.intro", 1],["And.intro", 1],["List.mem_union_iff", 1],["List.mem_insert_iff", 1],["Iff.mpr", 1],["List.mem_cons", 1],["Eq", 1]]],
["Mathlib.Prelude.Rename.RenameMap", 3, [["Mathlib.Prelude.Rename.RenameMap", 1],["Mathlib.Prelude.Rename.renameExtension", 1]]],
["CommMonoid", 3, [["CommMonoid.mk", 2],["CommGroup.mul_comm", 1],["CommSemiring.mul_comm", 1]]],
["Alternative", 3, [["inferInstanceAs", 1],["Alternative.mk", 1],["Alternative", 1],["OptionT.orElse", 1],["OptionT.fail", 1]]],
["List.append", 3, [["rfl", 3],["Eq", 1],["eq_self", 1],["funext", 1],["List.reverseAux_reverseAux", 1],["Eq.trans", 1],["List.reverseAux", 1],["congrArg", 1],["List.cons", 1],["List.nil", 1],["of_eq_true", 1],["congr", 1]]],
["Task.Priority", 3, [["OfNat.ofNat", 3]]],
["Sat.Literal.neg", 3, [["Eq.refl", 2],["OfNat.ofNat", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["Iff.mp", 1],["Sat.Literal.reify.mk", 1],["Sat.Literal.neg", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["HasEquiv", 3, [["HasEquiv.mk", 2],["HasEquiv.Equiv", 1],["Setoid.r", 1],["Subtype.val", 1]]],
["LinearOrder.le_total", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Quotient", 3, [["Quotient.mk", 2],["Eq", 1],["Decidable.isFalse", 1],["Decidable.isTrue", 1],["instDecidableEqQuotient.proof_2", 1],["Setoid.r", 1],["Quotient.sound", 1],["Decidable", 1],["Quot.mk", 1],["Quotient.recOnSubsingleton₂", 1]]],
["Squash", 3, [["True.intro", 1],["Squash.ind", 1],["Subsingleton.intro", 1],["True", 1],["Quot.sound", 1],["Quot.mk", 1],["instSubsingletonSquash.proof_1", 1]]],
["Nat.lt_succ_of_le", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["MonadLiftT", 3, [["MonadLiftT.mk", 2],["MonadLiftT.monadLift", 1],["MonadLift.monadLift", 1]]],
["le_antisymm", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Nat.bitwise", 3, [["LT.lt", 3],["Nat.mod_lt", 3],["HMod.hMod", 3]]],
["PartialOrder.le_antisymm", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["UnionFind.rankMaxAux.proof_2", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Classical.epsilon", 3, [["Classical.epsilon_spec", 1],["Subtype.property", 1],["Classical.epsilon_spec_aux", 1],["nonempty_of_exists", 1],["Exists.intro", 1],["Classical.strongIndefiniteDescription", 1],["rfl", 1]]],
["ToBool", 3, [["ToBool.mk", 2],["Option.toBool", 1]]],
["Array.isEqvAux.proof_2", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Nat.succ_sub_succ", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Array.toListLitAux", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["ReprTuple", 3, [["ReprTuple.mk", 2],["List.cons", 2],["repr", 2],["ReprTuple.reprTuple", 1],["List", 1]]],
["Nat.sub_zero", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["List.length_nil", 3, [["Fin.mk", 3],["Eq", 3],["List.get", 3],["Eq.symm", 3],["rfl", 3],["Eq.refl", 3],["HAppend.hAppend", 2],["Option.some.inj", 2],["Eq.mpr", 2],["List.get?_eq_get", 2],["List.length", 2],["id", 2],["List.get?", 2],["Option.some", 2],["Nat.lt_add_right", 1],["List.length_append", 1],["List.length_map", 1],["Nat.le_of_succ_le_succ", 1],["HSub.hSub", 1],["PProd.fst", 1],["Option.map", 1],["List.nil", 1],["List.get?_append_right", 1],["HEq.refl", 1],["Nat.add", 1],["Fin.isLt", 1],["List.map", 1],["List.get?_map", 1],["Fin.val", 1],["OfNat.ofNat", 1],["List.get_append_right_aux", 1]]],
["Quot.lift", 3, [["rfl", 2],["Quot.ind", 1],["Quotient.ind", 1],["Setoid.refl", 1]]],
["Nat.le_of_succ_le", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["List.dropLast", 3, [["congr", 1],["Array.size", 1],["Eq.trans", 1],["Nat.lt_eq", 1],["Eq.mpr", 1],["congrArg", 1],["Array.pop", 1],["Nat.pred_lt'", 1],["funext", 1],["congrFun", 1],["LT.lt", 1],["List.length_dropLast", 1],["Array.size_pop", 1],["WellFoundedRelation.rel", 1],["rfl", 1],["Unit.unit", 1],["sizeOf_nat", 1],["Array.data", 1]]],
["Bind", 3, [["inferInstance", 1]]],
["le_total", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["ULift.up", 3, [["rfl", 2],["Eq", 1],["Eq.symm", 1],["ULift.up", 1],["ULift.down", 1],["Fin.mk", 1],["Unit.unit", 1],["unsafeCast", 1],["Array.size_set", 1]]],
["Function.extend", 3, [["Classical.choose", 2],["Eq", 2],["Eq.mpr", 2],["Eq.refl", 2],["Function.extend_def", 1],["Classical.choose_spec", 1],["of_eq_true", 1],["congrFun", 1],["Subsingleton.elim", 1],["eq_true", 1],["Function.extend", 1],["Eq.trans", 1],["congrArg", 1],["Eq.mpr_prop", 1],["dif_pos", 1],["Function.extend_apply", 1],["funext", 1],["dite_congr", 1],["dite", 1],["exists_apply_eq_apply", 1],["True", 1],["congr_arg", 1],["Exists", 1],["rfl", 1],["Classical.propDecidable", 1]]],
["Subset", 3, [["Subset.mk", 2],["List.subset", 1],["Set.subset", 1]]],
["ExceptT.mk", 3, [["Eq", 2],["Pure.pure", 2],["of_eq_true", 2],["Eq.trans", 2],["congrArg", 2],["eq_self", 2],["Except.ok", 2],["congrFun", 2],["Except", 1],["Except.error", 1],["LawfulMonad.pure_bind", 1],["Bind.bind", 1],["funext", 1],["LawfulMonad.bind_assoc", 1],["LawfulApplicative.map_pure", 1],["ExceptT.mk", 1],["map_eq_pure_bind", 1],["rfl", 1]]],
["Nat.zero_lt_sub_of_lt", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["Nat.Linear.Poly.fuse", 3, [["rfl", 2],["Eq.refl", 1],["Classical.em", 1],["Eq.trans", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Eq.mpr", 1],["cond", 1],["of_eq_true", 1],["Nat.add_comm", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["cond_true", 1],["Nat.zero_add", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.Linear.Expr.toPoly", 1],["Bool.of_not_eq_true", 1],["congrArg", 1],["HAdd.hAdd", 1],["List.nil", 1],["Eq.symm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote_toPoly", 1],["LE.le", 1],["Unit.unit", 1],["Eq", 1],["Bool.true", 1]]],
["Nat.Linear.Poly.sort", 3, [["congrFun", 2],["Nat.zero_add", 2],["Eq.trans", 2],["of_eq_true", 2],["Nat.add_comm", 2],["eq_self", 2],["List.nil", 2],["OfNat.ofNat", 2],["congrArg", 2],["Nat.Linear.Poly.denote_sort_go", 2],["Eq", 2],["Eq.refl", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["cond_true", 1],["LE.le", 1],["Eq.mpr", 1],["congr", 1],["Nat.Linear.Expr.toPoly", 1],["Bool.of_not_eq_true", 1],["cond", 1],["HAdd.hAdd", 1],["Classical.em", 1],["Eq.symm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["Nat.Linear.Poly.denote", 1],["Bool.true", 1]]],
["HDiv", 3, [["HDiv.mk", 2],["System.FilePath.join", 1],["Div.div", 1],["System.FilePath.mk", 1]]],
["le_max_right", 3, [["UnionFind.size", 2],["UnionFind.rankMaxAux", 2],["Fin.val", 2],["Iff.mpr", 1],["dif_pos", 1],["congrArg", 1],["Eq.mpr", 1],["Subtype.property", 1],["UnionFind.rankMax", 1],["UnionFind.rank_lt", 1],["Nat.succ_pos", 1],["Nat.sub_lt_sub_left", 1],["congrFun", 1],["Subtype.val", 1],["Fin.isLt", 1],["UnionFind.lt_rankMax", 1],["LT.lt", 1],["UnionFind.lt_rankMax'", 1],["Fin.mk", 1],["Nat.lt_succ_iff", 1],["Classical.em", 1],["dif_neg", 1]]],
["Array.isEqvAux.proof_1", 3, [["Eq", 3],["Eq.refl", 3],["OfNat.ofNat", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["congrArg", 2],["Decidable.decide", 2],["Array.size", 2],["Eq.trans", 2],["Bool.true", 2],["decide_eq_true_eq", 1],["WellFounded.fix", 1],["Eq.mpr", 1],["WellFoundedRelation.rel", 1],["sizeOf_nat", 1],["congr", 1],["Array.isEqvAux.proof_1", 1],["Array.get", 1],["Array.isEqvAux.proof_3", 1],["Array.isEqvAux_self", 1],["Nat.lt_eq", 1],["eq_true_of_decide", 1],["Bool.and_true", 1],["HSub.hSub", 1],["HAdd.hAdd", 1],["dif_pos", 1],["Array.isEqvAux.proof_2", 1],["Nat.sub_succ_lt_self", 1],["and", 1],["Array.isEqv", 1],["Bool.false", 1],["funext", 1],["dite_true", 1],["LT.lt", 1],["WellFounded.fix_eq", 1],["Fin.mk", 1],["dite_congr", 1],["dite", 1],["True", 1],["dif_neg", 1],["rfl", 1],["Classical.em", 1],["Subsingleton.elim", 1]]],
["BinaryHeap.mk", 3, [["Eq.refl", 2],["HAdd.hAdd", 2],["OfNat.ofNat", 2],["Eq", 1],["Array.size", 1],["BinaryHeap.insert.proof_1", 1],["Eq.propIntro", 1],["of_eq_true", 1],["eq_of_heq", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["Array.size_push", 1],["congrFun", 1],["BinaryHeap.mk", 1],["Array.push", 1],["Fin.mk", 1],["BinaryHeap.arr", 1],["Eq.trans", 1],["congrArg", 1]]],
["Array.toListLitAux.proof_2", 3, [["Eq", 2],["Eq.refl", 1],["Nat.add_eq", 1],["Nat.lt_of_lt_of_eq", 1],["Nat.le_of_succ_le", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["Eq.mpr", 1],["List.drop", 1],["congrArg", 1],["Nat.lt_of_lt_of_le", 1],["Array.toListLitAux", 1],["List.cons", 1],["Nat.add_zero", 1],["Bool.false", 1],["sorryAx", 1],["Array.getLit", 1],["congrFun", 1],["Nat.add", 1],["Nat.lt_succ_self", 1],["rfl", 1],["OfNat.ofNat", 1],["Array.data", 1],["Array.toArrayLit", 1]]],
["Sat.Fmla.reify", 3, [["Sat.Valuation.satisfies_fmla.mk", 2],["Sat.Fmla.reify.mk", 2],["List.mem_append", 1],["Sat.Fmla.one", 1],["Iff.mp", 1],["Sat.Valuation.satisfies", 1],["Or.inl", 1],["List.nil", 1],["eq_of_heq", 1],["Sat.Fmla.reify.prop", 1],["Eq.symm", 1],["Sat.Clause.reify.prop", 1],["HEq.refl", 1],["Or.inr", 1],["by_contra", 1],["Sat.Valuation.satisfies_fmla.prop", 1],["Unit.unit", 1],["Eq.refl", 1]]],
["Subtype.coind", 3, [["Subtype.val", 2],["Eq", 1],["Subtype.coind_injective", 1],["And.intro", 1],["Subtype.coe_injective", 1],["Subtype.coind_surjective", 1],["Exists.intro", 1],["And.right", 1],["congrArg", 1],["Subtype.coind", 1],["Exists", 1],["And.left", 1]]],
["MonadExcept", 2, [["throwThe", 1],["MonadExcept.mk", 1],["tryCatchThe", 1]]],
["Fin.elim0", 2, [["UFModel.Agrees.empty", 1],["And.intro", 1],["Fin.elim0", 1]]],
["WellFounded.intro", 2, [["Iff.mp", 1],["Subtype.property", 1],["Nat.find_x", 1],["And.left", 1],["Nat.find_min", 1],["not_lt", 1]]],
["Nat.find_x", 2, [["Iff.mp", 1],["Subtype.property", 1],["Nat.find_x", 1],["And.left", 1],["Nat.find_min", 1],["not_lt", 1]]],
["HAdd", 2, [["HAdd.mk", 1],["Add.add", 1]]],
["Decidable.byContradiction", 2, [["OfNat.ofNat", 2],["LT.lt", 2],["Fin.mk", 2],["BinaryHeap.size_pos_of_max", 2],["Eq.mpr", 2],["congrArg", 2],["Array.size_set", 2],["BinaryHeap.arr", 2]]],
["ByteSlice.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["ByteSlice.mk", 1],["eq_of_heq", 1]]],
["HAnd", 2, [["HAnd.mk", 1],["AndOp.and", 1]]],
["PLift.down", 2, [["rfl", 2],["Eq", 1],["PLift.up", 1],["PLift.down", 1]]],
["Fin.ofInt'", 2, [["rfl", 2]]],
["UnionFind.mk", 2, [["Eq.refl", 2],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["UnionFind.mk", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 2, [["Eq.refl", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1],["noConfusionEnum", 1]]],
["Nat.Linear.Expr.toNormPoly", 2, [["Eq.refl", 1],["LE.le", 1],["Classical.em", 1],["Eq.trans", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Eq.mpr", 1],["cond", 1],["of_eq_true", 1],["Nat.add_comm", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["cond_true", 1],["Nat.zero_add", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.Linear.Expr.toPoly", 1],["Bool.of_not_eq_true", 1],["congrArg", 1],["HAdd.hAdd", 1],["List.nil", 1],["Eq.symm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["Eq", 1],["Bool.true", 1]]],
["Nat.le_add_right", 2, [["Eq.symm", 2],["Eq", 2],["OfNat.ofNat", 2],["Fin.mk", 2],["Eq.refl", 2],["Nat.lt_add_right", 1],["id", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["eq_self", 1],["congrFun", 1],["And.imp", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["UFModel.push", 1],["UFModel.parent", 1],["Nat.le_add_right", 1],["List.length_append", 1],["HAppend.hAppend", 1],["eq_false", 1],["congrArg", 1],["PProd.fst", 1],["List.length", 1],["List.nil", 1],["lt_irrefl", 1],["Nat.le_of_succ_le_succ", 1],["HEq.refl", 1],["UFNode.mk", 1],["dite_true", 1],["Eq.trans", 1],["Nat.add", 1],["UFModel.rank", 1],["dite_congr", 1],["rfl", 1],["Fin.val", 1],["List.get", 1]]],
["Array.swap.proof_1", 2, [["Eq.refl", 1],["Array.size_swap", 1],["Eq.symm", 1],["Array.size", 1],["LT.lt", 1],["Fin.mk", 1],["Eq.mpr", 1],["Array.swap", 1],["Nat.lt_succ_self", 1],["Nat.lt_trans", 1]]],
["Nat.Linear.ExprCnstr.toNormPoly", 2, [["Eq.refl", 1],["LE.le", 1],["Classical.em", 1],["Eq.trans", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Eq.mpr", 1],["cond", 1],["of_eq_true", 1],["Nat.add_comm", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["cond_true", 1],["Nat.zero_add", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.Linear.Expr.toPoly", 1],["Bool.of_not_eq_true", 1],["congrArg", 1],["HAdd.hAdd", 1],["List.nil", 1],["Eq.symm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["Eq", 1],["Bool.true", 1]]],
["CoeHead", 2, [["CoeHead.mk", 1],["Subtype.val", 1]]],
["Function.has_RightInverse", 2, [["Exists.intro", 1],["Function.surj_inv", 1],["Function.has_RightInverse.surjective", 1],["Function.surjective.has_RightInverse", 1],["Iff.intro", 1],["Function.RightInverse_surj_inv", 1]]],
["MonadState.get", 2, [["rfl", 2]]],
["MonadState.modifyGet", 2, [["rfl", 2]]],
["HSub", 2, [["HSub.mk", 1],["Sub.sub", 1]]],
["Nat.Linear.ExprCnstr.mk", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["Nat.Linear.ExprCnstr.mk", 1],["OfNat.ofNat", 1]]],
["ByteSliceT", 2, [["ByteSliceT.mk", 1],["OfNat.ofNat", 1]]],
["IsAddRightCancel", 2, [["instIsAddRightCancelToAddToAddSemigroupToAddMonoidToSubNegMonoid.proof_1", 1],["IsAddRightCancel.mk", 1]]],
["MonadState", 2, [["getThe", 1],["MonadState.mk", 1],["MonadStateOf.modifyGet", 1],["MonadStateOf.set", 1]]],
["List.nil_append", 2, [["List.length", 2],["Eq", 2],["List.get", 2],["id", 2],["HAppend.hAppend", 2],["Fin.mk", 2],["Eq.symm", 2],["rfl", 2],["Eq.refl", 2],["Nat.lt_add_right", 1],["Option.some", 1],["OfNat.ofNat", 1],["Option.some.inj", 1],["List.length_append", 1],["Eq.mpr", 1],["List.get?_eq_get", 1],["PProd.fst", 1],["List.get?", 1],["List.nil", 1],["List.get_append_right_aux", 1],["HEq.refl", 1],["Nat.le_of_succ_le_succ", 1],["Nat.add", 1],["HSub.hSub", 1],["List.get?_append_right", 1]]],
["ulift.down", 2, [["rfl", 2],["Eq", 1],["ulift.up", 1],["ulift.down", 1]]],
["HXor", 2, [["HXor.mk", 1],["Xor.xor", 1]]],
["Equiv.symm_apply_apply", 2, [["rfl", 2]]],
["Array.swap", 2, [["Eq.refl", 1],["Array.size_swap", 1],["Eq.symm", 1],["Array.size", 1],["LT.lt", 1],["Fin.mk", 1],["Eq.mpr", 1],["Array.swap", 1],["Nat.lt_succ_self", 1],["Nat.lt_trans", 1]]],
["Tactic.NormCast.CoeFnType.coeFn", 2, [["Eq.refl", 2],["Tactic.NormCast.CoeFnType.coe", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["OfNat.ofNat", 1],["Tactic.NormCast.CoeFnType.coeFn", 1]]],
["Dvd", 2, [["Dvd.mk", 1],["HMul.hMul", 1],["Exists", 1],["Eq", 1]]],
["HShiftRight", 2, [["HShiftRight.mk", 1],["ShiftRight.shiftRight", 1]]],
["Mathlib.Tactic.Lint.Linter.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Mathlib.Tactic.Lint.Linter.mk", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["Function.involutive", 2, [["Function.funext_iff", 1],["Iff.symm", 1],["Subtype.ext", 1],["Subtype.val", 1]]],
["List.cons_append", 2, [["List.length", 2],["Eq", 2],["List.get", 2],["id", 2],["HAppend.hAppend", 2],["Fin.mk", 2],["Eq.symm", 2],["rfl", 2],["Eq.refl", 2],["Nat.lt_add_right", 1],["Option.some", 1],["OfNat.ofNat", 1],["Option.some.inj", 1],["List.length_append", 1],["Eq.mpr", 1],["List.get?_eq_get", 1],["PProd.fst", 1],["List.get?", 1],["List.nil", 1],["List.get_append_right_aux", 1],["HEq.refl", 1],["Nat.le_of_succ_le_succ", 1],["Nat.add", 1],["HSub.hSub", 1],["List.get?_append_right", 1]]],
["ForM", 2, [["List.forM", 1],["ForM.mk", 1]]],
["plift.down", 2, [["rfl", 2],["Eq", 1],["plift.up", 1],["plift.down", 1]]],
["Decidable.of_not_not", 2, [["OfNat.ofNat", 2],["LT.lt", 2],["Fin.mk", 2],["BinaryHeap.size_pos_of_max", 2],["Eq.mpr", 2],["congrArg", 2],["Array.size_set", 2],["BinaryHeap.arr", 2]]],
["Tactic.NormCast.Label.toCtorIdx", 2, [["Eq.refl", 1],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.Label.move", 1],["Tactic.NormCast.Label.toCtorIdx", 1],["Tactic.NormCast.Label.elim", 1],["noConfusionEnum", 1]]],
["Tactic.NormCast.Label.elim", 2, [["Eq.refl", 2],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.Label.move", 1],["Tactic.NormCast.Label.elim", 1],["OfNat.ofNat", 1]]],
["Equiv.symm_comp_self", 2, [["rfl", 2]]],
["Classical.em", 2, [["eq_false", 2],["UFModel.parent", 2],["Eq.trans", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["Fin.val", 2],["congrArg", 2],["Fin.mk", 2],["Eq.refl", 2],["Eq", 2],["And.left", 1],["ite_false", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.le_add_right", 1],["UFModel.push", 1],["UFModel.Agrees.push", 1],["ite_congr", 1],["dite_false", 1],["And.right", 1],["And.intro", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["dite_true", 1],["UFModel.Agrees.set", 1],["UFModel.Agrees.get_eq", 1],["UFModel.rank", 1],["dite_congr", 1],["Ne.symm", 1],["rfl", 1],["And.imp", 1],["ite_true", 1]]],
["PSigma.fst", 2, [["Quot.ind", 1],["rfl", 1]]],
["Function.has_LeftInverse", 2, [["Iff.intro", 1],["Function.LeftInverse_inv_fun", 1],["Function.inv_fun", 1],["Function.has_LeftInverse.injective", 1],["Function.injective.has_LeftInverse", 1],["Exists.intro", 1]]],
["ForIn.forIn", 2, [["rfl", 2]]],
["NonAssocSemiring", 2, [["NonAssocSemiring.mk", 1],["Semiring.one_mul", 1],["Semiring.mul_one", 1]]],
["HAndThen", 2, [["HAndThen.mk", 1],["AndThen.andThen", 1]]],
["Nat.find_x.proof_1", 2, [["Iff.mp", 1],["Subtype.property", 1],["Nat.find_x", 1],["And.left", 1],["Nat.find_min", 1],["not_lt", 1]]],
["Mathlib.Tactic.Sat.LClause.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["Mathlib.Tactic.Sat.LClause.mk", 1],["eq_of_heq", 1]]],
["Tactic.NormCast.CoeFnType.coe", 2, [["Eq.refl", 2],["Tactic.NormCast.CoeFnType.coe", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["OfNat.ofNat", 1],["Tactic.NormCast.CoeFnType.coeFn", 1]]],
["Nat.find", 2, [["Iff.mp", 1],["Subtype.property", 1],["Nat.find_x", 1],["And.left", 1],["Nat.find_min", 1],["not_lt", 1]]],
["PSum.inl", 2, [["Eq.refl", 2],["PSum.inl", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["PSum.inr", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["PSum.inr", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["EStateM.Result.error", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["EStateM.Result.error", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["MonadWithReader", 2, [["MonadWithReader.mk", 1],["withTheReader", 1]]],
["Functor.map_equiv.proof_1", 2, [["rfl", 2]]],
["optParam", 2, [["rfl", 1],["optParam_eq", 1]]],
["Mathlib.Tactic.Lint.NamedLinter.mk", 2, [["Eq.refl", 2],["Mathlib.Tactic.Lint.NamedLinter.mk", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1],["OfNat.ofNat", 1]]],
["dite_false", 2, [["OfNat.ofNat", 2],["LT.lt", 2],["Fin.mk", 2],["BinaryHeap.size_pos_of_max", 2],["Eq.mpr", 2],["congrArg", 2],["Array.size_set", 2],["BinaryHeap.arr", 2]]],
["List.head?", 2, [["Eq.refl", 2],["Eq.symm", 2],["Eq", 1],["List.length", 1],["of_eq_true", 1],["List.nil", 1],["Eq.trans", 1],["HEq.refl", 1],["eq_self", 1],["congrFun", 1],["List.get_cons_zero", 1],["Option.some", 1],["rfl", 1],["congrArg", 1]]],
["Tactic.NormCast.CoeFnType.coeSort", 2, [["Eq.refl", 2],["Tactic.NormCast.CoeFnType.coe", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["OfNat.ofNat", 1],["Tactic.NormCast.CoeFnType.coeFn", 1]]],
["FloatSpec.mk", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["HEq.refl", 1],["Eq.symm", 1],["HAdd.hAdd", 1],["DecidableRel", 1],["FloatSpec.mk", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["IsAddLeftCancel", 2, [["IsAddLeftCancel.mk", 1],["instIsAddLeftCancelToAddToAddSemigroupToAddMonoidToSubNegMonoid.proof_1", 1]]],
["Functor.map_equiv", 2, [["rfl", 2]]],
["AddCommGroup", 2, [["AddCommGroup.mk", 1],["AddCommMonoid.add_comm", 1]]],
["Tactic.Ring.HornerExpr.xadd", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["Tactic.Ring.HornerExpr.xadd", 1],["OfNat.ofNat", 1]]],
["Array.isEqv", 2, [["Eq", 2],["Eq.refl", 2],["Decidable.decide", 1],["Eq.trans", 1],["Array.isEqvAux_self", 1],["congrArg", 1],["of_eq_true", 1],["eq_self", 1],["Array.isEqv", 1],["congrFun", 1],["Bool.false", 1],["dite_true", 1],["dite_congr", 1],["Bool.true", 1],["Array.size", 1],["OfNat.ofNat", 1]]],
["RandomGen", 2, [["stdNext", 1],["RandomGen.mk", 1],["stdRange", 1],["stdSplit", 1]]],
["HShiftLeft", 2, [["ShiftLeft.shiftLeft", 1],["HShiftLeft.mk", 1]]],
["Nat.Linear.Poly.norm", 2, [["Eq.refl", 1],["LE.le", 1],["Classical.em", 1],["Eq.trans", 1],["Nat.Linear.Expr.denote", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Eq.mpr", 1],["cond", 1],["of_eq_true", 1],["Nat.add_comm", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["Nat.Linear.Expr.toNormPoly", 1],["cond_true", 1],["Nat.zero_add", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.Linear.Expr.toPoly", 1],["Bool.of_not_eq_true", 1],["congrArg", 1],["HAdd.hAdd", 1],["List.nil", 1],["Eq.symm", 1],["Nat.Linear.Poly.denote_fuse", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Nat.Linear.Poly.denote_sort_go", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["Eq", 1],["Bool.true", 1]]],
["Nat.Linear.Poly.combine", 2, [["congrFun", 2],["Eq.trans", 2],["of_eq_true", 2],["Nat.Linear.Poly.denote", 2],["eq_self", 2],["HAdd.hAdd", 2],["congrArg", 2],["Eq", 2],["Eq.refl", 1],["Classical.em", 1],["id", 1],["Eq.mp", 1],["LE.le", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.hugeFuel", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["cond_true", 1],["congr", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Bool.of_not_eq_true", 1],["Bool.and_true", 1],["Bool.and_false", 1],["Eq.mpr", 1],["Nat.Linear.Poly.denote_combineAux", 1],["Bool.and_self", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Eq.symm", 1],["Bool.false", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["cond", 1],["Bool.true", 1]]],
["List.length_append", 2, [["List.length", 2],["Eq", 2],["List.get", 2],["id", 2],["HAppend.hAppend", 2],["Fin.mk", 2],["Eq.symm", 2],["rfl", 2],["Eq.refl", 2],["Nat.lt_add_right", 1],["Option.some", 1],["OfNat.ofNat", 1],["Option.some.inj", 1],["List.length_append", 1],["Eq.mpr", 1],["List.get?_eq_get", 1],["PProd.fst", 1],["List.get?", 1],["List.nil", 1],["List.get_append_right_aux", 1],["HEq.refl", 1],["Nat.le_of_succ_le_succ", 1],["Nat.add", 1],["HSub.hSub", 1],["List.get?_append_right", 1]]],
["Tactic.NormCast.CoeFnInfo.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Tactic.NormCast.CoeFnInfo.mk", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["nsmul_rec", 2, [["Eq.refl", 2],["forall_congr", 2],["Eq.trans", 2],["propext", 2],["HAdd.hAdd", 2],["congrArg", 2],["Nat", 2],["Fin", 2],["of_eq_true", 2],["nsmul_rec", 2],["Nat.succ", 2],["eq_self", 2],["forall_const", 2],["Eq", 2],["Neg.neg", 1],["congrFun", 1]]],
["Nat.le_succ_of_le", 2, [["Eq.symm", 2],["Eq", 2],["OfNat.ofNat", 2],["Fin.mk", 2],["Eq.refl", 2],["Nat.lt_add_right", 1],["id", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["dite_false", 1],["eq_self", 1],["congrFun", 1],["And.imp", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["UFModel.push", 1],["UFModel.parent", 1],["Nat.le_add_right", 1],["List.length_append", 1],["HAppend.hAppend", 1],["eq_false", 1],["congrArg", 1],["PProd.fst", 1],["List.length", 1],["List.nil", 1],["lt_irrefl", 1],["Nat.le_of_succ_le_succ", 1],["HEq.refl", 1],["UFNode.mk", 1],["dite_true", 1],["Eq.trans", 1],["Nat.add", 1],["UFModel.rank", 1],["dite_congr", 1],["rfl", 1],["Fin.val", 1],["List.get", 1]]],
["Distrib", 2, [["NonUnitalNonAssocSemiring.left_distrib", 1],["Distrib.mk", 1],["NonUnitalNonAssocSemiring.right_distrib", 1]]],
["BinaryHeap.size_pos_of_max", 2, [["OfNat.ofNat", 2],["LT.lt", 2],["Fin.mk", 2],["BinaryHeap.size_pos_of_max", 2],["Eq.mpr", 2],["congrArg", 2],["Array.size_set", 2],["BinaryHeap.arr", 2]]],
["Array.toArrayLit", 2, [["Eq", 1],["Array.toArrayLit", 1],["Bool.false", 1],["sorryAx", 1]]],
["PLift.up", 2, [["rfl", 2],["Eq", 1],["PLift.up", 1],["PLift.down", 1]]],
["Nat.Linear.ExprCnstr.toPoly", 2, [["Nat.Linear.Expr.toPoly", 1],["LE.le", 1],["Classical.em", 1],["Bool.of_not_eq_true", 1],["Nat.Linear.Expr.denote", 1],["Eq.trans", 1],["congrArg", 1],["Eq.mpr", 1],["Prod.mk", 1],["cond", 1],["of_eq_true", 1],["Eq.symm", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Expr.denote_toPoly", 1],["rfl", 1],["cond_true", 1],["Eq.refl", 1],["congr", 1],["Bool.true", 1],["Eq", 1]]],
["Sdiff", 2, [["Sdiff.mk", 1],["Set.diff", 1]]],
["Function.partial_inv", 2, [["Eq", 1],["Iff.intro", 1],["Function.partial_inv_of_injective", 1],["Function.partial_inv", 1],["Option.some", 1],["Iff", 1],["Function.is_partial_inv_left", 1]]],
["Sat.Valuation.satisfies", 2, [["List.nil", 1],["List.Mem.head", 1],["Sat.Fmla.subsumes.prop", 1],["Sat.Valuation.satisfies_fmla.prop", 1]]],
["MonadReader", 2, [["MonadReader.mk", 1],["readThe", 1]]],
["List.mapTRAux", 2, [["List.nil", 2],["HAppend.hAppend", 2],["List.map", 2],["Eq.trans", 2],["congrArg", 2],["eq_self", 2],["of_eq_true", 2],["Eq", 2],["Eq.refl", 1],["Eq.mpr", 1],["List.nil_append", 1],["List.mapTRAux_eq", 1],["List.mapTRAux", 1],["List.cons", 1],["List.reverse_cons", 1],["congrFun", 1],["funext", 1],["List.reverse", 1],["List.reverse_nil", 1],["List.append_assoc", 1],["rfl", 1],["List.append_nil", 1]]],
["Nat.Linear.Poly.insertSorted", 2, [["Bool.true", 2],["Nat.add_eq", 2],["HMul.hMul", 2],["Eq.trans", 2],["PProd.fst", 2],["Nat.Linear.Poly.insertSorted", 2],["of_eq_true", 2],["Nat.add_left_comm", 2],["Nat.add_comm", 2],["eq_self", 2],["Nat.Linear.Poly.denote", 2],["congrFun", 2],["congr", 2],["Nat.zero_add", 2],["Nat.add", 2],["HAdd.hAdd", 2],["congrArg", 2],["eq_true_of_decide", 2],["Nat.Linear.Var.denote", 2],["Unit.unit", 2],["Nat.mul_eq", 2],["Eq", 2],["Eq.refl", 2],["Nat.blt", 1],["Nat.add_assoc", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["List.cons", 1],["Eq.symm", 1],["Classical.em", 1],["cond_false", 1],["Prod.mk", 1],["Bool.of_not_eq_true", 1],["cond_true", 1],["OfNat.ofNat", 1],["cond", 1]]],
["implies_congr", 2, [["eq_false", 2],["UFModel.parent", 2],["Eq.trans", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["Fin.val", 2],["congrArg", 2],["Fin.mk", 2],["Eq.refl", 2],["Eq", 2],["And.left", 1],["ite_false", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.le_add_right", 1],["UFModel.push", 1],["UFModel.Agrees.push", 1],["ite_congr", 1],["dite_false", 1],["And.right", 1],["And.intro", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["dite_true", 1],["UFModel.Agrees.set", 1],["UFModel.Agrees.get_eq", 1],["UFModel.rank", 1],["dite_congr", 1],["Ne.symm", 1],["rfl", 1],["And.imp", 1],["ite_true", 1]]],
["Tactic.NormCast.NormCastExtension.mk", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Tactic.NormCast.NormCastExtension.mk", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["left_commutative", 2, [["min_comm", 1],["min", 1],["left_comm", 1],["min_assoc", 1]]],
["StateCpsT.lift", 2, [["rfl", 2]]],
["Mathlib.Tactic.Sat.LRATStep.del", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["Mathlib.Tactic.Sat.LRATStep.del", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["Array.size_set", 2, [["Eq.refl", 1],["Array.size_swap", 1],["Eq.symm", 1],["Array.size", 1],["LT.lt", 1],["Fin.mk", 1],["Eq.mpr", 1],["Array.swap", 1],["Nat.lt_succ_self", 1],["Nat.lt_trans", 1]]],
["Mathlib.Tactic.Sat.Clause.mk", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Mathlib.Tactic.Sat.Clause.mk", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["Option.choice", 2, [["Nonempty.intro", 2],["Classical.choice", 2],["Nonempty", 2],["Option.none", 2],["dif_pos", 2],["Eq.mpr", 2],["Option.some", 2],["dite", 2],["Eq", 2],["Eq.refl", 2],["Option.isSome", 1],["Subsingleton.elim", 1],["Iff.intro", 1],["Option.get", 1],["Option.isSome_some", 1],["Bool.true", 1],["Option.some.injEq", 1]]],
["PLift", 2, [["Iff.intro", 1],["PLift.up", 1],["Nonempty", 1],["Nonempty.intro", 1],["PLift", 1]]],
["Quot.indep", 2, [["Quot.ind", 1],["Quot.sound", 1],["PSigma.eta", 1],["rfl", 1]]],
["FloatArray.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["FloatArray.mk", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["CoeSort", 2, [["CoeSort.mk", 1],["Bool.true", 1],["Eq", 1]]],
["Nat.Up", 2, [["Subrelation.wf", 1],["WellFoundedRelation.wf", 1],["And.intro", 1],["WellFoundedRelation.rel", 1],["Nat.lt_succ_self", 1],["Nat.sub_lt_sub_left", 1]]],
["Array.pop", 2, [["congr", 1],["Array.size", 1],["Eq.trans", 1],["Nat.lt_eq", 1],["congrArg", 1],["Eq.mpr", 1],["Array.pop", 1],["Nat.pred_lt'", 1],["funext", 1],["congrFun", 1],["LT.lt", 1],["List.length_dropLast", 1],["WellFoundedRelation.rel", 1],["Array.size_pop", 1],["sizeOf_nat", 1],["Array.data", 1]]],
["Tactic.NormCast.Label.squash", 2, [["Eq.refl", 2],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.Label.move", 1],["Tactic.NormCast.Label.elim", 1],["OfNat.ofNat", 1]]],
["Acc.inv", 2, [["rfl", 1],["WellFounded.fixFEq.proof_1", 1]]],
["Option.elim", 2, [["rfl", 2]]],
["ForM.forM", 2, [["rfl", 2]]],
["Equiv.self_comp_symm", 2, [["rfl", 2]]],
["CoeFun", 2, [["CoeFun.mk", 1],["Equiv.toFun", 1]]],
["List.lengthTRAux", 2, [["of_eq_true", 2],["Eq.trans", 2],["congrArg", 2],["List.length", 2],["Eq.symm", 2],["eq_self", 2],["Eq", 2],["congr", 1],["Nat.add_zero", 1],["List.length_add_eq_lengthTRAux", 1],["Eq.mpr", 1],["Nat.succ_add", 1],["funext", 1],["congrFun", 1],["rfl", 1],["OfNat.ofNat", 1],["Nat.zero_add", 1],["Nat.succ", 1]]],
["LawfulFunctor.comp_map", 2, [["rfl", 2]]],
["OfScientific", 2, [["OfNat.ofNat", 1],["Nat.log2", 1],["Int.ofNat", 1],["HMul.hMul", 1],["HShiftLeft.hShiftLeft", 1],["HAdd.hAdd", 1],["Float.ofBinaryScientific", 1],["HDiv.hDiv", 1],["HSub.hSub", 1],["Neg.neg", 1],["ite", 1],["OfScientific.mk", 1],["HPow.hPow", 1],["Bool.true", 1],["Eq", 1]]],
["NonScalar", 2, [["Inhabited.default", 1],["Inhabited.mk", 1],["NonScalar.mk", 1]]],
["Function.sometimes", 2, [["Eq.refl", 1],["dif_pos", 1],["Function.sometimes_eq", 1],["Eq.mpr", 1],["Nonempty.intro", 1],["Function.sometimes", 1]]],
["Sat.Clause.cons", 2, [["Sat.Clause.reify.mk", 2],["Sat.Clause.reify.prop", 2],["And.left", 1],["Sat.Clause.reify_zero", 1],["Not.elim", 1],["by_contra", 1],["Sat.Literal.reify.prop", 1],["Sat.Clause.reify_and", 1],["And.intro", 1]]],
["StdGen.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["StdGen.mk", 1],["eq_of_heq", 1]]],
["Functor.map_map", 2, [["rfl", 2]]],
["Nat.find_x.proof_3", 2, [["Iff.mp", 1],["Subtype.property", 1],["Nat.find_x", 1],["And.left", 1],["Nat.find_min", 1],["not_lt", 1]]],
["Array.toArrayLit.proof_1", 2, [["Eq", 1],["Array.toArrayLit", 1],["Bool.false", 1],["sorryAx", 1]]],
["Equiv.apply_symm_apply", 2, [["rfl", 2]]],
["toBoolUsing", 2, [["Unit.unit", 1],["toBoolUsing_eq_true", 1],["decide_eq_true", 1]]],
["WellFounded.fix'", 2, [["Iff.mp", 1],["Subtype.property", 1],["Nat.find_x", 1],["And.left", 1],["Nat.find_min", 1],["not_lt", 1]]],
["Acc.inv.proof_1", 2, [["rfl", 1],["WellFounded.fixFEq.proof_1", 1]]],
["Mathlib.Tactic.Sat.LRATStep.add", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["Mathlib.Tactic.Sat.LRATStep.add", 1],["eq_of_heq", 1]]],
["BinaryHeap.heapifyDown", 2, [["BinaryHeap.heapifyDown", 2],["Subtype.property", 2],["Fin.mk", 1],["Eq.symm", 1],["le_of_lt", 1],["Nat.lt_of_succ_le", 1]]],
["EStateM.Result.ok", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["EStateM.Result.ok", 1],["OfNat.ofNat", 1]]],
["PProd", 2, [["And", 1],["Nonempty", 1],["And.intro", 1],["PProd", 1],["PProd.mk", 1],["Iff.intro", 1],["Nonempty.intro", 1]]],
["MonadLiftT.monadLift", 2, [["rfl", 2]]],
["HOr", 2, [["HOr.mk", 1],["OrOp.or", 1]]],
["Ordering.eq", 2, [["Eq.refl", 1],["OfNat.ofNat", 1]]],
["Except.map", 2, [["Eq.mpr", 2],["Eq.refl", 2],["Except.error", 2],["Except", 2],["congrArg", 2],["Eq.symm", 2],["Except.ok", 2],["Eq", 2],["Except.map", 1],["Pure.pure", 1],["of_eq_true", 1],["eq_self", 1],["Bind.bind", 1],["funext", 1],["bind_congr", 1],["ExceptT.mk", 1],["map_eq_pure_bind", 1],["ExceptT.run", 1],["rfl", 1],["id_eq", 1],["congr", 1]]],
["Nat.Linear.Expr.mulR", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["Nat.Linear.Expr.mulR", 1],["OfNat.ofNat", 1]]],
["UFModel.rank_lt", 2, [["eq_false", 2],["UFModel.parent", 2],["Eq.trans", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["Fin.val", 2],["congrArg", 2],["Fin.mk", 2],["Eq.refl", 2],["Eq", 2],["And.left", 1],["ite_false", 1],["eq_true", 1],["UFModel.push.proof_1", 1],["OfNat.ofNat", 1],["congr", 1],["Nat.le_add_right", 1],["UFModel.push", 1],["UFModel.Agrees.push", 1],["ite_congr", 1],["dite_false", 1],["And.right", 1],["And.intro", 1],["lt_irrefl", 1],["Eq.symm", 1],["UFNode.mk", 1],["dite_true", 1],["UFModel.Agrees.set", 1],["UFModel.Agrees.get_eq", 1],["UFModel.rank", 1],["dite_congr", 1],["Ne.symm", 1],["rfl", 1],["And.imp", 1],["ite_true", 1]]],
["Float.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["Float.mk", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["Mathlib.Tactic.Lint.LintVerbosity.high", 2, [["Eq.refl", 2],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["OfNat.ofNat", 1]]],
["Nat.Linear.ExprCnstr", 2, [["Nat.Linear.PolyCnstr.eq", 1],["Nat.Linear.PolyCnstr.lhs", 1],["Nat.Linear.Poly.toExpr", 1],["Nat.Linear.ExprCnstr.mk", 1],["Nat.Linear.PolyCnstr.rhs", 1]]],
["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 2, [["Eq.refl", 2],["Mathlib.Tactic.Lint.SimpTheoremInfo.mk", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1],["And.intro", 1]]],
["Subarray.mk", 2, [["Eq.refl", 2],["Subarray.mk", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1],["OfNat.ofNat", 1]]],
["BinaryHeap.max", 2, [["Eq.refl", 2],["BinaryHeap.max", 2]]],
["Mathlib.Tactic.Lint.LintVerbosity.low", 2, [["Eq.refl", 2],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["OfNat.ofNat", 1]]],
["List.elem", 2, [["Bool.true", 1],["Iff.intro", 1],["Eq.trans", 1],["Bool", 1],["congrArg", 1],["List.elem_eq_true_of_mem", 1],["of_eq_true", 1],["Eq.symm", 1],["eq_self", 1],["congrFun", 1],["beq_self_eq_true'", 1],["List.elem", 1],["BEq.beq", 1],["List.mem_of_elem_eq_true", 1],["Unit.unit", 1],["rfl", 1],["Eq.refl", 1],["Eq", 1]]],
["LawfulFunctor.id_map", 2, [["rfl", 2]]],
["HMul", 2, [["HMul.mk", 1],["Mul.mul", 1]]],
["List.removeNth", 2, [["Eq", 2],["rfl", 2],["List.removeNth", 2],["PProd.fst", 1],["congrArg", 1],["List.length", 1],["List.cons", 1],["List.length_cons", 1],["HSub.hSub", 1],["Eq.symm", 1],["congrFun", 1],["List.modifyNthTail", 1],["List.tail", 1],["congr_arg", 1],["Eq.mpr", 1],["Eq.refl", 1],["OfNat.ofNat", 1]]],
["Tactic.NormCast.Label.move", 2, [["Eq.refl", 2],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.Label.move", 1],["Tactic.NormCast.Label.elim", 1],["OfNat.ofNat", 1]]],
["USize.toNat", 2, [["OfNat.ofNat", 1],["Nat.Linear.Expr.add", 1],["Eq.trans", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["congrArg", 1],["HMod.hMod", 1],["of_eq_true", 1],["List.nil", 1],["List.cons", 1],["Fin.modn_lt", 1],["Eq.symm", 1],["Nat.Linear.Expr.var", 1],["USize.mk.sizeOf_spec", 1],["congrFun", 1],["LT.lt", 1],["Nat.Linear.Expr.num", 1],["USize.toNat", 1],["Nat.Linear.ExprCnstr.mk", 1],["Fin.val", 1],["Eq.refl", 1],["Bool.true", 1],["Eq", 1]]],
["Sat.Clause.nil", 2, [["Sat.Clause.reify.mk", 2],["Sat.Clause.reify_zero", 1],["Sat.Clause.reify.prop", 1],["Sat.Clause.reify_and", 1],["trivial", 1],["And.left", 1]]],
["PSigma.lexNdep", 2, [["PSigma.lexNdep", 1],["PSigma.lexAccessible", 1],["PSigma.lexNdepWf.proof_1", 1],["WellFounded.apply", 1],["Acc", 1],["WellFounded.intro", 1]]],
["Tactic.NormCast.CoeFnType.toCtorIdx", 2, [["Eq.refl", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["noConfusionEnum", 1],["Tactic.NormCast.CoeFnType.coeFn", 1]]],
["List.filter", 2, [["Membership.mem", 2],["List.not_mem_nil", 2],["propext", 2],["Or", 2],["Eq.trans", 2],["of_eq_true", 2],["congrFun", 2],["Iff", 2],["eq_false", 2],["And", 2],["congrArg", 2],["iff_self", 2],["List.nil", 2],["Eq", 2],["false_and", 1],["False", 1],["congr", 1],["List.mem_filterAux", 1],["List.mem_cons", 1],["Decidable.decide", 1],["or_false", 1],["List.cons", 1],["Eq.symm", 1],["List.mem_filter", 1],["Eq.refl", 1],["Bool.true", 1],["decide_eq_true_eq", 1]]],
["Prod.RProd", 2, [["Subrelation.wf", 1],["WellFoundedRelation.wf", 1],["Prod.RProdSubLex", 1]]],
["Sat.Fmla", 2, [["List.nil", 1],["List.cons", 1],["HAppend.hAppend", 1]]],
["Ordering.gt", 2, [["Eq.refl", 1],["OfNat.ofNat", 1]]],
["Mathlib.Tactic.Lint.LintVerbosity.medium", 2, [["Eq.refl", 2],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1],["OfNat.ofNat", 1]]],
["ForIn'", 2, [["ForIn'.mk", 1],["List.forIn'", 1]]],
["ByteSliceT.mk", 2, [["Eq.refl", 2],["ByteSliceT.mk", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1],["And.intro", 1]]],
["EStateM.Backtrackable", 2, [["EStateM.dummySave", 1],["EStateM.dummyRestore", 1],["EStateM.Backtrackable.mk", 1]]],
["Nat.Linear.monomialToExpr", 2, [["HMul.hMul", 2],["Nat.Linear.Expr.denote", 2],["Eq.trans", 2],["of_eq_true", 2],["eq_self", 2],["congrFun", 2],["OfNat.ofNat", 2],["congr", 2],["Nat.Linear.Var.denote", 2],["congrArg", 2],["Eq.symm", 2],["Eq", 2],["Nat.mul_eq", 2],["Eq.refl", 2],["beq_self_eq_true", 1],["Nat.Linear.Expr.add", 1],["Nat.Linear.Expr.var", 1],["Nat.Linear.monomialToExpr", 1],["Nat.add_eq", 1],["BEq.beq", 1],["Nat.Linear.fixedVar", 1],["cond_true", 1],["Nat.zero_add", 1],["Nat.Linear.denote_monomialToExpr", 1],["Eq.mpr", 1],["cond", 1],["Bool.of_not_eq_true", 1],["HAdd.hAdd", 1],["eq_of_beq", 1],["Nat.Linear.Var.denote.go", 1],["Classical.em", 1],["Nat.add_left_comm", 1],["Nat.one_mul", 1],["Nat.add", 1],["cond_false", 1],["Nat.mul_one", 1],["Nat.Linear.Expr.num", 1],["Nat.add_comm", 1],["Nat.Linear.Expr.mulL", 1],["Bool.true", 1],["Nat.Linear.Poly.denote", 1]]],
["Tactic.Ring.Cache.mk", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["Tactic.Ring.Cache.mk", 1],["eq_of_heq", 1]]],
["Ordering.lt", 2, [["Eq.refl", 1],["OfNat.ofNat", 1]]],
["System.FilePath.mk", 2, [["Eq.refl", 2],["System.FilePath.mk", 1],["HEq.refl", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1],["OfNat.ofNat", 1]]],
["MonadStateOf.set", 2, [["rfl", 2]]],
["modify", 2, [["rfl", 2]]],
["HOrElse", 2, [["HOrElse.mk", 1],["OrElse.orElse", 1]]],
["List.tail", 2, [["rfl", 2],["Eq.symm", 2],["Eq.refl", 2],["Eq", 1],["List.modifyNthTail", 1],["PProd.fst", 1],["List.tail", 1],["congr_arg", 1],["List.cons", 1],["List.removeNth", 1]]],
["BinaryHeap.heapifyUp", 2, [["Eq", 1],["Array.size", 1],["Eq.trans", 1],["congrArg", 1],["HAdd.hAdd", 1],["BinaryHeap.insert.proof_1", 1],["of_eq_true", 1],["Subtype.property", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["Array.size_push", 1],["BinaryHeap.heapifyUp", 1],["congrFun", 1],["Array.push", 1],["Fin.mk", 1],["BinaryHeap.arr", 1],["OfNat.ofNat", 1]]],
["Tactic.Ring.HornerExpr.const", 2, [["Eq.refl", 2],["OfNat.ofNat", 1],["And.intro", 1],["HEq.refl", 1],["Eq.symm", 1],["SizeOf.sizeOf", 1],["Tactic.Ring.HornerExpr.const", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["eq_of_heq", 1]]],
["Functor.map_equiv.proof_2", 2, [["rfl", 2]]],
["ByteArray.mk", 2, [["Eq.refl", 2],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["HAdd.hAdd", 1],["ByteArray.mk", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["Tactic.Ring.State.mk", 2, [["Eq.refl", 2],["And.intro", 1],["eq_of_heq", 1],["SizeOf.sizeOf", 1],["Eq.symm", 1],["HEq.refl", 1],["Tactic.Ring.State.mk", 1],["HAdd.hAdd", 1],["Eq.propIntro", 1],["OfNat.ofNat", 1]]],
["eq_false", 2, [["OfNat.ofNat", 2],["LT.lt", 2],["Fin.mk", 2],["BinaryHeap.size_pos_of_max", 2],["Eq.mpr", 2],["congrArg", 2],["Array.size_set", 2],["BinaryHeap.arr", 2]]],
["List.mapTR", 1, [["Eq", 1],["List.map", 1],["HAppend.hAppend", 1],["Eq.trans", 1],["congrArg", 1],["of_eq_true", 1],["List.nil", 1],["List.mapTRAux_eq", 1],["List.nil_append", 1],["eq_self", 1],["funext", 1],["congrFun", 1],["List.reverse_nil", 1]]],
["UInt8.ofNat", 1, [["Fin.val_eq_of_lt", 1]]],
["PNonScalar.mk", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["Sat.Fmla.and", 1, [["Or.inl", 1],["Sat.Fmla.reify.prop", 1],["Or.inr", 1],["by_contra", 1],["Sat.Valuation.satisfies_fmla.mk", 1],["Iff.mp", 1],["List.mem_append", 1],["Sat.Valuation.satisfies_fmla.prop", 1],["Sat.Fmla.reify.mk", 1]]],
["Nat.one_pos", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["iff_true_intro", 1, [["rfl", 1]]],
["Tactic.NormCast.CoeFnType.noConfusionType", 1, [["noConfusionEnum", 1],["Tactic.NormCast.CoeFnType.toCtorIdx", 1]]],
["UFModel.push.proof_1", 1, [["Eq.refl", 1],["UFModel.push", 1],["Eq.trans", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["eq_self", 1],["dite_false", 1],["congrFun", 1],["And.imp", 1],["eq_true", 1],["OfNat.ofNat", 1],["UFModel.push.proof_1", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["congrArg", 1],["eq_false", 1],["Eq.symm", 1],["UFNode.mk", 1],["lt_irrefl", 1],["Fin.mk", 1],["dite_true", 1],["dite_congr", 1],["UFModel.rank", 1],["Fin.val", 1],["Eq", 1]]],
["Nat.eq_zero_or_pos", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["DoResultSBC.break", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["Int.toNat", 1, [["rfl", 1]]],
["Option.guard", 1, [["Eq.refl", 1],["eq_false'", 1],["Option.none", 1],["False", 1],["Eq.trans", 1],["eq_false", 1],["congrArg", 1],["ite_congr", 1],["Iff", 1],["Option.some.injEq", 1],["of_eq_true", 1],["and_false", 1],["Eq.symm", 1],["and_true", 1],["congrFun", 1],["ite_true", 1],["ite_false", 1],["eq_true", 1],["Option.some", 1],["iff_self", 1],["Decidable.em", 1],["And", 1],["congr", 1],["Eq", 1]]],
["Ordering.noConfusionType", 1, [["noConfusionEnum", 1],["Ordering.toCtorIdx", 1]]],
["Nat.succ_ne_zero", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Nat.zero_sub", 1, [["BinaryHeap.popMaxAux", 1],["Subtype.property", 1]]],
["Nat.pos_of_ne_zero", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Nat.zero_lt_one", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Nat.pow_le_pow_of_le_right", 1, [["Fin.val_eq_of_lt", 1]]],
["UFModel.setParent", 1, [["Eq.refl", 1],["UFModel.parent", 1],["Eq.trans", 1],["And.right", 1],["congrArg", 1],["ite_congr", 1],["eq_false", 1],["Ne.symm", 1],["UFModel.Agrees.set", 1],["of_eq_true", 1],["And.intro", 1],["eq_self", 1],["congrFun", 1],["UFModel.Agrees.get_eq", 1],["ite_true", 1],["Fin.mk", 1],["ite_false", 1],["rfl", 1],["Fin.val", 1],["congr", 1],["And.left", 1],["Eq", 1]]],
["StateCpsT.run", 1, [["rfl", 1]]],
["Nat.lor", 1, [["LT.lt", 1],["Nat.mod_lt", 1],["HMod.hMod", 1]]],
["DoResultBC.continue", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["DoResultPRBC.pure", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["List.lengthTR", 1, [["Eq", 1],["Nat.add_zero", 1],["eq_self", 1],["List.length_add_eq_lengthTRAux", 1],["Eq.symm", 1],["funext", 1],["Eq.trans", 1],["congrArg", 1],["List.length", 1],["OfNat.ofNat", 1],["of_eq_true", 1]]],
["UFModel.empty.proof_1", 1, [["UFModel.Agrees.empty", 1],["And.intro", 1]]],
["Nat.Linear.Poly.toExpr.go", 1, [["congr", 1],["Nat.add_eq", 1],["HMul.hMul", 1],["Nat.Linear.denote_monomialToExpr", 1],["Nat.Linear.Expr.denote", 1],["Eq.trans", 1],["Nat.Linear.Expr.add", 1],["HAdd.hAdd", 1],["congrArg", 1],["of_eq_true", 1],["Nat.add_left_comm", 1],["Nat.add_comm", 1],["Eq.symm", 1],["Nat.Linear.Var.denote", 1],["Nat.Linear.Poly.denote", 1],["eq_self", 1],["Nat.Linear.monomialToExpr", 1],["congrFun", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Eq.refl", 1],["OfNat.ofNat", 1],["Eq", 1],["Nat.zero_add", 1]]],
["DoResultPR.return", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["HShiftLeft.hShiftLeft", 1, [["LT.lt", 1],["Nat.mod_lt", 1],["HMod.hMod", 1]]],
["Thunk.get", 1, [["Eq.refl", 1],["Eq.symm", 1],["rfl", 1]]],
["List.replicateTR", 1, [["List.replicateTR_loop_replicate_eq", 1],["Eq.symm", 1],["funext", 1],["OfNat.ofNat", 1]]],
["Nat.iterate", 1, [["Function.funext_iff", 1],["Iff.symm", 1]]],
["PSigma.eta", 1, [["Quot.ind", 1],["rfl", 1]]],
["List.asString", 1, [["Bool.true", 1],["LE.le", 1],["of_decide_eq_true", 1],["Eq.trans", 1],["Eq.mpr", 1],["Nat.toDigitsCore", 1],["Nat.succ", 1],["Nat.digitChar", 1],["eq_self", 1],["congrFun", 1],["OfNat.ofNat", 1],["congr", 1],["HAdd.hAdd", 1],["ite_congr", 1],["congrArg", 1],["eq_true_of_decide", 1],["List.length", 1],["HMod.hMod", 1],["List.nil", 1],["HDiv.hDiv", 1],["List.cons", 1],["Eq.symm", 1],["Decidable.em", 1],["Nat.to_digits_core_length", 1],["Eq", 1],["Eq.refl", 1]]],
["UInt32.toNat", 1, [["OfNat.ofNat", 1],["Nat.Linear.Expr.add", 1],["UInt32.mk.sizeOf_spec", 1],["Eq.trans", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["congrArg", 1],["of_eq_true", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.ExprCnstr.mk", 1],["Fin.val", 1],["Eq.refl", 1],["Bool.true", 1],["Eq", 1]]],
["PProd.mk", 1, [["Eq.refl", 1],["And.intro", 1],["PProd.mk", 1],["eq_of_heq", 1],["Eq.symm", 1],["HEq.refl", 1],["Eq.propIntro", 1]]],
["Nat.pos_pow_of_pos", 1, [["Fin.val_eq_of_lt", 1]]],
["Substring.mk", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["Tactic.NormCast.Label.ofNat", 1, [["Eq.refl", 1],["Tactic.NormCast.Label.squash", 1],["Tactic.NormCast.Label.move", 1],["Tactic.NormCast.Label.elim", 1]]],
["Quot.ind", 1, [["rfl", 1]]],
["List.replicateTR.loop", 1, [["Nat.zero_add", 1],["List.replicate", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["congrArg", 1],["Eq.mpr", 1],["Nat.zero_eq", 1],["Nat.succ", 1],["Nat.succ_add", 1],["of_eq_true", 1],["List.cons", 1],["eq_self", 1],["congrFun", 1],["List.replicateTR.loop", 1],["OfNat.ofNat", 1],["Eq.refl", 1],["Eq", 1]]],
["UInt16.toNat", 1, [["OfNat.ofNat", 1],["Nat.Linear.Expr.add", 1],["Eq.trans", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["congrArg", 1],["of_eq_true", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["Nat.Linear.Expr.var", 1],["UInt16.mk.sizeOf_spec", 1],["congrFun", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.ExprCnstr.mk", 1],["Fin.val", 1],["Eq.refl", 1],["Bool.true", 1],["Eq", 1]]],
["Option.lt", 1, [["Option.lt", 1],["Decidable", 1],["Decidable.isTrue", 1],["Decidable.isFalse", 1],["not_false", 1],["trivial", 1],["Unit.unit", 1]]],
["Nat.Linear.PolyCnstr.mul", 1, [["Eq.refl", 1],["Eq.symm", 1]]],
["Nat.succ_pos", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["UFNode.value", 1, [["Array.size_set", 1],["Array.get", 1],["UFNode.mk", 1],["UFNode.value", 1],["Fin.isLt", 1],["LT.lt", 1],["Eq.mpr", 1],["congrArg", 1],["UnionFind.arr", 1],["UFNode.rank", 1],["Fin.val", 1]]],
["Sat.Fmla.proof", 1, [["List.nil", 1],["List.Mem.head", 1],["Sat.Fmla.subsumes.prop", 1],["Sat.Valuation.satisfies_fmla.prop", 1]]],
["EmptyCollection.emptyCollection", 1, [["rfl", 1]]],
["Function.is_partial_inv", 1, [["Eq", 1],["Option.some", 1],["Function.partial_inv", 1],["Iff", 1],["Iff.intro", 1]]],
["Fin.checkedAdd", 1, [["Bool.true", 1],["LE.le", 1],["Option.none", 1],["Eq.trans", 1],["Bool", 1],["Prod.mk", 1],["of_eq_true", 1],["Fin", 1],["Eq.mp", 1],["eq_self", 1],["congrFun", 1],["Subsingleton.elim", 1],["eq_true", 1],["decide_eq_true", 1],["Option.some", 1],["congr", 1],["not_lt", 1],["decide_eq_false", 1],["Decidable.decide", 1],["False", 1],["propext", 1],["Option", 1],["eq_true_of_decide", 1],["eq_false", 1],["eq_false_of_decide", 1],["congrArg", 1],["HAdd.hAdd", 1],["Iff", 1],["Eq.symm", 1],["Bool.false", 1],["LT.lt", 1],["false_iff", 1],["True", 1],["iff_self", 1],["not_le", 1],["Unit.unit", 1],["Decidable.em", 1],["Fin.val", 1],["Eq", 1],["Eq.refl", 1]]],
["bne", 1, [["LT.lt", 1],["Nat.mod_lt", 1],["HMod.hMod", 1]]],
["not_false", 1, [["rfl", 1]]],
["Nat.Linear.Poly.toExpr", 1, [["Eq", 1],["Nat.add_eq", 1],["HMul.hMul", 1],["Nat.Linear.denote_monomialToExpr", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["eq_true_of_decide", 1],["congrArg", 1],["Nat.Linear.Poly.denote_toExpr_go", 1],["of_eq_true", 1],["Nat.add_comm", 1],["Nat.Linear.Var.denote", 1],["Nat.Linear.Poly.denote", 1],["eq_self", 1],["congrFun", 1],["Nat.Linear.monomialToExpr", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Unit.unit", 1],["Eq.refl", 1],["OfNat.ofNat", 1],["Bool.true", 1],["congr", 1]]],
["Nat.toDigits", 1, [["Bool.true", 1],["LE.le", 1],["of_decide_eq_true", 1],["Eq.trans", 1],["Eq.mpr", 1],["Nat.toDigitsCore", 1],["Nat.succ", 1],["Nat.digitChar", 1],["eq_self", 1],["congrFun", 1],["OfNat.ofNat", 1],["congr", 1],["HAdd.hAdd", 1],["ite_congr", 1],["congrArg", 1],["eq_true_of_decide", 1],["List.length", 1],["HMod.hMod", 1],["List.nil", 1],["HDiv.hDiv", 1],["List.cons", 1],["Eq.symm", 1],["Decidable.em", 1],["Nat.to_digits_core_length", 1],["Eq", 1],["Eq.refl", 1]]],
["List.inter", 1, [["And", 1],["List.mem_cons", 1],["Decidable.decide", 1],["List.not_mem_nil", 1],["decide_eq_true_eq", 1],["List.mem_filter", 1],["Or", 1],["False", 1],["propext", 1],["Eq.trans", 1],["congrArg", 1],["eq_false", 1],["Iff", 1],["of_eq_true", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["congrFun", 1],["false_and", 1],["iff_self", 1],["Eq.refl", 1],["Eq", 1],["congr", 1],["Membership.mem", 1]]],
["List.length_eq_zero", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Fin.checkedMul", 1, [["Eq.refl", 1],["LE.le", 1],["Option.none", 1],["Eq.trans", 1],["Iff.intro", 1],["Bool", 1],["Prod.mk", 1],["decide_eq_true_iff", 1],["Nat.lt_of_not_le", 1],["of_eq_true", 1],["Fin", 1],["Eq.mp", 1],["eq_self", 1],["congrFun", 1],["Option.some", 1],["decide_eq_false", 1],["HMul.hMul", 1],["Option", 1],["Nat.not_le_of_lt", 1],["congrArg", 1],["eq_false_of_decide", 1],["Eq.symm", 1],["Bool.false", 1],["False.elim", 1],["Unit.unit", 1],["Decidable.em", 1],["Fin.val", 1],["Eq", 1],["Iff.mpr", 1],["Bool.true", 1]]],
["Quotient.lift", 1, [["Quotient.ind", 1],["Setoid.refl", 1]]],
["Mathlib.Tactic.Lint.LintVerbosity.ofNat", 1, [["Eq.refl", 1],["Mathlib.Tactic.Lint.LintVerbosity.low", 1],["Mathlib.Tactic.Lint.LintVerbosity.high", 1],["Mathlib.Tactic.Lint.LintVerbosity.medium", 1]]],
["PSigma.SkipLeft", 1, [["PSigma.mkSkipLeft.proof_1", 1]]],
["HShiftRight.hShiftRight", 1, [["LT.lt", 1],["Nat.mod_lt", 1],["HMod.hMod", 1]]],
["List.get_append_right_aux", 1, [["Eq.refl", 1],["Option.some.inj", 1],["List.get?", 1],["HAppend.hAppend", 1],["List.get?_eq_get", 1],["Eq.mpr", 1],["List.get", 1],["List.length", 1],["List.get_append_right_aux", 1],["id", 1],["HSub.hSub", 1],["Eq.symm", 1],["List.get?_append_right", 1],["Fin.mk", 1],["Option.some", 1],["rfl", 1],["Eq", 1]]],
["Nat.Linear.Poly.sort.go", 1, [["congr", 1],["Nat.add_eq", 1],["HMul.hMul", 1],["Nat.Linear.Poly.insertSorted", 1],["Eq.trans", 1],["HAdd.hAdd", 1],["congrArg", 1],["eq_true_of_decide", 1],["PProd.fst", 1],["Nat.Linear.Poly.denote_insertSorted", 1],["of_eq_true", 1],["Nat.add_comm", 1],["Nat.add_left_comm", 1],["Nat.Linear.Var.denote", 1],["Nat.Linear.Poly.denote", 1],["eq_self", 1],["congrFun", 1],["Nat.add", 1],["Nat.mul_eq", 1],["Unit.unit", 1],["Nat.zero_add", 1],["Eq", 1],["Eq.refl", 1],["Bool.true", 1]]],
["Function.bicompl", 1, [["funext", 1],["rfl", 1]]],
["List.isPrefix", 1, [["Exists.intro", 1],["rfl", 1]]],
["BinaryHeap.popMaxAux", 1, [["BinaryHeap.popMaxAux", 1],["Subtype.property", 1]]],
["DoResultPRBC.return", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["List.appendTR", 1, [["Eq", 1],["List.cons", 1],["eq_self", 1],["funext", 1],["List.reverseAux_reverseAux", 1],["Eq.trans", 1],["List.reverseAux", 1],["congrArg", 1],["rfl", 1],["List.nil", 1],["of_eq_true", 1],["congr", 1]]],
["not_not_intro", 1, [["Eq.refl", 1],["not_false", 1],["Eq.trans", 1],["Not", 1],["eq_true_of_decide", 1],["eq_false", 1],["not_not_intro", 1],["congrArg", 1],["eq_false_of_decide", 1],["Eq.mpr_prop", 1],["of_eq_true", 1],["Eq.symm", 1],["eq_self", 1],["dite_false", 1],["Bool.false", 1],["dite_true", 1],["dite_congr", 1],["eq_true", 1],["True.intro", 1],["Decidable.em", 1],["Bool.true", 1],["Eq.mpr_not", 1],["Eq", 1],["congr", 1]]],
["Nat.Linear.PolyCnstr.combine", 1, [["Eq.refl", 1],["LE.le", 1],["Classical.em", 1],["Eq.trans", 1],["Nat.Linear.Poly.denote_le_cancel_eq", 1],["Prod.mk", 1],["Eq.mpr", 1],["cond", 1],["of_eq_true", 1],["id", 1],["Eq.mp", 1],["Nat.Linear.Poly.denote", 1],["eq_self", 1],["congrFun", 1],["Nat.add_le_add_left", 1],["Nat.Linear.Poly.denote_eq", 1],["Nat.Linear.Poly.denote_eq_cancel_eq", 1],["cond_true", 1],["congr", 1],["Nat.add_le_add", 1],["Nat.Linear.Poly.combine", 1],["Nat.add_le_add_right", 1],["Bool.of_not_eq_true", 1],["Bool.and_true", 1],["Bool.and_false", 1],["congrArg", 1],["HAdd.hAdd", 1],["Bool.and_self", 1],["and", 1],["Nat.Linear.Poly.denote_combine", 1],["Eq.symm", 1],["Bool.false", 1],["Nat.Linear.Poly.denote_le", 1],["cond_false", 1],["Eq", 1],["Bool.true", 1]]],
["Nat.pow", 1, [["rfl", 1]]],
["Quot.indepCoherent", 1, [["Quot.ind", 1],["rfl", 1]]],
["Nat.lt_add_right", 1, [["Eq.refl", 1],["Nat.lt_add_right", 1],["List.length_append", 1],["Nat.le_of_succ_le_succ", 1],["HAppend.hAppend", 1],["PProd.fst", 1],["List.get", 1],["List.length", 1],["List.nil", 1],["id", 1],["HEq.refl", 1],["Eq.symm", 1],["Nat.add", 1],["Fin.mk", 1],["rfl", 1],["OfNat.ofNat", 1],["Eq", 1]]],
["Exists.choose", 1, [["Classical.choose_spec", 1]]],
["Thunk.mk", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["BinaryHeap.popMaxAux.proof_1", 1, [["BinaryHeap.popMaxAux", 1],["Subtype.property", 1]]],
["Function.bicompr", 1, [["rfl", 1]]],
["UInt16.ofNat", 1, [["Fin.val_eq_of_lt", 1]]],
["Nat.repr", 1, [["Bool.true", 1],["LE.le", 1],["of_decide_eq_true", 1],["Eq.trans", 1],["Eq.mpr", 1],["Nat.toDigitsCore", 1],["Nat.succ", 1],["Nat.digitChar", 1],["eq_self", 1],["congrFun", 1],["OfNat.ofNat", 1],["congr", 1],["HAdd.hAdd", 1],["ite_congr", 1],["congrArg", 1],["eq_true_of_decide", 1],["List.length", 1],["HMod.hMod", 1],["List.nil", 1],["HDiv.hDiv", 1],["List.cons", 1],["Eq.symm", 1],["Decidable.em", 1],["Nat.to_digits_core_length", 1],["Eq", 1],["Eq.refl", 1]]],
["Setoid.iseqv", 1, [["Quotient.ind", 1],["Setoid.refl", 1]]],
["zero_lt_of_lt", 1, [["Eq", 1],["Nat.mod_lt", 1],["Eq.trans", 1],["congrArg", 1],["of_eq_true", 1],["HMod.hMod", 1],["Nat.mod_eq_of_lt", 1],["eq_self", 1],["congrFun", 1],["Fin.mk", 1],["Fin.val", 1],["zero_lt_of_lt", 1],["Eq.refl", 1]]],
["DoResultBC.break", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["Tactic.NormCast.Label.noConfusionType", 1, [["noConfusionEnum", 1],["Tactic.NormCast.Label.toCtorIdx", 1]]],
["Nat.land", 1, [["LT.lt", 1],["Nat.mod_lt", 1],["HMod.hMod", 1]]],
["Nat.sub_lt_left_of_lt_add", 1, [["Eq.refl", 1],["Option.some.inj", 1],["List.get?", 1],["HAppend.hAppend", 1],["List.get?_eq_get", 1],["Eq.mpr", 1],["List.get", 1],["List.length", 1],["List.get_append_right_aux", 1],["id", 1],["HSub.hSub", 1],["Eq.symm", 1],["List.get?_append_right", 1],["Fin.mk", 1],["Option.some", 1],["rfl", 1],["Eq", 1]]],
["lt_of_le_of_lt", 1, [["rfl", 1]]],
["ne_false_of_eq_true", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["List.Nodup", 1, [["List.decidablePairwise", 1]]],
["ForInStep.done", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["Task.pure", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["NonScalar.mk", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["List.product", 1, [["Membership.mem", 1],["List.mem_map", 1],["Prod.mk.injEq", 1],["propext", 1],["Eq.trans", 1],["Iff.intro", 1],["congrArg", 1],["Eq.mpr", 1],["id", 1],["And.intro", 1],["funext", 1],["and_imp", 1],["exists_eq_right_right'", 1],["List.mem_bind", 1],["Exists", 1],["Eq.refl", 1],["implies_congr", 1],["And", 1]]],
["And.right", 1, [["Function.RightInverse_of_injective_of_LeftInverse", 1],["And.right", 1],["Function.RightInverse_surj_inv", 1],["And.left", 1]]],
["Array.mkArray", 1, [["List.length_replicate", 1]]],
["BinaryHeap.mkHeap", 1, [["BinaryHeap.mkHeap", 1],["Subtype.property", 1]]],
["Tactic.NormCast.CoeFnType.ofNat", 1, [["Eq.refl", 1],["Tactic.NormCast.CoeFnType.coe", 1],["Tactic.NormCast.CoeFnType.coeSort", 1],["Tactic.NormCast.CoeFnType.coeFn", 1]]],
["BinaryHeap.popMaxAux.proof_2", 1, [["BinaryHeap.popMaxAux", 1],["Subtype.property", 1]]],
["Decidable.isTrue", 1, [["Eq", 1],["absurd", 1],["rfl", 1],["Decidable.isTrue", 1],["Eq.refl", 1]]],
["UFModel.push.proof_2", 1, [["Eq.refl", 1],["UFModel.push", 1],["Eq.trans", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["eq_self", 1],["dite_false", 1],["congrFun", 1],["And.imp", 1],["eq_true", 1],["OfNat.ofNat", 1],["UFModel.push.proof_1", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["congrArg", 1],["eq_false", 1],["Eq.symm", 1],["UFNode.mk", 1],["lt_irrefl", 1],["Fin.mk", 1],["dite_true", 1],["dite_congr", 1],["UFModel.rank", 1],["Fin.val", 1],["Eq", 1]]],
["Array.size_push", 1, [["Eq", 1],["Array.size", 1],["Eq.trans", 1],["congrArg", 1],["HAdd.hAdd", 1],["BinaryHeap.insert.proof_1", 1],["of_eq_true", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["Array.size_push", 1],["congrFun", 1],["Array.push", 1],["Fin.mk", 1],["BinaryHeap.arr", 1],["OfNat.ofNat", 1]]],
["Nat.le_or_eq_or_le_succ", 1, [["Fin.val_eq_of_lt", 1]]],
["DoResultSBC.pureReturn", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["DoResultPRBC.break", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["lcProof", 1, [["Fin.mk", 1],["unsafeCast", 1],["Eq.symm", 1],["Unit.unit", 1],["Array.size_set", 1]]],
["StateCpsT.run'", 1, [["rfl", 1]]],
["Nat.lt_of_succ_lt_succ", 1, [["rfl", 1]]],
["Nat.xor", 1, [["LT.lt", 1],["Nat.mod_lt", 1],["HMod.hMod", 1]]],
["List.length_pos_of_ne_nil", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Sigma.mk", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["MProd.mk", 1, [["Eq.refl", 1],["And.intro", 1],["eq_of_heq", 1],["MProd.mk", 1],["Eq.symm", 1],["HEq.refl", 1],["Eq.propIntro", 1]]],
["decide_eq_true", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Fin.checkedSub", 1, [["Eq.refl", 1],["Nat.not_lt_of_le", 1],["Option.none", 1],["Iff.intro", 1],["Eq.trans", 1],["Bool", 1],["Prod.mk", 1],["decide_eq_true_iff", 1],["of_eq_true", 1],["Fin", 1],["Eq.mp", 1],["eq_self", 1],["HSub.hSub", 1],["congrFun", 1],["Option.some", 1],["decide_eq_false", 1],["Option", 1],["congrArg", 1],["eq_false_of_decide", 1],["Eq.symm", 1],["Bool.false", 1],["LT.lt", 1],["False.elim", 1],["Nat.le_of_not_lt", 1],["Unit.unit", 1],["Decidable.em", 1],["Fin.val", 1],["Eq", 1],["Iff.mpr", 1],["Bool.true", 1]]],
["Decidable.isFalse", 1, [["Eq", 1],["proof_irrel", 1],["absurd", 1],["Decidable.isFalse", 1],["Eq.refl", 1]]],
["UFModel.push", 1, [["Eq.refl", 1],["UFModel.push", 1],["Eq.trans", 1],["of_eq_true", 1],["UFModel.Agrees.push", 1],["eq_self", 1],["dite_false", 1],["congrFun", 1],["And.imp", 1],["eq_true", 1],["OfNat.ofNat", 1],["UFModel.push.proof_1", 1],["Nat.le_add_right", 1],["UFModel.parent", 1],["congrArg", 1],["eq_false", 1],["Eq.symm", 1],["UFNode.mk", 1],["lt_irrefl", 1],["Fin.mk", 1],["dite_true", 1],["dite_congr", 1],["UFModel.rank", 1],["Fin.val", 1],["Eq", 1]]],
["Nat.pos_iff_ne_zero", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["List.length_map", 1, [["Eq.refl", 1],["Option.some.inj", 1],["List.get?", 1],["List.length_map", 1],["List.map", 1],["List.get?_eq_get", 1],["Eq.mpr", 1],["List.get", 1],["Eq.symm", 1],["Option.map", 1],["Fin.mk", 1],["Fin.isLt", 1],["List.get?_map", 1],["Option.some", 1],["rfl", 1],["Fin.val", 1],["Eq", 1]]],
["Fin.underflowingSub", 1, [["Eq.refl", 1],["Nat.not_lt_of_le", 1],["Option.none", 1],["Iff.intro", 1],["Eq.trans", 1],["Bool", 1],["Prod.mk", 1],["decide_eq_true_iff", 1],["of_eq_true", 1],["Fin", 1],["Eq.mp", 1],["eq_self", 1],["HSub.hSub", 1],["congrFun", 1],["Option.some", 1],["decide_eq_false", 1],["Option", 1],["congrArg", 1],["eq_false_of_decide", 1],["Eq.symm", 1],["Bool.false", 1],["LT.lt", 1],["False.elim", 1],["Nat.le_of_not_lt", 1],["Unit.unit", 1],["Decidable.em", 1],["Fin.val", 1],["Eq", 1],["Iff.mpr", 1],["Bool.true", 1]]],
["List.length_concat", 1, [["Eq", 1],["Array.size", 1],["Eq.trans", 1],["congrArg", 1],["HAdd.hAdd", 1],["BinaryHeap.insert.proof_1", 1],["of_eq_true", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["Array.size_push", 1],["congrFun", 1],["Array.push", 1],["Fin.mk", 1],["BinaryHeap.arr", 1],["OfNat.ofNat", 1]]],
["unsafeCast.proof_1", 1, [["Fin.mk", 1],["unsafeCast", 1],["Eq.symm", 1],["Unit.unit", 1],["Array.size_set", 1]]],
["Sat.Fmla.one", 1, [["Eq.refl", 1],["eq_of_heq", 1],["HEq.refl", 1],["Sat.Clause.reify.prop", 1],["Eq.symm", 1],["Sat.Fmla.one", 1],["Sat.Valuation.satisfies_fmla.mk", 1],["Sat.Valuation.satisfies", 1],["Unit.unit", 1],["List.nil", 1],["Sat.Fmla.reify.mk", 1]]],
["Setoid.refl", 1, [["Quotient.ind", 1],["Setoid.refl", 1]]],
["BinaryHeap.insert", 1, [["Eq", 1],["Array.size", 1],["Eq.trans", 1],["congrArg", 1],["HAdd.hAdd", 1],["BinaryHeap.insert.proof_1", 1],["of_eq_true", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["Array.size_push", 1],["congrFun", 1],["Array.push", 1],["Fin.mk", 1],["BinaryHeap.arr", 1],["OfNat.ofNat", 1]]],
["DoResultPRBC.continue", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["List.isSuffix", 1, [["Exists.intro", 1],["HSub.hSub", 1],["List.repeat'", 1],["rfl", 1],["List.length", 1]]],
["DecidablePred", 1, [["inferInstanceAs", 1],["DecidablePred", 1]]],
["DoResultSBC.continue", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["Nat.Linear.PolyCnstr.norm", 1, [["rfl", 1]]],
["List.map₂", 1, [["OfNat.ofNat", 1],["min", 1],["Nat.zero_min", 1],["List.length_nil", 1],["Eq.trans", 1],["congrArg", 1],["List.length", 1],["Nat.succ", 1],["of_eq_true", 1],["List.length_cons", 1],["min_self", 1],["eq_self", 1],["Eq.symm", 1],["Nat.min_succ_succ", 1],["Nat.min_zero", 1],["List.map₂", 1],["Eq.refl", 1],["Eq", 1],["congr", 1]]],
["Nat.Linear.Poly.mul.go", 1, [["congr", 1],["Nat.add_eq", 1],["HMul.hMul", 1],["Eq.trans", 1],["eq_true_of_decide", 1],["HAdd.hAdd", 1],["PProd.fst", 1],["congrArg", 1],["of_eq_true", 1],["Nat.add_comm", 1],["eq_self", 1],["Nat.Linear.Poly.denote", 1],["Nat.mul", 1],["Nat.Linear.Var.denote", 1],["Nat.left_distrib", 1],["congrFun", 1],["Nat.add", 1],["Nat.mul_assoc", 1],["Nat.mul_eq", 1],["rfl", 1],["Unit.unit", 1],["Bool.true", 1],["Eq.refl", 1],["Eq", 1]]],
["usize_size_gt_zero", 1, [["Fin.val_eq_of_lt", 1]]],
["BinaryHeap.popMax", 1, [["BinaryHeap.popMaxAux", 1],["Subtype.property", 1]]],
["UInt64.toNat", 1, [["OfNat.ofNat", 1],["Nat.Linear.Expr.add", 1],["Eq.trans", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["congrArg", 1],["of_eq_true", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["Nat.Linear.Expr.var", 1],["UInt64.mk.sizeOf_spec", 1],["congrFun", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.ExprCnstr.mk", 1],["Fin.val", 1],["Eq.refl", 1],["Bool.true", 1],["Eq", 1]]],
["UInt8.toNat", 1, [["OfNat.ofNat", 1],["Nat.Linear.Expr.add", 1],["Eq.trans", 1],["Fin.sizeOf", 1],["Nat.Linear.ExprCnstr.eq_true_of_isValid", 1],["HAdd.hAdd", 1],["congrArg", 1],["UInt8.mk.sizeOf_spec", 1],["of_eq_true", 1],["List.nil", 1],["List.cons", 1],["Eq.symm", 1],["Nat.Linear.Expr.var", 1],["congrFun", 1],["Nat.Linear.Expr.num", 1],["Nat.Linear.ExprCnstr.mk", 1],["Fin.val", 1],["Eq.refl", 1],["Bool.true", 1],["Eq", 1]]],
["Fin.overflowingMul", 1, [["Eq.refl", 1],["LE.le", 1],["Option.none", 1],["Eq.trans", 1],["Iff.intro", 1],["Bool", 1],["Prod.mk", 1],["decide_eq_true_iff", 1],["Nat.lt_of_not_le", 1],["of_eq_true", 1],["Fin", 1],["Eq.mp", 1],["eq_self", 1],["congrFun", 1],["Option.some", 1],["decide_eq_false", 1],["HMul.hMul", 1],["Option", 1],["Nat.not_le_of_lt", 1],["congrArg", 1],["eq_false_of_decide", 1],["Eq.symm", 1],["Bool.false", 1],["False.elim", 1],["Unit.unit", 1],["Decidable.em", 1],["Fin.val", 1],["Eq", 1],["Iff.mpr", 1],["Bool.true", 1]]],
["unsafeCast", 1, [["Fin.mk", 1],["unsafeCast", 1],["Eq.symm", 1],["Unit.unit", 1],["Array.size_set", 1]]],
["NonemptyType", 1, [["Subtype.mk", 1],["PUnit", 1],["Inhabited.mk", 1],["Nonempty.intro", 1],["PUnit.unit", 1]]],
["List.eq_nil_of_length_eq_zero", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["Equivalence.refl", 1, [["Quotient.ind", 1],["Setoid.refl", 1]]],
["UFModel.empty", 1, [["UFModel.Agrees.empty", 1],["And.intro", 1]]],
["Ordering.toCtorIdx", 1, [["noConfusionEnum", 1],["Ordering.toCtorIdx", 1]]],
["Or.resolve_left", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["inferInstance", 1, [["ForIn'.mk", 1],["List.forIn'", 1]]],
["List.cons_ne_nil", 1, [["congr", 1],["List.getLast", 1],["Eq.trans", 1],["Eq.mpr", 1],["congrArg", 1],["List.get", 1],["List.length", 1],["of_eq_true", 1],["eq_of_heq", 1],["List.cons", 1],["List.length_cons", 1],["HEq.refl", 1],["Eq.symm", 1],["Fin.mk", 1],["LT.lt", 1],["List.getLast_eq_get", 1],["Nat.lt_succ_self", 1],["eq_true", 1],["rfl", 1],["List.cons_ne_nil", 1],["Eq", 1],["Eq.refl", 1]]],
["System.SearchPath", 1, [["System.FilePath.mk", 1],["BEq.beq", 1],["List.map", 1],["System.SearchPath.separator", 1]]],
["BinaryHeap.insert.proof_1", 1, [["Eq", 1],["Array.size", 1],["Eq.trans", 1],["congrArg", 1],["HAdd.hAdd", 1],["BinaryHeap.insert.proof_1", 1],["of_eq_true", 1],["eq_self", 1],["BinaryHeap.size_heapifyUp", 1],["Array.size_push", 1],["congrFun", 1],["Array.push", 1],["Fin.mk", 1],["BinaryHeap.arr", 1],["OfNat.ofNat", 1]]],
["Nat.lt_of_succ_le", 1, [["Fin.mk", 1],["Subtype.property", 1],["Nat.lt_of_succ_le", 1],["BinaryHeap.heapifyDown", 1],["Eq.symm", 1],["le_of_lt", 1]]],
["of_decide_eq_false", 1, [["OfNat.ofNat", 1],["List.getLast", 1],["List.getLast_cons", 1],["List.getLast_singleton", 1],["Nat.one_pos", 1],["PProd.fst", 1],["Eq.mpr", 1],["List.get", 1],["List.length_pos_of_ne_nil", 1],["List.length", 1],["List.nil", 1],["id", 1],["List.cons", 1],["HSub.hSub", 1],["List.get_singleton", 1],["Fin.mk", 1],["absurd", 1],["Nat.sub_lt", 1],["List.cons_ne_nil", 1],["rfl", 1],["Eq", 1],["Eq.refl", 1]]],
["USize.ofNat", 1, [["Fin.val_eq_of_lt", 1]]],
["Fin.overflowingAdd", 1, [["Bool.true", 1],["LE.le", 1],["Option.none", 1],["Eq.trans", 1],["Bool", 1],["Prod.mk", 1],["of_eq_true", 1],["Fin", 1],["Eq.mp", 1],["eq_self", 1],["congrFun", 1],["Subsingleton.elim", 1],["eq_true", 1],["decide_eq_true", 1],["Option.some", 1],["congr", 1],["not_lt", 1],["decide_eq_false", 1],["Decidable.decide", 1],["False", 1],["propext", 1],["Option", 1],["eq_true_of_decide", 1],["eq_false", 1],["eq_false_of_decide", 1],["congrArg", 1],["HAdd.hAdd", 1],["Iff", 1],["Eq.symm", 1],["Bool.false", 1],["LT.lt", 1],["false_iff", 1],["True", 1],["iff_self", 1],["not_le", 1],["Unit.unit", 1],["Decidable.em", 1],["Fin.val", 1],["Eq", 1],["Eq.refl", 1]]],
["UInt64.ofNat", 1, [["Fin.val_eq_of_lt", 1]]],
["Mathlib.Tactic.Lint.LintVerbosity.noConfusionType", 1, [["noConfusionEnum", 1],["Mathlib.Tactic.Lint.LintVerbosity.toCtorIdx", 1]]],
["ForInStep.yield", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["DoResultPR.pure", 1, [["Eq.refl", 1],["HAdd.hAdd", 1],["SizeOf.sizeOf", 1],["OfNat.ofNat", 1]]],
["UFModel.setParent.proof_1", 1, [["Eq.refl", 1],["UFModel.parent", 1],["Eq.trans", 1],["And.right", 1],["congrArg", 1],["ite_congr", 1],["eq_false", 1],["Ne.symm", 1],["UFModel.Agrees.set", 1],["of_eq_true", 1],["And.intro", 1],["eq_self", 1],["congrFun", 1],["UFModel.Agrees.get_eq", 1],["ite_true", 1],["Fin.mk", 1],["ite_false", 1],["rfl", 1],["Fin.val", 1],["congr", 1],["And.left", 1],["Eq", 1]]],
["Nat.lt_of_le_of_lt", 1, [["And.intro", 1]]],
["Sat.Valuation", 1, [["False", 1],["PProd.fst", 1]]]]